USE [GL_WEB_bbq_test]
GO
/****** Object:  User [SSRS]    Script Date: 2020-12-07 10:00:20 PM ******/
CREATE USER [SSRS] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [User]    Script Date: 2020-12-07 10:00:20 PM ******/
CREATE USER [User] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  Schema [TAPP]    Script Date: 2020-12-07 10:00:20 PM ******/
CREATE SCHEMA [TAPP]
GO
/****** Object:  UserDefinedTableType [dbo].[ExpStausUpdate]    Script Date: 2020-12-07 10:00:20 PM ******/
CREATE TYPE [dbo].[ExpStausUpdate] AS TABLE(
	[id] [int] NULL,
	[status] [int] NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[InvoiceFollowUp]    Script Date: 2020-12-07 10:00:20 PM ******/
CREATE TYPE [dbo].[InvoiceFollowUp] AS TABLE(
	[Id] [int] NULL,
	[DriverId] [int] NULL,
	[Printing] [bit] NULL,
	[StoreDelivery] [bit] NULL,
	[CustomerRecieve] [bit] NULL
)
GO
/****** Object:  UserDefinedTableType [dbo].[ItemUnitWisePriceUpdate]    Script Date: 2020-12-07 10:00:20 PM ******/
CREATE TYPE [dbo].[ItemUnitWisePriceUpdate] AS TABLE(
	[ItemId] [int] NULL,
	[UnitId] [int] NULL,
	[Price1] [numeric](18, 3) NULL,
	[Price2] [numeric](18, 3) NULL,
	[Price3] [numeric](18, 3) NULL,
	[Price4] [numeric](18, 3) NULL,
	[SpecialPrice] [numeric](18, 3) NULL
)
GO
/****** Object:  UserDefinedFunction [dbo].[CalcTotalItemsForInventoryUnitId]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
Create FUNCTION [dbo].[CalcTotalItemsForInventoryUnitId](
--alter FUNCTION dbo.CalcTotalItemsForInventoryUnitId 
	@H_Id int,
	@Inv_ID int,
	@item_ID int
)
RETURNS @Results TABLE(FieldA float)
AS
BEGIN
DECLARE @var int = (select Inv_Items_Units.FinalConv from Inv_Items_Units where Inv_Items_Units.Item_ID=@item_ID and Inv_Items_Units.Unit_id=@Inv_ID);

INSERT @Results
		SELECT  SUM(Inv_Receipt_d.Qty * Inv_Receipt_d.Final_conv / @var ) as Total
FROM     Inv_Receipt_h INNER JOIN
             Inv_Receipt_d ON Inv_Receipt_h.ID = Inv_Receipt_d.Parent_ID
WHERE   Inv_Receipt_h.ID = @H_Id

RETURN
END

GO
/****** Object:  UserDefinedFunction [dbo].[fn_Split]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fn_Split](
	@sInputList VARCHAR(8000),
     @sDelimiter VARCHAR(8000) = ','
    )

RETURNS @List TABLE ( item VARCHAR(8000) )
    BEGIN
        DECLARE @sItem VARCHAR(8000)
        WHILE CHARINDEX(@sDelimiter, @sInputList, 0) <> 0
            BEGIN
                SELECT  @sItem = RTRIM(LTRIM(SUBSTRING(@sInputList, 1,
                                                       CHARINDEX(@sDelimiter,
                                                              @sInputList, 0)
                                                       - 1))) ,
                        @sInputList = RTRIM(LTRIM(SUBSTRING(@sInputList,
                                                            CHARINDEX(@sDelimiter,
                                                              @sInputList, 0)
                                                            + LEN(@sDelimiter),
                                                            LEN(@sInputList))))
 
                IF LEN(@sItem) > 0
                    INSERT  INTO @List
                            SELECT  @sItem
            END

        IF LEN(@sInputList) > 0
            INSERT  INTO @List
				SELECT  @sInputList
        RETURN
    END
GO
/****** Object:  UserDefinedFunction [dbo].[Fun_aa_calcKitAvgCost]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION [dbo].[Fun_aa_calcKitAvgCost]
(@Item_id  INTEGER
, @Store_id INTEGER
, @DateTime DATETIME = '21000616'
)
RETURNS NUMERIC(18 , 6)
AS
     BEGIN
         DECLARE @ItemType INT , @ItemComponentID INT,@ItemComponentUnitID int , @Item_Type INT , 
		 @MCOUNTER INT   , @ItemComponentConv NUMERIC(18 , 6) , @MaxDate DATETIME ,
		  @ItemComponentRecipeQty NUMERIC(18 , 6) , @KitComponentFinalConv NUMERIC(18 , 6) ,
		   @KitAvgCost NUMERIC(18 , 6)

         DECLARE @FinalKitAvgCost NUMERIC(18 , 6)
         SELECT @ItemType = item_type
         FROM inv_items
         WHERE ID = @Item_id
         IF @ItemType <> 3
             RETURN NULL
         SET @KitAvgCost = 0
         DECLARE CUR_KitAvgCost CURSOR FAST_FORWARD
         FOR SELECT ItemComponentID 
                  , ItemComponentConv
                  , ItemComponentRecipeQty
                  , Inv_items.Item_Type
				  ,ItemComponentUnitID
             FROM [Inv_Items_Components] , 
                  Inv_items
             WHERE Item_ID = @Item_id
                   AND Inv_items.id = [Inv_Items_Components].[ItemComponentID]

         SET @MCOUNTER = 0
         OPEN CUR_KitAvgCost

         FETCH NEXT FROM CUR_KitAvgCost INTO @ItemComponentID  , @ItemComponentConv , @ItemComponentRecipeQty , @Item_Type , @ItemComponentUnitID
         WHILE @@Fetch_Status = 0
             BEGIN
                 SET @MCOUNTER = @MCOUNTER + 1;
                 IF @Item_Type <> 3
                     BEGIN
                         SELECT @KitComponentFinalConv = (@ItemComponentConv / CASE Conv
                                                                                   WHEN 0
                                                                                   THEN 1
                                                                                   ELSE conv
                                                                               END) * finalconv
                         FROM Inv_Items_Units
                         WHERE Item_ID = @ItemComponentID and Unit_id = @ItemComponentUnitID
                         SELECT @MaxDate = MAX(entry_date)
                         FROM [dbo].[AV_Inv_items_storeDate]
                         WHERE Cast(entry_date as date) <= Cast(@DateTime as date)
                               AND item_id = @ItemComponentID
                               AND store_id = @Store_id
                         IF @MaxDate = '20000101'
                             SELECT @KitAvgCost = @KitAvgCost + ((First_Cost / isnull(CASE FinalConv
                                                                                  WHEN 0
                                                                                  THEN 1
                                                                                  ELSE FinalConv
                                                                              END,1)) * @ItemComponentRecipeQty )
                             FROM Inv_Items_Store
                             WHERE item_id = @ItemComponentID
                                   AND Store_id = @Store_id
                             ELSE
                             IF @MaxDate > '20000101'
							 if @Item_Type <> 2
							 begin
                                -- SELECT @KitAvgCost = @KitAvgCost + (isnull(AvgCost,0) * @ItemComponentRecipeQty  * AV_Inv_items_storeDate.final_conv)
								 SELECT @KitAvgCost = @KitAvgCost + (isnull(AvgCost,0) * @ItemComponentRecipeQty  * @KitComponentFinalConv)
                                 FROM AV_Inv_items_storeDate
                                 WHERE item_id = @ItemComponentID
                                       AND Store_id = @Store_id
                                       AND Entry_Date = @MaxDate and totalQTy > 0
									   end
									   else 
									   begin
									     SELECT @KitAvgCost = @KitAvgCost + (isnull(Service_Item_Cost,0) * @ItemComponentRecipeQty  )
                                 FROM Inv_items
                                 WHERE id = @ItemComponentID
									   end
                 END
                     ELSE
                     BEGIN
                         --DECLARE @KitComAvgCost NUMERIC(18 , 6)
                         --EXEC aa_calcKitCompAvgCost 
                         --     @ItemComponentID , 
                         --     @Store_id , 
                         --     @DateTime , 
                         --     @KitComAvgCost
                         SET @KitAvgCost = @KitAvgCost +isnull(( @ItemComponentRecipeQty * (SELECT dbo.Fun_aa_calcKitCompAvgCost(@ItemComponentID,@Store_id,@DateTime) )),0)
                 END
                 SET @FinalKitAvgCost = @KitAvgCost
                 FETCH NEXT FROM CUR_KitAvgCost INTO @ItemComponentID   , @ItemComponentConv , @ItemComponentRecipeQty , @Item_Type , @ItemComponentUnitID
             END		--	 End of Fetch

         CLOSE CUR_KitAvgCost
         DEALLOCATE CUR_KitAvgCost
         RETURN CAST(@FinalKitAvgCost AS VARCHAR(100))
     END

GO
/****** Object:  UserDefinedFunction [dbo].[Fun_aa_calcKitCompAvgCost]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date, ,>
-- Description:	<Description, ,>
-- =============================================
CREATE FUNCTION [dbo].[Fun_aa_calcKitCompAvgCost](@Item_id  INTEGER
                                           , @Store_id INTEGER
                                           , @DateTime DATETIME = '21000616')
RETURNS NUMERIC(18 , 6)
AS
     BEGIN
         DECLARE @ItemType INT , @ItemComponentID INT ,@ItemComponentUnitID int , @Item_Type INT , @MCOUNTER INT , @ItemComponentConv NUMERIC(18 , 6) , @MaxDate DATETIME , @ItemComponentRecipeQty NUMERIC(18 , 6) , @KitComponentFinalConv NUMERIC(18 , 6) , @KitAvgCost NUMERIC(18 , 6)
         DECLARE @FinalKitAvgCost NUMERIC(18 , 6)

         SELECT @ItemType = item_type
         FROM inv_items
         WHERE ID = @Item_id
         IF @ItemType <> 3
             RETURN CAST(@FinalKitAvgCost AS VARCHAR(100))
         SET @KitAvgCost = 0
         DECLARE KitCompAvgCost CURSOR FAST_FORWARD
         FOR SELECT ItemComponentID
                  
                  , ItemComponentConv
                  , ItemComponentRecipeQty
                  , Inv_items.Item_Type
				   ,ItemComponentUnitID
             FROM [Inv_Items_Components] , 
                  Inv_items
             WHERE Item_ID = @Item_id
                   AND Inv_items.id = [Inv_Items_Components].[ItemComponentID]

         SET @MCOUNTER = 0
         OPEN KitCompAvgCost

         FETCH NEXT FROM KitCompAvgCost INTO @ItemComponentID  , @ItemComponentConv , @ItemComponentRecipeQty , @Item_Type, @ItemComponentUnitID
         WHILE @@Fetch_Status = 0
             BEGIN
                 SET @MCOUNTER = @MCOUNTER + 1;
                 IF @Item_Type <> 3
                     BEGIN
                         SELECT @KitComponentFinalConv = (@ItemComponentConv / CASE Conv
                                                                                   WHEN 0
                                                                                   THEN 1
                                                                                   ELSE conv
                                                                               END) * finalconv
                         FROM Inv_Items_Units
                         WHERE Item_ID = @ItemComponentID and Unit_id = @ItemComponentUnitID
                         SELECT @MaxDate = MAX(entry_date)
                         FROM [AV_Inv_items_storeDate]
                         WHERE Cast(entry_date as date) <= Cast(@DateTime as date) 
                               AND item_id = @ItemComponentID
                               AND store_id = @Store_id
                         IF @MaxDate = '20000101'
                             SELECT @KitAvgCost = @KitAvgCost + ((First_Cost / CASE FinalConv
                                                                                   WHEN 0
                                                                                   THEN 1
                                                                                   ELSE FinalConv
                                                                               END) * @ItemComponentRecipeQty)
                             FROM Inv_Items_Store
                             WHERE item_id = @ItemComponentID
                                   AND Store_id = @Store_id
                             ELSE
                             IF @MaxDate > '20000101'
							  if @Item_Type <> 2
							 begin
                                 --SELECT @KitAvgCost = @KitAvgCost + (AvgCost * @ItemComponentRecipeQty * AV_Inv_items_storeDate.final_conv)
								  SELECT @KitAvgCost = @KitAvgCost + (AvgCost * @ItemComponentRecipeQty  * @KitComponentFinalConv)
                                 FROM AV_Inv_items_storeDate
                                 WHERE item_id = @ItemComponentID
                                       AND Store_id = @Store_id
                                       AND Entry_Date = @MaxDate  and totalQTy > 0
									    end
									   else 
									   begin
									     SELECT @KitAvgCost = @KitAvgCost + (isnull(Service_Item_Cost,0) * @ItemComponentRecipeQty  )
                                 FROM Inv_items
                                 WHERE id = @ItemComponentID
									   end
                 END
                 SET @FinalKitAvgCost = @KitAvgCost
                 FETCH NEXT FROM KitCompAvgCost INTO @ItemComponentID  , @ItemComponentConv , @ItemComponentRecipeQty , @Item_Type, @ItemComponentUnitID
             END		--	 End of Fetch

         CLOSE KitCompAvgCost
         DEALLOCATE KitCompAvgCost
         RETURN CAST(@FinalKitAvgCost AS VARCHAR(100))
     END



GO
/****** Object:  UserDefinedFunction [dbo].[Fun_PostingPurchaseTransactions]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date, ,>
-- Description:	<Description, ,>
-- =============================================
CREATE FUNCTION [dbo].[Fun_PostingPurchaseTransactions]
(
	-- Add the parameters for the function here
	@RecieptID int
)
RETURNS int
AS
BEGIN
	Declare @VendorID int,@TransactionCode int,@PaymentTypeID int,@SubsidiaryID int ,@CurrencyId int ,@Rate int ,@BranchId int ,@entryno int 
	Declare @VoucherDATE Date  
	Declare @VendorAmount numeric(18,3),@VendorAmountForing numeric(18,3),@CostingRate numeric(18,3),@VendorAmountForign numeric(18,3)

	select @VendorID = [Vendor_ID]  ,@TransactionCode = Code ,@PaymentTypeID = Payment_Type,
		 @VoucherDATE =  Entry_Date,@SubsidiaryID = SubsidiaryID,@CurrencyId = Currency_ID,@Rate =  Currency_Rate ,
		 @BranchId =  Branch_ID,@VendorAmount = NetValue,@VendorAmountForign = NetValueForeign ,
		 @entryno = Entry_No ,@CostingRate = Costing_Rate
	from [dbo].[Inv_Receipt_h] where id = @RecieptID ;

	RETURN 1

END
GO
/****** Object:  UserDefinedFunction [dbo].[GetItemCostByStoreDate]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[GetItemCostByStoreDate](@item_id INT,@store_id INT,@Unit_id INT,@Entry_Date datetime )
RETURNS DECIMAL(18,8)
BEGIN
    DECLARE @ItemCost DEC (18,8)
    
	select top 1 @ItemCost =  AvgCost * isnull((Select top 1 isnull(FinalConv,1) FROM [Inv_Items_Units]  where Item_ID =  @item_id and Unit_id = @Unit_id),1) from AV_Inv_items_storeDate
where item_id =  @item_id 
and store_id = @store_id
and Entry_Date <= CONVERT(date, @Entry_Date) 
order by Entry_Date desc

 RETURN @ItemCost
 END
GO
/****** Object:  UserDefinedFunction [dbo].[GetPath]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[GetPath]
(@ID                  INT
, @VoucherType_ID      NVARCHAR(50)
, @VoucherType_code    NVARCHAR(50)
, @VoucherType_Name    NVARCHAR(50) = NULL
)
RETURNS VARCHAR(250)
AS
     BEGIN
         DECLARE @ActionName VARCHAR(250)= NULL , @VoucherName NVARCHAR(50)= NULL

         SET @ActionName = CASE @VoucherType_code
                               WHEN 1
                               THEN 'Voucher/AddEdit?Id=' + CAST(@ID AS NVARCHAR(50))
                               WHEN 3
                               THEN 'ReceiptVoucher/AddEdit?Id=' + CAST(@ID AS NVARCHAR(50))
                               WHEN 4
                               THEN 'PaymentVoucher/AddEdit?Id=' + CAST(@ID AS NVARCHAR(50))
                               WHEN 6
                               THEN 'CheckVoucher/AddEdit?Id=' + CAST(@ID AS NVARCHAR(50))
                               WHEN 7
                               THEN 'BankDepositVoucher/AddEdit?Id=' + CAST(@ID AS NVARCHAR(50))
                               WHEN 9 /*Not Impemented */
                               THEN 'Voucher/AddEdit?Id=' + CAST(@ID AS NVARCHAR(50))
							   WHEN 10 /*Not Impemented */
                               THEN 'VendorPayment/AddEdit?Id=' + CAST(@ID AS NVARCHAR(50))
                               WHEN 21
                               THEN 'Voucher/AddEdit?Id=' + CAST(@ID AS NVARCHAR(50)) + '&' +'type=' + @VoucherType_Name+'&'+'Code='+@VoucherType_code+'&'+'VoucherTypeID='+@VoucherType_ID
                               WHEN 22
                               THEN 'Voucher/AddEdit?Id=' + CAST(@ID AS NVARCHAR(50)) + '&' + 'type=' + @VoucherType_Name+'&'+'Code='+@VoucherType_code+'&'+'VoucherTypeID='+@VoucherType_ID
                               WHEN 23
                               THEN 'Voucher/AddEdit?Id=' + CAST(@ID AS NVARCHAR(50)) + '&' + 'type=' + @VoucherType_Name+'&'+'Code='+@VoucherType_code+'&'+'VoucherTypeID='+@VoucherType_ID
                               WHEN 24
                               THEN 'Voucher/AddEdit?Id=' + CAST(@ID AS NVARCHAR(50)) + '&' + 'type=' + @VoucherType_Name+'&'+'Code='+@VoucherType_code+'&'+'VoucherTypeID='+@VoucherType_ID
                               WHEN 25
                               THEN 'Voucher/AddEdit?Id=' + CAST(@ID AS NVARCHAR(50)) + '&' + 'type=' + @VoucherType_Name+'&'+'Code='+@VoucherType_code+'&'+'VoucherTypeID='+@VoucherType_ID
                               WHEN 26
                               THEN 'Voucher/AddEdit?Id=' + CAST(@ID AS NVARCHAR(50)) + '&' + 'type=' + @VoucherType_Name+'&'+'Code='+@VoucherType_code+'&'+'VoucherTypeID='+@VoucherType_ID
                               WHEN 11 /*Not Impemented */
                               THEN 'CustomerPayment/AddEdit?Id=' + CAST(@ID AS NVARCHAR(50)) 
							   ELSE 'Voucher/AddEdit?Id=' + CAST(@ID AS NVARCHAR(50))
                           END

         RETURN @ActionName
     END
GO
/****** Object:  UserDefinedFunction [dbo].[Inv_GetPath]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[Inv_GetPath]
(@ID                  INT
, @VoucherType_code    NVARCHAR(50)
)
RETURNS VARCHAR(250)
AS
     BEGIN
         DECLARE @ActionName VARCHAR(250)= NULL 

         SET @ActionName = CASE @VoucherType_code
                               WHEN 51
                               THEN 'CashSales/AddEdit?Id=' + CAST(@ID AS NVARCHAR(50))
                               WHEN 52
                               THEN 'CreditSales/AddEdit?Id=' + CAST(@ID AS NVARCHAR(50))
                               WHEN 53
                               THEN 'CashReturn/AddEdit?Id=' + CAST(@ID AS NVARCHAR(50))
                               WHEN 54
                               THEN 'CreditReturn/AddEdit?Id=' + CAST(@ID AS NVARCHAR(50))
                           END

         RETURN @ActionName
     END
GO
/****** Object:  UserDefinedFunction [dbo].[IsZero]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[IsZero] (
	@Number FLOAT,
	@IsZeroNumber FLOAT
)
RETURNS FLOAT
AS
BEGIN

	IF (@Number = 0)
	BEGIN
		SET @Number = @IsZeroNumber
	END

	RETURN (@Number)

END
GO
/****** Object:  UserDefinedFunction [dbo].[ParseCommaDelimitedString]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ParseCommaDelimitedString]

(@CommaSeparatedStr 
nvarchar(1000) = NULL)
RETURNS @myTable TABLE ([Id] [int] NOT NULL)
AS
BEGIN
declare @pos int
declare @piece varchar(500)
-- Need to tack a delimiter onto the end of the input string if one doesn't exist
if right(rtrim(@CommaSeparatedStr ),1) <> ','
set @CommaSeparatedStr = @CommaSeparatedStr + ','
set @pos = patindex('%,%' , @CommaSeparatedStr )
while @pos <> 0 
begin
set @piece = left(@CommaSeparatedStr , @pos - 1)
-- You have a piece of data, so insert it, print it, do whatever you want to with it.
insert @myTable 
select @piece

set @CommaSeparatedStr = stuff(@CommaSeparatedStr , 1, @pos, '')
set @pos = patindex('%,%' , @CommaSeparatedStr )
end
RETURN
END
GO
/****** Object:  UserDefinedFunction [dbo].[Split]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[Split]
   (@RepParam nvarchar(max), @Delim char(1)= ',')
RETURNS @Values TABLE (Item nvarchar(100))AS
-- based on John Sansoms StackOverflow answer:
-- http://stackoverflow.com/a/512300/22194

  BEGIN
  DECLARE @chrind INT
  DECLARE @Piece nvarchar(100)
  SELECT @chrind = 1 
  WHILE @chrind > 0
    BEGIN
      SELECT @chrind = CHARINDEX(@Delim,@RepParam)
      IF @chrind  > 0
        SELECT @Piece = LEFT(@RepParam,@chrind - 1)
      ELSE
        SELECT @Piece = @RepParam
      INSERT  @Values(Item) VALUES(@Piece)
      SELECT @RepParam = RIGHT(@RepParam,LEN(@RepParam) - @chrind)
      IF LEN(@RepParam) = 0 BREAK
    END
  RETURN
  END 

 
GO
/****** Object:  UserDefinedFunction [dbo].[Tafkeet]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[Tafkeet] (@TheNo  Decimal(25,3),@CurrencyID INT)
returns @tt table (NumAr Nvarchar(1000),NumEn Nvarchar(1000)) as
begin
-- Created By Kareem
DECLARE @TheNoAfterReplicate NVARCHAR(15)
SET @TheNoAfterReplicate = RIGHT(REPLICATE('0' ,15)+CAST(FLOOR(@TheNo) AS NVARCHAR(15)) ,15)
DECLARE @NumAr                            NVARCHAR(1000)
       ,@NumEn                            NVARCHAR(1000)
       ,@TheNoWithDecimal                 AS NVARCHAR(400)
       ,@ThreeWords                       AS INT
       
       -- Currency Name
       ,@CurrencySymbol_Ar                NVARCHAR(100)
       ,@CurrencySymbol_En                NVARCHAR(100)
       
       -- Currency Decimal Name
       ,@SmallSymbol_Ar                   NVARCHAR(100)
       ,@SmallSymbol_En                   NVARCHAR(100)

SET @ThreeWords = 0
SET @NumAr = ''
SET @NumEn = ''
 
 SELECT 
   @CurrencySymbol_Ar  = CurrencySymbol_Ar
 , @CurrencySymbol_En  = CurrencySymbol
 , @SmallSymbol_Ar     = SmallSymbol_Ar
 , @SmallSymbol_En     = SmallSymbol
 FROM mstr_Currencies 
 WHERE ( ID = @CurrencyID)
 
declare   @Tafket TABLE (num int,  NoNameAr Nvarchar(100), NoNameEn Nvarchar(100))
INSERT INTO @Tafket VALUES (0,'','')
INSERT INTO @Tafket VALUES (1,N'واحد','One')
INSERT INTO @Tafket VALUES (2,N'اثنان','Two')
INSERT INTO @Tafket VALUES (3,N'ثلاثة','Three')
INSERT INTO @Tafket VALUES (4,N'اربعة','Four')
INSERT INTO @Tafket VALUES (5,N'خمسة','Five')
INSERT INTO @Tafket VALUES (6,N'ستة','Six')
INSERT INTO @Tafket VALUES (7,N'سبعة','Seven')
INSERT INTO @Tafket VALUES (8,N'ثمانية','Eight')
INSERT INTO @Tafket VALUES (9,N'تسعة','Nine')
INSERT INTO @Tafket VALUES (10,N'عشرة','Ten')
INSERT INTO @Tafket VALUES (11,N'احدى عشر','Elevn')
INSERT INTO @Tafket VALUES (12,N'اثنى عشر','Twelve')
INSERT INTO @Tafket VALUES (13,N'ثلاثة عشر','Thirteen')
INSERT INTO @Tafket VALUES (14,N'اربعة عشر','Fourteen')
INSERT INTO @Tafket VALUES (15,N'خمسة عشر','Fifteen')
INSERT INTO @Tafket VALUES (16,N'ستة عشر','Sixteen')
INSERT INTO @Tafket VALUES (17,N'سبعة عشر','Seventeen')
INSERT INTO @Tafket VALUES (18,N'ثمانية عشر','Eighteen')
INSERT INTO @Tafket VALUES (19,N'تسعة عشر','Nineteen')
INSERT INTO @Tafket VALUES (20,N'عشرون','Twenty')
INSERT INTO @Tafket VALUES (30,N'ثلاثون','Thirty')
INSERT INTO @Tafket VALUES (40,N'اربعون','Forty')
INSERT INTO @Tafket VALUES (50,N'خمسون','Fifty')
INSERT INTO @Tafket VALUES (60,N'ستون','Sixty')
INSERT INTO @Tafket VALUES (70,N'سبعون','Seventy')
INSERT INTO @Tafket VALUES (80,N'ثمانون','Eighty')
INSERT INTO @Tafket VALUES (90,N'تسعون','Ninety')
INSERT INTO @Tafket VALUES (100,N'مائة','One Hundred')
INSERT INTO @Tafket VALUES (200,N'مائتان','Two Hundreds')
INSERT INTO @Tafket VALUES (300,N'ثلاثمائة','Three Hundreds')
INSERT INTO @Tafket VALUES (400,N'أربعمائة','Four Hundreds')
INSERT INTO @Tafket VALUES (500,N'خمسمائة','Five Hundreds')
INSERT INTO @Tafket VALUES (600,N'ستمائة','Six Hundreds')
INSERT INTO @Tafket VALUES (700,N'سبعمائة','Seven Hundreds')
INSERT INTO @Tafket VALUES (800,N'ثمانمائة','Eight Hundreds')
INSERT INTO @Tafket VALUES (900,N'تسعمائة','Nine Hundreds')


INSERT INTO @Tafket  
SELECT FirstN.num+LasteN.num,LasteN.NoNameAr+N' و '+FirstN.NoNameAr,FirstN.NoNameEn+' '+LasteN.NoNameEn
FROM 
(SELECT * FROM @Tafket WHERE num BETWEEN 20 AND 90) FirstN 
CROSS JOIN 
(SELECT * FROM @Tafket WHERE num BETWEEN 1 AND 9) LasteN

INSERT INTO @Tafket  SELECT FirstN.num+LasteN.num,FirstN.NoNameAr+N' و '+LasteN.NoNameAr,FirstN.NoNameEn+' '+LasteN.NoNameEn
FROM (SELECT * FROM @Tafket WHERE num BETWEEN 100 AND 900) FirstN CROSS JOIN (SELECT * FROM @Tafket WHERE num BETWEEN 1 AND 99) LasteN
 
if left(@TheNoAfterReplicate,3) > 0
   begin
    set @NumAr = @NumAr + ISNULL((select NoNameAr  from  @Tafket where num=left(@TheNoAfterReplicate,3)),'')+  N' ترليون'
    set @NumEn = @NumEn + ISNULL((select NoNameEn  from  @Tafket where num=left(@TheNoAfterReplicate,3)),'')+  ' Trillion'
    end
if left(right(@TheNoAfterReplicate,12),3) > 0 and  left(@TheNoAfterReplicate,3) > 0
    begin
    set @NumAr=@NumAr+ N' و '
    set @NumEn= @NumEn+''
     end
if left(right(@TheNoAfterReplicate,12),3) > 0
    begin
    set @NumAr = @NumAr +ISNULL((select NoNameAr from @Tafket where num=left(right(@TheNoAfterReplicate,12),3)),'') +  N' مليار'
    set @NumEn = @NumEn +ISNULL((select NoNameEn from @Tafket where num=left(right(@TheNoAfterReplicate,12),3)),'') +  ' Milliard'
    end
if left(right(@TheNoAfterReplicate,9),3) > 0

begin
    set @NumAr=@NumAr +case  when @TheNo>999000000  then N' و '  else '' end
    set @NumEn=@NumEn + ''

 set @ThreeWords=left(right(@TheNoAfterReplicate,9),3)
       set @NumAr = @NumAr + ISNULL((select case when   @ThreeWords>2 then NoNameAr end  from @Tafket  where num=left(right(@TheNoAfterReplicate,9),3)),'')  + case when  @ThreeWords=2 then N' مليونان' when   @ThreeWords between 3 and 10 then N' ملايين' else N' مليون' end
       set @NumEn = @NumEn + ISNULL((select  NoNameEn from @Tafket  where num=left(right(@TheNoAfterReplicate,9),3)),'')  + ' Million'
END	
if left(right(@TheNoAfterReplicate,6),3) > 0
begin

    set @NumAr= @NumAr +case  when @TheNo>999000  then N' و '  else '' end
    set @NumEn=@NumEn + ''

    set @ThreeWords=left(right(@TheNoAfterReplicate,6),3)
    set @NumAr = @NumAr + ISNULL((select case when  @ThreeWords>2 then NoNameAr  end from @Tafket where num=left(right(@TheNoAfterReplicate,6),3)),'')+ case when  @ThreeWords=2 then N' الفان' when @ThreeWords between 3 and 10 then N' الاف'  else N' الف' end
    set @NumEn = @NumEn + ISNULL((select NoNameEn from @Tafket where num=left(right(@TheNoAfterReplicate,6),3)),'')+ N' Thousand'
end

  if right(@TheNoAfterReplicate,3) > 0
  begin
    if @TheNo>999
        begin
         set @NumAr=@NumAr + N' و '
         set @NumEn=@NumEn +' '
         set @ThreeWords=right(@TheNoAfterReplicate,2)
        end
     if @ThreeWords=0
       begin
         --   set @ComWithWord=@ComWithWord + ' و'
         set @NumAr = @NumAr-- + ISNULL((select NoNameAr  from @Tafket where @ThreeWords=0 AND num=right(@TheNoAfterReplicate,3)),'')
         set @NumEn = @NumEn --+ ISNULL((select NoNameEn  from @Tafket where @ThreeWords=0 AND num=right(@TheNoAfterReplicate,3)),'')
        end
  end

set @ThreeWords=right(@TheNoAfterReplicate,2)
set @NumAr = @NumAr+ ISNULL((select  NoNameAr  from @Tafket where  num=right(@TheNoAfterReplicate,3)),'')
set @NumEn = @NumEn+ ISNULL((select  NoNameEn  from @Tafket where  num=right(@TheNoAfterReplicate,3)),'')
set @NumAr = @NumAr +' '+ isnull(@CurrencySymbol_Ar,'')
set @NumEn = @NumEn +' '+ isnull(@CurrencySymbol_En,'')
if right(rtrim(@NumAr),1)=',' set @NumAr = substring(@NumAr,1,len(@NumAr)-1)

if  right(@TheNo,len(@TheNo)-charindex('.',@TheNo)) >0 and charindex('.',@TheNo)<>0
    begin
        set @ThreeWords=left(right(round(@TheNo,3),3),3)
        SELECT @TheNoWithDecimal=  N' و ' + left(right(round(@TheNo,3),3),3)
        set @TheNoWithDecimal = @TheNoWithDecimal+' '+  isnull(@SmallSymbol_Ar,'')
set @NumAr = @NumAr + @TheNoWithDecimal
END
  
if  right(@TheNo,len(@TheNo)-charindex('.',@TheNo)) >0 and charindex('.',@TheNo)<>0
    begin
        set @ThreeWords=left(right(round(@TheNo,3),3),3)
        SELECT @TheNoWithDecimal=  ' and ' + left(right(round(@TheNo,3),3),3)
        set @TheNoWithDecimal = @TheNoWithDecimal+' '+  isnull(@SmallSymbol_En,'')
set @NumEn = @NumEn + @TheNoWithDecimal
END

set @NumAr = @NumAr + N'  فقط لا غير'
set @NumEn = @NumEn

insert @tt
select rtrim(@NumAr),rtrim(@NumEn)
return
END
GO
/****** Object:  UserDefinedFunction [dbo].[ufnSplit]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[ufnSplit]
   (@RepParam nvarchar(max), @Delim char(1)= ',')
RETURNS @Values TABLE (Item nvarchar(100))AS
-- based on John Sansoms StackOverflow answer:
-- http://stackoverflow.com/a/512300/22194

  BEGIN
  DECLARE @chrind INT
  DECLARE @Piece nvarchar(100)
  SELECT @chrind = 1 
  WHILE @chrind > 0
    BEGIN
      SELECT @chrind = CHARINDEX(@Delim,@RepParam)
      IF @chrind  > 0
        SELECT @Piece = LEFT(@RepParam,@chrind - 1)
      ELSE
        SELECT @Piece = @RepParam
      INSERT  @Values(Item) VALUES(@Piece)
      SELECT @RepParam = RIGHT(@RepParam,LEN(@RepParam) - @chrind)
      IF LEN(@RepParam) = 0 BREAK
    END
  RETURN
  END 

 
GO
/****** Object:  View [dbo].[AV_Inv_items_store]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 

CREATE VIEW [dbo].[AV_Inv_items_store]
AS
     SELECT    maxDate
          ,TransID
          ,item_id
          ,store_id
          ,AvgCost
          ,Balance
          ,TotalReservedQTy
From

(
 SELECT  
             row_number() over(partition by  Inv_Receipt_d.item_id, Inv_Receipt_d.store_id 
			 order by Entry_Date desc,Inv_Receipt_d.ID desc) as rn
				  ,  Inv_Receipt_d.item_id
                  , Inv_Receipt_d.store_id
                  , Inv_Receipt_h.Entry_Date maxDate
                  , Inv_Receipt_d.ID  TransID 
                  , Inv_Receipt_d.totalQTy     Balance                               
                  , Inv_Receipt_d.TotalReservedQTy  TotalReservedQTy
                 , AvgCost =  Inv_Receipt_d.AvgCost
                                
FROM   Inv_Receipt_h  ,Inv_Receipt_d
 WHERE(ISNULL(Inv_Receipt_h.Is_Canceled , 0) <> 1)
      AND (ISNULL(Inv_Receipt_h.IsHolded , 0) <> 1) 
	  and Inv_Receipt_d.Parent_ID = Inv_Receipt_h.ID  
	  And Inv_Receipt_d.Transaction_move <> 0 
	  ) as T

	  Where rn = 1


	  UNION
SELECT DISTINCT 
       maxDate = CAST('2000/01/01' AS DATETIME)
     , TransID = 0
     , [item_id]
     , [store_id]
     ,   AvrCost  
     , Balance = ISNULL([First_Qty] , 0) * ISNULL(FinalConv , 1)
	 ,0
FROM [dbo].[Inv_Items_Store] , [dbo].[Inv_Items] 
WHERE [Inv_Items].Item_Type <> 3 and  [dbo].[Inv_Items_Store] .ITEM_ID =  [dbo].[Inv_Items].ID  AND 1 NOT IN
(
 SELECT 1
 FROM inv_receipt_d a
 WHERE a.[item_id] = [dbo].[Inv_Items_Store].[item_id]
       AND a.[store_id] = [dbo].[Inv_Items_Store].[store_id]  
	  And a.Transaction_move <> 0 
)




GO
/****** Object:  View [dbo].[AV_transactionQty_TotalBalance]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
CREATE  view [dbo].[AV_transactionQty_TotalBalance] as (    
  
	Select Inv_Receipt_d.Item_ID ,Inv_Receipt_d.Store_ID,(SUM(Inv_Receipt_d.Transaction_move * Inv_Receipt_d.Qty * Inv_Receipt_d.Final_conv)  + (Select distinct (First_Qty * inv_items_store.FinalConv ) from inv_items_store where Inv_items_store.item_id =Inv_Receipt_d.item_id and Inv_items_store.Store_ID =Inv_Receipt_d.Store_ID)) transTotQTY,Balance 
from AV_Inv_items_store,Inv_Receipt_d,Inv_Items
WHERE AV_Inv_items_store.item_id =Inv_Receipt_d.item_id and
	 AV_Inv_items_store.Store_ID =Inv_Receipt_d.Store_ID and
	 inv_items.Item_Type <> 2 and inv_items.Item_Type <> 3 and 
	AV_Inv_items_store.item_id  = inv_items.ID  
	Group by Inv_Receipt_d.Item_ID ,Inv_Receipt_d.Store_ID ,Balance
) 
GO
/****** Object:  UserDefinedFunction [dbo].[fun_StockInventoryDataCount]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE FUNCTION [dbo].[fun_StockInventoryDataCount]
(	
	-- Add the parameters for the function here
@Subsidiary_ID int ,
@StocksID nvarchar(100),
@ItemCategoriesIDs nvarchar(500)
)
RETURNS TABLE 
AS
RETURN 
(
SELECT COUNT(*) as ItemsCount from (

SELECT DISTINCT [Subsidiary_ID]
	  ,ISNull([dbo].[Inv_Items_Store].Store_ID,0) as StoreID  
	  ,CONVERT(varchar(50),[dbo].[Inv_Store].Name) as StoreName
      ,[dbo].[Inv_Items].[ID] as ItemID
      ,[dbo].[Inv_Items].[Code] as ItemCode
      ,[dbo].[Inv_Items].[Name] as ItemName
      ,[Description] as ItemDescription
      ,ISNull([Inventory_UnitId],0) as Inventory_UnitId
	  ,[dbo].[Inv_Unit].Name as InventoryUnitName
	  ,ISNull([dbo].[Inv_Items_Units].Conv,0) as Conv
	  ,ISNull([dbo].[Inv_Items_Store].Qty,0)as Qty
	  ,[dbo].[Inv_Items_Store].[ActualQty] as ActualQty
	  ,[dbo].[Inv_Items_Store].[ArchiveQty] as ArchiveQty
	  ,(Qty-ActualQty) as DiffQty
      ,[Item_Type]
	  ,ISNULL([dbo].[Inv_Items_Units].[Sale_price1],0) as SalesPrice
	  ,ISNull([dbo].[GL_Accounts].[AccountID],0) as VendorID
	  ,[dbo].[GL_Accounts].[Name] as VendorName
	  ,[dbo].[Inv_Items].[IsActive]
	  ,[dbo].[Inv_Items_Store].[ID]


  FROM [dbo].[Inv_Items]
  LEFT JOIN [dbo].[Inv_Unit] on  [dbo].[Inv_Unit].ID = [dbo].[Inv_Items].Inventory_UnitId 
  LEFT JOIN [dbo].[Inv_Items_Units] on [dbo].[Inv_Items_Units].[Item_ID] = [dbo].[Inv_Items].[ID] and [dbo].[Inv_Items_Units].[Unit_id] = [dbo].[Inv_Items].Inventory_UnitId 
  LEFT JOIN [dbo].[Inv_Items_Vendors] on [dbo].[Inv_Items_Vendors].[ItemID] = [dbo].[Inv_Items].[ID] and [dbo].[Inv_Items_Vendors].[IsMainVendor] = 1
  LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[Inv_Items_Vendors].[VendorID]
  LEFT JOIN [dbo].[Inv_Items_Store] on [dbo].[Inv_Items_Store].[Item_ID] = [dbo].[Inv_Items].[ID]
  LEFT JOIN [dbo].[Inv_Items_Categories] on [dbo].[Inv_Items_Categories].[Item_ID] = [dbo].[Inv_Items].[ID]
  LEFT JOIN [dbo].[Inv_Store] on [dbo].[Inv_Store].[ID] = [dbo].[Inv_Items_Store].[Store_ID]

 Where 
 ([dbo].[Inv_Items].[Subsidiary_ID] = @Subsidiary_ID ) AND
 ([dbo].[Inv_Items_Store].Store_ID  IN (select * from ParseCommaDelimitedString(@StocksID)) OR @StocksID='0') AND
 ([dbo].[Inv_Items_Categories].[ItemCategory_ID]  IN (select * from ParseCommaDelimitedString(@ItemCategoriesIDs)) OR @ItemCategoriesIDs='0' )

 ) AllItems
)
GO
/****** Object:  UserDefinedFunction [dbo].[GeTBalanceFromItemCardByParms]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create FUNCTION [dbo].[GeTBalanceFromItemCardByParms]
(	
  @StoreID INT = NULL
, @Move INT = NULL
, @ItemID INT   = NULL  
, @FromDate DATETime = NULL
, @ToDate DATETime = NULL
, @SubsidaryID INT = NULL
)
RETURNS TABLE 
AS
RETURN 
( 
 select 
 SUM(MainSelect.InventoryBalance * MainSelect.Move) OVER 
 (PARTITION BY MainSelect.Item_ID
        ORDER BY Entry_Date
          ,VoucherID)       InventoryBalance_R,
MainSelect.Entry_Date
 from
 (
 SELECT D.Item_ID                     Item_ID 
 , D.Store_ID   ,
  d.id AS                       VoucherID, 
 Entry_Date, 
 D.Qty QTY,
 CASE WHEN tc.Code = 83 AND ISNULL(D.Qty, 0) < 0 
 THEN ((ISNULL(D.Qty, 0) ) / IIU2.FinalConv) * -1 
 ELSE (ISNULL(D.Qty, 0) * ISNULL(D.Final_conv, 0)) / IIU2.FinalConv 
 END                              InventoryBalance 
 ,CASE WHEN tc.Code = 83 AND ISNULL(D.Qty, 0) < 0 THEN   -1 ELSE D.Transaction_move END
 [MOVE] 
 FROM dbo.Inv_Receipt_H AS H LEFT JOIN dbo.Inv_Transaction_Codes AS TC ON H.Code = TC.Code LEFT JOIN dbo.Inv_CashCustomer ON H.CashCustomerID = Inv_CashCustomer.id LEFT JOIN dbo.GL_Accounts ON H.Vendor_ID = GL_Accounts.AccountID LEFT JOIN dbo.Inv_Receipt_d AS D ON H.ID = D.Parent_ID LEFT JOIN dbo.Inv_Store Inv_Store_From ON H.FromStoreID = Inv_Store_From.ID LEFT JOIN dbo.Inv_Store Inv_Store_To ON H.ToStoreID = Inv_Store_To.ID LEFT JOIN dbo.Inv_Unit ON D.Unit_ID = Inv_Unit.ID LEFT JOIN dbo.Inv_Items AS I ON D.Item_ID = I.ID LEFT JOIN dbo.Inv_Items_Units AS IIU ON D.Unit_ID = IIU.Unit_id AND d.Item_ID = iiu.Item_ID LEFT JOIN dbo.Inv_Items_Units AS IIU2 ON i.Inventory_UnitId = IIU2.Unit_id AND i.Id = iiu2.Item_ID 
 WHERE 
 ( D.Store_ID IN (@StoreID)) AND
  ( D.Item_ID IN (@ItemID)) 
 AND ( h.SubsidiaryID = @SubsidaryID) 
 AND (D.Transaction_move != 0) 
 and (h.Entry_No<>0)

UNION ALL
SELECT
           IIS.Item_ID                                                Item_ID
		  , IIS.Store_ID                                               Store_ID
          , IIS.ID                                                     VoucherID
         , CAST(NULL AS DATE)                                         Entry_Date
		 , IIS.Qty                                       QTY
         , CAST( ((cast(ISNULL(IIS.first_Qty, 0) as float) *cast(IIS.FinalConv   as float)  ) /cast(IIU.FinalConv   as float)  )   AS FLOAT)   InventoryBalance
         , 1                                                          [MOVE]
    FROM dbo.Inv_Items_Store IIS
             LEFT JOIN dbo.Inv_Items AS I
                       ON IIS.Item_ID = I.ID
             LEFT JOIN dbo.Inv_Unit AS IU
                       ON IU.ID = iis.First_Unit
            LEFT JOIN dbo.Inv_Items_Units AS IIU
                       ON i.Inventory_UnitId = IIU.Unit_id
                           AND i.ID = iiu.Item_ID
    WHERE ( IIS.Store_ID IN (@StoreID))
      AND ( IIS.Item_ID IN (@ItemID))
      AND (I.Subsidiary_ID = @SubsidaryID)
      AND ISNULL(IIS.first_Qty, 0) != 0
 ) AS MainSelect
             LEFT JOIN dbo.Inv_Store
                       ON Inv_Store.ID = MainSelect.Store_ID
             JOIN dbo.Inv_Items
                  ON Inv_Items.ID = MainSelect.Item_id
)
GO
/****** Object:  View [dbo].[AV_AccountBalance]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[AV_AccountBalance] AS
SELECT        dbo.GL_Accounts.AccountID, dbo.GL_Accounts.Main_AccountID, dbo.GL_Accounts.ParentID, dbo.GL_Vouchers.SubsidaryID, dbo.GL_Vouchers.VouhcerDate, ISNULL(SUM(dbo.GL_VoucherDetails.Credit), 0) AS Credit, 
                         ISNULL(SUM(dbo.GL_VoucherDetails.Debit), 0) AS Debit, dbo.GL_Accounts.Code
FROM            dbo.GL_Accounts INNER JOIN
                         dbo.GL_VoucherDetails ON dbo.GL_Accounts.AccountID = dbo.GL_VoucherDetails.AccountNoID INNER JOIN
                         dbo.GL_Vouchers ON dbo.GL_VoucherDetails.VoucherID = dbo.GL_Vouchers.ID
GROUP BY dbo.GL_Accounts.AccountID, dbo.GL_Accounts.Main_AccountID, dbo.GL_Accounts.ParentID, dbo.GL_Vouchers.SubsidaryID, dbo.GL_Vouchers.VouhcerDate, dbo.GL_Accounts.Code
GO
/****** Object:  View [dbo].[AV_GL_TransactionDetails]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[AV_GL_TransactionDetails] 
AS  
SELECT  
				 A.ID,
				 A.CODE,
				 A.BranchID,
				 A.VoucherTypeID,
				 A.VouhcerDate,
				 A.ReceiptID,
				 B.AccountNoID,
				 B.Credit,
				 B.Debit,B.memo,
				 A.SubsidaryID,A.Posted
 
 FROM gl_VOUCHERS A,GL_VoucherDetails B
      
     
        
 WHERE  A.id = B.VoucherID  
GO
/****** Object:  View [dbo].[AV_Inv_items_AVgCost]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 

CREATE VIEW [dbo].[AV_Inv_items_AVgCost]
AS
     SELECT    maxDate
          ,TransID
          ,item_id
          ,store_id
          ,AvgCost
          ,Balance
          ,TotalReservedQTy
From

(
 SELECT  
             row_number() over(partition by  Inv_Receipt_d.item_id, Inv_Receipt_d.store_id 
			 order by Entry_Date desc,Inv_Receipt_d.ID desc) as rn
				  ,  Inv_Receipt_d.item_id
                  , Inv_Receipt_d.store_id
                  , Inv_Receipt_h.Entry_Date maxDate
                  , Inv_Receipt_d.ID  TransID 
                  , Inv_Receipt_d.totalQTy     Balance                               
                  , Inv_Receipt_d.TotalReservedQTy  TotalReservedQTy
                 , AvgCost =  Inv_Receipt_d.AvgCost
                                
FROM   Inv_Receipt_h  ,Inv_Receipt_d
 WHERE(ISNULL(Inv_Receipt_h.Is_Canceled , 0) <> 1)
      AND (ISNULL(Inv_Receipt_h.IsHolded , 0) <> 1) 
	  and Inv_Receipt_d.Parent_ID = Inv_Receipt_h.ID  
	  And Inv_Receipt_d.Transaction_move <> 0 
	  ) as T

	  Where rn = 1


	  UNION
SELECT DISTINCT 
       maxDate = CAST('2000/01/01' AS DATETIME)
     , TransID = 0
     , [item_id]
     , [store_id]
     ,   AvrCost  
     , Balance = ISNULL([First_Qty] , 0) * ISNULL(FinalConv , 1)
	 ,0
FROM [dbo].[Inv_Items_Store] , [dbo].[Inv_Items] 
WHERE [Inv_Items].Item_Type <> 3 and  [dbo].[Inv_Items_Store] .ITEM_ID =  [dbo].[Inv_Items].ID  AND 1 NOT IN
(
 SELECT 1
 FROM inv_receipt_d a
 WHERE a.[item_id] = [dbo].[Inv_Items_Store].[item_id]
       AND a.[store_id] = [dbo].[Inv_Items_Store].[store_id]  
	  And a.Transaction_move <> 0 
)




GO
/****** Object:  View [dbo].[AV_Inv_items_Last_AVgCost]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


 

CREATE VIEW [dbo].[AV_Inv_items_Last_AVgCost]
AS
     SELECT    maxDate
          ,TransID
          ,item_id
          ,store_id
          ,AvgCost
          ,Balance
          ,TotalReservedQTy
From

(
 SELECT  
             row_number() over(partition by  Inv_Receipt_d.item_id 
			 order by Entry_Date desc,Inv_Receipt_d.ID desc) as rn
				  ,  Inv_Receipt_d.item_id
                  , Inv_Receipt_d.store_id
                  , Inv_Receipt_h.Entry_Date maxDate
                  , Inv_Receipt_d.ID  TransID 
                  , Inv_Receipt_d.AllStoresQty     Balance                               
                  , Inv_Receipt_d.TotalReservedQTy  TotalReservedQTy
                 , AvgCost =  Inv_Receipt_d.AvgCost
                                
FROM   Inv_Receipt_h  ,Inv_Receipt_d
 WHERE(ISNULL(Inv_Receipt_h.Is_Canceled , 0) <> 1)
      AND (ISNULL(Inv_Receipt_h.IsHolded , 0) <> 1) 
	  and Inv_Receipt_d.Parent_ID = Inv_Receipt_h.ID  
	  And Inv_Receipt_d.Transaction_move <> 0 
	  ) as T

	  Where rn = 1


GO
/****** Object:  View [dbo].[AV_Inv_items_store_noKit]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[AV_Inv_items_store_noKit]
AS
     SELECT    maxDate
          ,TransID
          ,item_id
          ,store_id
          ,AvgCost
          ,Balance
          ,TotalReservedQTy
From

(
 SELECT  
             row_number() over(partition by  Inv_Receipt_d.item_id, Inv_Receipt_d.store_id order by Entry_Date desc,Inv_Receipt_d.id desc) as rn
				  ,  Inv_Receipt_d.item_id
                  , Inv_Receipt_d.store_id
                  , Inv_Receipt_h.Entry_Date maxDate
                  , Inv_Receipt_d.ID  TransID 
                  , Inv_Receipt_d.totalQTy     Balance                               
                  , Inv_Receipt_d.TotalReservedQTy  TotalReservedQTy
                 , Inv_Receipt_d.AvgCost

FROM   Inv_Receipt_h ,Inv_Receipt_d 
 WHERE(ISNULL(Inv_Receipt_h.Is_Canceled , 0) <> 1)
      AND (ISNULL(Inv_Receipt_h.IsHolded , 0) <> 1) 
	  and Inv_Receipt_d.Parent_ID = Inv_Receipt_h.ID  
	   
	  And Inv_Receipt_d.Transaction_move <> 0 
	  ) as T

	  Where rn = 1


UNION
SELECT DISTINCT 
       maxDate = CAST('2000/01/01' AS DATETIME)
     , TransID = 0
     , [item_id]
     , [store_id]
     ,   AvrCost  
     , Balance = ISNULL([First_Qty] , 0) * ISNULL(FinalConv , 1)
	 ,0
FROM [dbo].[Inv_Items_Store] , [dbo].[Inv_Items] 
WHERE [Inv_Items].Item_Type <> 3 and  [dbo].[Inv_Items_Store] .ITEM_ID =  [dbo].[Inv_Items].ID  AND 1 NOT IN
(
 SELECT 1
 FROM inv_receipt_d a
 WHERE a.[item_id] = [dbo].[Inv_Items_Store].[item_id]
       AND a.[store_id] = [dbo].[Inv_Items_Store].[store_id]  
	  And a.Transaction_move <> 0 
)
GO
/****** Object:  View [dbo].[AV_Inv_items_storeDate]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 

CREATE VIEW [dbo].[AV_Inv_items_storeDate]
AS
SELECT        item_id, store_id, Entry_Date, AvgCost, totalQTy, DetailID, Parent_ID, TotalReservedQTy, Final_conv, DetID,rn
FROM            (SELECT        row_number() OVER (partition BY Inv_Receipt_d.item_id, Inv_Receipt_d.store_id,  Cast(Entry_Date AS date)
                           ORDER BY  Entry_Date desc,Inv_Receipt_d.id DESC ) AS rn, 
						   Inv_Receipt_d.id AS DetID,
						   Inv_Receipt_d.item_id,
						   Inv_Receipt_d.store_id, 
						    Entry_Date =  Inv_Receipt_h.Entry_Date ,
							Inv_Receipt_d.ID DetailID, 
							Inv_Receipt_d.Parent_ID, 
                         Inv_Receipt_d.totalQTy, 
						 Inv_Receipt_d.TotalReservedQTy, 
						 Inv_Receipt_d.Qty AS QTY, 
						 Inv_Receipt_d.Final_conv AS final_Conv, 
                         AvgCost =  Inv_Receipt_d.AvgCost  
FROM            Inv_Receipt_h,  Inv_Receipt_d  
WHERE        (ISNULL(Inv_Receipt_h.Is_Canceled, 0) <> 1) 
		AND (ISNULL(Inv_Receipt_h.IsHolded, 0) <> 1) 
		AND Inv_Receipt_d.Parent_ID = Inv_Receipt_h.ID  
	  And Inv_Receipt_d.Transaction_move <> 0 
		) AS T
WHERE        rn = 1

GO
/****** Object:  View [dbo].[AV_Inv_items_storeDate_noKit]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[AV_Inv_items_storeDate_noKit]
AS
SELECT  distinct   item_id, store_id, Entry_Date, AvgCost, totalQTy, DetailID, Parent_ID, TotalReservedQTy, Final_conv,rn
FROM            (SELECT        row_number() OVER (partition BY Inv_Receipt_d.item_id, Inv_Receipt_d.store_id,  Cast(Entry_Date AS date)
                           ORDER BY    Entry_Date   DESC ,Inv_Receipt_d.ID desc) AS rn, 
						   
						   Inv_Receipt_d.item_id,
						    Inv_Receipt_d.store_id,
							Cast(Entry_Date AS date) as Entry_Date,
							  Inv_Receipt_d.ID DetailID,
							   Inv_Receipt_d.Parent_ID, 
                         Inv_Receipt_d.totalQTy,
						  Inv_Receipt_d.TotalReservedQTy,
						   Inv_Receipt_d.Qty AS QTY, Inv_Receipt_d.Final_conv AS final_Conv, 
						    AvgCost =  Inv_Receipt_d.AvgCost 
FROM            Inv_Receipt_h,  Inv_Receipt_d  
WHERE        (ISNULL(Inv_Receipt_h.Is_Canceled, 0) <> 1) AND (ISNULL(Inv_Receipt_h.IsHolded, 0) <> 1) AND Inv_Receipt_d.Parent_ID = Inv_Receipt_h.ID  
	  And Inv_Receipt_d.Transaction_move <> 0  

	  union all 

	  select row_number() OVER (partition BY Inv_Items_Store.item_id, Inv_Items_Store.store_id
                           ORDER BY    Inv_Items_Store.id   DESC ) AS rn,  item_id,store_id , '2000-01-01' as Entry_Date,0 DetailID,
						   0 Parent_ID,
						   First_Qty totalQTy,
						   0 TotalReservedQTy,
						   First_Qty QTY,
						   FinalConv as final_Conv,
						   First_Cost as AvgCost

	  from Inv_Items_Store
	  
	  
	  ) AS T
WHERE        rn = 1

GO
/****** Object:  View [dbo].[AV_Inv_items_storeDatetest]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 

CREATE VIEW [dbo].[AV_Inv_items_storeDatetest]
AS
SELECT        item_id, store_id, Entry_Date, AvgCost, totalQTy, DetailID, Parent_ID, TotalReservedQTy, Final_conv, DetID,rn
FROM            (SELECT        row_number() OVER (partition BY Inv_Receipt_d.item_id, Inv_Receipt_d.store_id,  Cast(Entry_Date AS date)
                           ORDER BY  Entry_Date desc,Inv_Receipt_d.id DESC ) AS rn, 
						   Inv_Receipt_d.id AS DetID,
						   Inv_Receipt_d.item_id,
						   Inv_Receipt_d.store_id, 
						    Entry_Date =  Inv_Receipt_h.Entry_Date ,
							Inv_Receipt_d.ID DetailID, 
							Inv_Receipt_d.Parent_ID, 
                         Inv_Receipt_d.totalQTy, 
						 Inv_Receipt_d.TotalReservedQTy, 
						 Inv_Receipt_d.Qty AS QTY, 
						 Inv_Receipt_d.Final_conv AS final_Conv, 
                         AvgCost =  Inv_Receipt_d.AvgCost  
FROM            Inv_Receipt_h,  Inv_Receipt_d  
WHERE        (ISNULL(Inv_Receipt_h.Is_Canceled, 0) <> 1) 
		AND (ISNULL(Inv_Receipt_h.IsHolded, 0) <> 1) 
		AND Inv_Receipt_d.Parent_ID = Inv_Receipt_h.ID  
	  And Inv_Receipt_d.Transaction_move <> 0  and Entry_Date <='2020-05-10'
		) AS T
WHERE        rn = 1

GO
/****** Object:  View [dbo].[AV_Inv_itemsDate_Avgcost]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
Create VIEW [dbo].[AV_Inv_itemsDate_Avgcost]
AS
SELECT        item_id, store_id, Entry_Date, AvgCost, totalQTy, DetailID, Parent_ID, TotalReservedQTy, Final_conv, DetID,rn
FROM            (SELECT        row_number() OVER (partition BY Inv_Receipt_d.item_id,   Cast(Entry_Date AS date)
                           ORDER BY  Entry_Date desc,Inv_Receipt_d.id DESC ) AS rn, 
						   Inv_Receipt_d.id AS DetID,
						   Inv_Receipt_d.item_id,
						   Inv_Receipt_d.store_id, 
						    Entry_Date =  Inv_Receipt_h.Entry_Date ,
							Inv_Receipt_d.ID DetailID, 
							Inv_Receipt_d.Parent_ID, 
                         Inv_Receipt_d.totalQTy, 
						 Inv_Receipt_d.TotalReservedQTy, 
						 Inv_Receipt_d.Qty AS QTY, 
						 Inv_Receipt_d.Final_conv AS final_Conv, 
                         AvgCost =  Inv_Receipt_d.AvgCost  
FROM            Inv_Receipt_h,  Inv_Receipt_d  
WHERE        (ISNULL(Inv_Receipt_h.Is_Canceled, 0) <> 1) 
		AND (ISNULL(Inv_Receipt_h.IsHolded, 0) <> 1) 
		AND Inv_Receipt_d.Parent_ID = Inv_Receipt_h.ID  
	  And Inv_Receipt_d.Transaction_move <> 0 
		) AS T
WHERE        rn = 1

GO
/****** Object:  View [dbo].[AV_INV_TransactionDetails]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[AV_INV_TransactionDetails] 
AS  
SELECT  
				    Inv_Receipt_d.item_id
                  , Inv_Receipt_d.store_id
                  , Inv_Receipt_h.Entry_Date
				  , Inv_Receipt_h.code
				  ,Inv_Receipt_h.Costing_Rate as Costing_Rate
				  ,Inv_Receipt_h.Entry_No
				  , Inv_Receipt_h.CashDrawerId
				  , Inv_Receipt_d.Transaction_move
				  ,Inv_Receipt_d.Unit_ID
                  , Inv_Receipt_d.ID
                  , Inv_Receipt_d.Parent_ID
				   , Inv_Receipt_d.price as price
				   ,Inv_Receipt_d.ProductionUnitExpense
				   , Inv_Receipt_d.Qty as QTY
                  , Inv_Receipt_d.totalQTy   
				  ,Inv_Receipt_d.AllStoresQty                                
                  , Inv_Receipt_d.TotalReservedQTy   
				  , Inv_Receipt_d.Final_conv as final_Conv  
				  , AvgCost = Inv_Receipt_d.AvgCost
 
 FROM Inv_Receipt_d
    , Inv_Receipt_h  
     
        
 WHERE(ISNULL(Inv_Receipt_h.Is_Canceled , 0) <> 1)
      AND (ISNULL(Inv_Receipt_h.IsHolded , 0) <> 1) 
	  and Inv_Receipt_d.Parent_ID = Inv_Receipt_h.ID  
GO
/****** Object:  View [dbo].[AV_INV_TransactionDetails_NoKit]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[AV_INV_TransactionDetails_NoKit]
AS
SELECT        Inv_Receipt_d.item_id, Inv_Receipt_d.store_id, Inv_Receipt_h.Entry_Date, Inv_Receipt_d.ID, Inv_Receipt_d.Parent_ID, Inv_Receipt_d.totalQTy, Inv_Receipt_d.TotalReservedQTy, Inv_Receipt_d.Qty AS QTY, 
                         Inv_Receipt_d.Final_conv AS final_Conv, AvgCost = Inv_Receipt_d.AvgCost
FROM            Inv_Receipt_h, inv_items, Inv_Receipt_d
WHERE        (ISNULL(Inv_Receipt_h.Is_Canceled, 0) <> 1) AND (ISNULL(Inv_Receipt_h.IsHolded, 0) <> 1) AND Inv_Receipt_d.Parent_ID = Inv_Receipt_h.ID AND inv_items.id = Inv_Receipt_d.item_id AND 
                         inv_items.Item_Type <> 3
UNION
SELECT DISTINCT 
                         [item_id], [store_id], Entry_Date = CAST('2000/01/01' AS DATETIME), 0, 0, ISNULL([First_Qty], 0) * ISNULL(FinalConv, 1), 0, ISNULL([First_Qty], 0) * ISNULL(FinalConv, 1), FinalConv, 
                         First_Cost / ISNULL(FinalConv, 1)
FROM            [dbo].[Inv_Items_Store], [dbo].[Inv_Items]
WHERE        [Inv_Items].Item_Type <> 3 AND [dbo].[Inv_Items_Store].ITEM_ID = [dbo].[Inv_Items].ID AND Cast([item_id] AS nvarchar(50)) + '_' + Cast([store_id] AS nvarchar(50)) NOT IN
                             (SELECT DISTINCT (Cast(Inv_Receipt_d.item_id AS nvarchar(50)) + '_' + Cast(Inv_Receipt_d.store_id AS nvarchar(50)))
                                FROM            Inv_Receipt_d)
GO
/****** Object:  View [dbo].[AV_INV_TransactionDetailsTest]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[AV_INV_TransactionDetailsTest]
AS
(
 SELECT  
				    Inv_Receipt_d.item_id
                  , Inv_Receipt_d.store_id
                  , Inv_Receipt_h.Entry_Date
                  , Inv_Receipt_d.ID
                  , Inv_Receipt_d.Parent_ID
    , Inv_Receipt_h  .code
    
    , Inv_Receipt_h  .entry_no
    , Inv_Receipt_d  .Unit_ID
    , Inv_Receipt_d  .Price
                  
				  , Inv_Receipt_d.Final_conv as final_Conv  
				  , AvgCost = Inv_Receipt_d.AvgCost,
			 
				Inv_Receipt_d.Qty as QTY                                  
				, Inv_Receipt_d.totalQTy                                   
                  , Inv_Receipt_d.AllStoresQty 
 FROM Inv_Receipt_d
    , Inv_Receipt_h  
     
        
 WHERE(ISNULL(Inv_Receipt_h.Is_Canceled , 0) <> 1)
      AND (ISNULL(Inv_Receipt_h.IsHolded , 0) <> 1) 
	  and Inv_Receipt_d.Parent_ID = Inv_Receipt_h.ID  
)
GO
/****** Object:  View [dbo].[CashDrawerActionType_Vw]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[CashDrawerActionType_Vw]
AS
WITH OrderPaymentType AS (SELECT        '1' + CONVERT(VARCHAR, id) AS Id, Name, '1' AS [Index], SubsidiaryID AS CompanyId, 1 AS IsCoverFlags
                                                                FROM            dbo.Inv_PaymentType
                                                                WHERE        (IsSales = 1)
                                                                UNION ALL
                                                                SELECT        '2' + CONVERT(VARCHAR, Id) AS Id, Name, '2' AS [Index], '0' AS CompanyId, IsCoverFlags
                                                                FROM            dbo.mstr_CashDrawerType)
    SELECT        CONVERT(INT, Id) AS Id, Name, CompanyId, IsCoverFlags
     FROM            OrderPaymentType AS OrderPaymentType_1
GO
/****** Object:  View [dbo].[Inv_Item_Vw]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[Inv_Item_Vw]
AS
SELECT DISTINCT 
IM.Subsidiary_ID, 
IM.ID, 
IM.Code,
IM.Name, 
IM.Name_AR, 
IM.Notes, 
IM.Description, 
IM.Inventory_UnitId,
IM.IsRequireSerial,
IM.Item_Type, 
(CASE WHEN IM.Item_Type = 1  THEN 'Inventory Item'  
	WHEN IM.Item_Type = 2 THEN 'Service Item'  
	WHEN IM.Item_Type = 3 THEN 'Kit / Package'  
	WHEN IM.Item_Type = 4 THEN 'Finish Product'  
	WHEN IM.Item_Type = 5 THEN 'Virtual Item' 
	ELSE 'Inventory Item' 
END  ) AS ItemTypeName, 
(CASE WHEN IM.Item_Type = 1 THEN N'صنف مخزنى'  
WHEN IM.Item_Type = 2 THEN N'خدمة'  
WHEN IM.Item_Type = 3 THEN N'صنف مجمع'  
WHEN IM.Item_Type = 4 THEN N'صنف تام'  
WHEN IM.Item_Type = 5 THEN N'صنف افتراضى' 
ELSE N'صنف مخزنى' 
END ) AS ItemTypeNameAr, 
UNT.Name AS UnitName, 
ISNULL(IMUNT.Sale_price1, 0) AS SalesPrice, 
InvItemsVendors.VendorName, 
IM.IsActive, 
ISNULL(itemStores.ActualQty, 0) AS ActualQty,
IM.ImagePath,
ISNULL(IMUNT.Sale_price2, 0) AS SalesPrice2, 
ISNULL(IMUNT.Sale_price3, 0) AS SalesPrice3, 
ISNULL(IMUNT.Sale_price4, 0) AS SalesPrice4, 
ISNULL( Barcode.ItemBarCode , '') AS Barcode,
ISNULL(SALUNIT.Name,'') AS SalesUnit,
ISNULL(SALUNIT.Name_AR,'') AS SalesUnitAr,
ISNULL(PURUNIT.Name,'') AS PurchaseUnit,
ISNULL(PURUNIT.Name_AR,'') AS PurchaseUnitAr,
ISNULL(CAT.Name , '' ) AS Categories,
ISNULL(CATAR.NameAR ,'' ) AS CategoriesAR
FROM  Inv_Items IM 
LEFT JOIN Inv_Unit UNT 
ON UNT.ID = IM.Inventory_UnitId 
LEFT JOIN Inv_Items_Units IMUNT
ON IMUNT.Item_ID = IM.ID 
AND IMUNT.Unit_id = IM.Inventory_UnitId
LEFT JOIN  ( SELECT        
			 MAX(GL_Accounts.Name) AS VendorName, 
			 Inv_Items_Vendors.ItemID
			 FROM GL_Accounts 
			 INNER JOIN Inv_Items_Vendors 
			 ON Inv_Items_Vendors.IsMainVendor = 1 
			 AND Inv_Items_Vendors.VendorID = GL_Accounts.AccountID 
			 GROUP BY dbo.Inv_Items_Vendors.ItemID ) AS InvItemsVendors 
ON InvItemsVendors.ItemID = IM.ID 
LEFT OUTER JOIN (SELECT TOP (1) *  FROM dbo.Inv_Items_Store) AS itemStores 
ON itemStores.Item_ID = IM.ID
LEFT JOIN (SELECT DISTINCT 
		   A.Item_ID, ItemBarCode = 
		   STUFF((SELECT ', ' + ItemBarCode
				FROM Inv_Items_Barcode b 
				WHERE b.Item_ID = a.Item_ID
				FOR XML PATH('')), 1, 2, '')
			FROM Inv_Items_Barcode a
			GROUP BY A.Item_ID,a.ID ) Barcode
ON Barcode.Item_ID = IM.ID 
LEFT JOIN Inv_Unit As SALUNIT
ON SALUNIT.ID = IM.Selling_UnitId
LEFT JOIN Inv_Unit As PURUNIT
ON PURUNIT.ID = IM.Purchasing_UnitId
LEFT JOIN ( SELECT DISTINCT 
A.Item_ID, Name = 
STUFF((SELECT ', ' + PROCAT.Name
	from Inv_Items_Categories CAT
	INNER JOIN Inv_ProductCategories PROCAT
	ON CAT.ItemCategory_ID = PROCAT.ID
	WHERE CAT.Item_ID = A.Item_ID
	FOR XML PATH('')), 1, 2, '')
FROM Inv_Items_Categories a
GROUP BY A.Item_ID,A.ID ) CAT
ON IM.ID = CAT.Item_ID
LEFT JOIN (SELECT DISTINCT 
A.Item_ID, NameAR = 
STUFF((SELECT ', ' + PROCAT.Name_AR
	from Inv_Items_Categories CAT
	INNER JOIN Inv_ProductCategories PROCAT
	ON CAT.ItemCategory_ID = PROCAT.ID
	WHERE CAT.Item_ID = A.Item_ID
	FOR XML PATH('')), 1, 2, '')
FROM Inv_Items_Categories a
GROUP BY A.Item_ID,A.ID) CATAR
ON CATAR.Item_ID = IM.ID
GO
/****** Object:  View [dbo].[ReceiptsWithPaymentCompination_VW]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[ReceiptsWithPaymentCompination_VW]
AS

SELECT        A.[ID], [Entry_No], A.[SubsidiaryID], A.[Code], [Branch_ID], [Transaction_Code], [Entry_Date], [Payment_Type], [Vendor_ID], [CashCustomerID], [Currency_ID], [Empoyee_ID], [Memo], [Reference_No], [Value], 
                         [ValueForeign], [Discount_Value], [Discount_Percent], [NetValue], [Discount_ForeignValue], [Discount_ForeignPercent], [NetValueForeign], [CashDrawerId], [OrderType], [DriverId], [DeliveryNotes], 
                         [CashCustomerDetailId], [Is_Canceled], [DeliveryFees], [PrintCount], [IsKitchenDone], [PaidAmount], [IsHolded], [BranchTableId], [CustomerDeliverDate], [CustomerActualDeliverDate], [DeliveryStatusId], 
                         [Deposite], [Notes], [ChefId], [ChangeAmount], [DepositePaymentTypeId], [CreationDate], [LastUpdateDate], [CreatedByID], [UpdatedByID], B.Name[PaymentName],B.Name_AR AS PaymentName_Ar
FROM            Inv_Receipt_h A INNER JOIN
                         Inv_PaymentType B ON A.Payment_Type = B.id
WHERE        B.Code <> 0

UNION ALL
SELECT        A.[ID], [Entry_No], A.[SubsidiaryID], A.[Code], [Branch_ID], [Transaction_Code], [Entry_Date], [Payment_Type], [Vendor_ID], [CashCustomerID], [Currency_ID], [Empoyee_ID], [Memo], [Reference_No], 
                         C.Amount + (A.Discount_Percent * C.Amount) [Value], C.Amount + (A.Discount_Percent * C.Amount) [ValueForeign], 0 [Discount_Value], 0 [Discount_Percent], C.Amount[NetValue], [Discount_ForeignValue], 
                         [Discount_ForeignPercent], [NetValueForeign], [CashDrawerId], [OrderType], [DriverId], [DeliveryNotes], [CashCustomerDetailId], [Is_Canceled], [DeliveryFees], [PrintCount], [IsKitchenDone], [PaidAmount], 
                         [IsHolded], [BranchTableId], [CustomerDeliverDate], [CustomerActualDeliverDate], [DeliveryStatusId], [Deposite], [Notes], [ChefId], [ChangeAmount], [DepositePaymentTypeId], [CreationDate], [LastUpdateDate], 
                         [CreatedByID], [UpdatedByID], B.Name[PaymentName],B.Name_AR AS PaymentName_Ar
FROM            Inv_ReceiptMultiPayment C INNER JOIN
                         Inv_Receipt_h A ON C.ReceiptId = A.ID INNER JOIN
                         Inv_PaymentType B ON C.PaymentTypeId = B.id
INNER JOIN      Inv_PaymentType X ON A.Payment_Type = X.id
WHERE X.Code = 0
GO
/****** Object:  View [dbo].[V_inv_Receipt_D_Purc]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[V_inv_Receipt_D_Purc]
AS
SELECT        d.ID, d.Parent_ID, d.Store_ID, d.Item_ID, d.Qty, d.Price, d.Unit_ID, d.Conv, d.Discount_Value, d.Discount_Percent, d.Total, d.Transaction_move, d.Item_Type, d.H_Discount_Percentage, d.Recieved_Qty, d.Avr_Cost, d.Notes, 
                         d.FinishedProductID, d.H_Discount_Value, d.DepartmentID, d.SalesManId, d.KitchenStatus, d.DetailsHTML, d.CustomItemName, d.IsMembership, d.MembershipDetailId, d.IsCustomOption, d.CustomOptionReceiptDetailParentId, 
                         d.updatefromproc, d.DynamicId, d.IssueQty, d.DefaultItemCost, d.DefaultItemQty, d.Final_conv, d.IsDeleted,
                             (SELECT        TOP (1) dPrev.Price * h.Currency_Rate / ISNULL(hPrev.Costing_Rate, 1) AS PrevPurc
                                FROM            dbo.Inv_Receipt_d AS dPrev INNER JOIN
                                                         dbo.Inv_Receipt_h AS hPrev ON hPrev.ID = dPrev.Parent_ID AND dPrev.Item_ID = d.Item_ID AND hPrev.Entry_Date < h.Entry_Date AND dPrev.Store_ID = d.Store_ID
                                WHERE        (hPrev.Code = 1)
                                ORDER BY hPrev.Entry_Date DESC) AS PrevPurch,
                             (SELECT        SUM(hPrev.Currency_Rate * dPrev.Price / ISNULL(hPrev.Costing_Rate, 1)) / COUNT(*) AS Expr1
                                FROM            dbo.Inv_Receipt_d AS dPrev INNER JOIN
                                                         dbo.Inv_Receipt_h AS hPrev ON hPrev.ID = dPrev.Parent_ID AND dPrev.Item_ID = d.Item_ID AND hPrev.Entry_Date <= h.Entry_Date AND dPrev.Store_ID = d.Store_ID
                                WHERE        (hPrev.Code = 1)) AS newAvg, dbo.Inv_Items_Units.Sale_price1, dbo.Inv_Items_Units.Sale_price2, dbo.Inv_Items_Units.Sale_price3, dbo.Inv_Items_Units.Sale_price4
FROM            dbo.Inv_Receipt_d AS d INNER JOIN
                         dbo.Inv_Receipt_h AS h ON h.ID = d.Parent_ID LEFT OUTER JOIN
                         dbo.Inv_Items_Units ON dbo.Inv_Items_Units.Unit_id = d.Unit_ID AND dbo.Inv_Items_Units.Item_ID = d.Item_ID
WHERE        (h.Code = 1)
GO
/****** Object:  View [dbo].[V_ProductCategory_LastLevel]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[V_ProductCategory_LastLevel]
AS
SELECT        ID, Name, Code, IsActive, description, ParentID, ImageName, ImagePath, isPOS, Name_AR, Postion,SubsidaryID
FROM            dbo.Inv_ProductCategories AS main
WHERE        (ID NOT IN
                             (SELECT        ISNULL(ParentID, 0) AS Expr1
                               FROM            dbo.Inv_ProductCategories AS sub))
GO
/****** Object:  StoredProcedure [dbo].[aa_calcAvgCost]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 
CREATE proc [dbo].[aa_calcAvgCost] 
 @x1 int=0 ,@x2 int=0 ,@x3 datetime =Null ,@x4 int =0
AS
BEGIN
declare @execution_status int
Declare @DoNtCalcAvgCost int
 SELECT top 1 @DoNtCalcAvgCost = isnull( [DoNtCalcAvgCost],0)  FROM   [_SETTINGS] 

  IF @DoNtCalcAvgCost = 1
  Begin
	Delete Inv_Cost_queue
	return
  END 

   Declare @DBNAME nvarchar(200)
   Select @DBNAME = DB_Name()+'_CalcAverage'
   exec msdb..sp_get_SQL_job_execution_status @job_name=@DBNAME,@select_data=0,@execution_status=@execution_status out ; 
	-- submit the job only
	if @execution_status != 1
		EXEC msdb.dbo.sp_start_job @DBNAME 
END
GO
/****** Object:  StoredProcedure [dbo].[aa_calcBalance]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
CREATE PROCEDURE [dbo].[aa_calcBalance] --59,2911,'2019-09-10 12:13:00.000',2756
	   @STORE_id INTEGER ,@item_id INTEGER ,@AT_DATE DATETIME  ,@detailID integer
AS
BEGIN
  
   
Declare @MQTY numeric(18,8) 
Declare @I_Exist numeric(20) 
Declare @MCOUNTER integer    

Declare @ll_existance integer ,@itemType integer 
Declare @totalqty numeric(18,8) ,@OldDetailid int 
   
 Set @totalqty = 0 
 Set @OldDetailid = 0 
	IF EXISTS (SELECT 1 
		FROM INFORMATION_SCHEMA.TABLES 
		WHERE TABLE_TYPE='BASE TABLE' 
		AND TABLE_NAME='#AVG_BalanceTableComp')  Drop table #AVG_BalanceTableComp ;	
		
	Select @itemType = item_type From inv_items where id = @item_id
	IF @itemType in (2,3) Return

 
	SELECT   	QTY = Inv_Receipt_d.Qty *ISNULL(Inv_Receipt_d.Final_conv ,1)* Inv_Receipt_d.Transaction_move , Inv_Receipt_d.ID ,Entry_Date    
    into   #AVG_BalanceTableComp
	FROM   Inv_Receipt_d,Inv_Receipt_h
	Where  Inv_Receipt_d.Parent_ID= Inv_Receipt_h.ID     and isnull(IsHolded,0) <> 1   and isnull(Is_Canceled,0) <> 1  -- and   Inv_Receipt_d.Price > 0 
			and  Inv_Receipt_d.Transaction_move <> 0 and item_id = @item_id and Store_ID = @STORE_id and (Entry_Date > @AT_DATE  or  (Entry_Date = @AT_DATE and Inv_Receipt_d.id >= @detailID))
	order by  Inv_Receipt_h.Entry_Date , Inv_Receipt_d.id asc

	Select @OldDetailid = det.id from inv_receipt_h hd , inv_receipt_d det where 
	hd.id=det.Parent_ID
	and det.id <> @detailID 
	and hd.id = det.Parent_ID 
	and det.Item_ID = @item_id 
	and det.Store_ID = @STORE_id
	and det.Transaction_move <> 0 
	and	hd.Entry_Date = 
					(Select max(entry_date) from inv_receipt_h h , inv_receipt_d d 
					where entry_date <= @AT_DATE
					and d.id <> @detailID 
					and h.id = d.Parent_ID 
					and d.Item_ID = @item_id 
					and d.Store_ID = @STORE_id
					and d.Transaction_move <> 0 )
	
	
	
	IF @OldDetailid is Null Set @OldDetailid = 0 
	 
		  IF @OldDetailid =0
			Begin
				select  @totalqty = First_qty * FinalConv  
				from  Inv_Items_Store where  (Inv_Items_Store.Item_ID = @item_id) and  (Inv_Items_Store.Store_ID = @STORE_id)
			--	 set @MCOUNTER = 0
			End
		  ELSE
			Begin
				Select   @totalqty = TotalQTY   from [dbo].[Inv_Receipt_d] where id  = @OldDetailid
     		END		
			 
			IF @totalqty is null Set @totalqty = 0  
		 
Declare CUR_FinalAdjustBalance  cursor FAST_FORWARD 
		  For

		SELECT 	QTY  ,ID   
		From #AVG_BalanceTableComp 
		order by Entry_Date
		
	 SET @MCOUNTER = 0
	 OPEN CUR_FinalAdjustBalance 
	Fetch Next From CUR_FinalAdjustBalance Into @MQTY,@detailID  
	

	While @@Fetch_Status = 0 Begin
		SET @MCOUNTER = @MCOUNTER + 1;  

		Set @totalqty = @totalqty + @MQTY 
		 
		update 		 Inv_Receipt_d set Totalqty = @totalqty    where id = @Detailid
		 
	Fetch Next From CUR_FinalAdjustBalance Into @MQTY,@detailID  
	
	End		--	 End of Fetch

	Close CUR_FinalAdjustBalance
	Deallocate CUR_FinalAdjustBalance
	Drop table #AVG_BalanceTableComp ;	 
END
GO
/****** Object:  StoredProcedure [dbo].[aa_calcKitAvgCost]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
CREATE PROCEDURE [dbo].[aa_calcKitAvgCost]
	    @item_id INTEGER  , @Store_id INTEGER  , @DateTime DateTime ='21000101'   ,@FinalKitAvgCost   Numeric(18,6) out
AS
BEGIN
   Declare @ItemType int,@ItemComponentID int ,@Item_Type int,@MCOUNTER int		 , @ItemComponentUnitID int   , @ItemComponentConv Numeric(18,6)
          ,@MaxDate DateTime,@ItemComponentRecipeQty  Numeric(18,6) , @KitComponentFinalConv Numeric(18,6),@KitAvgCost  Numeric(18,6)
		  
   Select @ItemType = item_type from inv_items where ID = @item_id 
   IF  @ItemType <> 3  Return
   SET @KitAvgCost = 0 
   Declare CUR_KitAvgCost  cursor FAST_FORWARD 
		  For
		   SELECT  ItemComponentID ,ItemComponentUnitID,ItemComponentConv ,ItemComponentRecipeQty,Inv_items.Item_Type
		   FROM  [Inv_Items_Components] ,Inv_items
		   Where Item_ID = @item_id  and 
				 Inv_items.id = [Inv_Items_Components].[ItemComponentID] 

				 SET @MCOUNTER = 0
		 OPEN CUR_KitAvgCost 

		Fetch Next From CUR_KitAvgCost Into  @ItemComponentID ,@ItemComponentUnitID,@ItemComponentConv ,@ItemComponentRecipeQty,@Item_Type
		While @@Fetch_Status = 0 Begin
			SET @MCOUNTER = @MCOUNTER + 1;
			IF  @Item_Type <> 3 
			Begin 
				Select @KitComponentFinalConv = (@ItemComponentConv /case  isnull(Conv,1) when 0 then 1 else conv end ) * finalconv From Inv_Items_Units where Item_ID = @ItemComponentID
				Select @MaxDate = Max(entry_date) from [dbo].[AV_Inv_items_storeDate] where entry_date <= @DateTime and item_id = @ItemComponentID and store_id = @store_id
				IF @MaxDate = '20000101'
					Select @KitAvgCost = @KitAvgCost +  ( First_Cost / Case isnull(FinalConv,1) when 0 then 1 else FinalConv end) from Inv_Items_Store  where item_id = @ItemComponentID and Store_id = @Store_id 
				ELSE
					IF @MaxDate > '20000101'
					Select @KitAvgCost = @KitAvgCost +   AvgCost from AV_Inv_items_storeDate   where item_id = @ItemComponentID and Store_id = @Store_id and Entry_Date = @MaxDate 
			END
			ELSE
			Begin
				Declare @KitComAvgCost numeric (18,6)
				Exec aa_calcKitCompAvgCost @ItemComponentID,@Store_id,'21000101' ,@KitComAvgCost
				Set @FinalKitAvgCost = @KitAvgCost + @KitComAvgCost
			END 
			 Set @FinalKitAvgCost = @KitAvgCost 
		Fetch Next From CUR_KitAvgCost Into  @ItemComponentID ,@ItemComponentUnitID,@ItemComponentConv ,@ItemComponentRecipeQty,@Item_Type

		End		--	 End of Fetch

		Close CUR_KitAvgCost
		Deallocate CUR_KitAvgCost
		print Cast(@FinalKitAvgCost as varchar(100))
	
END
GO
/****** Object:  StoredProcedure [dbo].[aa_calcKitCompAvgCost]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
CREATE PROCEDURE [dbo].[aa_calcKitCompAvgCost]
	    @item_id INTEGER  , @Store_id INTEGER  , @DateTime DateTime ='21000101'   ,@FinalKitAvgCost   Numeric(18,6) out
AS
BEGIN
   Declare @ItemType int,@ItemComponentID int ,@Item_Type int,@MCOUNTER int		 , @ItemComponentUnitID int   , @ItemComponentConv Numeric(18,6)
          ,@MaxDate DateTime,@ItemComponentRecipeQty  Numeric(18,6) , @KitComponentFinalConv Numeric(18,6),@KitAvgCost  Numeric(18,6)
   Select @ItemType = item_type from inv_items where ID = @item_id 
   IF  @ItemType <> 3  Return
   SET @KitAvgCost = 0 
   Declare KitCompAvgCost  cursor FAST_FORWARD 
		  For
		   SELECT  ItemComponentID ,ItemComponentUnitID,ItemComponentConv ,ItemComponentRecipeQty,Inv_items.Item_Type
		   FROM  [Inv_Items_Components] ,Inv_items
		   Where Item_ID = @item_id  and 
				 Inv_items.id = [Inv_Items_Components].[ItemComponentID] 

				 SET @MCOUNTER = 0
		 OPEN KitCompAvgCost 

		Fetch Next From KitCompAvgCost Into  @ItemComponentID ,@ItemComponentUnitID,@ItemComponentConv ,@ItemComponentRecipeQty,@Item_Type
		While @@Fetch_Status = 0 Begin
			SET @MCOUNTER = @MCOUNTER + 1;
			IF  @Item_Type <> 3 
			Begin 
				Select @KitComponentFinalConv = (@ItemComponentConv /case  isnull(Conv,1) when 0 then 1 else conv end ) * finalconv From Inv_Items_Units where Item_ID = @ItemComponentID
				Select @MaxDate = Max(entry_date) from [dbo].[AV_Inv_items_storeDate] where entry_date <= @DateTime and item_id = @ItemComponentID and store_id = @store_id
				IF @MaxDate = '20000101'
					Select @KitAvgCost = @KitAvgCost +  (( First_Cost / Case isnull(FinalConv,1) when 0 then 1 else FinalConv end) * @ItemComponentRecipeQty ) from Inv_Items_Store  where item_id = @ItemComponentID and Store_id = @Store_id 
				ELSE
					IF @MaxDate > '20000101'
					Select @KitAvgCost = @KitAvgCost + (  AvgCost * @ItemComponentRecipeQty )  from AV_Inv_items_storeDate   where item_id = @ItemComponentID and Store_id = @Store_id and Entry_Date = @MaxDate 
			END
			 Set @FinalKitAvgCost = @KitAvgCost
		Fetch Next From KitCompAvgCost Into  @ItemComponentID ,@ItemComponentUnitID,@ItemComponentConv ,@ItemComponentRecipeQty,@Item_Type

		End		--	 End of Fetch

		Close KitCompAvgCost
		Deallocate KitCompAvgCost
	
END
GO
/****** Object:  StoredProcedure [dbo].[aa_CallCalcAVGCost]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
Create PROCEDURE [dbo].[aa_CallCalcAVGCost]
	    @ID integer
AS
BEGIN
	Declare @itemID Integer  ,@STORE_id integer  ,@detailID integer, @item_id INTEGER ,@AT_DATE DATETime 
	 
	Declare CUR_RD  cursor For  
			SELECT  Inv_Receipt_d.ID
			FROM   Inv_Receipt_d 
			Where  Inv_Receipt_d.Parent_ID= @ID 
		--SET @MCOUNTER = 0
		 OPEN CUR_RD 
		Fetch Next From CUR_RD Into @detailID

		While @@Fetch_Status = 0 Begin  
			select @AT_DATE =i.Entry_Date ,@STORE_id =d.Store_ID, @item_id =d.Item_ID   from Inv_Receipt_h i,Inv_Receipt_d d where i.ID = @ID AND  d.id = @DetailID and d.Parent_ID = i.ID  ;   
	        Exec [aa_calcAvgCost]  @STORE_id,@item_id,@AT_DATE,@DetailID
			 
		 Fetch Next From CUR_RD Into @detailID

		End		--	 End of Fetch

		Close CUR_RD
		Deallocate CUR_RD
	
		 END
GO
/****** Object:  StoredProcedure [dbo].[aa_CostingMaintenance]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
CREATE  PROCEDURE [dbo].[aa_CostingMaintenance] 
AS
BEGIN
	declare @ReceiptID int, @STORE_id INTEGER ,@item_id INTEGER ,@AT_DATE DATETIME   
	declare cur CURSOR LOCAL for

	Select Distinct   Store_ID  ,Item_ID
	from  Inv_Receipt_d  
	
	open cur

	fetch next from cur into @STORE_id   ,@item_id

	while @@FETCH_STATUS = 0 BEGIN
			
		Exec [aa_calcBalance] @STORE_id   ,@item_id   ,'20000101'    , 0
		exec [dbo].[aa_calcCost_ForMaintenance]  @STORE_id   ,@item_id   ,'20000101'    , 0

		fetch next from cur into @STORE_id   ,@item_id
	END

	close cur
	deallocate cur
END 

GO
/****** Object:  StoredProcedure [dbo].[aa_GetKitMultiUnits]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
CREATE PROCEDURE [dbo].[aa_GetKitMultiUnits] --50,3648,'2019-06-23',7445
AS
BEGIN
	Select Inv_Items.code,Inv_Items.Name,Inv_Unit.Code ,Inv_Unit.Name ,Inv_Items_Units.FinalConv   
	from Inv_Items ,Inv_Items_Units,Inv_Unit
	where Inv_Items.id =   Inv_Items_Units.Item_ID and
		  Inv_Unit.id =   Inv_Items_Units.Unit_id  and
		  Inv_Items.Item_Type = 3 and
		  Inv_Items_Units.FinalConv > 1 
	  
END
GO
/****** Object:  StoredProcedure [dbo].[aa_InsertOpiningBalanceTrans]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
Create PROCEDURE [dbo].[aa_InsertOpiningBalanceTrans]

AS
BEGIN
    
	 Declare  @Store_ID int  ,@Item_ID int  ,@First_Qty numeric (18,6),@First_Cost numeric (18,6),@First_Conv numeric (18,6),@First_Unit int,@FinalConv numeric (18,6),@MCOUNTER int = 0 
			  ,@SubsidiaryID int,@branch int,@RecID int,@itemType int
	
	Declare Cur_InsertOpinningBalance  cursor FAST_FORWARD 
		  For


		SELECT  Store_ID ,Item_ID ,First_Qty ,First_Cost ,First_Conv ,First_Unit ,FinalConv,Subsidiary_ID,Inv_Items.Item_Type
      FROM dbo.Inv_Items_Store ,Inv_Items where dbo.Inv_Items_Store.Item_ID = inv_items.ID
		
	 SET @MCOUNTER = 0
	 OPEN Cur_InsertOpinningBalance 
	Fetch Next From Cur_InsertOpinningBalance Into @Store_ID  ,@Item_ID    ,@First_Qty   ,@First_Cost  ,@First_Conv ,@First_Unit,@FinalConv,@SubsidiaryID,@itemType
	

	While @@Fetch_Status = 0 Begin
		SET @MCOUNTER = @MCOUNTER + 1;  
	      
		    Select @branch = id from mstr_Branch where Subsidaryid =@SubsidiaryID and [IsDefault] = 1 

			INSERT INTO [dbo].[Inv_Receipt_h]
				   (   [Entry_No] ,[SubsidiaryID] ,[Code] ,[Branch_ID]
					  ,[Entry_Date]
					  ,[Currency_ID]
					  ,[Currency_Rate] 
					  ,[Value]
					  ,[NetValue]
					  ,[NetValueForeign] 
					  ,[Costing_Rate])
			 VALUES
				   (0,@SubsidiaryID ,4,@branch ,'20000101',79,1,@First_Cost,@First_Cost,@First_Cost,1 )

				   Select @RecID = max(id) from [Inv_Receipt_h] 

				   INSERT INTO [dbo].[Inv_Receipt_d]
							  ([Parent_ID]
							   ,[Store_ID]
							   ,[Item_ID]
							   ,[Qty]
							   ,[Price]
							   ,[Unit_ID]
							   ,[Conv]
							   ,[Total]
							   ,[Transaction_move]
							   ,[Item_Type] 
							   ,[Final_conv])
						 VALUES
							   (@RecID
							   ,@Store_ID
							   ,@Item_ID
							   ,@First_Qty
							   ,@First_Cost
							   ,@First_Unit
							   ,@First_Conv
							   ,@First_Cost * @First_Qty
							   ,1
							   ,@itemType 
							   ,@FinalConv)







	Fetch Next From Cur_InsertOpinningBalance Into  @Store_ID  ,@Item_ID    ,@First_Qty   ,@First_Cost  ,@First_Conv ,@First_Unit,@FinalConv,@SubsidiaryID,@itemType

	End		--	 End of Fetch

	Close Cur_InsertOpinningBalance
	Deallocate Cur_InsertOpinningBalance 	 
	
	 

END

GO
/****** Object:  StoredProcedure [dbo].[aa_PostCostVoucher]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[aa_PostCostVoucher] @VoucherDATEIn DATE
                                          , @Lang          NVARCHAR(50) = 'en-US'
                                          ,@CostPostedUserId int
										  ,@SubsidiaryID INTEGER
										  , @Ser           INTEGER OUT

AS
    BEGIN
        DECLARE @ID INTEGER , @MCOUNTER INTEGER , @CheckVoucherDATEIn DATE , @CostPosted INTEGER , @Count INTEGER,@MaxCostDate DATETime
        DECLARE @VoucherDATE DATETIME , @CheckCode NVARCHAR(50) , @CurrencyId INTEGER , @BranchId INTEGER
        DECLARE @CostOfInventory INTEGER , @Memo NVARCHAR(500) , @TransactionCode INTEGER , @PaymentAmount NUMERIC(18 , 6) , @Rate NUMERIC(18 , 6)
        DECLARE @VoucherID INTEGER , @CostAmount NUMERIC(18 , 6) , @Entryno INT , @VouchertypeID INTEGER , @PostingVouchertypeID VARCHAR(50)
        DECLARE @Costcenter INTEGER , @Posted INTEGER , @CreationDate DATE , @LastUpdateDate DATE , @CreatedByID INTEGER , @UpdatedByID INTEGER;
        DECLARE @STORE_id INTEGER , @StoreAccount INTEGER , @STORE_idTo INTEGER , @StoreAccountTo INTEGER , @Vouchercode NVARCHAR(50) , @MemoComm NVARCHAR(50) , @Reference_No NVARCHAR(50)
		DECLARE @mAXeNTRYdATE dATEtIME
		Declare @USeBranchCost int

        SELECT @Count = COUNT(id) ,@mAXeNTRYdATE = mAX(Entry_Date )
        FROM Inv_Receipt_h
        WHERE CAST(Entry_Date AS DATE) <= @VoucherDATEIn
              AND ISNULL([CostPosted] , 0) = 0
              AND code IN(51 , 52 , 53 , 54 , 60 , 61 , 63   , 83,85)
        AND (ISNULL(Is_Canceled , 0) <> 1)
        AND (ISNULL(IsHolded , 0) <> 1)
        AND id IN
        (
         SELECT parent_id
         FROM Inv_Receipt_d,inv_items
		 where inv_items.id = Inv_Receipt_d.Item_ID and isnull(inv_items.consignment,0) = 0

        )
		
        SELECT @CheckVoucherDATEIn = Max(vdate)
        FROM [GL_InvPostinigDate] where subsidary = @SubsidiaryID
		IF @CheckVoucherDATEIn IS Null  or @CheckVoucherDATEIn = cast ('19000101' as Date) set @CheckVoucherDATEIn = cast('20000101' as date)
        IF @Count = 0 OR @Count IS NULL or @CheckVoucherDATEIn >= @VoucherDATEIn or @mAXeNTRYdATE <= @CheckVoucherDATEIn
            BEGIN
                PRINT 'No Data'
                SET @Ser = 0
                RETURN
			END

		 SET @Ser = 0
		   
        INSERT INTO [dbo].[GL_InvPostinigDate](vdate,subsidary)
		Values (cast(@mAXeNTRYdATE as date),@SubsidiaryID);

        --VALUES(@VoucherDATEIn);

        SELECT @Ser = id
        FROM [GL_InvPostinigDate]
        WHERE vdate =cast( @mAXeNTRYdATE  as date);
		 
		IF  @CostPostedUserId Is Null Set @CostPostedUserId = 0

        DECLARE CUR_PostCostVoucher CURSOR
        FOR SELECT distinct SUM(Inv_Receipt_d.AvgCost * Inv_Receipt_d.qty * Inv_Receipt_d.Final_conv)
                 , 51
                 , @SubsidiaryID
                 , Inv_Receipt_h.Branch_ID
                 , Inv_Receipt_h.CostCenterID
                 , Inv_Store.StoreAccount
                 , Case isnull(inv_items.OtherCostAccountId,0) when 0 THEN  Inv_Transactions_branchs_Account.CostOfInventory   else inv_items.OtherCostAccountId  end
                 , Inv_Receipt_h.Code
                 , 0,@VoucherDATEIn
            FROM Inv_Receipt_h , 
                 Inv_Store , 
                 Inv_Receipt_d ,  
                 Inv_Transactions_branchs_Account,inv_items
            WHERE (CAST(Inv_Receipt_h.Entry_Date AS DATE) <= @VoucherDATEIn and CAST(Inv_Receipt_h.Entry_Date AS DATE) > @CheckVoucherDATEIn )
                  AND ISNULL(Inv_Receipt_h.CostPosted , 0) = 0 
				  and Inv_Receipt_h.SubsidiaryID = @SubsidiaryID
                  AND Inv_Receipt_h.code IN(51)
				  AND Inv_Store.id = Inv_Receipt_d.Store_ID 
				  AND Inv_Receipt_h.id = Inv_Receipt_d.Parent_ID
				  AND (Inv_Transactions_branchs_Account.BranchID = Inv_Receipt_h.Branch_ID
				  AND Inv_Transactions_branchs_Account.TransctionID = Inv_Receipt_h.code)
				  AND (ISNULL(Inv_Receipt_h.Is_Canceled , 0) <> 1)
				  AND inv_items.ID = Inv_Receipt_d.Item_ID
				  AND (ISNULL(Inv_Receipt_h.IsHolded , 0) <> 1) and FinishedReceipt_dID is null
            GROUP BY Inv_Receipt_h.SubsidiaryID 
                   , Inv_Receipt_h.Branch_ID
                   , Inv_Receipt_h.CostCenterID
                   , Inv_Store.StoreAccount
                   , Inv_Transactions_branchs_Account.CostOfInventory, Inv_Receipt_h.Code,inv_items.OtherCostAccountId
            UNION
            SELECT distinct SUM(Inv_Receipt_d.AvgCost * Inv_Receipt_d.qty * Inv_Receipt_d.Final_conv)
                 , 52
                 , Inv_Receipt_h.SubsidiaryID 
                 , Inv_Receipt_h.Branch_ID
                 , Inv_Receipt_h.CostCenterID
                 , Inv_Store.StoreAccount
                 , Case isnull(inv_items.OtherCostAccountId,0) when 0 THEN  Inv_Transactions_branchs_Account.CostOfInventory   else inv_items.OtherCostAccountId  end
                 ,  Inv_Receipt_h.Code
                 , 0,@VoucherDATEIn
            FROM Inv_Receipt_h , 
                 Inv_Store , 
                 Inv_Receipt_d ,  
                 Inv_Transactions_branchs_Account,inv_items
            WHERE  (CAST(Inv_Receipt_h.Entry_Date AS DATE) <= @VoucherDATEIn and Inv_Receipt_h.Entry_Date >= DATEADD(DAY, 1, @CheckVoucherDATEIn) )
                  AND ISNULL(Inv_Receipt_h.CostPosted , 0) = 0
				  and Inv_Receipt_h.SubsidiaryID = @SubsidiaryID
                  AND Inv_Receipt_h.code IN(52)
                  AND Inv_Store.id = Inv_Receipt_d.Store_ID 
                  AND Inv_Receipt_h.id = Inv_Receipt_d.Parent_ID
                  AND (Inv_Transactions_branchs_Account.BranchID = Inv_Receipt_h.Branch_ID
                  AND Inv_Transactions_branchs_Account.TransctionID = Inv_Receipt_h.code)
                  AND (ISNULL(Inv_Receipt_h.Is_Canceled , 0) <> 1)
				 AND (ISNULL(Inv_Receipt_h.IsHolded , 0) <> 1)
			     AND inv_items.ID = Inv_Receipt_d.Item_ID and FinishedReceipt_dID is null
            GROUP BY Inv_Receipt_h.SubsidiaryID 
                   , Inv_Receipt_h.Branch_ID
                   , Inv_Receipt_h.CostCenterID
                   , Inv_Store.StoreAccount
                   , Inv_Transactions_branchs_Account.CostOfInventory, Inv_Receipt_h.Code,inv_items.OtherCostAccountId
            UNION
            SELECT distinct SUM(Inv_Receipt_d.AvgCost * Inv_Receipt_d.qty * Inv_Receipt_d.Final_conv)
                 , 53
                 , Inv_Receipt_h.SubsidiaryID 
                 , Inv_Receipt_h.Branch_ID
                 , Inv_Receipt_h.CostCenterID
                 , Inv_Store.StoreAccount
                , Case isnull(inv_items.OtherCostAccountId,0) when 0 THEN  Inv_Transactions_branchs_Account.CostOfInventory   else inv_items.OtherCostAccountId  end
                 ,  Inv_Receipt_h.Code
                 , 0,@VoucherDATEIn
            FROM Inv_Receipt_h , 
                 Inv_Store , 
                 Inv_Receipt_d ,  
                 Inv_Transactions_branchs_Account,inv_items
            WHERE  (CAST(Inv_Receipt_h.Entry_Date AS DATE) <= @VoucherDATEIn and Inv_Receipt_h.Entry_Date >= DATEADD(DAY, 1, @CheckVoucherDATEIn) )
                  AND ISNULL(Inv_Receipt_h.CostPosted , 0) = 0
                  AND Inv_Receipt_h.code IN(53)
				  and Inv_Receipt_h.SubsidiaryID = @SubsidiaryID
            AND Inv_Store.id = Inv_Receipt_d.Store_ID 
            AND Inv_Receipt_h.id = Inv_Receipt_d.Parent_ID
            AND (Inv_Transactions_branchs_Account.BranchID = Inv_Receipt_h.Branch_ID
                 AND Inv_Transactions_branchs_Account.TransctionID = Inv_Receipt_h.code)
            AND (ISNULL(Inv_Receipt_h.Is_Canceled , 0) <> 1)
            AND (ISNULL(Inv_Receipt_h.IsHolded , 0) <> 1) and inv_items.id = Inv_Receipt_d.Item_ID  and FinishedReceipt_dID is null
            GROUP BY Inv_Receipt_h.SubsidiaryID 
                   , Inv_Receipt_h.Branch_ID
                   , Inv_Receipt_h.CostCenterID
                   , Inv_Store.StoreAccount
                   , Inv_Transactions_branchs_Account.CostOfInventory, Inv_Receipt_h.Code,OtherCostAccountId
            UNION
            SELECT distinct SUM(Inv_Receipt_d.AvgCost * Inv_Receipt_d.qty * Inv_Receipt_d.Final_conv)
                 , 54
                 , Inv_Receipt_h.SubsidiaryID 
                 , Inv_Receipt_h.Branch_ID
                 , Inv_Receipt_h.CostCenterID
                 , Inv_Store.StoreAccount
                 , Case isnull(inv_items.OtherCostAccountId,0) when 0 THEN  Inv_Transactions_branchs_Account.CostOfInventory   else inv_items.OtherCostAccountId  end
                 ,  Inv_Receipt_h.Code
                 , 0,@VoucherDATEIn
            FROM Inv_Receipt_h , 
                 Inv_Store , 
                 Inv_Receipt_d ,  
                 Inv_Transactions_branchs_Account,inv_items
            WHERE  (CAST(Inv_Receipt_h.Entry_Date AS DATE) <= @VoucherDATEIn and Inv_Receipt_h.Entry_Date >= DATEADD(DAY, 1, @CheckVoucherDATEIn) )
                  AND ISNULL(Inv_Receipt_h.CostPosted , 0) = 0
				  and Inv_Receipt_h.SubsidiaryID = @SubsidiaryID
                  AND Inv_Receipt_h.code IN(54)
            AND Inv_Store.id = Inv_Receipt_d.Store_ID 
            AND Inv_Receipt_h.id = Inv_Receipt_d.Parent_ID
            AND (Inv_Transactions_branchs_Account.BranchID = Inv_Receipt_h.Branch_ID
                 AND Inv_Transactions_branchs_Account.TransctionID = Inv_Receipt_h.code)
            AND (ISNULL(Inv_Receipt_h.Is_Canceled , 0) <> 1)
            AND (ISNULL(Inv_Receipt_h.IsHolded , 0) <> 1) and inv_items.id = Inv_Receipt_d.Item_ID   and FinishedReceipt_dID is null
            GROUP BY Inv_Receipt_h.SubsidiaryID 
                   , Inv_Receipt_h.Branch_ID
                   , Inv_Receipt_h.CostCenterID
                   , Inv_Store.StoreAccount
                   , Inv_Transactions_branchs_Account.CostOfInventory, Inv_Receipt_h.Code,OtherCostAccountId
            UNION
            SELECT distinct SUM(AV_INV_TransactionDetails.AvgCost * Inv_Receipt_d.qty * Inv_Receipt_d.Final_conv)
                 , Inv_Receipt_h.Code
                 , Inv_Receipt_h.SubsidiaryID 
                 , Inv_Receipt_h.Branch_ID
                 , ISNULL(Inv_Receipt_h.CostCenterID , 0)
                 , Inv_Store.StoreAccount
                 , case isnull(AccountType,0)  when 0 then Inv_Transactions_branchs_Account.CostOfInventory when 1 then  Inv_Receipt_h.Vendor_ID end
                 , Inv_Receipt_h.ID
                 , Inv_Receipt_h.Entry_No,Inv_Receipt_h.Entry_Date 
            FROM Inv_Receipt_h , 
                 Inv_Store , 
                 Inv_Receipt_d , 
                 AV_INV_TransactionDetails , 
                 Inv_Transactions_branchs_Account
            WHERE  (CAST(Inv_Receipt_h.Entry_Date AS DATE) <= @VoucherDATEIn and Inv_Receipt_h.Entry_Date >= DATEADD(DAY, 1, @CheckVoucherDATEIn) )
                  AND ISNULL(Inv_Receipt_h.CostPosted , 0) = 0
                  AND Inv_Receipt_h.code IN(63 , 60 , 61,85)
				  and Inv_Receipt_h.SubsidiaryID = @SubsidiaryID
                  AND Inv_Store.id = Inv_Receipt_d.Store_ID
                  AND AV_INV_TransactionDetails.id = Inv_Receipt_d.ID
                  AND Inv_Receipt_h.id = Inv_Receipt_d.Parent_ID
                  AND (Inv_Transactions_branchs_Account.BranchID = Inv_Receipt_h.Branch_ID
                 AND Inv_Transactions_branchs_Account.TransctionID = Inv_Receipt_h.code) and FinishedReceipt_dID is null
            GROUP BY Inv_Receipt_h.Code
                   , Inv_Receipt_h.SubsidiaryID 
                   , Inv_Receipt_h.Branch_ID
                   , ISNULL(Inv_Receipt_h.CostCenterID , 0)
                   , Inv_Store.StoreAccount
                   , Inv_Transactions_branchs_Account.CostOfInventory
                   , Inv_Receipt_h.ID
                   , Inv_Receipt_h.Entry_No,Inv_Receipt_h.Entry_Date ,isnull(Inv_Receipt_h.AccountType,0), Inv_Receipt_h.Vendor_ID     
            UNION
            SELECT distinct Sum(Inv_Receipt_d.qty * Inv_Receipt_d.price)
                 , Inv_Receipt_h.Code
                 , Inv_Receipt_h.SubsidiaryID 
                 , Inv_Receipt_h.Branch_ID
                 , Inv_Receipt_h.CostCenterID
                 , Inv_Store.StoreAccount
                 , Inv_Transactions_branchs_Account.CostOfInventory
                 , Inv_Receipt_h.ID
                 , Entry_No,Inv_Receipt_h.Entry_Date 
            FROM Inv_Receipt_h , 
                 Inv_Store , 
                 Inv_Receipt_d , 
                 Inv_Transactions_branchs_Account,inv_items
            WHERE  (CAST(Inv_Receipt_h.Entry_Date AS DATE) <= @VoucherDATEIn and Inv_Receipt_h.Entry_Date >= DATEADD(DAY, 1, @CheckVoucherDATEIn) )
                  AND ISNULL(Inv_Receipt_h.CostPosted , 0) = 0
                  AND Inv_Receipt_h.code IN(83)
                  AND Inv_Store.id = Inv_Receipt_d.Store_ID
				  and Inv_Receipt_h.SubsidiaryID = @SubsidiaryID
				  AND Inv_Receipt_h.id = Inv_Receipt_d.Parent_ID
				  AND (Inv_Transactions_branchs_Account.BranchID = Inv_Receipt_h.Branch_ID
                  AND Inv_Transactions_branchs_Account.TransctionID = Inv_Receipt_h.code)
				  and (inv_items.id = Inv_Receipt_d.Item_ID and inv_items.consignment = 0) and FinishedReceipt_dID is null
		   Group by Inv_Receipt_h.Code
                 , Inv_Receipt_h.SubsidiaryID 
                 , Inv_Receipt_h.Branch_ID
                 , Inv_Receipt_h.CostCenterID
                 , Inv_Store.StoreAccount
                 , Inv_Transactions_branchs_Account.CostOfInventory
                 , Inv_Receipt_h.ID
                 , Entry_No,Inv_Receipt_h.Entry_Date 
      --      UNION
      --      SELECT SUM(AV_INV_TransactionDetails.AvgCost * Inv_Receipt_d.qty * Inv_Receipt_d.Final_conv)
      --           , Inv_Receipt_h.Code
      --           , Inv_Receipt_h.SubsidiaryID 
      --           , Inv_Receipt_h.Branch_ID
      --           , ISNULL(Inv_Receipt_h.CostCenterID , 0)
      --           , Inv_Store.StoreAccount
      --           , a.StoreAccount
      --           , Inv_Receipt_h.ID
      --           , Inv_Receipt_h.Entry_No,Inv_Receipt_h.Entry_Date 
      --      FROM Inv_Receipt_h , 
      --           Inv_Store , 
      --           Inv_Receipt_d , 
      --           Inv_Store a , 
      --           AV_INV_TransactionDetails
      --      WHERE  (CAST(Inv_Receipt_h.Entry_Date AS DATE) <= @VoucherDATEIn and Inv_Receipt_h.Entry_Date >= DATEADD(DAY, 1, @CheckVoucherDATEIn) )
      --            AND ISNULL(Inv_Receipt_h.CostPosted , 0) = 0
				  --and Inv_Receipt_h.SubsidiaryID = @SubsidiaryID
      --            AND a.id = Inv_Receipt_h.ToStoreID
      --            AND AV_INV_TransactionDetails.id = Inv_Receipt_d.ID
      --            AND Inv_Receipt_h.code IN(81)
      --      AND Inv_Store.id = Inv_Receipt_h.FromStoreID
      --      AND Inv_Receipt_h.id = Inv_Receipt_d.Parent_ID
      --      AND Inv_Receipt_d.Transaction_move = 1 and FinishedReceipt_dID is null
      --      GROUP BY Inv_Receipt_h.Code
      --             , Inv_Receipt_h.SubsidiaryID 
      --             , Inv_Receipt_h.Branch_ID
      --             , ISNULL(Inv_Receipt_h.CostCenterID , 0)
      --             , Inv_Store.StoreAccount
      --             , a.StoreAccount
      --             , Inv_Receipt_h.ID
      --             , Inv_Receipt_h.Entry_No
				  -- ,Inv_Receipt_h.Entry_Date 

        SET @MCOUNTER = 0
        OPEN CUR_PostCostVoucher
        FETCH NEXT FROM CUR_PostCostVoucher INTO @CostAmount , @TransactionCode , @SubsidiaryID  , @BranchId , @Costcenter , @StoreAccount , @CostOfInventory , @Id , @Entryno,@VoucherDATE

        WHILE @@Fetch_Status = 0
            BEGIN
				SET @MCOUNTER = @MCOUNTER + 1;  
				--IF ISNull(@CostAmount ,0 ) = 0 or @CostAmount < 0 FETCH NEXT FROM CUR_PostCostVoucher INTO @CostAmount , @TransactionCode , @SubsidiaryID , @CurrencyId , @Rate , @BranchId , @Costcenter , @StoreAccount , @CostOfInventory , @Id , @Entryno,@VoucherDATE
                IF ISNull(@CostAmount ,0 ) = 0 set @CostAmount = 0 
				 
				SELECT  @CurrencyId =   [CurrencyID]   
				FROM [mstr_Subsidary_currency] 
				where [SubsidaryID] = @SubsidiaryID   and [BaseCurrency] = 1 
				Set @Rate = 1  
                Set @USeBranchCost = 0
				IF ISNULL(@Costcenter , 0) = 0
				Begin
				    SELECT @Costcenter = [CostCenterId]
                    FROM [dbo].[mstr_Branch]
                    WHERE Id = @BranchId
					Set @USeBranchCost = 1 
				END
                --IF isnull (@Costcenter,0) = 0  Set @Costcenter = 0
                IF ISNULL(@Reference_No , '') = ''
                    SET @Reference_No = ''

                IF ISNULL(@CostOfInventory , 0) = 0
                    SET @CostOfInventory = 0
                IF ISNULL(@StoreAccount , 0) = 0
                    SET @StoreAccount = 0

                SET @Posted = 1
                
				SELECT @PostingVouchertypeID = [PostingCostVoucher]
                FROM [Inv_Transaction_Codes]
                WHERE code = @TransactionCode;
                
				SELECT @VouchertypeID = id ,@Posted = DefaultPostingStatus
                FROM GL_VoucherType
                WHERE code = CAST(@PostingVouchertypeID AS VARCHAR(50));
				IF @Posted is Null Set @Posted = 0 
                IF ISNULL(@VouchertypeID , 0) = 0 SET @VouchertypeID = 0

                IF  (@CostOfInventory <> 0 AND @StoreAccount <> 0 AND @VouchertypeID <> 0)
                    BEGIN
                        IF @Entryno > 0
                            SELECT @CheckCode = Code
                            FROM GL_Vouchers
                            WHERE code = @Entryno
                                  AND VoucherTypeID = @VouchertypeID
                                  AND BranchID = @BranchId
                                  AND SubsidaryID = @SubsidiaryID
                        IF @CheckCode = @Entryno
                           OR @Entryno = 0
                            SELECT @Entryno = CAST(MAX(CAST(Code AS INTEGER)) + 1 AS VARCHAR(50))
                            FROM GL_Vouchers
                            WHERE VoucherTypeID = @VouchertypeID
                                  AND BranchID = @BranchId
                                  AND SubsidaryID = @SubsidiaryID
                        IF @Entryno = ''
                           OR @Entryno IS NULL
                            SET @Entryno = 1

                        IF @Lang = 'en-US'
                            BEGIN
                                IF @TransactionCode = 51
                                    SET @Memo = '  Cash Sales Cost Voucher at Date' + CAST(@VoucherDATEIn AS VARCHAR(100))
                                IF @TransactionCode = 52
                                    SET @Memo = '  Credit Sales Cost Voucher at Date' + CAST(@VoucherDATEIn AS VARCHAR(100))
                                IF @TransactionCode = 60
                                    SET @Memo = 'Issue Cost Voucher   No.' + CAST(@Entryno AS VARCHAR(100))
                                IF @TransactionCode = 61
                                    SET @Memo = 'Destruction Cost Voucher   No.' + CAST(@Entryno AS VARCHAR(100))
                                IF @TransactionCode = 53
                                    SET @Memo = 'Return Cash Sales Cost Voucher  at Date' + CAST(@VoucherDATEIn AS VARCHAR(100))
                                IF @TransactionCode = 54
                                    SET @Memo = 'Return Credit Sales Cost Voucher  at Date' + CAST(@VoucherDATEIn AS VARCHAR(100))
                                IF @TransactionCode = 63
                                    SET @Memo = 'Return Issue Cost Voucher   No.' + CAST(@Entryno AS VARCHAR(100))
                                IF @TransactionCode = 83
                                    SET @Memo = 'Adjustment Cost Voucher , No.' + CAST(@Entryno AS VARCHAR(100))
                                --IF @TransactionCode = 81
                                --    SET @Memo = 'Transfer Goods Cost Voucher , No.' + CAST(@Entryno AS VARCHAR(100))
								IF @TransactionCode = 85
                                    SET @Memo = 'GiftIssue Cost Voucher , No.' + CAST(@Entryno AS VARCHAR(100))
                            END
                            ELSE
                            BEGIN
                                IF @TransactionCode = 51
                                    SET @Memo = N'تكلفة مبيعات  نقدية , فى تاريخ  :' + CAST(@VoucherDATEIn AS VARCHAR(100))
                                IF @TransactionCode = 52
                                    SET @Memo = N'تكلفة مبيعات  بالحساب , فى تاريخ  :' + CAST(@VoucherDATEIn AS VARCHAR(100))
                                IF @TransactionCode = 60
                                    SET @Memo = N'تكلفة سند صرف ,  رقم :' + CAST(@Entryno AS VARCHAR(100))
                                IF @TransactionCode = 61
                                    SET @Memo = N'تكلفة سند اهلاك ,  رقم :' + CAST(@Entryno AS VARCHAR(100))
                                IF @TransactionCode = 53
                                    SET @Memo = N'تكلفة مردود مبيعات نقدية ,  فى تاريخ  :' + CAST(@VoucherDATEIn AS VARCHAR(100))
                                IF @TransactionCode = 54
                                    SET @Memo = N'تكلفة مردود مبيعات بالحساب , فى تاريخ  :' + CAST(@VoucherDATEIn AS VARCHAR(100))
                                IF @TransactionCode = 63
                                    SET @Memo = N'تكلفة مردود سند صرف ,  رقم :' + CAST(@Entryno AS VARCHAR(100))
                                IF @TransactionCode = 83
                                    SET @Memo = N'تكلفة سند التعديل ,  رقم :' + CAST(@Entryno AS VARCHAR(100))
                                --IF @TransactionCode = 81
                                --    SET @Memo = N'تكلفة سند التحويل ,  رقم :' + CAST(@Entryno AS VARCHAR(100))
								IF @TransactionCode = 85
                                    SET @Memo = N'تكلفة سند صرف هدايا وعينات ,  رقم :' + CAST(@Entryno AS VARCHAR(100))
                        END  
                        --header
                        INSERT INTO GL_Vouchers (code , VoucherTypeID  , BranchID  , CurrencyID   , SubsidaryID, VouhcerDate, ExchangeRate   , Memo   , ReceiptID  , Posted   , IsActive   , CostPostedSer    ,CostPostedUserId  )
                        VALUES (@Entryno ,  @VouchertypeID ,  @BranchId ,  @CurrencyId , @SubsidiaryID , @VoucherDATE , @Rate ,@Memo ,  @id , @Posted ,1 , @Ser ,@CostPostedUserId )

                        SELECT @VoucherID = id
                        FROM GL_Vouchers
                        WHERE code = @Entryno
                              AND BranchID = @BranchId
                              AND VoucherTypeID = @VouchertypeID
                              AND @SubsidiaryID = SubsidaryID
                              AND CurrencyID = @CurrencyId
                              AND CostPostedSer = @Ser
                        IF ISNULL(@VoucherID , 0) = 0
                            BEGIN
                                PRINT 'Error '
								Delete  FROM [GL_InvPostinigDate]  where id = @Ser
							END
                        ELSE
                            BEGIn
                                IF @TransactionCode IN(51 , 52 , 60 , 61 ,85)    --OR (@TransactionCode = 83 AND @CostAmount < 0)
                                    BEGIN
                                        INSERT INTO GL_VoucherDetails (VoucherID , AccountNoID   , Debit , Credit  , Memo  , DebitForeign  , CreditForeign , IsActive , costcenterid   )
                                        VALUES (@VoucherID ,    @CostOfInventory ,      @CostAmount ,     0 ,    @Memo ,     @CostAmount * @Rate ,  0 ,    1 , @Costcenter );

                                        INSERT INTO GL_VoucherDetails  (VoucherID   , AccountNoID , Debit   , Credit , Memo  , DebitForeign     , CreditForeign , IsActive  , costcenterid      )
                                        VALUES (@VoucherID ,   @StoreAccount ,   0 ,  @CostAmount ,  @Memo ,  0 ,    @CostAmount * @Rate ,   1 ,   @Costcenter  );
									IF @USeBranchCost = 1 	
										Update Inv_Receipt_h set CostPosted = 1 
										where code = @TransactionCode 
											and Branch_ID =@BranchId 
											and SubsidiaryID = @SubsidiaryID											 
											and Cast (Entry_Date as Date) <=@VoucherDATEIn
									ELSE
										Update Inv_Receipt_h set CostPosted = 1 
										where code = @TransactionCode 
											and Branch_ID =@BranchId 
											and SubsidiaryID = @SubsidiaryID
											and CostCenterID =@Costcenter
											and Cast (Entry_Date as Date) <=@VoucherDATEIn
							        END
                                IF @TransactionCode IN(53 , 54 , 63) OR (@TransactionCode = 83 AND @CostAmount >= 0)
                                    BEGIN
                                        INSERT INTO GL_VoucherDetails (VoucherID  , AccountNoID  , Debit , Credit  , Memo  , DebitForeign    , CreditForeign , IsActive  , costcenterid  )
                                        VALUES   (@VoucherID ,    @StoreAccount ,         @CostAmount ,     0 ,     @Memo ,     @CostAmount * @Rate ,    0 ,  1 ,    @Costcenter  );

                                        INSERT INTO GL_VoucherDetails      (VoucherID  , AccountNoID    , Debit   , Credit     , Memo  , DebitForeign , CreditForeign  , IsActive  , costcenterid)
                                        VALUES  (@VoucherID ,    @CostOfInventory ,      0 ,     @CostAmount ,    @Memo ,    0 ,  @CostAmount * @Rate ,    1 ,    @Costcenter );
										IF @USeBranchCost = 1 	
											Update Inv_Receipt_h set CostPosted = 1 
											where code = @TransactionCode 
												and Branch_ID =@BranchId 
												and SubsidiaryID = @SubsidiaryID											 
												and Cast (Entry_Date as Date) <=@VoucherDATEIn
										ELSE
											Update Inv_Receipt_h set CostPosted = 1 
											where code = @TransactionCode 
											and Branch_ID =@BranchId 
											and SubsidiaryID = @SubsidiaryID
											and CostCenterID =@Costcenter
											and Cast (Entry_Date as Date) <=@VoucherDATEIn
                                    END
									IF  (@TransactionCode = 83 AND @CostAmount < 0)
                                    BEGIN
                                        INSERT INTO GL_VoucherDetails (VoucherID  , AccountNoID  , Debit , Credit  , Memo  , DebitForeign    , CreditForeign , IsActive  , costcenterid  )
                                        VALUES  (@VoucherID ,    @CostOfInventory ,         -1 *  @CostAmount ,0,    @Memo  , -1 * @CostAmount * @Rate,0 ,    1 ,    @Costcenter );

                                        INSERT INTO GL_VoucherDetails      (VoucherID  , AccountNoID    , Debit   , Credit     , Memo  , DebitForeign , CreditForeign  , IsActive  , costcenterid)
                                        VALUES   (@VoucherID ,    @StoreAccount ,       0, -1 *  @CostAmount ,     @Memo ,    0, -1 * @CostAmount * @Rate ,      1 ,    @Costcenter  );
										IF @USeBranchCost = 1 	
											Update Inv_Receipt_h set CostPosted = 1 
											where code = @TransactionCode 
												and Branch_ID =@BranchId 
												and SubsidiaryID = @SubsidiaryID											 
												and Cast (Entry_Date as Date) <=@VoucherDATEIn
										ELSE
											Update Inv_Receipt_h set CostPosted = 1 
											where code = @TransactionCode 
											and Branch_ID =@BranchId 
											and SubsidiaryID = @SubsidiaryID
											and CostCenterID =@Costcenter
											and Cast (Entry_Date as Date) <=@VoucherDATEIn
                                    END
     
                              END
            END
				
            FETCH NEXT FROM CUR_PostCostVoucher INTO @CostAmount , @TransactionCode , @SubsidiaryID  , @BranchId , @Costcenter , @StoreAccount , @CostOfInventory , @Id , @Entryno,@VoucherDATE

			End		--	 End of Fetch

			Close CUR_PostCostVoucher
			Deallocate CUR_PostCostVoucher
			Declare @checkExistance int
			Select @checkExistance = Count(id ) from GL_Vouchers  where CostPostedSer = @Ser
			IF @checkExistance is null set @checkExistance = 0
			IF @checkExistance = 0  Delete   FROM  [GL_InvPostinigDate]  where id = @Ser

			SELECT id as Ser FROM [GL_InvPostinigDate] WHERE vdate = @VoucherDATEIn and subsidary=@SubsidiaryID ;
 END
GO
/****** Object:  StoredProcedure [dbo].[aa_PostCostVoucherDetails]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
CREATE PROCEDURE [dbo].[aa_PostCostVoucherDetails]
	    @ID integer,@Lang  nvarchar(50) ='en-US',@Ser integer
AS
BEGIN
	Declare    @VoucherDATE DATETime	,@checkCode nvarchar(50) 	 ,@CurrencyId integer ,@BranchId integer,@SubsidiaryID integer
	Declare   @CostOfInventory integer , @memo nvarchar(500)  ,@TransactionCode integer, @PaymentAmount numeric(18,6), @Rate numeric(18,6) 
	Declare	  @VoucherID integer,@CostAmount numeric(18,6)	,@entryno int,@VouchertypeID integer ,@PostingVouchertypeID VARCHAR(50)
	Declare   @Costcenter integer,@posted integer,@CreationDate	 date ,@LastUpdateDate date ,@CreatedByID	 integer,@UpdatedByID integer ;
	Declare   @STORE_id integer ,@StoreAccount integer,@STORE_idTo integer ,@StoreAccountTo integer, @Vouchercode nvarchar(50), @MemoComm nvarchar(50),@Reference_No nvarchar(50) 
	 
	-- [Reference_No]
	--GL_voucher  [ReferanceNo]
	 
	select   @TransactionCode = Code , @PaymentAmount = value,@Reference_No = Reference_No,@STORE_id=FromStoreID ,@STORE_idTo = ToStoreID,
			@VoucherDATE =  Entry_Date,@SubsidiaryID = SubsidiaryID,@CurrencyId = Currency_ID,@Rate =  Currency_Rate ,@BranchId =  Branch_ID,@Costcenter= CostCenterID
			,@entryno = Entry_No,  @CreationDate	 =CreationDate ,@LastUpdateDate = LastUpdateDate ,@CreatedByID = CreatedByID,@UpdatedByID =UpdatedByID
			

	from Inv_Receipt_h where id = @id 
	
	IF @TransactionCode in (81)
	Begin
		Select Distinct @StoreAccount  =  [StoreAccount] From Inv_Store   where  Inv_Store.id = @STORE_id ; 
		Select Distinct @StoreAccountTo  =  [StoreAccount] From Inv_Store   where  Inv_Store.id = @STORE_idTo ; 
		
	END
	ELSE
	BEgin
		Select Distinct @StoreAccount  =  [StoreAccount] From Inv_Store  ,Inv_Receipt_d where Parent_ID  = @id and Inv_Store.id = Inv_Receipt_d.Store_ID ; 
		Select @CostOfInventory = CostOfInventory from  Inv_Transactions_branchs_Account  where BranchID =@BranchId and [TransctionID] = @TransactionCode;
		Select   @CostAmount  =  Sum(Inv_Receipt_d_Avgcost.AvgCost * Inv_Receipt_d.qty ) From Inv_Receipt_d_Avgcost  ,Inv_Receipt_d where Parent_ID  = @id and Inv_Receipt_d_Avgcost.id = Inv_Receipt_d.ID ; 
	END
		
	IF ISNULL ( @Costcenter ,0) = 0  
	SELECT @Costcenter = [CostCenterId]   FROM  [dbo].[mstr_Branch] where Id = @BranchId

	--IF isnull (@Costcenter,0) = 0  Set @Costcenter = 0
	IF isnull (@Reference_No,'') = ''  Set @Reference_No = ''
		 
	IF isnull (@CostOfInventory,0) = 0  Set @CostOfInventory = 0
	IF isnull (@StoreAccount,0) = 0  Set @StoreAccount = 0
		 
	Set @posted = 1
	SELECT @PostingVouchertypeID =  [PostingCostVoucher] FROM [Inv_Transaction_Codes]  where code =  @TransactionCode  ;
	Select @VouchertypeID = id from  GL_VoucherType where code = Cast(@PostingVouchertypeID as varchar(50)) ;
	IF isnull (@VouchertypeID,0) = 0  Set @VouchertypeID = 0
    IF (@CostAmount > 0 and @TransactionCode not in (81,83))  or (@PaymentAmount > 0 and @TransactionCode  in (81,83)) 
	Begin
		IF @TransactionCode in (51 ,52,60,61)
		Begin
				 
			IF (@CostOfInventory <> 0 and @StoreAccount <> 0 and @VouchertypeID <>  0 )
			Begin	
				IF @Lang = 'en-US'
				Begin
					IF @TransactionCode = 51 Set @memo = 'Cash Sales Cost Voucher Invoice No.' + Cast( @entryno as varchar(100))
					IF @TransactionCode = 52 Set @memo = 'Credit Sales Cost Voucher Invoice No.' + Cast( @entryno as varchar(100))
					IF @TransactionCode = 60 Set @memo = 'Issue Cost Voucher   No.' + Cast( @entryno as varchar(100))
					IF @TransactionCode = 61 Set @memo = 'Destruction Cost Voucher   No.' + Cast( @entryno as varchar(100))
				END 
				Else
				Begin
					
					IF @TransactionCode = 51 Set @memo =N'تكلفة مبيعات نقدية , فاتورة رقم :' + Cast( @entryno as varchar(100))
					IF @TransactionCode = 52 Set @memo =N'تكلفة مبيعات بالحساب , فاتورة رقم :' + Cast( @entryno as varchar(100))
					IF @TransactionCode = 60 Set @memo =N'تكلفة سند صرف ,  رقم :' + Cast( @entryno as varchar(100))
					IF @TransactionCode = 61 Set @memo =N'تكلفة سند اهلاك ,  رقم :' + Cast( @entryno as varchar(100))
				END  
				--header

				Select @checkCode = Code from GL_Vouchers Where code  =@entryno and VoucherTypeID = @VouchertypeID and BranchID = @BranchId and SubsidaryID = @SubsidiaryID
				IF @checkCode = @entryno 
					Select @entryno = Cast(Max( Cast(Code as integer)) + 1     as varchar(50))  from GL_Vouchers Where   VoucherTypeID = @VouchertypeID and BranchID = @BranchId and SubsidaryID = @SubsidiaryID
				 
				IF @entryno = '' or @entryno is null Set @entryno =  1
				insert into GL_Vouchers (code,VoucherTypeID,BranchID,CurrencyID,SubsidaryID,VouhcerDate,ExchangeRate,Memo,ReceiptID,Posted,IsActive,CreationDate ,LastUpdateDate ,CreatedByID,UpdatedByID,ReferanceNo,CostPostedSer) 
				Values				(@entryno,@VouchertypeID,@BranchId ,@CurrencyId,@SubsidiaryID,@VoucherDATE,@Rate,@memo,@ID,@posted,1,@CreationDate , @LastUpdateDate ,@CreatedByID, @UpdatedByID,@Reference_No,@Ser)
		
				Select @VoucherID = id from GL_Vouchers where ReceiptID = @ID and CostPostedSer = @ser
				
				insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
							Values				(@VoucherID,@CostOfInventory,@CostAmount ,0,@memo,@CostAmount  * @rate,0,1,@Costcenter);
					 
				insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
												Values(@VoucherID,@StoreAccount,0,@CostAmount ,@memo,0,@CostAmount * @Rate,1,@Costcenter);
				update Inv_Receipt_h set [CostPosted] = @Ser where id = @ID 
				Return
			END
		End
		IF @TransactionCode in (53,54,63)
		Begin
				 
			IF (@CostOfInventory <> 0 and @StoreAccount <> 0 and @VouchertypeID <>  0 )
			Begin	
				IF @Lang = 'en-US'
				Begin
					IF @TransactionCode = 53 Set @memo = 'Return Cash Sales Cost Voucher ,Invoice No.' + Cast( @entryno as varchar(100))
					IF @TransactionCode = 54 Set @memo = 'Return Credit Sales Cost Voucher Invoice No.' + Cast( @entryno as varchar(100))
					IF @TransactionCode = 63 Set @memo = 'Return Issue Cost Voucher   No.' + Cast( @entryno as varchar(100)) 
				END 
				Else
				Begin
					
					IF @TransactionCode = 53 Set @memo =N'تكلفة مردود مبيعات نقدية , فاتورة رقم :' + Cast( @entryno as varchar(100))
					IF @TransactionCode = 54 Set @memo =N'تكلفة مردود مبيعات بالحساب , فاتورة رقم :' + Cast( @entryno as varchar(100))
					IF @TransactionCode = 63 Set @memo =N'تكلفة مردود سند صرف ,  رقم :' + Cast( @entryno as varchar(100))					
				END  
				--header
				
				Select @checkCode = Code from GL_Vouchers Where code  =@entryno and VoucherTypeID = @VouchertypeID and BranchID = @BranchId and SubsidaryID = @SubsidiaryID
				IF @checkCode = @entryno 
					Select @entryno = Cast(Max( Cast(Code as integer)) + 1     as varchar(50))  from GL_Vouchers Where   VoucherTypeID = @VouchertypeID and BranchID = @BranchId and SubsidaryID = @SubsidiaryID
				 
				IF @entryno = '' or @entryno is null Set @entryno =  1

				insert into GL_Vouchers (code,VoucherTypeID,BranchID,CurrencyID,SubsidaryID,VouhcerDate,ExchangeRate,Memo,ReceiptID,Posted,IsActive,CreationDate ,LastUpdateDate ,CreatedByID,UpdatedByID,ReferanceNo,CostPostedSer) 
				Values				(@entryno,@VouchertypeID,@BranchId ,@CurrencyId,@SubsidiaryID,@VoucherDATE,@Rate,@memo,@ID,@posted,1,@CreationDate , @LastUpdateDate ,@CreatedByID, @UpdatedByID,@Reference_No,@Ser)
		
				Select @VoucherID = id from GL_Vouchers where ReceiptID = @ID  and CostPostedSer = @ser

				insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
												Values(@VoucherID,@StoreAccount,@CostAmount,0 ,@memo,@CostAmount * @Rate,0,1,@Costcenter);

				insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
							Values				(@VoucherID,@CostOfInventory,0,@CostAmount ,@memo,0,@CostAmount  * @rate,1,@Costcenter);
					 
				
				update Inv_Receipt_h set [CostPosted] = @Ser where id = @ID 
				Return
			END
		End
		IF @TransactionCode = 81
		Begin
				 
			IF (@StoreAccountTo <> 0 and @StoreAccount <> 0 and @VouchertypeID <>  0 )
			Begin	
				IF @Lang = 'en-US'
				Begin
					Set @memo = 'Transfer Goods Cost Voucher , No.' + Cast( @entryno as varchar(100)) 
				END 
				Else
				Begin
					
					Set @memo =N'تكلفة سند التحويل ,  رقم :' + Cast( @entryno as varchar(100))
				END  
				--header
				
				Select @checkCode = Code from GL_Vouchers Where code  =@entryno and VoucherTypeID = @VouchertypeID and BranchID = @BranchId and SubsidaryID = @SubsidiaryID
				IF @checkCode = @entryno 
					Select @entryno = Cast(Max( Cast(Code as integer)) + 1     as varchar(50))  from GL_Vouchers Where   VoucherTypeID = @VouchertypeID and BranchID = @BranchId and SubsidaryID = @SubsidiaryID
				 
				IF @entryno = '' or @entryno is null Set @entryno =  1

				insert into GL_Vouchers (code,VoucherTypeID,BranchID,CurrencyID,SubsidaryID,VouhcerDate,ExchangeRate,Memo,ReceiptID,Posted,IsActive,CreationDate ,LastUpdateDate ,CreatedByID,UpdatedByID,ReferanceNo,CostPostedSer) 
				Values				(@entryno,@VouchertypeID,@BranchId ,@CurrencyId,@SubsidiaryID,@VoucherDATE,@Rate,@memo,@ID,@posted,1,@CreationDate , @LastUpdateDate ,@CreatedByID, @UpdatedByID,@Reference_No,@Ser)
		
				Select @VoucherID = id from GL_Vouchers where ReceiptID = @ID  and CostPostedSer = @ser

				insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
												Values(@VoucherID,@StoreAccountTo,@PaymentAmount,0 ,@memo,@PaymentAmount * @Rate,0,1,@Costcenter);

				insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
							Values				(@VoucherID,@StoreAccount,0,@PaymentAmount ,@memo,0,@PaymentAmount  * @rate,1,@Costcenter);
					 
				
				update Inv_Receipt_h set [CostPosted] = @Ser where id = @ID 
				Return
			END
		End
		IF @TransactionCode = 83
		Begin
				 
			IF (@CostOfInventory <> 0 and @StoreAccount <> 0 and @VouchertypeID <>  0 )
			Begin	
				IF @Lang = 'en-US'
				Begin
					Set @memo = 'Adjustment Cost Voucher , No.' + Cast( @entryno as varchar(100)) 
				END 
				Else
				Begin
					
					Set @memo =N'تكلفة سند التعديل ,  رقم :' + Cast( @entryno as varchar(100))
				END  
				--header
				
				Select @checkCode = Code from GL_Vouchers Where code  =@entryno and VoucherTypeID = @VouchertypeID and BranchID = @BranchId and SubsidaryID = @SubsidiaryID
				IF @checkCode = @entryno 
					Select @entryno = Cast(Max( Cast(Code as integer)) + 1     as varchar(50))  from GL_Vouchers Where   VoucherTypeID = @VouchertypeID and BranchID = @BranchId and SubsidaryID = @SubsidiaryID
				 
				IF @entryno = '' or @entryno is null Set @entryno =  1

				insert into GL_Vouchers (code,VoucherTypeID,BranchID,CurrencyID,SubsidaryID,VouhcerDate,ExchangeRate,Memo,ReceiptID,Posted,IsActive,CreationDate ,LastUpdateDate ,CreatedByID,UpdatedByID,ReferanceNo,CostPostedSer) 
				Values				(@entryno,@VouchertypeID,@BranchId ,@CurrencyId,@SubsidiaryID,@VoucherDATE,@Rate,@memo,@ID,@posted,1,@CreationDate , @LastUpdateDate ,@CreatedByID, @UpdatedByID,@Reference_No,@Ser)
		
				Select @VoucherID = id from GL_Vouchers where ReceiptID = @ID  and CostPostedSer = @ser
				IF @PaymentAmount > 0 
				Begin
					insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
													Values(@VoucherID,@StoreAccount,@PaymentAmount,0 ,@memo,@PaymentAmount * @Rate,0,1,@Costcenter);

					insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
								Values				(@VoucherID,@CostOfInventory,0,@PaymentAmount ,@memo,0,@PaymentAmount  * @rate,1,@Costcenter);
				END	 
				ELSE
				Begin
					insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
													Values(@VoucherID,@CostOfInventory,@PaymentAmount,0 ,@memo,@PaymentAmount * @Rate,0,1,@Costcenter);

					insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
								Values				(@VoucherID,@StoreAccount ,0,@PaymentAmount ,@memo,0,@PaymentAmount  * @rate,1,@Costcenter);
				END	 
				
				update Inv_Receipt_h set [CostPosted] = @Ser where id = @ID
				Return
			END
		End
	END
END
GO
/****** Object:  StoredProcedure [dbo].[aa_PostCostVoucherSales]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
CREATE PROCEDURE [dbo].[aa_PostCostVoucherSales] @VoucherDATEIn DATE
                                          , @Lang          NVARCHAR(50) = 'en-US'
                                          ,@CostPostedUserId int										  
										  ,@SubsidiaryID INTEGER
										 

AS
    BEGIN
        DECLARE @ID INTEGER , @MCOUNTER INTEGER , @CheckVoucherDATEIn DATE , @CostPosted INTEGER , @Count INTEGER,@MaxCostDate DATETime , @Ser           INTEGER 
        DECLARE @VoucherDATE DATETIME , @CheckCode NVARCHAR(50) , @CurrencyId INTEGER , @BranchId INTEGER 
        DECLARE @CostOfInventory INTEGER , @Memo NVARCHAR(500) , @TransactionCode INTEGER , @PaymentAmount NUMERIC(18 , 6) , @Rate NUMERIC(18 , 6)
        DECLARE @VoucherID INTEGER , @CostAmount NUMERIC(18 , 6) , @Entryno INT , @VouchertypeID INTEGER , @PostingVouchertypeID VARCHAR(50)
        DECLARE @Costcenter INTEGER , @Posted INTEGER , @CreationDate DATE , @LastUpdateDate DATE , @CreatedByID INTEGER , @UpdatedByID INTEGER;
        DECLARE @STORE_id INTEGER , @StoreAccount INTEGER , @STORE_idTo INTEGER , @StoreAccountTo INTEGER , @Vouchercode NVARCHAR(50) , @MemoComm NVARCHAR(50) , @Reference_No NVARCHAR(50)
		DECLARE @mAXeNTRYdATE dATEtIME
		Declare @USeBranchCost int

		Drop table CostSal_tbl ;
        SELECT @Count = COUNT(id) ,@mAXeNTRYdATE = mAX(Entry_Date )
        FROM Inv_Receipt_h
        WHERE CAST(Entry_Date AS DATE) <= @VoucherDATEIn
              AND ISNULL([CostPosted] , 0) = 0
              AND code IN(51 , 52 , 53 , 54 )
        AND (ISNULL(Is_Canceled , 0) <> 1)
        AND (ISNULL(IsHolded , 0) <> 1)
        AND id IN
        (
         SELECT parent_id
         FROM Inv_Receipt_d,inv_items
		 where inv_items.id = Inv_Receipt_d.Item_ID and isnull(inv_items.consignment,0) = 0

        )
		
        SELECT @CheckVoucherDATEIn = Max(vdate)
        FROM [GL_InvPostinigDate]
		IF @CheckVoucherDATEIn IS Null  or @CheckVoucherDATEIn = cast ('19000101' as Date) set @CheckVoucherDATEIn = cast('20000101' as date)
        IF @Count = 0 OR @Count IS NULL or @CheckVoucherDATEIn >= @VoucherDATEIn or @mAXeNTRYdATE <= @CheckVoucherDATEIn
            BEGIN
                PRINT 'No Data'
                SET @Ser = 0
                RETURN
			END

		 SET @Ser = 0
		   
        INSERT INTO [dbo].[GL_InvPostinigDate](vdate)
		Values (cast(@mAXeNTRYdATE as date));

        --VALUES(@VoucherDATEIn);

        SELECT @Ser = id
        FROM [GL_InvPostinigDate]
        WHERE vdate =cast( @mAXeNTRYdATE  as date);
		 
		IF  @CostPostedUserId Is Null Set @CostPostedUserId = 0

        SELECT  @CurrencyId =   [CurrencyID]   
						FROM [mstr_Subsidary_currency] 
						where [SubsidaryID] = @SubsidiaryID   and [BaseCurrency] = 1 
		Set @Rate = 1

         SELECT distinct SUM(Inv_Receipt_d_Avgcost.AvgCost * Inv_Receipt_d.qty * Inv_Receipt_d.Final_conv) as amount1
                 , Inv_Receipt_h.Code as Code 
                 , Inv_Receipt_h.Branch_ID as Branch_ID
                 , Inv_Receipt_h.CostCenterID as CostCenterID
                 , Inv_Store.StoreAccount as StoreAccount
                 , Inv_Transactions_branchs_Account.CostOfInventory as CostOfInventory
                 , Inv_Receipt_h.Code as code2
                 , 0 as entry_no,Cast(Inv_Receipt_h.Entry_Date as date) as Entry_Date
			into CostSal_tbl
            FROM Inv_Receipt_h , 
                 Inv_Store , 
                 Inv_Receipt_d , 
                 Inv_Receipt_d_Avgcost , 
                 Inv_Transactions_branchs_Account
            WHERE   ISNULL(Inv_Receipt_h.CostPosted , 0) = 0
                  AND Inv_Receipt_h.code IN(51,52,53,54) 
				  and  Inv_Receipt_h.SubsidiaryID  = @SubsidiaryID 
				  AND Inv_Store.id = Inv_Receipt_d.Store_ID
				  AND Inv_Receipt_d_Avgcost.id = Inv_Receipt_d.ID
				  AND Inv_Receipt_h.id = Inv_Receipt_d.Parent_ID
				  AND (Inv_Transactions_branchs_Account.BranchID = Inv_Receipt_h.Branch_ID
				  AND Inv_Transactions_branchs_Account.TransctionID = Inv_Receipt_h.code)
				  AND (ISNULL(Inv_Receipt_h.Is_Canceled , 0) <> 1)
				  AND (ISNULL(Inv_Receipt_h.IsHolded , 0) <> 1)
            GROUP BY Inv_Receipt_h.SubsidiaryID 
                   , Inv_Receipt_h.Branch_ID
                   , Inv_Receipt_h.CostCenterID
                   , Inv_Store.StoreAccount
                   , Inv_Transactions_branchs_Account.CostOfInventory, Inv_Receipt_h.Code,Cast(Inv_Receipt_h.Entry_Date as date)
          
		  --SELECT   amount1
    --             ,   Code
    --             ,   SubsidiaryID 
    --             ,   Branch_ID
    --             ,   CostCenterID
    --             ,   StoreAccount
    --             ,  CostOfInventory
    --             ,   code2
    --             ,  entry_no,  Entry_Date
				-- from CostSal_tbl
        DECLARE CUR_PostCostVoucherBase CURSOR
		 For SELECT Distinct  Code ,      Branch_ID,  Entry_Date from CostSal_tbl
		SET @MCOUNTER = 0
        OPEN CUR_PostCostVoucherBase
       -- FETCH NEXT FROM CUR_PostCostVoucher INTO @CostAmount , @TransactionCode , @SubsidiaryID  , @BranchId , @Costcenter , @StoreAccount , @CostOfInventory , @Id , @Entryno,@VoucherDATE
	   FETCH NEXT FROM CUR_PostCostVoucherBase INTO  @TransactionCode   , @BranchId ,@VoucherDATE

        WHILE @@Fetch_Status = 0
				   BEGIN
						SET @MCOUNTER = @MCOUNTER + 1; 
				 
						--IF ISNull(@CostAmount ,0 ) = 0 or @CostAmount < 0 FETCH NEXT FROM CUR_PostCostVoucher INTO @CostAmount , @TransactionCode , @SubsidiaryID , @CurrencyId , @Rate , @BranchId , @Costcenter , @StoreAccount , @CostOfInventory , @Id , @Entryno,@VoucherDATE
						IF ISNull(@CostAmount ,0 ) = 0 set @CostAmount = 0 
				 
						  
						Set @USeBranchCost = 0
						
						SET @Posted = 1
                
						SELECT @PostingVouchertypeID = [PostingCostVoucher]
						FROM [Inv_Transaction_Codes]
						WHERE code = @TransactionCode;
                
						SELECT @VouchertypeID = id ,@Posted = DefaultPostingStatus
						FROM GL_VoucherType
						WHERE code = CAST(@PostingVouchertypeID AS VARCHAR(50));
						IF @Posted is Null Set @Posted = 0 
						IF ISNULL(@VouchertypeID , 0) = 0 SET @VouchertypeID = 0

								IF @Entryno > 0
									SELECT @CheckCode = Code
									FROM GL_Vouchers
									WHERE code = @Entryno
										  AND VoucherTypeID = @VouchertypeID
										  AND BranchID = @BranchId
										  AND SubsidaryID = @SubsidiaryID
								IF @CheckCode = @Entryno
								   OR @Entryno = 0
									SELECT @Entryno = CAST(MAX(CAST(Code AS INTEGER)) + 1 AS VARCHAR(50))
									FROM GL_Vouchers
									WHERE VoucherTypeID = @VouchertypeID
										  AND BranchID = @BranchId
										  AND SubsidaryID = @SubsidiaryID
								IF @Entryno = ''
								   OR @Entryno IS NULL
									SET @Entryno = 1

								IF @Lang = 'en-US'
									BEGIN
										IF @TransactionCode = 51
											SET @Memo = '  Cash Sales Cost Voucher at Date' + CAST(@VoucherDATEIn AS VARCHAR(100))
										IF @TransactionCode = 52
											SET @Memo = '  Credit Sales Cost Voucher at Date' + CAST(@VoucherDATEIn AS VARCHAR(100))
										IF @TransactionCode = 53
											SET @Memo = 'Return Cash Sales Cost Voucher  at Date' + CAST(@VoucherDATEIn AS VARCHAR(100))
										IF @TransactionCode = 54
											SET @Memo = 'Return Credit Sales Cost Voucher  at Date' + CAST(@VoucherDATEIn AS VARCHAR(100))
                               
									END
									ELSE
									BEGIN
										IF @TransactionCode = 51
											SET @Memo = N'تكلفة مبيعات  نقدية , فى تاريخ  :' + CAST(@VoucherDATEIn AS VARCHAR(100))
										IF @TransactionCode = 52
											SET @Memo = N'تكلفة مبيعات  بالحساب , فى تاريخ  :' + CAST(@VoucherDATEIn AS VARCHAR(100))
										IF @TransactionCode = 53
											SET @Memo = N'تكلفة مردود مبيعات نقدية ,  فى تاريخ  :' + CAST(@VoucherDATEIn AS VARCHAR(100))
										IF @TransactionCode = 54
											SET @Memo = N'تكلفة مردود مبيعات بالحساب , فى تاريخ  :' + CAST(@VoucherDATEIn AS VARCHAR(100))
									END  
								--header
								INSERT INTO GL_Vouchers (code , VoucherTypeID  , BranchID  , CurrencyID   , SubsidaryID, VouhcerDate, ExchangeRate   , Memo   , ReceiptID  , Posted   , IsActive   , CostPostedSer    ,CostPostedUserId  )
								VALUES (@Entryno ,  @VouchertypeID ,  @BranchId ,  @CurrencyId , @SubsidiaryID , @VoucherDATE , @Rate ,@Memo ,  @id , @Posted ,1 , @Ser ,@CostPostedUserId )

								-- Declare 


								SELECT @VoucherID = id
								FROM GL_Vouchers
								WHERE code = @Entryno
									  AND BranchID = @BranchId
									  AND VoucherTypeID = @VouchertypeID
									  AND @SubsidiaryID = SubsidaryID
									  AND CurrencyID = @CurrencyId
									  AND CostPostedSer = @Ser
								IF ISNULL(@VoucherID , 0) = 0
									BEGIN
										PRINT 'Error '
										Delete  FROM [GL_InvPostinigDate]  where id = @Ser
									END
								ELSE
									BEGIn
								 
									DECLARE CUR_PostCostVoucherDetails CURSOR
									 For SELECT Distinct  amount1  ,   CostCenterID  ,   StoreAccount  ,CostOfInventory 
									 from CostSal_tbl 
									 where entry_date = @VoucherDATE and  code = @TransactionCode and Branch_Id =@BranchId 
									SET @MCOUNTER = 0
									OPEN CUR_PostCostVoucherDetails
								   -- FETCH NEXT FROM CUR_PostCostVoucher INTO @CostAmount , @TransactionCode , @SubsidiaryID  , @BranchId , @Costcenter , @StoreAccount , @CostOfInventory , @Id , @Entryno,@VoucherDATE
								   FETCH NEXT FROM CUR_PostCostVoucherDetails INTO  @CostAmount , @Costcenter   , @StoreAccount ,@CostOfInventory

									WHILE @@Fetch_Status = 0
											   BEGIN	
											   IF ISNULL(@Costcenter , 0) = 0
												Begin
													SELECT @Costcenter = [CostCenterId]
													FROM [dbo].[mstr_Branch]
													WHERE Id = @BranchId
													Set @USeBranchCost = 1 
												END
												--IF isnull (@Costcenter,0) = 0  Set @Costcenter = 0
												IF ISNULL(@Reference_No , '') = ''
													SET @Reference_No = ''

												IF ISNULL(@CostOfInventory , 0) = 0
													SET @CostOfInventory = 0
												IF ISNULL(@StoreAccount , 0) = 0
													SET @StoreAccount = 0
									IF  (@CostOfInventory <> 0 AND @StoreAccount <> 0 AND @VouchertypeID <> 0)
										BEGIN
							
													IF @TransactionCode IN(51 , 52 )
														BEGIN
															INSERT INTO GL_VoucherDetails (VoucherID , AccountNoID   , Debit , Credit  , Memo  , DebitForeign  , CreditForeign , IsActive , costcenterid   )
															VALUES (@VoucherID ,    @CostOfInventory ,      @CostAmount ,     0 ,    @Memo ,     @CostAmount * @Rate ,  0 ,    1 , @Costcenter );

															--INSERT INTO GL_VoucherDetails  (VoucherID   , AccountNoID , Debit   , Credit , Memo  , DebitForeign     , CreditForeign , IsActive  , costcenterid      )
															--VALUES (@VoucherID ,   @StoreAccount ,   0 ,  @CostAmount ,  @Memo ,  0 ,    @CostAmount * @Rate ,   1 ,   @Costcenter  );
														IF @USeBranchCost = 1 	
															Update Inv_Receipt_h set CostPosted = 1 
															where code = @TransactionCode 
																and Branch_ID =@BranchId 
																and SubsidiaryID = @SubsidiaryID											 
																and Cast (Entry_Date as Date) <=@VoucherDATEIn
														ELSE
															Update Inv_Receipt_h set CostPosted = 1 
															where code = @TransactionCode 
																and Branch_ID =@BranchId 
																and SubsidiaryID = @SubsidiaryID
																and CostCenterID =@Costcenter
																and Cast (Entry_Date as Date) <=@VoucherDATEIn
														END
													IF @TransactionCode IN(53 , 54 )
														BEGIN
															INSERT INTO GL_VoucherDetails (VoucherID  , AccountNoID  , Debit , Credit  , Memo  , DebitForeign    , CreditForeign , IsActive  , costcenterid  )
															VALUES   (@VoucherID ,    @StoreAccount ,         @CostAmount ,     0 ,     @Memo ,     @CostAmount * @Rate ,    0 ,  1 ,    @Costcenter  );

															--INSERT INTO GL_VoucherDetails      (VoucherID  , AccountNoID    , Debit   , Credit     , Memo  , DebitForeign , CreditForeign  , IsActive  , costcenterid)
															--VALUES  (@VoucherID ,    @CostOfInventory ,      0 ,     @CostAmount ,    @Memo ,    0 ,  @CostAmount * @Rate ,    1 ,    @Costcenter );
															IF @USeBranchCost = 1 	
																Update Inv_Receipt_h set CostPosted = 1 
																where code = @TransactionCode 
																	and Branch_ID =@BranchId 
																	and SubsidiaryID = @SubsidiaryID											 
																	and Cast (Entry_Date as Date) <=@VoucherDATEIn
															ELSE
																Update Inv_Receipt_h set CostPosted = 1 
																where code = @TransactionCode 
																and Branch_ID =@BranchId 
																and SubsidiaryID = @SubsidiaryID
																and CostCenterID =@Costcenter
																and Cast (Entry_Date as Date) <=@VoucherDATEIn
														END
									 
     
									  END
									  FETCH NEXT FROM CUR_PostCostVoucherDetails INTO  @CostAmount , @Costcenter   , @StoreAccount ,@CostOfInventory
									  End		--	 End of Fetch

									Close CUR_PostCostVoucherDetails
									Deallocate CUR_PostCostVoucherDetails
									Select @CostAmount = Sum(Debit) from GL_VoucherDetails where VoucherID = @VoucherID 
									IF @TransactionCode IN(53 , 54 )
									 
										INSERT INTO GL_VoucherDetails      (VoucherID  , AccountNoID    , Debit   , Credit     , Memo  , DebitForeign , CreditForeign  , IsActive  , costcenterid)
										VALUES  (@VoucherID ,    @CostOfInventory ,      0 ,     @CostAmount ,    @Memo ,    0 ,  @CostAmount * @Rate ,    1 ,    @Costcenter );
										
									ELSE
										INSERT INTO GL_VoucherDetails  (VoucherID   , AccountNoID , Debit   , Credit , Memo  , DebitForeign     , CreditForeign , IsActive  , costcenterid      )
															VALUES (@VoucherID ,   @StoreAccount ,   0 ,  @CostAmount ,  @Memo ,  0 ,    @CostAmount * @Rate ,   1 ,   @Costcenter  );
														
									
					END
				
           FETCH NEXT FROM CUR_PostCostVoucherBase INTO  @TransactionCode ,   @BranchId ,@VoucherDATE

			End		--	 End of Fetch

			Close CUR_PostCostVoucherBase
			Deallocate CUR_PostCostVoucherBase
			
			
 END
GO
/****** Object:  StoredProcedure [dbo].[aa_PostReceiptH_Sales]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[aa_PostReceiptH_Sales] --35948
	    @ID integer,@Lang  nvarchar(50) ='ar-KW'
AS
BEGIN

	--print '1'
	Declare @itemID Integer ,@consignment int, @DecHAmount Numeric(18,6),@Complement int,@ispostedv nvarchar(20),
						@VendoreAccount int,@memoBCOMM nvarchar(100),
						@consignmentPerc Numeric(18,6) ,@consignmentCommissionValue  Numeric(18,6) 
	Declare   @receiptID integer ,@VoucherDATE DATETime		 ,@CurrencyId integer ,@BranchId integer,@PaymentTypeID integer,@SubsidiaryID integer, @EmployeeId integer, @DepositeValue decimal(18,3), @DepositePaymentType int;
	Declare   @SalesAmount numeric(18,6)	,@DiscountAmount numeric(18,6)	,@CommissionAmount  numeric(18,6) ,@PaymentAmount numeric(18,6),@SalesAmountForign numeric(18,6)  ,@Rate numeric(18,6)    ,@CommissionPerc numeric(18,6)     ;
	Declare   @PaymentAccount integer ,@memo nvarchar(500) ,@vcode nvarchar(50) ,@CommissionAccount integer ,@SalesDiscount integer ,@SalesAccount integer,@CreditAccount integer ,@DebitAccount integer ,@TransactionCode integer
	Declare	  @VoucherID integer,@CashCoustomerID integer,@DiscountAmountForign numeric(18,6),@PaymentAmountForign numeric(18,6)
	Declare   @CommissionAmountForign Numeric(18,6),@entryno int,@VouchertypeID integer, @CashDrawerId INT
	DECLARE   @PostingVouchertypeID VARCHAR(50),@CreditCustomerAccount integer ,@deliveryaccount  int,@deliveryFees numeric(18,6),@deliveryFeesForign numeric(18,6)
	Declare   @TransactionID integer,@Costcenter integer,@posted integer,@CreationDate	 date ,@LastUpdateDate date ,@CreatedByID	 integer,@UpdatedByID integer ;
	Declare   @STORE_id integer ,@StoreAccount integer,@CommisionAccountID integer ,@CommissionNet numeric(18,6),@CommisionAccountID_1 integer ,@CommissionNet_1 numeric(18,6)  ,@OutsideSalesCommissionAcc integer
	Declare   @Vouchercode nvarchar(50), @MemoComm nvarchar(50),@Reference_No nvarchar(50)
	DECLARE   @PaymentTypeCode integer ,@CommissionAccount1 integer , @CommissionPerc1  numeric(18,3) ,@CommissionAmount1   numeric(18,3),@CommissionAmount1tot   numeric(18,3)
	Declare	  @SalesAccount1 integer ,@SalesAmount1 numeric (18,6)
	Declare   @detailID integer ,@MCOUNTER integer ,@Discount_Percent  numeric(18,3)
	Declare   @item_id INTEGER ,@AT_DATE DATETime,@LD_COSTPRICE numeric(18,3)  ,  @LD_QTY numeric(18,3) ,@item_type  integer
				, @move INTEGER , @PosedOrUnPosted int ;
	 
	    Declare @CancelPOsting bit
	    SELECT top 1 @CancelPOsting =  [Financial]  FROM [dbo].[_SETTINGS]
		IF @CancelPOsting is null Set @CancelPOsting = 0 
		IF @CancelPOsting <> 1 Return
			select  @receiptID = id from Inv_Receipt_h where Is_Canceled = 1 and id = @id 
			IF @receiptID is null Set @receiptID = 0
			IF @receiptID > 0 
			Begin
				Delete from GL_VoucherDetails where VoucherID = (Select id from GL_Vouchers where ReceiptID = @receiptID )
				Delete from GL_Vouchers where ReceiptID = @receiptID
				Return
			END
			
			declare @originalMemo nvarchar(500)
			declare @TaxMemo nvarchar(500) = ''
			declare @TaxValue numeric(18,6)
			declare @TaxAccount int
		select  @receiptID = id ,@TransactionCode = Code ,@CashCoustomerID =CashCustomerID,@PaymentTypeID = Payment_Type,@CreditCustomerAccount = Vendor_ID,
				@VoucherDATE =  Entry_Date,@SubsidiaryID = SubsidiaryID,@CurrencyId = Currency_ID,@Rate =  Currency_Rate ,@BranchId =  Branch_ID,@Costcenter= CostCenterID
			,@SalesAmount =Value,@SalesAmountForign =ValueForeign  ,@DiscountAmount = Discount_Value,@DiscountAmountForign = Discount_ForeignValue
				,@PaymentAmount = NetValue,@PaymentAmountForign = NetValueForeign ,@entryno = Entry_No, @CashDrawerId = CashDrawerId, @EmployeeId = Empoyee_ID,@deliveryFees = deliveryFees,
				@DepositeValue = Deposite, @DepositePaymentType = DepositePaymentTypeId,@CreationDate	 =CreationDate ,@LastUpdateDate = LastUpdateDate ,@CreatedByID = CreatedByID,@UpdatedByID =UpdatedByID,
		 @CommisionAccountID =CommisionAccountID ,@CommissionNet = CommissionNet ,@CommisionAccountID_1 =CommisionAccountID1 ,@CommissionNet_1 = CommissionNet1 ,@Discount_Percent = [Discount_Percent],@Reference_No = Reference_No
		,@originalMemo = Memo,@TaxValue = Inv_Receipt_h.SurchargeValue
		from Inv_Receipt_h where id = @id and isnull(IsHolded,0) <> 1 and  isnull(Is_Canceled ,0) <> 1  and code not in (60,61,63,81,83)
		--print @TaxValue
		 Select @TaxMemo=TaxName FROM [dbo].Mstr_TaxSetting WHERE Mstr_TaxSetting.SubsidiaryId = @SubsidiaryID
		Set @CommissionAmount1tot = 0 
	 	Select @SalesAccount = AccountID from  Inv_Transactions_branchs_Account  where BranchID =@BranchId and [TransctionID] = @TransactionCode;
		--print '@SalesAccount ='+ Cast(@SalesAccount as varchar(100))
		--print '@@BranchId ='+ Cast(@BranchId as varchar(100))
		--print '@@TransactionCode ='+ Cast(@TransactionCode as varchar(100))
		Select  @SalesDiscount = RecivableAccount  ,@deliveryaccount = deliveryaccount,@OutsideSalesCommissionAcc =  OutsideSalesCommissionAcc FROM [dbo].[Inv_Posting] WHERE [branchid] = @BranchId -- add deliveryaccount in [Inv_Posting]  as credit -- ??????? ???? ???? ?????? ?????? ??? ????? 
		
		IF @TaxValue is null  
			set @TaxValue = 0
		ELSE
		Begin 
			  IF @Lang   ='en-US'and  @TaxMemo is null  Set @TaxMemo = 'Tax OF' ELSE if  @TaxMemo is null  SET @TaxMemo = 'الضريبه ل'
		END
		 --print @TaxAccount
		IF @TaxAccount is null set @TaxAccount = 0
		Declare @PercentageOrValue int ,@Percentage numeric(18,3),@Value numeric (18,3)

		--- new 23/09/2019
		--Select * from  Inv_Posting_PaymentTypes 	where BranchID = 42
		Select @PaymentAccount = AccountID ,@CommissionAccount = [CommissionAccount] ,@CommissionPerc =CommissionPerc 
			  ,@PercentageOrValue =PercentageOrValue ,@Percentage  = Percentage,@Value	= Value
		from  Inv_Posting_PaymentTypes 		
		 where PaymentTypeID= @PaymentTypeID and @BranchId = BranchId;
		IF @PercentageOrValue is null set @PercentageOrValue = 0 
		IF @CommissionPerc is null set @CommissionPerc = 0 
		IF @Percentage is null set @Percentage = 0 
		IF @Value is null set @Value = 0 

		IF @PercentageOrValue = 0 Set @CommissionAmount = @CommissionPerc * @PaymentAmount / 100
		IF @PercentageOrValue = 1 Set @CommissionAmount = @CommissionPerc --* @PaymentAmount / 100
		IF @PercentageOrValue = 2 Set @CommissionAmount = (@Percentage * @PaymentAmount / 100 ) + @Value		 
		 ---------end 23/09/2019

		 IF @CommissionAmount IS NUll Set @CommissionAmount = 0
		IF ISNULL ( @Costcenter ,0) = 0  
		SELECT @Costcenter = [CostCenterId]   FROM  [dbo].[mstr_Branch] where Id = @BranchId

		--IF isnull (@Costcenter,0) = 0  Set @Costcenter = 0
		IF isnull (@Reference_No,'') = ''  Set @Reference_No = ''
		IF @originalMemo is null set @originalMemo = ''
		IF isnull (@Discount_Percent,0) = 0  Set @Discount_Percent = 0
		IF isnull (@DiscountAmount,0) = 0  Set @DiscountAmount = 0
		IF isnull (@PaymentAccount,0) = 0  Set @PaymentAccount = 0
		IF isnull (@SalesDiscount,0) = 0  Set @SalesDiscount = 0
		IF isnull (@SalesAccount,0) = 0  Set @SalesAccount = 0
		IF isnull (@deliveryFees,0) = 0  Set @deliveryFees = 0
		IF @Reference_No <> '' and @originalMemo <>'' set @originalMemo = @originalMemo + ' Reference_No = ' + @Reference_No
 
		Set @deliveryFeesForign = @deliveryFees * @rate
 
		IF isnull (@CommissionPerc,0) = 0  Set @CommissionPerc = 0
		IF isnull (@Rate,1.000000) = 1.000000            Set @Rate = 1.000000
		IF isnull (@CommissionAmountForign,0) = 0  Set @CommissionAmountForign = 0
		IF isnull (@SalesAmountForign,0) = 0  Set @SalesAmountForign = 0 
		IF isnull (@DiscountAmountForign,0) = 0  Set @DiscountAmountForign = 0
		IF isnull (@PaymentAmountForign,0) = 0  Set @PaymentAmountForign = 0
  
	Set @posted = 0
	SELECT @PostingVouchertypeID = [PostingVoucher]  FROM [Inv_Transaction_Codes]  where code =  @TransactionCode  ;
	Select @VouchertypeID = id ,@posted = DefaultPostingStatus   from  GL_VoucherType where code = Cast(@PostingVouchertypeID as varchar(50)) ;
	IF @posted is null Set @posted = 0
	Set @PaymentTypeCode = (SELECT Code FROM Inv_PaymentType WHERE id = @PaymentTypeID)
	IF @Rate != 1 Set @CommissionAmountForign = @CommissionAmount *  @Rate
	Declare @testCodeExistance int,@newCode nvarchar(100)



	Select @newCode  =Cast(max(cast (code as int))  as nvarchar(100)) from gl_vouchers where  isnull(ReceiptID ,0) = @receiptID

	IF @newCode is null
	Begin
		Select @testCodeExistance = id from GL_Vouchers where VoucherTypeID = @VouchertypeID and code =@entryno  and  BranchID = @BranchId and isnull(ReceiptID ,0) <> @receiptID
		IF @testCodeExistance is null set @testCodeExistance =0

		IF @testCodeExistance > 0 
		Begin
			Select @newCode  =Cast(max(cast (code as int)) + 1  as nvarchar(100)) from gl_vouchers where VoucherTypeID = @VouchertypeID   and  BranchID = @BranchId   and isnull(ReceiptID ,0) <> @receiptID
		END
		ELSE set @newCode = @entryno
	end
	IF @Lang = 'en-US'
	Begin 
					Set @memoBCOMM = 'Commission'
	END 
	Else
	Begin 
						Set @memoBCOMM = N'عمولة   '
	END 

	--print 'befor 51'
	--print '@SalesAccount ='+ Cast(@SalesAccount as varchar(100))
		--print '@SalesAmount =' + Cast(@SalesAmount as varchar(100))
		--print '@@PaymentAccount =' + Cast(@PaymentAccount as varchar(100)) 
		--print '@@PaymentTypeCode =' +         Cast(@PaymentTypeCode as varchar(100)) 
		--print '@@PaymentAmount ='+   Cast(@PaymentAmount as varchar(100)) 

		--print '@@DiscountAmount ='+    Cast(@DiscountAmount as varchar(100)) 	
		--print '@@PaymentAccount ='+    Cast(@PaymentAccount as varchar(100)) 
	--	--print '@@PaymentTypeCode ='+ @PaymentTypeCode
	Select @TaxAccount = Mstr_TaxSetting.SalesAccountId   FROM [dbo].Mstr_TaxSetting WHERE Mstr_TaxSetting.SubsidiaryId = @SubsidiaryID
		IF @TransactionCode = 51 
		Begin
				--print 'after 51'
				-- POS Customized Region - Added By Mostafa Emad (Please Contact me in the case of Changing in any part Here
				IF (@CashDrawerId IS NOT NULL)
				BEGIN
				 IF (@CashDrawerId IS NOT NULL)
					BEGIN
						Select @ispostedv = Value from mstr_ConfigurationParameter where name =   'IsPosted'
						IF @ispostedv = 'true' Set @posted = 1 else set @posted = 0
					END
				END
		 


			--IF @PaymentAmount = 0 
			--Begin
			--	IF @CommissionPerc = 100 Set  @PaymentAmount = @DiscountAmount
			--END
			----print 'befor 51 check'
			----print @PaymentAccount
			--[aa_PostReceiptH_Sales]  50547
		--	Select * from Inv_Receipt_d where id = 50547
		
			IF (@SalesAccount <> 0 /*and @SalesAmount > 0*/) and ( @PaymentAccount <> 0 or @PaymentTypeCode = 0 )  and (@PaymentAmount >= 0 or @Discount_Percent = 100)   and ((@DiscountAmount > 0 and @SalesDiscount <> 0 ) or (@DiscountAmount = 0) )  and ((@CommissionAmount > 0 and @CommissionAccount <> 0 ) or (@CommissionAmount = 0) ) 
			Begin	
			--print 'after 51 check'
			IF @originalMemo = ''
			Begin
				IF @Lang = 'en-US'
				Begin
							   Set @memo = 'Cash Sales Invoice No.' + Cast( @entryno as varchar(100))
							   Set @MemoComm = 'External Commission'
							   Set @memoBCOMM = 'Commission'
				END 
				Else
				Begin
							   Set @memo =N'مبيعات نقدية , فاتورة رقم :' + Cast( @entryno as varchar(100))
							   Set @MemoComm = N'عمولة خارجيه '
							     Set @memoBCOMM = N'عمولة   '
				END 
			END
			ELSE
			SET @memo = @originalMemo
				Delete from GL_VoucherPayments where VoucherID = (Select id from GL_Vouchers where ReceiptID = @receiptID and InvoiceInstallmentsDetailsId is null)
				Delete from GL_VoucherDetails where VoucherID = (Select id from GL_Vouchers where ReceiptID = @receiptID and InvoiceInstallmentsDetailsId is null)
				Delete from GL_Vouchers where ReceiptID = @receiptID and InvoiceInstallmentsDetailsId is null
				
				IF @@ERROR <> 0  SELECT   ERROR_MESSAGE() ;
				IF @@ERROR <> 0  return
				--header
				Select @TaxAccount = Mstr_TaxSetting.SalesAccountId ,@TaxMemo=TaxName FROM [dbo].Mstr_TaxSetting WHERE Mstr_TaxSetting.SubsidiaryId = @SubsidiaryID
				insert into GL_Vouchers (code,VoucherTypeID,BranchID,CurrencyID,SubsidaryID,VouhcerDate,ExchangeRate,Memo,ReceiptID,Posted,IsActive,CreationDate ,LastUpdateDate ,CreatedByID,UpdatedByID,ReferanceNo) 
				Values				(@newCode,@VouchertypeID,@BranchId ,@CurrencyId,@SubsidiaryID,@VoucherDATE,@Rate,@memo,@receiptID,@posted,1,@CreationDate , @LastUpdateDate ,@CreatedByID, @UpdatedByID,@Reference_No)
				IF @PaymentAmount = 0   Return
				Select @VoucherID = id from GL_Vouchers where ReceiptID = @receiptID
				
				--Discount
				IF @DiscountAmount > 0  insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid)
												Values (@VoucherID,@SalesDiscount,@DiscountAmount,0,@memo,@DiscountAmountForign,0,1,@Costcenter)

				IF @PaymentTypeCode = 0 
				Begin
					Declare CUR_MultiPayment  cursor For  
					 
					SELECT   [PaymentTypeId],[Amount] FROM  [Inv_ReceiptMultiPayment] where [ReceiptId] = @id
					SET @MCOUNTER = 0
					OPEN CUR_MultiPayment 
					Fetch Next From CUR_MultiPayment Into @paymentTypeID ,@PaymentAmount

					While @@Fetch_Status = 0 Begin  
					Select @PaymentAccount = AccountID ,@CommissionAccount1 = [CommissionAccount] 
						  ,@CommissionPerc1 =CommissionPerc 
						  ,@PercentageOrValue =PercentageOrValue ,@Percentage  = Percentage
						  ,@Value	= Value
					from  Inv_Posting_PaymentTypes 		
					 where PaymentTypeID= @PaymentTypeID and @BranchId = BranchId;
					IF @PercentageOrValue is null set @PercentageOrValue = 0 
					IF @CommissionPerc1 is null set @CommissionPerc1 = 0 
					IF @Percentage is null set @Percentage = 0 
					IF @Value is null set @Value = 0 
					--aa_PostReceiptH_Sales 198542

					IF @PercentageOrValue = 0 Set @CommissionAmount1 = @CommissionPerc1 * @PaymentAmount / 100
					IF @PercentageOrValue = 1 Set @CommissionAmount1 = @CommissionPerc1 --* @PaymentAmount / 100
					IF @PercentageOrValue = 2 Set @CommissionAmount1 = (@Percentage * @PaymentAmount / 100 ) + @Value
					 
					IF @PaymentAccount  = 0 
					Begin

					    Delete from GL_VoucherPayments where VoucherID = (Select id from GL_Vouchers where ReceiptID = @receiptID and InvoiceInstallmentsDetailsId is null)
						Delete from GL_VoucherDetails where VoucherID = (Select id from GL_Vouchers where ReceiptID = @receiptID and InvoiceInstallmentsDetailsId is null)
						Delete from GL_Vouchers where ReceiptID = @receiptID and InvoiceInstallmentsDetailsId is null
						
						IF @@ERROR <> 0  SELECT  ERROR_MESSAGE() ;
						IF @@ERROR <> 0  return
				
						--print 'Enter Payment Account of Payment Type id  = ' + Cast(@PaymentTypeID as varchar(10))
						Return
					END
					ELSE
					--print '  (@Discount_Percent =  100 and @PaymentAmount> 0) @PaymentAmount =' + cast(@PaymentAmount as nvarchar(100))
					--print '  (@Discount_Percent =  100 and @PaymentAmount> 0) @Discount_Percent =' +cast( @Discount_Percent as  nvarchar(100))
						if @Discount_Percent <> 100 or (@Discount_Percent =  100 and @PaymentAmount> 0) insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
														 Values (@VoucherID,@PaymentAccount,@PaymentAmount,0,@memo,@PaymentAmount  * @rate,0,1,@Costcenter);

						IF @CommissionAmount1   > 0   insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
						Values(@VoucherID,@CommissionAccount1,@CommissionAmount1,0,@memoBCOMM + ' '+ @memo ,@CommissionAmount1 * @Rate,0,1,@Costcenter)	;

						if @CommissionAmount1   > 0  insert into GL_VoucherDetails(VoucherID,AccountNoID,Credit,Debit,Memo,CreditForeign,DebitForeign,IsActive,costcenterid) 
														 Values (@VoucherID,@PaymentAccount,@CommissionAmount1,0,@memoBCOMM + ' '+ @memo,@CommissionAmount1  * @rate,0,1,@Costcenter);
						--Set   @CommissionAmount1tot =  @CommissionAmount1tot + @CommissionAmount1
				 	Fetch Next From CUR_MultiPayment Into  @paymentTypeID ,@PaymentAmount

					End		--	 End of Fetch

					Close CUR_MultiPayment
					Deallocate CUR_MultiPayment
				END
				ELSE
				Begin
					-- Net
					if @Discount_Percent <> 100 or (@Discount_Percent =  100 and @PaymentAmount> 0) insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid)
													  Values (@VoucherID,@PaymentAccount,@PaymentAmount,0,@memo,@PaymentAmountForign,0,1,@Costcenter);
				END 

				-- Commission
				IF isnull (@CommisionAccountID,0) <> 0 and  isnull (@CommissionNet,0) <> 0 and  isnull (@OutsideSalesCommissionAcc,0) <> 0 
				Begin
					insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
												Values(@VoucherID,@OutsideSalesCommissionAcc,@CommissionNet,0, @MemoComm+ @memo,@CommissionNet * @rate,0,1,@Costcenter)	;
				
					 insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
												Values(@VoucherID,@CommisionAccountID,0,@CommissionNet,  @MemoComm +@memo,0,@CommissionNet * @Rate ,1,@Costcenter);
				END 
				IF isnull (@CommisionAccountID_1,0) <> 0 and  isnull (@CommissionNet_1,0) <> 0 and  isnull (@OutsideSalesCommissionAcc,0) <> 0 
				Begin
					insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
												Values(@VoucherID,@OutsideSalesCommissionAcc,@CommissionNet_1,0, @MemoComm+ @memo,@CommissionNet_1 * @rate,0,1,@Costcenter)	;
				
					 insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
												Values(@VoucherID,@CommisionAccountID_1,0,@CommissionNet_1,  @MemoComm +@memo,0,@CommissionNet_1 * @Rate ,1,@Costcenter);
				END
				IF @CommissionAmount   > 0  insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
												Values(@VoucherID,@CommissionAccount,@CommissionAmount,0,@memoBCOMM +' '+@memo,@CommissionAmount * @Rate,0,1,@Costcenter)	;
				
				--Salse
				--sELECT * FROM Inv_Receipt_h WHERE Entry_No  = 185870

				
				Declare CUR_ServiceItem  cursor For  
					 
					SELECT Inv_Receipt_d.Item_ID, Inv_Items_SalesPostingAccounts.AccountId ,
							(Total - isnull(H_Discount_Value,0)) * (Inv_Items_SalesPostingAccounts.Percentage /100) ,isnull(H_Discount_Value,0),Complement
					FROM  Inv_Receipt_d ,Inv_Items_SalesPostingAccounts 
					where Parent_ID = @id and
					      Inv_Receipt_d.Item_ID  = Inv_Items_SalesPostingAccounts.ItemId and
					      Inv_Items_SalesPostingAccounts.AccountId is not null 

				OPEN CUR_ServiceItem 
					Fetch Next From CUR_ServiceItem Into @itemID, @SalesAccount1 ,@SalesAmount1,@DecHAmount,@Complement

					While @@Fetch_Status = 0 Begin  
						Select @consignment = consignment , @consignmentPerc = consignment_commission from inv_items where id = @itemID
						IF @consignment = 1
						Begin
							Set @SalesAmount = @SalesAmount - @SalesAmount1
							Select top 1 @VendoreAccount = VendorID from Inv_Items_Vendors where ItemID = @itemID
							Set @consignmentCommissionValue = @SalesAmount1 * @consignmentPerc / 100
							Set @SalesAmount1 = @SalesAmount1 - @consignmentCommissionValue
							IF @SalesAmount1  > 0  insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
								Values				(@VoucherID,@VendoreAccount ,0,@SalesAmount1,@memo,0,@SalesAmount1 * @Rate ,1,@Costcenter);	
							IF @consignmentCommissionValue  > 0  insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
								Values				(@VoucherID,@SalesAccount1,0,@consignmentCommissionValue,@memo,0,@consignmentCommissionValue * @Rate ,1,@Costcenter);
						END
						ELSE
						Begin
							IF @DecHAmount > 0  and @Complement = 1 Set @SalesAmount1 = @SalesAmount1 + @DecHAmount
							Set @SalesAmount = @SalesAmount - @SalesAmount1
							IF @SalesAmount1  > 0  insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
								Values				(@VoucherID,@SalesAccount1,0,@SalesAmount1,@memo,0,@SalesAmount1 * @Rate ,1,@Costcenter);	
						END
				 	Fetch Next From CUR_ServiceItem Into @itemID, @SalesAccount1 ,@SalesAmount1,@DecHAmount,@Complement
					
					End		--	 End of Fetch

			Close CUR_ServiceItem
			Deallocate CUR_ServiceItem


			
			Declare CUR_ConsigmentItem  cursor For  
					 
				SELECT Inv_Receipt_d.Item_ID , consignment ,  consignment_commission,
						Sum(Total - isnull(H_Discount_Value,0)) 
				FROM  Inv_Receipt_d ,Inv_Items 
				where Parent_ID = @id and
					    Inv_Receipt_d.Item_ID  = Inv_Items.ID and
					    Inv_Items.consignment = 1 
						Group By Item_ID ,  consignment ,  consignment_commission

			
			OPEN CUR_ConsigmentItem 
				Fetch Next From CUR_ConsigmentItem Into @itemID ,@consignment ,@consignmentPerc ,@SalesAmount1

				While @@Fetch_Status = 0 Begin  
						Set @SalesAmount = @SalesAmount - @SalesAmount1
						Select top 1 @VendoreAccount = VendorID from Inv_Items_Vendors where ItemID = @itemID
						Set @consignmentCommissionValue = @SalesAmount1 * @consignmentPerc / 100
						Set @SalesAmount1 = @SalesAmount1 - @consignmentCommissionValue
						IF @SalesAmount1  > 0  insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
							Values				(@VoucherID,@VendoreAccount ,0,@SalesAmount1,@memo,0,@SalesAmount1 * @Rate ,1,@Costcenter);	
						IF @consignmentCommissionValue  > 0  insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
							Values				(@VoucherID,@SalesAccount,0,@consignmentCommissionValue,@memoBCOMM + ' ' + @memo ,0,@consignmentCommissionValue * @Rate ,1,@Costcenter);
					 
				Fetch Next From CUR_ConsigmentItem Into @itemID ,@consignment ,@consignmentPerc ,@SalesAmount1
					
				End		--	 End of Fetch

		Close CUR_ConsigmentItem
		Deallocate CUR_ConsigmentItem


				
				--IF @CommissionAmount1tot > 0 insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
				--	Values				(@VoucherID,@SalesAccount,0,@CommissionAmount1tot,@memo,0,@CommissionAmount1tot * @Rate,1,@Costcenter);			

					
				-- (Commission * -1 )
				IF @CommissionAmount   > 0  insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
												Values(@VoucherID,@PaymentAccount,0,@CommissionAmount,@memoBCOMM+ ' '+@memo ,0,@CommissionAmountForign,1,@Costcenter);
				IF @deliveryFees > 0 AND @deliveryaccount is not null   insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
												Values(@VoucherID,@deliveryaccount,0,@deliveryFees,@memo,0,@deliveryFeesForign,1,@Costcenter);
				IF @TaxAccount >0 and @TaxValue > 0  insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
					Values				(@VoucherID,@TaxAccount,0,@TaxValue,@TaxMemo + ' '+@memo,0,@TaxValue * @Rate,1,@Costcenter);			
				IF @SalesAmount > 0 insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
				Values				(@VoucherID,@SalesAccount,0,@SalesAmount,@memo,0,@SalesAmountForign,1,@Costcenter);			

				Return
			END
		END
	Select @TaxAccount = Mstr_TaxSetting.SalesReturnAccountId   FROM [dbo].Mstr_TaxSetting WHERE Mstr_TaxSetting.SubsidiaryId = @SubsidiaryID
	IF (@TransactionCode = 53 ) AND ((@SalesAccount <> 0 and @SalesAmount >= 0 and( (@PaymentAccount <> 0 and @PaymentAmount >= 0 ) or @PaymentTypeCode = 0   ) and ((@DiscountAmount > 0 and @SalesDiscount <> 0 ) or (@DiscountAmount = 0) ) ) and ((@CommissionAmount > 0 and @CommissionAccount <> 0 ) or (@CommissionAmount = 0) ) )
		Begin	 
		IF @originalMemo = ''
		Begin
		--Set @TaxAccount = null
			IF @Lang = 'en-US'
					Begin
								   Set @memo = 'Cash Return Invoice No.' + Cast( @entryno as varchar(100))
								    
					END 
					Else
					Begin
								   Set @memo =N' مردود مبيعات نقدية , فاتورة رقم :' + Cast( @entryno as varchar(100))
						 
					END 
			END
			ELSE
			SET @memo = @originalMemo
					Delete from GL_VoucherPayments where VoucherID = (Select id from GL_Vouchers where ReceiptID = @receiptID and InvoiceInstallmentsDetailsId is null)
					Delete from GL_VoucherDetails where VoucherID = (Select id from GL_Vouchers where ReceiptID = @receiptID and InvoiceInstallmentsDetailsId is null)
					Delete from GL_Vouchers where ReceiptID = @receiptID and InvoiceInstallmentsDetailsId is null
					
					IF @@ERROR <> 0  SELECT  ERROR_MESSAGE() ;
					IF @@ERROR <> 0  return
				
					--header
					insert into GL_Vouchers (code,VoucherTypeID,BranchID,CurrencyID,SubsidaryID,VouhcerDate,ExchangeRate,Memo,ReceiptID,Posted,IsActive,CreationDate ,LastUpdateDate ,CreatedByID,UpdatedByID,ReferanceNo)  
					Values				(@newCode,@VouchertypeID,@BranchId ,@CurrencyId,@SubsidiaryID,@VoucherDATE,@Rate,@memo,@receiptID,@posted,1,@CreationDate ,@LastUpdateDate ,@CreatedByID,@UpdatedByID,@Reference_No) 
		
					Select @VoucherID = id from GL_Vouchers where ReceiptID = @receiptID
					IF @PaymentAmount = 0   Return
					--Salse
				
			--Before Debit sales
			    
				print 'tax return1'
					print @TaxAccount
			
				IF @TaxAccount >0 and @TaxValue > 0  insert into GL_VoucherDetails(VoucherID,AccountNoID,Credit,Debit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
					Values				(@VoucherID,@TaxAccount,0,@TaxValue,@TaxMemo + ' '+@memo,0,@TaxValue * @Rate,1,@Costcenter);			
					print 'tax return2'
					print @TaxAccount
				Declare CUR_ServiceItem  cursor For  
					 
					SELECT Inv_Receipt_d.Item_ID, Inv_Items_SalesPostingAccounts.AccountId ,
							(Total - isnull(H_Discount_Value,0)) * (Inv_Items_SalesPostingAccounts.Percentage /100) ,isnull(H_Discount_Value,0),Complement
					FROM  Inv_Receipt_d ,Inv_Items_SalesPostingAccounts 
					where Parent_ID = @id and
					      Inv_Receipt_d.Item_ID  = Inv_Items_SalesPostingAccounts.ItemId and
					      Inv_Items_SalesPostingAccounts.AccountId is not null 
						  order by Complement asc

				OPEN CUR_ServiceItem 
					Fetch Next From CUR_ServiceItem Into @itemID, @SalesAccount1 ,@SalesAmount1 ,@DecHAmount,@Complement

					While @@Fetch_Status = 0 Begin  
						Select @consignment = consignment , @consignmentPerc = consignment_commission from inv_items where id = @itemID
						IF @consignment = 1
						Begin
							Set @SalesAmount = @SalesAmount - @SalesAmount1
							Select top 1 @VendoreAccount = VendorID from Inv_Items_Vendors where ItemID = @itemID
							Set @consignmentCommissionValue = @SalesAmount1 * @consignmentPerc / 100
							Set @SalesAmount1 = @SalesAmount1 - @consignmentCommissionValue
							IF @SalesAmount1  > 0  insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
								Values				(@VoucherID,@VendoreAccount ,@SalesAmount1,0,@memo,@SalesAmount1 * @Rate ,0,1,@Costcenter);	
							IF @consignmentCommissionValue  > 0  insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
								Values				(@VoucherID,@SalesAccount1,@consignmentCommissionValue,0,@memoBCOMM + ' '+ @memo,@consignmentCommissionValue * @Rate,0 ,1,@Costcenter);
						END
						ELSE
						Begin
							IF @DecHAmount > 0  and @Complement = 1 Set @SalesAmount1 = @SalesAmount1 + @DecHAmount
							Set @SalesAmount = @SalesAmount - @SalesAmount1
							IF @SalesAmount1  > 0  insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
								Values				(@VoucherID,@SalesAccount1,@SalesAmount1,0,@memo,@SalesAmount1 * @Rate ,0,1,@Costcenter);	
						END
				 	Fetch Next From CUR_ServiceItem Into @itemID, @SalesAccount1 ,@SalesAmount1,@DecHAmount,@Complement
					
					End		--	 End of Fetch

			Close CUR_ServiceItem
			Deallocate CUR_ServiceItem


			
			Declare CUR_ConsigmentItem  cursor For  
					 
				SELECT Inv_Receipt_d.Item_ID , consignment ,  consignment_commission,
						Sum(Total - isnull(H_Discount_Value,0)) 
				FROM  Inv_Receipt_d ,Inv_Items 
				where Parent_ID = @id and
					    Inv_Receipt_d.Item_ID  = Inv_Items.ID and
					    Inv_Items.consignment = 1 
						Group By Item_ID ,  consignment ,  consignment_commission

			
			OPEN CUR_ConsigmentItem 
				Fetch Next From CUR_ConsigmentItem Into @itemID ,@consignment ,@consignmentPerc ,@SalesAmount1

				While @@Fetch_Status = 0 Begin  
						Set @SalesAmount = @SalesAmount - @SalesAmount1
						Select top 1 @VendoreAccount = VendorID from Inv_Items_Vendors where ItemID = @itemID
						Set @consignmentCommissionValue = @SalesAmount1 * @consignmentPerc / 100
						Set @SalesAmount1 = @SalesAmount1 - @consignmentCommissionValue
						IF @SalesAmount1  > 0  insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
							Values				(@VoucherID,@VendoreAccount ,0,@SalesAmount1,@memo,0,@SalesAmount1 * @Rate ,1,@Costcenter);	
						IF @consignmentCommissionValue  > 0  insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
							Values				(@VoucherID,@SalesAccount,0,@consignmentCommissionValue,@memoBCOMM+ ' '+@memo ,0,@consignmentCommissionValue * @Rate ,1,@Costcenter);
					 
				Fetch Next From CUR_ConsigmentItem Into @itemID ,@consignment ,@consignmentPerc ,@SalesAmount1
					
				End		--	 End of Fetch

		Close CUR_ConsigmentItem
		Deallocate CUR_ConsigmentItem

				IF @SalesAmount > 0				
						insert into GL_VoucherDetails(VoucherID,AccountNoID,Credit,Debit,Memo,CreditForeign,DebitForeign,IsActive,costcenterid) 
						Values				(@VoucherID,@SalesAccount,0,@SalesAmount,@memo,0,@SalesAmountForign,1,@Costcenter);
							-- (Commission * -1 )
					IF @CommissionAmount  > 0  insert into GL_VoucherDetails(VoucherID,AccountNoID,Credit,Debit,Memo,CreditForeign,DebitForeign,IsActive,costcenterid)  
						Values				(@VoucherID,@PaymentAccount,0,@CommissionAmount,@memoBCOMM+ ' '+@memo ,0,@CommissionAmountForign,1,@Costcenter);

					IF @deliveryFees > 0 AND @deliveryaccount is not null  insert into GL_VoucherDetails(VoucherID,AccountNoID,Credit,Debit,Memo,CreditForeign,DebitForeign,IsActive,costcenterid)  
												Values(@VoucherID,@deliveryaccount,0,@deliveryFees,@memo,0,@deliveryFeesForign,1,@Costcenter);
					--Discount
					IF @DiscountAmount  > 0 insert into GL_VoucherDetails(VoucherID,AccountNoID,Credit,Debit,Memo,CreditForeign,DebitForeign,IsActive,costcenterid)  
						Values				(@VoucherID,@SalesDiscount,@DiscountAmount,0,@memo,@DiscountAmountForign,0,1,@Costcenter);
						-- Commission
					IF @CommissionAmount  > 0  insert into GL_VoucherDetails(VoucherID,AccountNoID,Credit,Debit,Memo,CreditForeign,DebitForeign,IsActive,costcenterid)  
						Values				(@VoucherID,@CommissionAccount,@CommissionAmount,0,@memoBCOMM+ ' '+@memo ,@CommissionAmountForign,0,1,@Costcenter);		
						-- Net
					--insert into GL_VoucherDetails(VoucherID,AccountNoID,Credit,Debit,Memo,CreditForeign,DebitForeign,IsActive,costcenterid)  
					--	Values				(@VoucherID,@PaymentAccount,@PaymentAmount,0,@memo,@PaymentAmountForign,0,1,@Costcenter);
				
					IF @PaymentTypeCode = 0 
					Begin
						Declare CUR_MultiPaymentRet  cursor For  
					 
						SELECT   [PaymentTypeId],[Amount] FROM  [Inv_ReceiptMultiPayment] where [ReceiptId] = @id
						
						OPEN CUR_MultiPaymentRet 
						Fetch Next From CUR_MultiPaymentRet Into @paymentTypeID ,@PaymentAmount

						While @@Fetch_Status = 0 Begin  
						SET @MCOUNTER = 0
						Select @PaymentAccount = AccountID ,@CommissionAccount1 = [CommissionAccount] 
						  ,@CommissionPerc =CommissionPerc 
						  ,@PercentageOrValue =PercentageOrValue ,@Percentage  = Percentage
						  ,@Value	= Value
						from  Inv_Posting_PaymentTypes 		
						 where PaymentTypeID= @PaymentTypeID and @BranchId = BranchId;
						IF @PercentageOrValue is null set @PercentageOrValue = 0 
						IF @CommissionPerc is null set @CommissionPerc = 0 
						IF @Percentage is null set @Percentage = 0 
						IF @Value is null set @Value = 0 

						IF @PercentageOrValue = 0 Set @CommissionAmount1 = @CommissionPerc * @PaymentAmount / 100
						IF @PercentageOrValue = 1 Set @CommissionAmount1 = @CommissionPerc --* @PaymentAmount / 100
						IF @PercentageOrValue = 2 Set @CommissionAmount1 = (@Percentage * @PaymentAmount / 100 ) + @Value
					
						--Select @PaymentAccount = AccountID from  Inv_Posting_PaymentTypes  where PaymentTypeID= @PaymentTypeID and @BranchId = BranchId;
						--Select @CommissionAccount1 = [CommissionAccount] ,@CommissionPerc1 =CommissionPerc     from  Inv_Posting_PaymentTypes  where PaymentTypeID= @PaymentTypeID and BranchId = @BranchId;
						--IF @CommissionPerc1 > 0  
						--	Set @CommissionAmount1 = @CommissionPerc1 * @PaymentAmount / 100
						--ELSE
						--	Set @CommissionAmount1 = 0 
						 
						IF @PaymentAccount is null  Set   @PaymentAccount  = 0 
						IF @PaymentAccount  = 0 
						Begin

						Delete from GL_VoucherPayments where VoucherID = (Select id from GL_Vouchers where ReceiptID = @receiptID and InvoiceInstallmentsDetailsId is null)
							Delete from GL_VoucherDetails where VoucherID = (Select id from GL_Vouchers where ReceiptID = @receiptID and InvoiceInstallmentsDetailsId is null)
							Delete from GL_Vouchers where ReceiptID = @receiptID and InvoiceInstallmentsDetailsId is null
						
							IF @@ERROR <> 0  SELECT  ERROR_MESSAGE() ;
							IF @@ERROR <> 0  return
				
							--print 'Enter Payment Account of Payment Type id  = ' + Cast(@PaymentTypeID as varchar(10))
							Return
						END
						ELSE
							if @Discount_Percent <> 100  insert into GL_VoucherDetails(VoucherID,AccountNoID,Credit,Debit,Memo,CreditForeign,DebitForeign,IsActive,costcenterid)  
															  		Values				(@VoucherID,@PaymentAccount,@PaymentAmount,0,@memo,@PaymentAmountForign,0,1,@Costcenter);
							IF @CommissionAmount1   > 0  insert into GL_VoucherDetails(VoucherID,AccountNoID,Credit,Debit,Memo,CreditForeign,DebitForeign,IsActive,costcenterid) 
												Values(@VoucherID,@CommissionAccount1,@CommissionAmount1,0,@memoBCOMM+ ' '+@memo ,@CommissionAccount1 * @Rate,0,1,@Costcenter)	;
							if @CommissionAmount1   > 0   insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit ,Memo,DebitForeign,CreditForeign,IsActive,costcenterid)  
															  		Values				(@VoucherID,@PaymentAccount,@CommissionAmount1,0,@memoBCOMM+ ' '+@memo ,@CommissionAmount1 * @Rate,0,1,@Costcenter);
							
							--Set   @CommissionAmount1tot =  @CommissionAmount1tot + @CommissionAmount1
						Fetch Next From CUR_MultiPaymentRet Into  @paymentTypeID ,@PaymentAmount

						End		--	 End of Fetch

						Close CUR_MultiPaymentRet
						Deallocate CUR_MultiPaymentRet
					END
					ELSE
					Begin
						-- Net
						 insert into GL_VoucherDetails(VoucherID,AccountNoID,Credit,Debit,Memo,CreditForeign,DebitForeign,IsActive,costcenterid)  
			    				Values			 	(@VoucherID,@PaymentAccount,@PaymentAmount,0,@memo,@PaymentAmountForign,0,1,@Costcenter);
					END 
					IF @CommissionAmount1tot > 0 insert into GL_VoucherDetails(VoucherID,AccountNoID,Credit,Debit,Memo,CreditForeign,DebitForeign,IsActive,costcenterid) 
						Values				                                 (@VoucherID,@SalesAccount,0,@CommissionAmount1tot,@memo,0,@CommissionAmount1tot * @Rate,1,@Costcenter);
							
				Return
		END
		--Declare @CashCoustomerAccount integer 
		Declare @contractid int , @cONTRACTdebiAccount int 
		Select @TaxAccount = Mstr_TaxSetting.SalesAccountId   FROM [dbo].Mstr_TaxSetting WHERE Mstr_TaxSetting.SubsidiaryId = @SubsidiaryID
		IF ( @TransactionCode = 52 ) AND @SalesAccount <> 0 and @SalesAmount >= 0 and @CreditCustomerAccount <> 0 and (@PaymentAmount >= 0 or @Discount_Percent = 100)  and ((@DiscountAmount > 0 and @SalesDiscount <> 0 ) or (@DiscountAmount = 0) ) and ((@CommissionAmount > 0 and @CommissionAccount <> 0 ) or (@CommissionAmount = 0) ) 
			Begin
			Print '@CreditCustomerAccount'
			print @CreditCustomerAccount
			select @contractid = Inv_ContractInvoice.ContractID from Inv_ContractInvoice where Inv_ContractInvoice.InvoiceID = @receiptID
			sELECT   @cONTRACTdebiAccount =   GL_Setup.ContractUnderProgressAccountId FROM GL_Setup
					if @contractid is null  set @contractid = 0 
					else 
					Begin
					 IF @cONTRACTdebiAccount is null set @cONTRACTdebiAccount = 0 else set @CreditCustomerAccount     = @cONTRACTdebiAccount
					 Print '@CreditCustomerAccount'
						print @CreditCustomerAccount
					end 
					Print '@CreditCustomerAccount'
					print @CreditCustomerAccount
			if @originalMemo = ''
			Begin
				IF @Lang = 'en-US'
				Begin
							   Set @memo = 'Credit Sales Invoice No.' + Cast( @entryno as varchar(100))
							   Set @MemoComm = 'External Commission'
				END 
				Else
				Begin
							   Set @memo =N'مبيعات بالحساب , فاتورة رقم :' + Cast( @entryno as varchar(100))
							   Set @MemoComm = N'عمولة خارجيه '
				END 
			END
			ELSE
			SET @memo = @originalMemo
				Delete from GL_VoucherPayments where VoucherID = (Select id from GL_Vouchers where ReceiptID = @receiptID and InvoiceInstallmentsDetailsId is null)
				Delete from GL_VoucherDetails where VoucherID = (Select id from GL_Vouchers where ReceiptID = @receiptID and InvoiceInstallmentsDetailsId is null)
				Delete from GL_Vouchers where ReceiptID = @receiptID and InvoiceInstallmentsDetailsId is null
				
				IF @@ERROR <> 0  SELECT  ERROR_MESSAGE() ;
				IF @@ERROR <> 0  return
				

				--header
				insert into GL_Vouchers (code,VoucherTypeID,BranchID,CurrencyID,SubsidaryID,VouhcerDate,ExchangeRate,Memo,ReceiptID,Posted,IsActive,CreationDate ,LastUpdateDate ,CreatedByID,UpdatedByID,ReferanceNo) 
				Values				(@newCode,@VouchertypeID,@BranchId ,@CurrencyId,@SubsidiaryID,@VoucherDATE,@Rate,@memo,@receiptID,@posted,1,@CreationDate ,@LastUpdateDate ,@CreatedByID,@UpdatedByID,@Reference_No) 
				IF @PaymentAmount = 0   Return
				Select @VoucherID = id from GL_Vouchers where ReceiptID = @receiptID
					-- Net
				insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid)  
					Values				(@VoucherID,@CreditCustomerAccount,@PaymentAmount,0,@memo,@PaymentAmountForign,0,1,@Costcenter);
					--Discount
				IF @DiscountAmount  > 0 insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid)   
					Values				(@VoucherID,@SalesDiscount,@DiscountAmount,0,@memo,@DiscountAmountForign,0,1,@Costcenter);
			 
				IF isnull (@CommisionAccountID,0) <> 0 and  isnull (@CommissionNet,0) <> 0 and  isnull (@OutsideSalesCommissionAcc,0) <> 0 
				Begin
					insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
												Values(@VoucherID,@OutsideSalesCommissionAcc,@CommissionNet,0,@MemoComm + @memo,@CommissionNet * @rate,0,1,@Costcenter)	;
				
					 insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
												Values(@VoucherID,@CommisionAccountID,0,@CommissionNet,@MemoComm + @memo,0,@CommissionNet * @Rate ,1,@Costcenter);
				END 
				IF isnull (@CommisionAccountID_1,0) <> 0 and  isnull (@CommissionNet_1,0) <> 0 and  isnull (@OutsideSalesCommissionAcc,0) <> 0 
				Begin
					insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
												Values(@VoucherID,@OutsideSalesCommissionAcc,@CommissionNet_1,0,@MemoComm + @memo,@CommissionNet_1 * @rate,0,1,@Costcenter)	;
				
					 insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
												Values(@VoucherID,@CommisionAccountID_1,0,@CommissionNet_1,@MemoComm + @memo,0,@CommissionNet_1 * @Rate ,1,@Costcenter);
				END 
			
				Declare @CountLoop  INt	  = 0
				Declare CUR_ServiceItem  cursor For  
					 
					SELECT Inv_Receipt_d.Item_ID,Inv_Items_SalesPostingAccounts.AccountId ,
							(Inv_Receipt_d.Total  - isnull(H_Discount_Value,0)) * (Inv_Items_SalesPostingAccounts.Percentage /100) ,isnull(H_Discount_Value,0),Complement
					FROM  Inv_Receipt_d ,Inv_Items_SalesPostingAccounts ,Inv_Receipt_h
					where Parent_ID = @id and Inv_Receipt_h.id = Inv_Receipt_d.Parent_ID and 
					      Inv_Receipt_d.Item_ID  = Inv_Items_SalesPostingAccounts.ItemId and
					      Inv_Items_SalesPostingAccounts.AccountId is not null 
					Order by  Inv_Items_SalesPostingAccounts.Complement asc ,  Inv_Items_SalesPostingAccounts.Id desc


				OPEN CUR_ServiceItem 
					Fetch Next From CUR_ServiceItem Into @itemID, @SalesAccount1 ,@SalesAmount1,@DecHAmount,@Complement

					While @@Fetch_Status = 0 Begin  
						Set @CountLoop  =  @CountLoop + 1


						Select @consignment = consignment , @consignmentPerc = consignment_commission from inv_items where id = @itemID
						IF @consignment = 1
						Begin
							
							Set @SalesAmount = @SalesAmount - @SalesAmount1
							Select top 1 @VendoreAccount = VendorID from Inv_Items_Vendors where ItemID = @itemID
							Set @consignmentCommissionValue = @SalesAmount1 * @consignmentPerc / 100
							Set @SalesAmount1 = @SalesAmount1 - @consignmentCommissionValue
							IF @SalesAmount1  > 0  insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
								Values				(@VoucherID,@VendoreAccount ,0,@SalesAmount1,@memo,0,@SalesAmount1 * @Rate ,1,@Costcenter);	
							IF @consignmentCommissionValue  > 0  insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
								Values				(@VoucherID,@SalesAccount1,0,@consignmentCommissionValue,@memoBCOMM+ ' '+@memo ,0,@consignmentCommissionValue * @Rate ,1,@Costcenter);
						END
						ELSE
						Begin
						IF @DecHAmount > 0  and @Complement = 1 Set @SalesAmount1 = @SalesAmount1 + @DecHAmount
							Set @SalesAmount = @SalesAmount - @SalesAmount1
							IF @SalesAmount1  > 0  insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
								Values				(@VoucherID,@SalesAccount1,0,@SalesAmount1,@memo,0,@SalesAmount1 * @Rate ,1,@Costcenter);	
						END
				 	Fetch Next From CUR_ServiceItem Into @itemID, @SalesAccount1 ,@SalesAmount1,@DecHAmount,@Complement
					
					End		--	 End of Fetch

			Close CUR_ServiceItem
			Deallocate CUR_ServiceItem


			
			Declare CUR_ConsigmentItem  cursor For  
					 
				SELECT Inv_Receipt_d.Item_ID , consignment ,  consignment_commission,
						Sum(Total - isnull(H_Discount_Value,0)) 
				FROM  Inv_Receipt_d ,Inv_Items 
				where Parent_ID = @id and
					    Inv_Receipt_d.Item_ID  = Inv_Items.ID and
					    Inv_Items.consignment = 1 
						Group By Item_ID ,  consignment ,  consignment_commission

			
			OPEN CUR_ConsigmentItem 
				Fetch Next From CUR_ConsigmentItem Into @itemID ,@consignment ,@consignmentPerc ,@SalesAmount1

				While @@Fetch_Status = 0 Begin  
						Set @SalesAmount = @SalesAmount - @SalesAmount1
						Select top 1 @VendoreAccount = VendorID from Inv_Items_Vendors where ItemID = @itemID
						Set @consignmentCommissionValue = @SalesAmount1 * @consignmentPerc / 100
						Set @SalesAmount1 = @SalesAmount1 - @consignmentCommissionValue
						IF @SalesAmount1  > 0  insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
							Values				(@VoucherID,@VendoreAccount ,0,@SalesAmount1,@memo,0,@SalesAmount1 * @Rate ,1,@Costcenter);	
						IF @consignmentCommissionValue  > 0  insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
							Values				(@VoucherID,@SalesAccount,0,@consignmentCommissionValue,@memoBCOMM+ ' '+@memo ,0,@consignmentCommissionValue * @Rate ,1,@Costcenter);
					 
				Fetch Next From CUR_ConsigmentItem Into @itemID ,@consignment ,@consignmentPerc ,@SalesAmount1
					
				End		--	 End of Fetch

		Close CUR_ConsigmentItem
		Deallocate CUR_ConsigmentItem

		 
				--Salse
				IF @SalesAmount > 0 	insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid)   
					Values (@VoucherID,@SalesAccount,0,@SalesAmount,@memo,0,@SalesAmountForign,1,@Costcenter);
			
				IF @TaxAccount >0 and @TaxValue > 0  insert into GL_VoucherDetails(VoucherID,AccountNoID,Credit,Debit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
						Values				(@VoucherID,@TaxAccount,@TaxValue,0,@TaxMemo + ' '+@memo,0,@TaxValue * @Rate,1,@Costcenter);			
	

				IF @deliveryFees > 0 AND @deliveryaccount is not null   insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid)   
												Values(@VoucherID,@deliveryaccount,0,@deliveryFees,@memo,0,@deliveryFeesForign,1,@Costcenter);
			
				Return
			END
			Select @TaxAccount = Mstr_TaxSetting.SalesReturnAccountId   FROM [dbo].Mstr_TaxSetting WHERE Mstr_TaxSetting.SubsidiaryId = @SubsidiaryID
		IF (@TransactionCode = 54 ) AND ((@SalesAccount <> 0 and @SalesAmount >= 0 and @CreditCustomerAccount <> 0 and @PaymentAmount >= 0  and ((@DiscountAmount > 0 and @SalesDiscount <> 0 ) or (@DiscountAmount = 0) ) ) and ((@CommissionAmount > 0 and @CommissionAccount <> 0 ) or (@CommissionAmount = 0) ) )
		Begin
	--	Select @TaxAccount = Mstr_TaxSetting.SalesReturnAccountId FROM [dbo].Mstr_TaxSetting WHERE Mstr_TaxSetting.SubsidiaryId = @SubsidiaryID
			IF @originalMemo = ''	
			Begin
				IF @Lang = 'en-US'Set @memo = 'Credit Return Invoice No.' + Cast( @entryno as varchar(100))
				IF @Lang <> 'en-US'  Set  @memo =N' مردود مبيعات بالحساب , فاتورة رقم :' + Cast( @entryno as varchar(100))
			END
			ELSE
			SET @memo = @originalMemo	
			
			Delete from GL_VoucherPayments where VoucherID = (Select id from GL_Vouchers where ReceiptID = @receiptID and InvoiceInstallmentsDetailsId is null)
			Delete from GL_VoucherDetails where VoucherID = (Select id from GL_Vouchers where ReceiptID = @receiptID and InvoiceInstallmentsDetailsId is null)
			Delete from GL_Vouchers where ReceiptID = @receiptID and InvoiceInstallmentsDetailsId is null
			
			
				IF @@ERROR <> 0  SELECT  ERROR_MESSAGE() ;
				IF @@ERROR <> 0  return
				--header
			insert into GL_Vouchers (code,VoucherTypeID,BranchID,CurrencyID,SubsidaryID,VouhcerDate,ExchangeRate,Memo,ReceiptID,Posted,IsActive,CreationDate ,LastUpdateDate ,CreatedByID,UpdatedByID,ReferanceNo) 
			Values				(@newCode,@VouchertypeID,@BranchId ,@CurrencyId,@SubsidiaryID,@VoucherDATE,@Rate,@memo,@receiptID,@posted,1,@CreationDate ,@LastUpdateDate ,@CreatedByID,@UpdatedByID,@Reference_No) 
			IF @PaymentAmount = 0   Return
			Select @VoucherID = id from GL_Vouchers where ReceiptID = @receiptID
			--Before Debit sales
					IF @TaxAccount >0 and @TaxValue > 0  insert into GL_VoucherDetails(VoucherID,AccountNoID,Credit,Debit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
						Values				(@VoucherID,@TaxAccount,0,@TaxValue,@TaxMemo + ' '+@memo,0,@TaxValue * @Rate,1,@Costcenter);			
	
				Declare CUR_ServiceItem  cursor For  
					 
					SELECT Inv_Receipt_d.Item_ID, Inv_Items_SalesPostingAccounts.AccountId ,
							(Total - isnull(H_Discount_Value,0)) * (Inv_Items_SalesPostingAccounts.Percentage /100) ,isnull(H_Discount_Value,0),Complement
					FROM  Inv_Receipt_d ,Inv_Items_SalesPostingAccounts 
					where Parent_ID = @id and
					      Inv_Receipt_d.Item_ID  = Inv_Items_SalesPostingAccounts.ItemId and
					      Inv_Items_SalesPostingAccounts.AccountId is not null 

				OPEN CUR_ServiceItem 
					Fetch Next From CUR_ServiceItem Into @itemID, @SalesAccount1 ,@SalesAmount1,@DecHAmount,@Complement

					While @@Fetch_Status = 0 Begin  
						Select @consignment = consignment , @consignmentPerc = consignment_commission from inv_items where id = @itemID
						IF @consignment = 1
						Begin
							Set @SalesAmount = @SalesAmount - @SalesAmount1
							Select top 1 @VendoreAccount = VendorID from Inv_Items_Vendors where ItemID = @itemID
							Set @consignmentCommissionValue = @SalesAmount1 * @consignmentPerc / 100
							Set @SalesAmount1 = @SalesAmount1 - @consignmentCommissionValue
							IF @SalesAmount1  > 0  insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
								Values				(@VoucherID,@VendoreAccount ,@SalesAmount1,0,@memo,@SalesAmount1 * @Rate ,0,1,@Costcenter);	
							IF @consignmentCommissionValue  > 0  insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
								Values				(@VoucherID,@SalesAccount1,@consignmentCommissionValue,0,@memoBCOMM+ ' '+@memo ,@consignmentCommissionValue * @Rate,0 ,1,@Costcenter);
						END
						ELSE
						Begin
						IF @DecHAmount > 0  and @Complement = 1 Set @SalesAmount1 = @SalesAmount1 + @DecHAmount
							Set @SalesAmount = @SalesAmount - @SalesAmount1
							IF @SalesAmount1  > 0  insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
								Values				(@VoucherID,@SalesAccount1,@SalesAmount1,0,@memo,@SalesAmount1 * @Rate ,0,1,@Costcenter);	
						END
				 	Fetch Next From CUR_ServiceItem Into @itemID, @SalesAccount1 ,@SalesAmount1,@DecHAmount,@Complement
					
					End		--	 End of Fetch

			Close CUR_ServiceItem
			Deallocate CUR_ServiceItem


			
			Declare CUR_ConsigmentItem  cursor For  
					 
				SELECT Inv_Receipt_d.Item_ID , consignment ,  consignment_commission,
						Sum(Total - isnull(H_Discount_Value,0)) 
				FROM  Inv_Receipt_d ,Inv_Items 
				where Parent_ID = @id and
					    Inv_Receipt_d.Item_ID  = Inv_Items.ID and
					    Inv_Items.consignment = 1 
						Group By Item_ID ,  consignment ,  consignment_commission

			
			OPEN CUR_ConsigmentItem 
				Fetch Next From CUR_ConsigmentItem Into @itemID ,@consignment ,@consignmentPerc ,@SalesAmount1

				While @@Fetch_Status = 0 Begin  
						Set @SalesAmount = @SalesAmount - @SalesAmount1
						Select top 1 @VendoreAccount = VendorID from Inv_Items_Vendors where ItemID = @itemID
						Set @consignmentCommissionValue = @SalesAmount1 * @consignmentPerc / 100
						Set @SalesAmount1 = @SalesAmount1 - @consignmentCommissionValue
						IF @SalesAmount1  > 0  insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
							Values				(@VoucherID,@VendoreAccount ,0,@SalesAmount1,@memo,0,@SalesAmount1 * @Rate ,1,@Costcenter);	
						IF @consignmentCommissionValue  > 0  insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
							Values				(@VoucherID,@SalesAccount,0,@consignmentCommissionValue,@memoBCOMM+ ' '+@memo ,0,@consignmentCommissionValue * @Rate ,1,@Costcenter);
					 
				Fetch Next From CUR_ConsigmentItem Into @itemID ,@consignment ,@consignmentPerc ,@SalesAmount1
					
				End		--	 End of Fetch

		Close CUR_ConsigmentItem
		Deallocate CUR_ConsigmentItem

			--Salse

				insert into GL_VoucherDetails(VoucherID,AccountNoID,Credit,Debit,Memo,CreditForeign,DebitForeign,IsActive,costcenterid) 
				Values				(@VoucherID,@SalesAccount,0,@SalesAmount,@memo,0,@SalesAmountForign,1,@Costcenter);
		
			IF @deliveryFees > 0 AND @deliveryaccount is not null  insert into GL_VoucherDetails(VoucherID,AccountNoID,Credit,Debit,Memo,CreditForeign,DebitForeign,IsActive,costcenterid)  
												Values(@VoucherID,@deliveryaccount,0,@deliveryFees,@memo,0,@deliveryFeesForign,1,@Costcenter);
			--Discount
			IF @DiscountAmount  > 0 insert into GL_VoucherDetails(VoucherID,AccountNoID,Credit,Debit,Memo,CreditForeign,DebitForeign,IsActive,costcenterid) 
				Values				(@VoucherID,@SalesDiscount,@DiscountAmount,0,@memo,@DiscountAmountForign,0,1,@Costcenter);
			 
				-- Net
			insert into GL_VoucherDetails(VoucherID,AccountNoID,Credit,Debit,Memo,CreditForeign,DebitForeign,IsActive,costcenterid) 
				Values				(@VoucherID,@CreditCustomerAccount,@PaymentAmount,0,@memo,@PaymentAmountForign,0,1,@Costcenter);


			Return
		END
	
	SELECT  Top 1 @STORE_id = Store_ID 
	FROM   Inv_Receipt_d 
	Where  Inv_Receipt_d.Parent_ID= @receiptID   
	
	--Set @StoreAmount = @PaymentAmount

	--SELECT  @StoreAccount = [StoreAccount]  FROM  [dbo].[Inv_Store]  where ID =@STORE_id AND SubsidiaryID = @SubsidiaryID
	Select @StoreAccount = GL_Setup.InventoryAccountId from GL_Setup  
	if @StoreAccount is null (Select  top 1 @StoreAccount = [StoreAccount] from [Inv_Store] where     SubsidiaryID = @SubsidiaryID)


	Select @CreditAccount = AccountID from  [dbo].[Inv_Transactions_branchs_Account] where [BranchID] = @BranchId and [TransctionID]=@TransactionCode ;

		IF isnull (@CreditAccount,0) = 0  Set @CreditAccount = 0
		IF isnull (@StoreAccount,0) = 0  Set @StoreAccount = 0
 
	SELECT @PostingVouchertypeID = [PostingVoucher] FROM [Inv_Transaction_Codes]  where code =  @TransactionCode  ;
	Select @VouchertypeID = id from  GL_VoucherType where code = Cast(@PostingVouchertypeID as varchar(50)) ;
	--Store Debit
	IF (@TransactionCode = 60 or @TransactionCode =  83 )and @StoreAccount <> 0 AND @CreditAccount <> 0
	Begin
		IF @TransactionCode = 60 
			
			IF @originalMemo = ''
			Begin
				IF @Lang = 'en-US' Set @memo = 'Issue Voucher No.' + Cast( @entryno as varchar(100))
				IF @Lang <> 'en-US' Set     @memo =N' مردود مبيعات بالحساب , فاتورة رقم :' + Cast( @entryno as varchar(100))
			END
			ELSE
				SET @memo = @originalMemo
		ELSE
			Set @memo = 'Adjustment Voucher No.' + Cast( @entryno as varchar(100))

			Delete from GL_VoucherPayments where VoucherID = (Select id from GL_Vouchers where ReceiptID = @receiptID and InvoiceInstallmentsDetailsId is null)
		Delete from GL_VoucherDetails where VoucherID = (Select id from GL_Vouchers where ReceiptID = @receiptID and InvoiceInstallmentsDetailsId is null)
		Delete from GL_Vouchers where ReceiptID = @receiptID and InvoiceInstallmentsDetailsId is null
		
				IF @@ERROR <> 0  SELECT  ERROR_MESSAGE() ;
				IF @@ERROR <> 0  return
				
		--header
		Select @Vouchercode = code from GL_Vouchers where code = @entryno and VoucherTypeID = @VouchertypeID;
		IF @Vouchercode = @entryno 
			Select @Vouchercode = max(isnull(code,0)) +1 from gl_vouchers where VoucherTypeID =  @VouchertypeID;
		ELSE
			Set  @Vouchercode = @entryno 
		insert into GL_Vouchers (code,VoucherTypeID,BranchID,CurrencyID,SubsidaryID,VouhcerDate,ExchangeRate,Memo,ReceiptID,Posted,IsActive,CreationDate ,LastUpdateDate ,CreatedByID,UpdatedByID,ReferanceNo) 
			Values				(@newCode,@VouchertypeID,@BranchId ,@CurrencyId,@SubsidiaryID,@VoucherDATE,@Rate,@memo,@receiptID,@posted,1,@CreationDate ,@LastUpdateDate ,@CreatedByID,@UpdatedByID,@Reference_No) 
		
		Select @VoucherID = id from GL_Vouchers where ReceiptID = @receiptID
		--Salse
			insert into GL_VoucherDetails(VoucherID,AccountNoID,Credit,Debit,Memo ,IsActive,CostcenterID) 
			Values				(@VoucherID,@StoreAccount,0,@PaymentAmount,@memo,1,@Costcenter)
		-- 
			insert into GL_VoucherDetails(VoucherID,AccountNoID,Credit,Debit,Memo ,IsActive,CostcenterID) 
			Values				(@VoucherID,@CreditAccount,@PaymentAmount,0,@memo ,1,@Costcenter)
			  

		Return
	END
	IF (  @TransactionCode =  83 )and @StoreAccount <> 0 AND @CreditAccount <> 0
	Begin
			Set @memo = 'Adjustment Voucher No.' + Cast( @entryno as varchar(100))

			Delete from GL_VoucherPayments where VoucherID = (Select id from GL_Vouchers where ReceiptID = @receiptID and InvoiceInstallmentsDetailsId is null)
		Delete from GL_VoucherDetails where VoucherID = (Select id from GL_Vouchers where ReceiptID = @receiptID and InvoiceInstallmentsDetailsId is null)
		Delete from GL_Vouchers where ReceiptID = @receiptID and InvoiceInstallmentsDetailsId is null
		
				IF @@ERROR <> 0  SELECT  ERROR_MESSAGE() ;
				IF @@ERROR <> 0  return
				
		--header
		Select @Vouchercode = code from GL_Vouchers where code = @entryno and VoucherTypeID = @VouchertypeID;
		IF @Vouchercode = @entryno 
			Select @Vouchercode = max(isnull(code,0)) +1 from gl_vouchers where VoucherTypeID =  @VouchertypeID;
		ELSE
			Set  @Vouchercode = @entryno 
		insert into GL_Vouchers (code,VoucherTypeID,BranchID,CurrencyID,SubsidaryID,VouhcerDate,ExchangeRate,Memo,ReceiptID,Posted,IsActive,CreationDate ,LastUpdateDate ,CreatedByID,UpdatedByID,ReferanceNo) 
			Values				(@newCode,@VouchertypeID,@BranchId ,@CurrencyId,@SubsidiaryID,@VoucherDATE,@Rate,@memo,@receiptID,@posted,1,@CreationDate ,@LastUpdateDate ,@CreatedByID,@UpdatedByID,@Reference_No) 
		
		Select @VoucherID = id from GL_Vouchers where ReceiptID = @receiptID
		--Store Debit
		IF @PaymentAmount > 0 
		Begin
			insert into GL_VoucherDetails(VoucherID,AccountNoID,Credit,Debit,Memo ,IsActive,CostcenterID) 
			Values				(@VoucherID,@StoreAccount,0,@PaymentAmount,@memo, 1,@Costcenter)
		-- 
			insert into GL_VoucherDetails(VoucherID,AccountNoID,Credit,Debit,Memo ,IsActive,CostcenterID) 
			Values				(@VoucherID,@CreditAccount,@PaymentAmount,0,@memo ,1,@Costcenter)
			  
		END
		--Store Credit
		IF @PaymentAmount < 0 
		Begin
			insert into GL_VoucherDetails(VoucherID,AccountNoID,Credit,Debit,Memo ,IsActive,CostcenterID) 
			Values				(@VoucherID,@CreditAccount ,0,@PaymentAmount,@memo, 1,@Costcenter)
		-- 
			insert into GL_VoucherDetails(VoucherID,AccountNoID,Credit,Debit,Memo ,IsActive,CostcenterID) 
			Values				(@VoucherID,@StoreAccount,@PaymentAmount,0,@memo ,1,@Costcenter)
			  
		END
		Return
	END
	--Store Credit
	----print 'befor receive'
	----print @CreditAccount
	IF (@TransactionCode = 3 or @TransactionCode =  61 or @TransactionCode = 63 )and @StoreAccount <> 0 AND @CreditAccount <> 0
	Begin
		IF @originalMemo = '' 
		Begin
		IF @TransactionCode = 3 Set @memo = 'Receiving Voucher  No.' + Cast( @entryno as varchar(100))
		IF @TransactionCode = 63 Set @memo = 'Issue Return No.' + Cast( @entryno as varchar(100))
		IF @TransactionCode = 61 Set @memo = 'Destruction Voucher No.' + Cast( @entryno as varchar(100))
		END
		ELSE
			Set @memo = @originalMemo

			--print @memo
	    Delete from GL_VoucherPayments where VoucherID = (Select id from GL_Vouchers where ReceiptID = @receiptID and InvoiceInstallmentsDetailsId is null)
		Delete from GL_VoucherDetails where VoucherID = (Select id from GL_Vouchers where ReceiptID = @receiptID and InvoiceInstallmentsDetailsId is null)
		Delete from GL_Vouchers where ReceiptID = @receiptID and InvoiceInstallmentsDetailsId is null
		
				IF @@ERROR <> 0  SELECT  ERROR_MESSAGE() ;
				IF @@ERROR <> 0  return
				
		--header
		Select @Vouchercode = code from GL_Vouchers where code = @entryno and VoucherTypeID = @VouchertypeID;
		IF @Vouchercode = @entryno 
			Select @Vouchercode = max(isnull(code,0)) +1 from gl_vouchers where VoucherTypeID =  @VouchertypeID;
		ELSE
			Set  @Vouchercode = @entryno 
		insert into GL_Vouchers (code,VoucherTypeID,BranchID,CurrencyID,SubsidaryID,VouhcerDate,ExchangeRate,Memo,ReceiptID,Posted,IsActive,CreationDate ,LastUpdateDate ,CreatedByID,UpdatedByID,ReferanceNo) 
			Values				(@newCode,@VouchertypeID,@BranchId ,@CurrencyId,@SubsidiaryID,@VoucherDATE,@Rate,@memo,@receiptID,@posted,1,@CreationDate ,@LastUpdateDate ,@CreatedByID,@UpdatedByID,@Reference_No) 
		
		Select @VoucherID = id from GL_Vouchers where ReceiptID = @receiptID
		--Salse
			insert into GL_VoucherDetails(VoucherID,AccountNoID,Credit,Debit,Memo ,IsActive,CostcenterID) 
			Values				(@VoucherID,@CreditAccount,0,@PaymentAmount,@memo, 1,@Costcenter)
		-- 
			insert into GL_VoucherDetails(VoucherID,AccountNoID,Credit,Debit,Memo ,IsActive,CostcenterID) 
			Values				(@VoucherID,@StoreAccount ,@PaymentAmount,0,@memo ,1,@Costcenter)
			  

		Return
	END
	
	IF (@TransactionCode = 82 )and @StoreAccount <> 0 --AND @CreditAccount <> 0  
	Begin
		Select @PaymentAmount = Inv_Receipt_h.TotalProductionCost  from Inv_Receipt_h where id  = @receiptID
		
		--print '@@PaymentAmount = ' + cast(@PaymentAmount as nvarchar(200))
	--	IF @PaymentAmount is null or  @PaymentAmount = 0 return
		--print '@SubsidiaryID = ' +  cast(@SubsidiaryID as nvarchar(200))
		Select @CreditAccount = GL_Setup.ProductionExpensesId from GL_Setup  where SubsidaryId =@SubsidiaryID

		
	--	Select *from GL_Setup where SubsidaryId =@SubsidiaryID
		IF @CreditAccount is null or @CreditAccount = 0 return

		IF @originalMemo = '' 
		Begin 
			IF @Lang = 'en-US' set @memo = 'Expenses Production Cost for Voucher  No.' + Cast( @entryno as varchar(100)) 
			IF @Lang <> 'en-US' set  @memo = N'تحميل سندات الإنتاج بالتكلفة التقديرية للمصاريف للسند رقم    ' + Cast( @entryno as varchar(100)) 
		END
		ELSE
			Set @memo = @originalMemo

	    Delete from GL_VoucherPayments where VoucherID = (Select id from GL_Vouchers where ReceiptID = @receiptID and InvoiceInstallmentsDetailsId is null)
		Delete from GL_VoucherDetails where VoucherID = (Select id from GL_Vouchers where ReceiptID = @receiptID and InvoiceInstallmentsDetailsId is null)
		Delete from GL_Vouchers where ReceiptID = @receiptID and InvoiceInstallmentsDetailsId is null
		
				IF @@ERROR <> 0  SELECT  ERROR_MESSAGE() ;
				IF @@ERROR <> 0  return
				
		--header
		Select @Vouchercode = code from GL_Vouchers where code = @entryno and VoucherTypeID = @VouchertypeID;
		IF @Vouchercode = @entryno 
			Select @Vouchercode = max(isnull(code,0)) +1 from gl_vouchers where VoucherTypeID =  @VouchertypeID;
		ELSE
			Set  @Vouchercode = @entryno 

			IF @PaymentAmount is null or  @PaymentAmount = 0 return
		insert into GL_Vouchers (code,VoucherTypeID,BranchID,CurrencyID,SubsidaryID,VouhcerDate,ExchangeRate,Memo,ReceiptID,Posted,IsActive,CreationDate ,LastUpdateDate ,CreatedByID,UpdatedByID,ReferanceNo) 
			Values				(@newCode,@VouchertypeID,@BranchId ,@CurrencyId,@SubsidiaryID,@VoucherDATE,@Rate,@memo,@receiptID,@posted,1,@CreationDate ,@LastUpdateDate ,@CreatedByID,@UpdatedByID,@Reference_No) 
		
		Select @VoucherID = id from GL_Vouchers where ReceiptID = @receiptID
		
		--Salse
			insert into GL_VoucherDetails(VoucherID,AccountNoID,Credit,Debit,Memo ,IsActive,CostcenterID) 
			Values				(@VoucherID,@StoreAccount ,0,@PaymentAmount,@memo, 1,@Costcenter)
		-- 
			insert into GL_VoucherDetails(VoucherID,AccountNoID,Credit,Debit,Memo ,IsActive,CostcenterID) 
			Values				(@VoucherID,@CreditAccount ,@PaymentAmount,0,@memo ,1,@Costcenter)
			  

		Return
	END




	END



	

	
	IF (@TransactionCode = 82 )and @StoreAccount <> 0 --AND @CreditAccount <> 0  
	Begin
		Select @PaymentAmount = Inv_Receipt_h.TotalProductionCost  from Inv_Receipt_h where id  = @receiptID
		
		--print '@@PaymentAmount = ' + cast(@PaymentAmount as nvarchar(200))
	--	IF @PaymentAmount is null or  @PaymentAmount = 0 return
		--print '@SubsidiaryID = ' +  cast(@SubsidiaryID as nvarchar(200))
		Select @CreditAccount = GL_Setup.ProductionExpensesId from GL_Setup  where SubsidaryId =@SubsidiaryID

		
	--	Select *from GL_Setup where SubsidaryId =@SubsidiaryID
		IF @CreditAccount is null or @CreditAccount = 0 return

		IF @originalMemo = '' 
		Begin 
			IF @Lang = 'en-US' set @memo = 'Expenses Production Cost for Voucher  No.' + Cast( @entryno as varchar(100)) 
			IF @Lang <> 'en-US' set  @memo = N'تحميل سندات الإنتاج بالتكلفة التقديرية للمصاريف للسند رقم    ' + Cast( @entryno as varchar(100)) 
		END
		ELSE
			Set @memo = @originalMemo

	    Delete from GL_VoucherPayments where VoucherID = (Select id from GL_Vouchers where ReceiptID = @receiptID and InvoiceInstallmentsDetailsId is null)
		Delete from GL_VoucherDetails where VoucherID = (Select id from GL_Vouchers where ReceiptID = @receiptID and InvoiceInstallmentsDetailsId is null)
		Delete from GL_Vouchers where ReceiptID = @receiptID and InvoiceInstallmentsDetailsId is null
		
				IF @@ERROR <> 0  SELECT  ERROR_MESSAGE() ;
				IF @@ERROR <> 0  return
				
		--header
		Select @Vouchercode = code from GL_Vouchers where code = @entryno and VoucherTypeID = @VouchertypeID;
		IF @Vouchercode = @entryno 
			Select @Vouchercode = max(isnull(code,0)) +1 from gl_vouchers where VoucherTypeID =  @VouchertypeID;
		ELSE
			Set  @Vouchercode = @entryno 

			IF @PaymentAmount is null or  @PaymentAmount = 0 return
		insert into GL_Vouchers (code,VoucherTypeID,BranchID,CurrencyID,SubsidaryID,VouhcerDate,ExchangeRate,Memo,ReceiptID,Posted,IsActive,CreationDate ,LastUpdateDate ,CreatedByID,UpdatedByID,ReferanceNo) 
			Values				(@newCode,@VouchertypeID,@BranchId ,@CurrencyId,@SubsidiaryID,@VoucherDATE,@Rate,@memo,@receiptID,@posted,1,@CreationDate ,@LastUpdateDate ,@CreatedByID,@UpdatedByID,@Reference_No) 
		
		Select @VoucherID = id from GL_Vouchers where ReceiptID = @receiptID
		
		--Salse
			insert into GL_VoucherDetails(VoucherID,AccountNoID,Credit,Debit,Memo ,IsActive,CostcenterID) 
			Values				(@VoucherID,@StoreAccount ,0,@PaymentAmount,@memo, 1,@Costcenter)
		-- 
			insert into GL_VoucherDetails(VoucherID,AccountNoID,Credit,Debit,Memo ,IsActive,CostcenterID) 
			Values				(@VoucherID,@CreditAccount ,@PaymentAmount,0,@memo ,1,@Costcenter)
			  

		Return
	END






    IF (@TransactionCode = 82 )and @StoreAccount <> 0  --AND @CreditAccount <> 0  
	Begin
		Select @PaymentAmount = Inv_Receipt_h.TotalProductionCost  from Inv_Receipt_h where id  = @receiptID
		
		--print '@@PaymentAmount = ' + cast(@PaymentAmount as nvarchar(200))
	--	IF @PaymentAmount is null or  @PaymentAmount = 0 return
		--print '@SubsidiaryID = ' +  cast(@SubsidiaryID as nvarchar(200))
		Select @CreditAccount = GL_Setup.ProductionExpensesId from GL_Setup  where SubsidaryId =@SubsidiaryID

		
	--	Select *from GL_Setup where SubsidaryId =@SubsidiaryID
		IF @CreditAccount is null or @CreditAccount = 0 return

		IF @originalMemo = '' 
		Begin 
			IF @Lang = 'en-US' set @memo = 'Expenses Production Cost for Voucher  No.' + Cast( @entryno as varchar(100)) 
			IF @Lang <> 'en-US' set  @memo = N'تحميل سندات الإنتاج بالتكلفة التقديرية للمصاريف للسند رقم    ' + Cast( @entryno as varchar(100)) 
		END
		ELSE
			Set @memo = @originalMemo

	    Delete from GL_VoucherPayments where VoucherID = (Select id from GL_Vouchers where ReceiptID = @receiptID and InvoiceInstallmentsDetailsId is null)
		Delete from GL_VoucherDetails where VoucherID = (Select id from GL_Vouchers where ReceiptID = @receiptID and InvoiceInstallmentsDetailsId is null)
		Delete from GL_Vouchers where ReceiptID = @receiptID and InvoiceInstallmentsDetailsId is null
		
				IF @@ERROR <> 0  SELECT  ERROR_MESSAGE() ;
				IF @@ERROR <> 0  return
				
		--header
		Select @Vouchercode = code from GL_Vouchers where code = @entryno and VoucherTypeID = @VouchertypeID;
		IF @Vouchercode = @entryno 
			Select @Vouchercode = max(isnull(code,0)) +1 from gl_vouchers where VoucherTypeID =  @VouchertypeID;
		ELSE
			Set  @Vouchercode = @entryno 

			IF @PaymentAmount is null or  @PaymentAmount = 0 return
		insert into GL_Vouchers (code,VoucherTypeID,BranchID,CurrencyID,SubsidaryID,VouhcerDate,ExchangeRate,Memo,ReceiptID,Posted,IsActive,CreationDate ,LastUpdateDate ,CreatedByID,UpdatedByID,ReferanceNo) 
			Values				(@newCode,@VouchertypeID,@BranchId ,@CurrencyId,@SubsidiaryID,@VoucherDATE,@Rate,@memo,@receiptID,@posted,1,@CreationDate ,@LastUpdateDate ,@CreatedByID,@UpdatedByID,@Reference_No) 
		
		Select @VoucherID = id from GL_Vouchers where ReceiptID = @receiptID
		
		--Salse
			insert into GL_VoucherDetails(VoucherID,AccountNoID,Credit,Debit,Memo ,IsActive,CostcenterID) 
			Values				(@VoucherID,@StoreAccount ,0,@PaymentAmount,@memo, 1,@Costcenter)
		-- 
			insert into GL_VoucherDetails(VoucherID,AccountNoID,Credit,Debit,Memo ,IsActive,CostcenterID) 
			Values				(@VoucherID,@CreditAccount ,@PaymentAmount,0,@memo ,1,@Costcenter)
			  

		Return
	END

	sELECT   @cONTRACTdebiAccount =   GL_Setup.ContractUnderProgressAccountId FROM GL_Setup
	IF @cONTRACTdebiAccount is null set @cONTRACTdebiAccount = 0 
	PRINT 87
	PRINT @cONTRACTdebiAccount
	PRINT @CreditCustomerAccount
	
	IF (@TransactionCode = 87)and @CreditCustomerAccount <> 0  and @CreditAccount <> 0
	Begin

	PRINT 'ENTER 87'
	

		IF @originalMemo = '' 
		Begin 
			IF @Lang = 'en-US' set @memo = 'Contract  no.:' + Cast( @entryno as varchar(100)) 
			IF @Lang <> 'en-US' set  @memo = N'' + Cast( @entryno as varchar(100)) 
		END
		ELSE
			Set @memo = @originalMemo

	    Delete from GL_VoucherPayments where VoucherID = (Select id from GL_Vouchers where ReceiptID = @receiptID and InvoiceInstallmentsDetailsId is null)
		Delete from GL_VoucherDetails where VoucherID = (Select id from GL_Vouchers where ReceiptID = @receiptID and InvoiceInstallmentsDetailsId is null)
		Delete from GL_Vouchers where ReceiptID = @receiptID and InvoiceInstallmentsDetailsId is null
		
				IF @@ERROR <> 0  SELECT  ERROR_MESSAGE() ;
				IF @@ERROR <> 0  return
				
		--header
		Select @Vouchercode = code from GL_Vouchers where code = @entryno and VoucherTypeID = @VouchertypeID;
		IF @Vouchercode = @entryno 
			Select @Vouchercode = max(isnull(code,0)) +1 from gl_vouchers where VoucherTypeID =  @VouchertypeID;
		ELSE
			Set  @Vouchercode = @entryno 

			IF @PaymentAmount is null or  @PaymentAmount = 0 return
		insert into GL_Vouchers (code,VoucherTypeID,BranchID,CurrencyID,SubsidaryID,VouhcerDate,ExchangeRate,Memo,ReceiptID,Posted,IsActive,CreationDate ,LastUpdateDate ,CreatedByID,UpdatedByID,ReferanceNo) 
			Values				(@newCode,@VouchertypeID,@BranchId ,@CurrencyId,@SubsidiaryID,@VoucherDATE,@Rate,@memo,@receiptID,@posted,1,@CreationDate ,@LastUpdateDate ,@CreatedByID,@UpdatedByID,@Reference_No) 
		
		Select @VoucherID = id from GL_Vouchers where ReceiptID = @receiptID
		print  '@voucherid'
		print  @voucherid
		--Salse
			insert into GL_VoucherDetails(VoucherID,AccountNoID,Credit,Debit,Memo ,IsActive,CostcenterID) 
			Values				(@VoucherID,@CreditCustomerAccount ,0,@PaymentAmount,@memo, 1,@Costcenter)
		-- 
			insert into GL_VoucherDetails(VoucherID,AccountNoID,Credit,Debit,Memo ,IsActive,CostcenterID) 
			Values				(@VoucherID,@CreditAccount ,@PaymentAmount,0,@memo ,1,@Costcenter)
			  

		Return
	END

GO
/****** Object:  StoredProcedure [dbo].[aa_ReplaceITEM]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create PROCEDURE [dbo].[aa_ReplaceITEM] --59,2911,'2019-09-10 12:13:00.000',2756
	   @FromitemCode NvarChar(50) ,@ToItemCode NvarChar(50)  
AS
BEGIN  
Declare @FromITEMID INTEGER,@TOITEMID INTEGER, @FromP INTEGER,@TOP INTEGER 
Declare @MCOUNTER integer     
Select @FromITEMID = ID From inv_items where COde = @FromitemCode
Select @TOITEMID = ID From inv_items where COde = @ToItemCode
		 
Declare CUR_Replace  cursor FAST_FORWARD 
		  For
		  Select distinct parent_id from Inv_Receipt_d where Item_ID = @FromITEMID
		
	 SET @MCOUNTER = 0
	 OPEN CUR_Replace 
	Fetch Next From CUR_Replace Into @FromP 
	While @@Fetch_Status = 0 Begin
		SET @MCOUNTER = @MCOUNTER + 1;  
		 INSERT INTO [dbo].[Inv_Receipt_h]
           ([Entry_No]
           ,[SubsidiaryID]
           ,[Code]
           ,[Branch_ID]
           ,[Transaction_Code]
           ,[Entry_Date]
           ,[Payment_Type]
           ,[Vendor_ID]
           ,[CashCustomerID]
           ,[Currency_ID]
           ,[Currency_Rate]
           ,[Empoyee_ID]
           ,[Memo]
           ,[Reference_No]
           ,[Related_Voucher_Type]
           ,[Related_Voucher_Code]
           ,[Value]
           ,[ValueForeign]
           ,[Discount_Value]
           ,[Discount_Percent]
           ,[NetValue]
           ,[Discount_ForeignValue]
           ,[Discount_ForeignPercent]
           ,[NetValueForeign]
           ,[Status_ID]
           ,[ApprovalStatus_ID]
           ,[Costing_Rate]
           ,[Reference]
           ,[ApprovedBy_ID]
           ,[ShipmentTerm_ID]
           ,[PaymentTerm_ID]
           ,[SupplierAccount_ID]
           ,[PlannedDeliveryDate]
           ,[ActualDeliveryDate]
           ,[DeliveryLocation]
           ,[ContactedPerson]
           ,[OtherNotes]
           ,[CustomerSalesPrice]
           ,[CashDrawerId]
           ,[LeadID]
           ,[OrderType]
           ,[DriverId]
           ,[DeliveryNotes]
           ,[CashCustomerDetailId]
           ,[Is_Canceled]
           ,[DeliveryFees]
           ,[FromStoreID]
           ,[ToStoreID]
           ,[IsDeliveryPrint]
           ,[PrintCount]
           ,[CostCenterID]
           ,[ClassID]
           ,[LocationID]
           ,[DepartmentID]
           ,[IsKitchenDone]
           ,[PaidAmount]
           ,[IsHolded]
           ,[BranchTableId]
           ,[CustomerDeliverDate]
           ,[Signature]
           ,[CustomerActualDeliverDate]
           ,[DeliveryStatusId]
           ,[CarID]
           ,[Deposite]
           ,[PaymentAndConditions]
           ,[Notes]
           ,[ChefId]
           ,[ChangeAmount]
           ,[DivisionID]
           ,[CourierID]
           ,[DepositePaymentTypeId]
           ,[CreationDate]
           ,[LastUpdateDate]
           ,[CreatedByID]
           ,[UpdatedByID]
           ,[ReservedFlag]
           ,[ReceiptAttributeId]
           ,[SalesTypeID]
           ,[CommissionType]
           ,[Commission]
           ,[CommissionNet]
           ,[CommisionAccountID]
           ,[CostPosted]
           ,[LCAccountID]
           ,[LCNo]
           ,[LCBank]
           ,[LCStartDate]
           ,[LCEndDate]
           ,[LCRenewDate]
           ,[LCRenewEndDate]
           ,[LCInsuranceCompany]
           ,[LCPolicyNo]
           ,[InsuranceDate]
           ,[GoodDeliveryDate]
           ,[LCCondition]
           ,[ShippingMethod]
           ,[ExportPort]
           ,[ShipName]
           ,[LCNotes]
           ,[QuotationCustomerName]
           ,[DueDate]
           ,[Schedule_Date]
           ,[ERPStatus]
           ,[StoreType]
           ,[QuotationEndDate]
           ,[WOstatusID]
           ,[ParentReceiptId]
           ,[DeliveryFeesForeign]
           ,[isApproved]
           ,[ReplenshimentType]
           ,[ReplenshimentFromDate]
           ,[ReplenshimentToDate]
           ,[CancelReasonId]
           ,[ContractStartDate]
           ,[ContractEndDate]
           ,[PreviousContractID]
           ,[LoyalityBalance]
           ,[CPNO]
           ,[CommissionType1]
           ,[Commission1]
           ,[CommissionNet1]
           ,[CommisionAccountID1]
           ,[SurchargePercent]
           ,[SurchargeValue]
           ,[AccountType])
    Select [Entry_No]
           ,[SubsidiaryID]
           ,[Code]
           ,[Branch_ID]
           ,[Transaction_Code]
           ,[Entry_Date]
           ,[Payment_Type]
           ,[Vendor_ID]
           ,[CashCustomerID]
           ,[Currency_ID]
           ,[Currency_Rate]
           ,[Empoyee_ID]
           ,[Memo]
           ,[Reference_No]
           ,[Related_Voucher_Type]
           ,[Related_Voucher_Code]
           ,[Value]
           ,[ValueForeign]
           ,[Discount_Value]
           ,[Discount_Percent]
           ,[NetValue]
           ,[Discount_ForeignValue]
           ,[Discount_ForeignPercent]
           ,[NetValueForeign]
           ,[Status_ID]
           ,[ApprovalStatus_ID]
           ,[Costing_Rate]
           ,[Reference]
           ,[ApprovedBy_ID]
           ,[ShipmentTerm_ID]
           ,[PaymentTerm_ID]
           ,[SupplierAccount_ID]
           ,[PlannedDeliveryDate]
           ,[ActualDeliveryDate]
           ,[DeliveryLocation]
           ,[ContactedPerson]
           ,[OtherNotes]
           ,[CustomerSalesPrice]
           ,[CashDrawerId]
           ,[LeadID]
           ,[OrderType]
           ,[DriverId]
           ,[DeliveryNotes]
           ,[CashCustomerDetailId]
           ,[Is_Canceled]
           ,[DeliveryFees]
           ,[FromStoreID]
           ,[ToStoreID]
           ,[IsDeliveryPrint]
           ,[PrintCount]
           ,[CostCenterID]
           ,[ClassID]
           ,[LocationID]
           ,[DepartmentID]
           ,[IsKitchenDone]
           ,[PaidAmount]
           ,[IsHolded]
           ,[BranchTableId]
           ,[CustomerDeliverDate]
           ,[Signature]
           ,[CustomerActualDeliverDate]
           ,[DeliveryStatusId]
           ,[CarID]
           ,[Deposite]
           ,[PaymentAndConditions]
           ,[Notes]
           ,[ChefId]
           ,[ChangeAmount]
           ,[DivisionID]
           ,[CourierID]
           ,[DepositePaymentTypeId]
           ,[CreationDate]
           ,[LastUpdateDate]
           ,[CreatedByID]
           ,[UpdatedByID]
           ,[ReservedFlag]
           ,[ReceiptAttributeId]
           ,[SalesTypeID]
           ,[CommissionType]
           ,[Commission]
           ,[CommissionNet]
           ,[CommisionAccountID]
           ,[CostPosted]
           ,[LCAccountID]
           ,[LCNo]
           ,[LCBank]
           ,[LCStartDate]
           ,[LCEndDate]
           ,[LCRenewDate]
           ,[LCRenewEndDate]
           ,[LCInsuranceCompany]
           ,[LCPolicyNo]
           ,[InsuranceDate]
           ,[GoodDeliveryDate]
           ,[LCCondition]
           ,[ShippingMethod]
           ,[ExportPort]
           ,[ShipName]
           ,[LCNotes]
           ,[QuotationCustomerName]
           ,[DueDate]
           ,[Schedule_Date]
           ,[ERPStatus]
           ,[StoreType]
           ,[QuotationEndDate]
           ,[WOstatusID]
           ,[ParentReceiptId]
           ,[DeliveryFeesForeign]
           ,[isApproved]
           ,[ReplenshimentType]
           ,[ReplenshimentFromDate]
           ,[ReplenshimentToDate]
           ,[CancelReasonId]
           ,[ContractStartDate]
           ,[ContractEndDate]
           ,[PreviousContractID]
           ,[LoyalityBalance]
           ,[CPNO]
           ,[CommissionType1]
           ,[Commission1]
           ,[CommissionNet1]
           ,[CommisionAccountID1]
           ,[SurchargePercent]
           ,[SurchargeValue]
           ,[AccountType] from inv_receipt_h where id =@FromP

		   Select   @TOP = max(id) from inv_receipt_h
		 
		 INSERT INTO [dbo].[Inv_Receipt_d]
           ([Parent_ID]
           ,[Store_ID]
           ,[Item_ID]
           ,[Qty]
           ,[Price]
           ,[Unit_ID]
           ,[Conv]
           ,[Discount_Value]
           ,[Discount_Percent]
           ,[Total]
           ,[Transaction_move]
           ,[Item_Type]
           ,[H_Discount_Percentage]
           ,[Recieved_Qty]
           ,[Avr_Cost]
           ,[Notes]
           ,[FinishedProductID]
           ,[H_Discount_Value]
           ,[DepartmentID]
           ,[SalesManId]
           ,[KitchenStatus]
           ,[DetailsHTML]
           ,[CustomItemName]
           ,[IsMembership]
           ,[MembershipDetailId]
           ,[IsCustomOption]
           ,[CustomOptionReceiptDetailParentId]
           ,[updatefromproc]
           ,[DynamicId]
           ,[IssueQty]
           ,[DefaultItemCost]
           ,[DefaultItemQty]
           ,[Final_conv]
           ,[IsDeleted]
           ,[FinishedReceipt_dID]
           ,[WarrantyDate]
           ,[IsReturn]
           ,[Netsales]
           ,[replenshDiff]
           ,[AvailableQty]
           ,[ReorderQty]
           ,[GoldWeight]
           ,[GoldClovesWeight]
           ,[Service]
           ,[LoyalityBalance]
           ,[TotalLoyalityBalance]
           ,[IsMemebership]
           ,[AvgCost]
           ,[TotalQTy]
           ,[TotalReservedQTy]
           ,[FromStoreReceiptd_ID]
           ,[AllStoresQty])
		   Select   @TOP
           ,[Store_ID]
           ,@TOITEMID
           ,[Qty]
           ,[Price]
           ,[Unit_ID]
           ,[Conv]
           ,[Discount_Value]
           ,[Discount_Percent]
           ,[Total]
           ,[Transaction_move]
           ,[Item_Type]
           ,[H_Discount_Percentage]
           ,[Recieved_Qty]
           ,[Avr_Cost]
           ,[Notes]
           ,[FinishedProductID]
           ,[H_Discount_Value]
           ,[DepartmentID]
           ,[SalesManId]
           ,[KitchenStatus]
           ,[DetailsHTML]
           ,[CustomItemName]
           ,[IsMembership]
           ,[MembershipDetailId]
           ,[IsCustomOption]
           ,[CustomOptionReceiptDetailParentId]
           ,[updatefromproc]
           ,[DynamicId]
           ,[IssueQty]
           ,[DefaultItemCost]
           ,[DefaultItemQty]
           ,[Final_conv]
           ,[IsDeleted]
           ,[FinishedReceipt_dID]
           ,[WarrantyDate]
           ,[IsReturn]
           ,[Netsales]
           ,[replenshDiff]
           ,[AvailableQty]
           ,[ReorderQty]
           ,[GoldWeight]
           ,[GoldClovesWeight]
           ,[Service]
           ,[LoyalityBalance]
           ,[TotalLoyalityBalance]
           ,[IsMemebership]
           ,[AvgCost]
           ,[TotalQTy]
           ,[TotalReservedQTy]
           ,[FromStoreReceiptd_ID]
           ,[AllStoresQty] from inv_receipt_d where parent_id = @FromP
	Fetch Next From CUR_Replace Into  @FromP
	
	End		--	 End of Fetch

	Close CUR_Replace
	Deallocate CUR_Replace
END
GO
/****** Object:  StoredProcedure [dbo].[aa_Start_CalcAvgCost]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
CREATE PROCEDURE [dbo].[aa_Start_CalcAvgCost]
	  
AS
BEGIN
 
Declare @STORE_id INTEGER ,@item_id INTEGER ,@AT_DATE DATETIME  ,@detailID integer,@Entry_Date Datetime ,@MCOUNTER integer 
			
		IF EXISTS (SELECT 1 
           FROM INFORMATION_SCHEMA.TABLES 
           WHERE TABLE_TYPE='BASE TABLE' 
           AND TABLE_NAME='TBL_Start_CalcAvgCost')  Drop table TBL_Start_CalcAvgCost ;	


	SELECT  row_number() over(partition by Inv_Receipt_d.item_id order by Inv_Receipt_d.store_id,Inv_Receipt_h.entry_date ) as rn ,				 
			 
			Inv_Receipt_h.Entry_Date,Inv_Receipt_d.ID , Inv_Receipt_d.Item_ID,Inv_Receipt_d.Store_ID
    into   TBL_Start_CalcAvgCost
	FROM   Inv_Receipt_d,Inv_Receipt_h
	Where  Inv_Receipt_d.Parent_ID= Inv_Receipt_h.ID   and Inv_Receipt_d.Item_ID not in (select id from inv_items where item_type <> 3 and  item_type <> 3 )
	order by Inv_Receipt_d.store_id,Inv_Receipt_d.item_id,Inv_Receipt_h.Entry_Date asc		    
	Declare CUR_StartAdjustAvgCost  cursor FAST_FORWARD 
		  For

		SELECT Store_ID,Item_ID,Entry_Date,ID         
		FROM   TBL_Start_CalcAvgCost
		Where  rn = 1
	
		
	 SET @MCOUNTER = 0
	 OPEN CUR_StartAdjustAvgCost 
	Fetch Next From CUR_StartAdjustAvgCost Into @STORE_id,@item_id,@AT_DATE,@detailID
		While @@Fetch_Status = 0 Begin			     
			Exec [aa_calcAvgCost]  @STORE_id,@item_id,@entry_date,@DetailID
	Fetch Next From CUR_StartAdjustAvgCost  Into @STORE_id,@item_id,@AT_DATE,@detailID

	End		--	 End of Fetch

	Close CUR_StartAdjustAvgCost
	Deallocate CUR_StartAdjustAvgCost
	Drop table TBL_Start_CalcAvgCost ;	 

	END
GO
/****** Object:  StoredProcedure [dbo].[aa_TestPostCostVoucher]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
CREATE PROCEDURE [dbo].[aa_TestPostCostVoucher]
	  
AS
BEGIN
	Declare @ser integer ,@Datein Datetime
	Set @Datein = Cast('2019-01-01 12:15:55'  as datetime)
	Exec [aa_PostCostVoucher] @Datein ,'321321',@ser
END 
GO
/****** Object:  StoredProcedure [dbo].[aa_update_80]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
CREATE PROCEDURE [dbo].[aa_update_80]  
AS
BEGIN
	declare @DBname nvarchar(50) 
	
DECLARE	@return_value Int
DECLARE @IntVariable INT;  
DECLARE @SQLString NVARCHAR(500);  
DECLARE @ParmDefinition NVARCHAR(500);  
DECLARE @max_title VARCHAR(30);  

	declare curDB CURSOR LOCAL for
	SELECT name FROM sys.databases where database_id >= 13 ;  
	open curDB

	fetch next from curDB into @DBname

	while @@FETCH_STATUS = 0 BEGIN
	
		
		  
	
		Set @SQLString = 'Select @ParmOUT = items from '+@DBname+'.[dbo].[Inv_Transaction_Codes] where Code  =80 '
			SET @ParmDefinition = N'@ParmOUT INT OUTPUT';
			exec sp_executesql @SQLString, @ParmDefinition, @ParmOUT=@return_value OUTPUT ;
			Select @return_value 
			 
		if  @return_value = 1  
		Begin 
		   print @SQLString
			--update Inv_Transaction_Codes set Items = 0 where code = 80
			Set @SQLString = 'update  '+@DBname+'.[dbo].[Inv_Transaction_Codes] set items=0  where Code  =80 '
			SET @ParmDefinition = N'@ParmOUT INT OUTPUT';
			exec sp_executesql @SQLString, @ParmDefinition, @ParmOUT=@return_value OUTPUT ;
		
			Set @SQLString = 'update  '+@DBname+'.[dbo].[Inv_Receipt_d] set transaction_move=0  where parent_id in  (select id from' + @DBname+'.[dbo].[Inv_Transaction_Codes]    where Code  =80)'
			SET @ParmDefinition = N'@ParmOUT INT OUTPUT';
			exec sp_executesql @SQLString, @ParmDefinition, @ParmOUT=@return_value OUTPUT ;

			
			Set @SQLString ='Exec '+ @DBname+'.[dbo].ss_calcAvgCost'
			SET @ParmDefinition = N'@ParmOUT INT OUTPUT';
			exec sp_executesql @SQLString, @ParmDefinition, @ParmOUT=@return_value OUTPUT ;


			  
 
		End 

		
		fetch next from curdb into @dbname
	END

	close curDB
	deallocate curDB  
END
GO
/****** Object:  StoredProcedure [dbo].[aa_update_AvgCostAndBalance]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
CREATE PROCEDURE [dbo].[aa_update_AvgCostAndBalance] 
AS
BEGIN
	declare @ReceiptID int, @STORE_id INTEGER ,@item_id INTEGER ,@AT_DATE DATETIME   
	declare cur CURSOR LOCAL for

	Select  distinct  Store_ID  ,Item_ID
	from  Inv_Receipt_d 
	
	open cur

	fetch next from cur into @STORE_id   ,@item_id

	while @@FETCH_STATUS = 0 BEGIN
			
		
		exec [dbo].[aa_calcAvgCost]  @STORE_id   ,@item_id   ,'20000101'    , 0

		fetch next from cur into @STORE_id   ,@item_id
	END

	close cur
	deallocate cur
END 

GO
/****** Object:  StoredProcedure [dbo].[aa_update_AvgCostAndBalance_alldata]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
CREATE PROCEDURE [dbo].[aa_update_AvgCostAndBalance_alldata] 
AS
BEGIN
	DECLARE @ItemsUnitId int

	DECLARE MY_CURSOR CURSOR 
	  LOCAL STATIC READ_ONLY FORWARD_ONLY
	FOR 
	SELECT DISTINCT ID 
	FROM Inv_Items_Units

	OPEN MY_CURSOR
	FETCH NEXT FROM MY_CURSOR INTO @ItemsUnitId
	WHILE @@FETCH_STATUS = 0
	BEGIN 
		--Do something with Id here
		PRINT @ItemsUnitId
		exec [dbo].[aa_update_InvItemsStore]
		update Inv_Items_Units set FinalConv = (Case When Inv_Items_Units.SubUnit_id IS NULL 
												 Then 1 
												 Else Inv_Items_Units.Conv * (select FinalConv from Inv_Items_Units as iu 
												 where iu.item_ID = Inv_Items_Units.Item_ID and iu.Unit_id = Inv_Items_Units.SubUnit_id )
										   End)
										   Where Inv_Items_Units.ID = @ItemsUnitId
		FETCH NEXT FROM MY_CURSOR INTO @ItemsUnitId
	END
	CLOSE MY_CURSOR
	DEALLOCATE MY_CURSOR

 
	DECLARE @Items_StoreId int
	Update Inv_Items_Store set FinalConv = 1 
	DECLARE MY_CURSOR CURSOR 
	  LOCAL STATIC READ_ONLY FORWARD_ONLY
	FOR 
	SELECT DISTINCT ID 
	FROM Inv_Items_Store

	OPEN MY_CURSOR
	FETCH NEXT FROM MY_CURSOR INTO @Items_StoreId
	WHILE @@FETCH_STATUS = 0
	BEGIN 
		--Do something with Id here
		PRINT @Items_StoreId
		update Inv_Items_Store set FinalConv =  (Case When Inv_Items_Store.First_Unit IS NULL  Then 1 Else
												 (select (Case When iu.FinalConv IS NULL 
												 Then 1 
												 Else iu.FinalConv *  (Inv_Items_Store.First_Conv / iu.Conv ) END) from Inv_Items_Units as iu 
												 where iu.item_ID = Inv_Items_Store.Item_ID and iu.Unit_id = Inv_Items_Store.First_Unit )End ) ,
												AvrCost = Inv_Items_Store.First_Cost / (Case When Inv_Items_Store.First_Unit IS NULL  Then 1 Else
												 (select (Case When iu.FinalConv IS NULL 
												 Then 1 
												 Else iu.FinalConv *  (Inv_Items_Store.First_Conv / iu.Conv ) END) from Inv_Items_Units as iu 
												 where iu.item_ID = Inv_Items_Store.Item_ID and iu.Unit_id = Inv_Items_Store.First_Unit )End ),
												Qty = Inv_Items_Store.First_Qty  * (Case When Inv_Items_Store.First_Unit IS NULL  Then 1 Else
												 (select (Case When iu.FinalConv IS NULL 
												 Then 1 
												 Else iu.FinalConv *  (Inv_Items_Store.First_Conv / iu.Conv ) END) from Inv_Items_Units as iu 
												 where iu.item_ID = Inv_Items_Store.Item_ID and iu.Unit_id = Inv_Items_Store.First_Unit )End )									
											 								   
										   Where Inv_Items_Store.ID = @Items_StoreId 



    
		FETCH NEXT FROM MY_CURSOR INTO @Items_StoreId
	END
	CLOSE MY_CURSOR
	DEALLOCATE MY_CURSOR


	DECLARE @Inv_ReceiptId int

	DECLARE MY_CURSOR CURSOR 
	  LOCAL STATIC READ_ONLY FORWARD_ONLY
	FOR 
	SELECT DISTINCT ID 
	FROM Inv_Receipt_d

	OPEN MY_CURSOR
	FETCH NEXT FROM MY_CURSOR INTO @Inv_ReceiptId
	WHILE @@FETCH_STATUS = 0
	BEGIN 
		--Do something with Id here
		PRINT @Inv_ReceiptId
		update Inv_Receipt_d set Final_conv =  (
												 select (Case When iu.FinalConv IS NULL 
												 Then 1 
												 Else iu.FinalConv *  (Inv_Receipt_d.Conv / iu.Conv ) END) from Inv_Items_Units as iu 
												 where iu.item_ID = Inv_Receipt_d.Item_ID and iu.Unit_id = Inv_Receipt_d.Unit_ID )									   
										   Where Inv_Receipt_d.ID = @Inv_ReceiptId
		FETCH NEXT FROM MY_CURSOR INTO @Inv_ReceiptId
	END
	CLOSE MY_CURSOR
	DEALLOCATE MY_CURSOR


	exec aa_update_AvgCostAndBalance
END
GO
/****** Object:  StoredProcedure [dbo].[aa_update_InvItemsStore]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create PROCEDURE [dbo].[aa_update_InvItemsStore] 
AS
BEGIN
	declare   @STORE_id INTEGER ,@item_id INTEGER ,@unit_ID integer   ,@Final_Conv Numeric(18,3)
	declare cur CURSOR LOCAL for




	Select Item_id,Store_ID ,Unit_ID,Final_conv   from  Inv_Receipt_d  where cast(store_id as varchar(50)) +'_'+ cast(Item_ID as varchar(50)) not in (Select cast(store_id as varchar(50)) +'_'+ cast(Item_ID as varchar(50)) from inv_items_store )

	open cur

	fetch next from cur into @item_id,@STORE_id,@unit_ID,@Final_Conv

	while @@FETCH_STATUS = 0 BEGIN
			 
		 insert into inv_items_store (Item_ID ,Store_ID ,First_Unit ,FinalConv ) values (@item_id,@STORE_id,@unit_ID,@Final_Conv)

		fetch next from cur into @item_id,@STORE_id,@unit_ID,@Final_Conv
	END

	close cur
	deallocate cur
END 
GO
/****** Object:  StoredProcedure [dbo].[aa_update_Unposted_51]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
CREATE PROCEDURE [dbo].[aa_update_Unposted_51] @id1 int=527350 ,@id2 int =649832
	    --[IMPORTANT] Comment the cursor of cost calculation in stored aa_PostReceiptH_Sales
AS
BEGIN
	declare @ReceiptID int 
	declare cur CURSOR LOCAL for
	
	SELECT id  as ReceiptID from Inv_Receipt_h where SubsidiaryID =71 and Branch_ID = 52 and code = 51

	open cur

	fetch next from cur into @ReceiptID

	while @@FETCH_STATUS = 0 BEGIN
	
		exec aa_PostReceiptH_Sales @ReceiptID ,'123'
		
		fetch next from cur into @ReceiptID
	END

	close cur
	deallocate cur  
END
GO
/****** Object:  StoredProcedure [dbo].[aa_updateAllDate]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
CREATE  PROCEDURE [dbo].[aa_updateAllDate] 
AS
BEGIN
		
		exec [dbo].[aa_update_AvgCostAndBalance]
		exec [dbo].[aa_updatePrice4alldata] 
END 

GO
/****** Object:  StoredProcedure [dbo].[aa_updatePrice4alldata]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create PROCEDURE [dbo].[aa_updatePrice4alldata] 
AS
BEGIN
	declare @ReceiptID int, @STORE_id INTEGER ,@item_id INTEGER ,@AT_DATE DATETIME   
	declare cur CURSOR LOCAL for

	Select  distinct Store_ID  , Item_ID
	from  inv_receipt_d where ISNULL(Store_ID,0) > 0 

	open cur
	fetch next from cur into @STORE_id   ,@item_id
	while @@FETCH_STATUS = 0 
	BEGIN
		exec [dbo].[aa_UpdatePriceAfterUpdateAVGCost]  @STORE_id   ,@item_id   ,'20000101'    , 0
	fetch next from cur into @STORE_id   ,@item_id
	END
 close cur
 deallocate cur
END 

GO
/****** Object:  StoredProcedure [dbo].[aa_UpdatePriceAfterUpdateAVGCost]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
CREATE PROCEDURE [dbo].[aa_UpdatePriceAfterUpdateAVGCost] --50,3648,'2019-06-23',7445
	   @STORE_id INTEGER ,@item_id INTEGER ,@AT_DATE DATETIME  ,@detailID integer
AS
BEGIN
  return;
Declare @MQTY numeric(18,8) ,@FinishedProductDetailID int
Declare @I_Exist numeric(20) 
Declare @MCOUNTER integer
Declare @MPRICE  numeric(18,8) ,@FinishProductPrice numeric(18,8)
 Declare @total numeric(18,8)
Declare @conv numeric(18,8),  @Transaction_Code numeric(3,0) ,  @Transaction_move numeric(3,0) ,@Entry_Date Datetime 
Declare @parentID integer ,@FinishedProductID integer ,  @CurrencyRate numeric(18,8) 
Declare  @itemType integer
Declare @ReservedFlag	integer,@ReservedQTY numeric(18,8),@totalResevedqty numeric(18,8)
Declare  @oldrn int  ,@AvgCost numeric(18,8) 
			
	IF EXISTS (SELECT 1 
		FROM INFORMATION_SCHEMA.TABLES 
		WHERE TABLE_TYPE='BASE TABLE' 
		AND TABLE_NAME='curtbl_updatePrice')  Drop table curtbl_updatePrice ;	

	Select @itemType = item_type From inv_items where id = @item_id
	IF @itemType in (2,3) Return

	SELECT  row_number() over(partition by Inv_Receipt_d.item_id order by Inv_Receipt_d.store_id,Inv_Receipt_h.entry_date,Inv_Receipt_d.ID ) as rn ,				 
			Price = ( Inv_Receipt_d.Price  - (Inv_Receipt_d.Price  * isnull( Inv_Receipt_d.Discount_Percent ,0)/ 100 ) ) / (   ISNULL( Inv_Receipt_h.Costing_Rate,1) ),
			Inv_Receipt_h.Code,
			Inv_Receipt_h.Entry_Date,Inv_Receipt_d.ID ,Inv_Receipt_d.Parent_ID,Inv_Receipt_d.Transaction_move,Inv_Receipt_d.finishedproductID
   into   curtbl_updatePrice
	FROM   Inv_Receipt_d,Inv_Receipt_h
	Where  Inv_Receipt_d.Parent_ID= Inv_Receipt_h.ID  and Inv_Receipt_d.item_id = @item_id and  Inv_Receipt_d.store_id = @STORE_id   and isnull(IsHolded,0) <> 1   and isnull(Is_Canceled,0) <> 1  -- and   Inv_Receipt_d.Price > 0 
			and Inv_Receipt_h.Entry_Date >= @AT_DATE and ((Inv_Receipt_h.Code in (61,81,82,83,85)) or ((code = 60 or code = 63 ) and isnull(Inv_receipt_h.CustomerSalesPrice,0) = 5 ))
	--		and  Inv_Receipt_d.ID <> @detailID	
	order by Inv_Receipt_d.store_id,Inv_Receipt_d.item_id,Inv_Receipt_h.Entry_Date, Inv_Receipt_d.id asc
		   
		Set @oldrn = 0 
Declare CUR_UpdatePriceTransactions  cursor FAST_FORWARD 
		  For

		SELECT 	 
				Price ,
				Code ,
				Entry_Date,
				ID  ,Transaction_move,FinishedProductID,Parent_ID
		From curtbl_updatePrice
		Where rn > @oldrn
		order by Entry_Date
		
	 SET @MCOUNTER = 0
	 OPEN CUR_UpdatePriceTransactions 
	Fetch Next From CUR_UpdatePriceTransactions Into  @MPRICE, @Transaction_Code ,@Entry_Date,@detailID ,@Transaction_move,@FinishedProductID,@parentID
	

	While @@Fetch_Status = 0 Begin
		
	  SET @MCOUNTER = @MCOUNTER + 1;  
	  Select @AvgCost = convert(numeric(18,8),AvgCost ) from Inv_Receipt_d where id = @detailID 
	  Print '@detailID = ' + Cast(@detailID as nvarchar(50))
	  update Inv_Receipt_d set 
	         price = convert(numeric(18,8),Isnull(AvgCost,0) * Isnull(FInal_conv,1))
			 ,Total = convert(numeric(18,8),(Qty * Isnull(AvgCost,0)  * Isnull(FInal_conv,1) )) - convert(numeric(18,8),((Qty * Isnull(AvgCost,0)  * Isnull(FInal_conv,1)) * (ISNULL(Discount_Percent,0) / 100)))
			 , DefaultItemCost = convert(numeric(18,8),Isnull(AvgCost,0) * Isnull(FInal_conv,1))
		     ,Discount_Value = convert(numeric(18,8),(Qty * Isnull(AvgCost,0)  * Isnull(FInal_conv,1)) * (ISNULL(Discount_Percent,0) / 100))
		 
	   where id = @detailID 

	   IF @FinishedProductID is null set @FinishedProductID =0
	 
	  -------------------------------------------------------------------------------------------------
	  ------------Update finish product price AND KIT AVGCOST
	  IF @FinishedProductID > 0 --AND @Transaction_Code = 82 and @Transaction_move = -1
	  Begin
	    Select @FinishedProductDetailID =  FinishedReceipt_dID  from Inv_Receipt_d where id = @detailID 
		
		Select @FinishProductPrice = Sum(convert(numeric(18,8),ISNULL(qty * Final_conv * AvgCost,0)) )
		from  Inv_Receipt_d 
		where FinishedReceipt_dID =@FinishedProductDetailID
		
		IF @FinishProductPrice is null Set @FinishProductPrice = 0
		IF  @Transaction_Code = 82 
		Begin
			Update Inv_Receipt_d 
			Set total = convert(numeric(18,8),@FinishProductPrice ) ,
				Price = convert(numeric(18,8),@FinishProductPrice  / qty)
			where id = @FinishedProductDetailID				
			Exec dbo.aa_calcAvgCost @STORE_id,@FinishedProductID,@Entry_Date,@FinishedProductDetailID
		END
		ELSE
		Begin
			Update Inv_Receipt_d 
			Set total = convert(numeric(18,8),@FinishProductPrice ) ,
				AvgCost = convert(numeric(18,8),@FinishProductPrice  / qty)			
			where   ID = @FinishedProductDetailID
		END		
	  END
	    ------------------------- update detail H_Discount -------------------------------------------
	 
	  Select @total =  total from   Inv_Receipt_d where Inv_Receipt_d.ID = @detailID 
	  IF @total	= 0 
	    update Inv_Receipt_d set  H_Discount_Value = 0 ,H_Discount_Percentage = 0		 
		where Inv_Receipt_d.ID = @detailID 
		ELSE
	  Begin 
		  update Inv_Receipt_d set 
		   H_Discount_Value = convert(numeric(18,8),((ISNULL(Inv_Receipt_h.Discount_Percent,0) / 100) * Inv_Receipt_d.Total)) / convert(numeric(18,8),Inv_Receipt_d.Qty)
		  ,H_Discount_Percentage = convert(numeric(18,8),(ISNULL(Inv_Receipt_d.H_Discount_Value,0) / (Inv_Receipt_d.Total / Inv_Receipt_d.Qty)) * 100)
		  from Inv_Receipt_d inner join Inv_Receipt_h on Inv_Receipt_h.ID = Inv_Receipt_d.Parent_ID
		  where Inv_Receipt_d.ID = @detailID 
		  ---------------------------------------------------------------------------------------------------

		  ------------------------- update parent total and net -------------------------------------------
		  update Inv_Receipt_h set Inv_Receipt_h.Value = (select convert(numeric(18,8),sum(Inv_Receipt_d.Total) ) from Inv_Receipt_d where Parent_ID = @parentID and Transaction_move = -1)
		  where ID = @parentID

		  update Inv_Receipt_h set Inv_Receipt_h.ValueForeign = (select convert(numeric(18,8),sum(Inv_Receipt_d.Total) * Inv_Receipt_h.Currency_Rate ) from Inv_Receipt_d where Parent_ID = @parentID and Transaction_move = -1)
		  where ID = @parentID

		  update Inv_Receipt_h set Discount_Value = convert(numeric(18,8),Inv_Receipt_h.Value * (ISNULL(Discount_Percent,0) / 100))
		  where ID = @parentID

		  update Inv_Receipt_h set Discount_ForeignValue = convert(numeric(18,8),Inv_Receipt_h.ValueForeign * (ISNULL(Discount_ForeignPercent,0) / 100))
		  where ID = @parentID

		  update Inv_Receipt_h set Inv_Receipt_h.NetValue = convert(numeric(18,8),Inv_Receipt_h.Value - ISNULL(Inv_Receipt_h.Discount_Value,0))
		  where ID = @parentID

		  update Inv_Receipt_h set Inv_Receipt_h.NetValueForeign = Inv_Receipt_h.ValueForeign - ISNULL(Inv_Receipt_h.Discount_ForeignValue,0)
		  where ID = @parentID
		  ---------------------------------------------------------------------------------------------------
	 END
	Fetch Next From CUR_UpdatePriceTransactions Into  @MPRICE, @Transaction_Code,@Entry_Date,@detailID ,@Transaction_move,@FinishedProductID,@parentID

	End		--	 End of Fetch

	Close CUR_UpdatePriceTransactions
	Deallocate CUR_UpdatePriceTransactions
	Drop table curtbl_updatePrice ;	 

	END 

	IF  @Transaction_Code = 81
		Begin
UPDATE d1 SET d1.Price = d2.Price,d1.Qty = d2.Qty,d1.Total = d2.Total,d1.AvgCost = d2.AvgCost
FROM Inv_Receipt_d d1 INNER JOIN Inv_Receipt_d d2 ON d1.FromStoreReceiptd_ID = d2.ID
WHERE d1.FromStoreReceiptd_ID is not null
END
GO
/****** Object:  StoredProcedure [dbo].[aa_UpdatePriceAfterUpdateAVGCost1]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
Create PROCEDURE [dbo].[aa_UpdatePriceAfterUpdateAVGCost1] --50,3648,'2019-06-23',7445
	   @STORE_id INTEGER ,@item_id INTEGER ,@AT_DATE DATETIME  ,@detailID integer
AS
BEGIN
  
Declare @MQTY numeric(18,6) 
Declare @I_Exist numeric(20) 
Declare @MCOUNTER integer
Declare @MPRICE  numeric(18,6) ,@FinalConv numeric(18,6)

Declare @conv numeric(18,6),  @Transaction_Code numeric(3,0) ,  @Transaction_move numeric(3,0) ,@Entry_Date Datetime 
Declare @parentID integer ,@FinishedProductID integer ,  @CurrencyRate numeric(18,6) 
Declare  @itemType integer
Declare @ReservedFlag	integer,@ReservedQTY numeric(18,6),@totalResevedqty numeric(18,6)
Declare  @oldrn int  ,@AvgCost numeric(18,6) 
			
	IF EXISTS (SELECT 1 
		FROM INFORMATION_SCHEMA.TABLES 
		WHERE TABLE_TYPE='BASE TABLE' 
		AND TABLE_NAME='curtbl_updatePrice')  Drop table curtbl_updatePrice ;	

	Select @itemType = item_type From inv_items where id = @item_id
	IF @itemType in (2,3) Return

	SELECT  row_number() over(partition by Inv_Receipt_d.item_id order by Inv_Receipt_d.store_id,Inv_Receipt_h.entry_date,Inv_Receipt_d.ID ) as rn ,				 
			QTY = Inv_Receipt_d.Qty *ISNULL(Inv_Receipt_d.Final_conv ,1)* Inv_Receipt_d.Transaction_move ,
			ReservedQTY = case  Inv_Receipt_h.ReservedFlag  when   1 then Inv_Receipt_d.Qty *ISNULL(Inv_Receipt_d.Final_conv ,1)  else (case Inv_Receipt_h.Code when 60 then Case (SELECT  1 FROM [Inv_ReceiptReceipts],[Inv_Receipt_h] a  where [Inv_ReceiptReceipts].[ParentReceiptID] = [Inv_Receipt_h].id and a.id = [Inv_ReceiptReceipts].[ReceiptID] and a.ReservedFlag = 1 ) when 1 then  (Inv_Receipt_d.Qty *ISNULL(Inv_Receipt_d.Final_conv ,1)* Inv_Receipt_d.Transaction_move  ) else 0 end  else 0 end ) end ,
			Price = ( Inv_Receipt_d.Price  - (Inv_Receipt_d.Price  * isnull( Inv_Receipt_d.Discount_Percent ,0)/ 100 ) ) / (   ISNULL( Inv_Receipt_h.Costing_Rate,1) ),
			Inv_Receipt_h.Code,
			Inv_Receipt_h.Entry_Date,Inv_Receipt_d.ID ,Inv_Receipt_d.Parent_ID,Inv_Receipt_d.Transaction_move,Inv_Receipt_d.finishedproductID,Inv_Receipt_h.ReservedFlag,ISNULl(Inv_Receipt_d.Final_conv,1) Final_conv
    into   curtbl_updatePrice
	FROM   Inv_Receipt_d,Inv_Receipt_h
	Where  Inv_Receipt_d.Parent_ID= Inv_Receipt_h.ID  and Inv_Receipt_d.item_id = @item_id and  Inv_Receipt_d.store_id = @STORE_id   and isnull(IsHolded,0) <> 1   and isnull(Is_Canceled,0) <> 1  -- and   Inv_Receipt_d.Price > 0 
			and Inv_Receipt_h.Entry_Date > @AT_DATE and ((Inv_Receipt_h.Code in (61,81,82,83,85)) or ((code = 60 or code = 63 ) and isnull(Inv_receipt_h.CustomerSalesPrice,0) = 5 ))
	order by Inv_Receipt_d.store_id,Inv_Receipt_d.item_id,Inv_Receipt_h.Entry_Date, Inv_Receipt_d.id asc
		   
		Set @oldrn = 0 
Declare CUR_UpdatePriceTransactions  cursor FAST_FORWARD 
		  For

		SELECT 	QTY  ,
				ReservedQTY,
				Price ,
				Code ,
				Entry_Date,
				ID  ,Transaction_move,FinishedProductID,Parent_ID,ReservedFlag , Final_conv
		From curtbl_updatePrice
		Where rn > @oldrn
		order by Entry_Date
		
	 SET @MCOUNTER = 0
	 OPEN CUR_UpdatePriceTransactions 
	Fetch Next From CUR_UpdatePriceTransactions Into @MQTY, @ReservedQTY,@MPRICE, @Transaction_Code,@Entry_Date,@detailID ,@Transaction_move,@FinishedProductID,@parentID,@ReservedFlag,@Finalconv
	

	While @@Fetch_Status = 0 Begin
	  SET @MCOUNTER = @MCOUNTER + 1;  
	  Select @AvgCost = AvgCost from Inv_Receipt_d_Avgcost where id = @detailID 

	  ------------------------- update detail price and total -------------------------------------------
	  update Inv_Receipt_d set 
	  price =@AvgCost
	  ,Avr_Cost = @AvgCost
	  ,Discount_Value = (Qty * @AvgCost) * (ISNULL(Discount_Percent,0) / 100)
	  ,Total = (Qty * @AvgCost) - ((Qty * @AvgCost) * (ISNULL(Discount_Percent,0) / 100))
	   where id = @detailID 
	  ---------------------------------------------------------------------------------------------------

	  ------------------------- update detail H_Discount -------------------------------------------
	  update Inv_Receipt_d set 
	   H_Discount_Value = ((ISNULL(Inv_Receipt_h.Discount_Percent,0) / 100) * Inv_Receipt_d.Total) / Inv_Receipt_d.Qty
	  ,H_Discount_Percentage = (ISNULL(Inv_Receipt_d.H_Discount_Value,0) / (Inv_Receipt_d.Total / Inv_Receipt_d.Qty)) * 100
	  from Inv_Receipt_d inner join Inv_Receipt_h on Inv_Receipt_h.ID = Inv_Receipt_d.Parent_ID
	  where Inv_Receipt_d.ID = @detailID 
	  ---------------------------------------------------------------------------------------------------

	  ------------------------- update parent total and net -------------------------------------------
	  update Inv_Receipt_h set Inv_Receipt_h.Value = (select sum(Inv_Receipt_d.Total) from Inv_Receipt_d where Parent_ID = @parentID and Transaction_move = -1)
	  where ID = @parentID

	  update Inv_Receipt_h set Inv_Receipt_h.ValueForeign = (select sum(Inv_Receipt_d.Total) * Inv_Receipt_h.Currency_Rate from Inv_Receipt_d where Parent_ID = @parentID and Transaction_move = -1)
	  where ID = @parentID

	  update Inv_Receipt_h set Discount_Value = Inv_Receipt_h.Value * (ISNULL(Discount_Percent,0) / 100)
	  where ID = @parentID

	  update Inv_Receipt_h set Discount_ForeignValue = Inv_Receipt_h.ValueForeign * (ISNULL(Discount_ForeignPercent,0) / 100)
	  where ID = @parentID

	  update Inv_Receipt_h set Inv_Receipt_h.NetValue = Inv_Receipt_h.Value - ISNULL(Inv_Receipt_h.Discount_Value,0)
	  where ID = @parentID

	  update Inv_Receipt_h set Inv_Receipt_h.NetValueForeign = Inv_Receipt_h.ValueForeign - ISNULL(Inv_Receipt_h.Discount_ForeignValue,0)
	  where ID = @parentID
	  ---------------------------------------------------------------------------------------------------

	Fetch Next From CUR_UpdatePriceTransactions Into @MQTY,@ReservedQTY, @MPRICE, @Transaction_Code,@Entry_Date,@detailID ,@Transaction_move,@FinishedProductID,@parentID,@ReservedFlag,@Finalconv

	End		--	 End of Fetch

	Close CUR_UpdatePriceTransactions
	Deallocate CUR_UpdatePriceTransactions
	Drop table curtbl_updatePrice ;	 

	END
GO
/****** Object:  StoredProcedure [dbo].[aa_updateUnposted51_DialyColse]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
Create PROCEDURE [dbo].[aa_updateUnposted51_DialyColse]
	    --[IMPORTANT] Comment the cursor of cost calculation in stored aa_PostReceiptH_Sales
AS
BEGIN
	declare @ReceiptID int
	declare cur CURSOR LOCAL for

	SELECT distinct Inv_Receipt_h.ID  as ReceiptID from Inv_Receipt_h where 
	 ID not in (Select ReceiptID from GL_Vouchers where ReceiptID is not null)	and 
	Code = 51  

	open cur

	fetch next from cur into @ReceiptID

	while @@FETCH_STATUS = 0 BEGIN
	
		exec aa_PostReceiptH_Sales @ReceiptID ,'123'

		fetch next from cur into @ReceiptID
	END

	close cur
	deallocate cur
END
GO
/****** Object:  StoredProcedure [dbo].[Accounts_Balance_Hierarchy]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Proc [dbo].[Accounts_Balance_Hierarchy]
	  @FromDate    DATE         = Null
	, @ToDate      DATE         = Null
	, @SubsidaryID INT          = Null
	, @Level       NVARCHAR(50) = Null
	, @Type        INT          = Null
As
	  Begin
			If @Level = 4
				 Begin


					  Set @Type = 2
				 End


 
 -- Get Account Level : #Accounts_Level
    ;WITH Accounts_Level AS
    (
        -- root level
        SELECT GL_Accounts.AccountID
        ,      GL_Accounts.ParentID
        ,      1            AS [Level]
        ,      CAST('-'+CAST(AccountID AS NVARCHAR(10))+'-' AS NVARCHAR(100)) AS Hierarchy -- build hierarchy in format -L0-L1-L2-...-Ln--
        FROM   GL_Accounts
        WHERE  ParentID IS     NULL
        UNION ALL
        -- recursive join on parent, building hierarchy
        SELECT CurrentLevel.AccountID
        ,      CurrentLevel.ParentID
        ,      ParentLevel.[Level]+1  AS [Level]
        ,      CAST(
                   ParentLevel.Hierarchy+CAST(CurrentLevel.AccountID AS NVARCHAR(10))+'-' AS NVARCHAR(100)
               )                      AS Hierarchy
        FROM   GL_Accounts CurrentLevel
               JOIN Accounts_Level ParentLevel
                    ON  CurrentLevel.ParentID = ParentLevel.AccountID
    )
    
    SELECT *
    INTO   #Accounts_Level
    FROM   Accounts_Level
-- ==> Get Account Level : #Accounts_Level
---------------------------------------------------------------------------------------------------
-- Get Details
-- #Details
			Select
					 GL_Accounts.AccountID
				  , GL_Accounts.Code
				  , Gl_Accounts.Name
				  , GL_Vouchers.VouhcerDate
				  , #Accounts_Level.Hierarchy
				  , IsNull(SUM(GL_VoucherDetails.Debit), 00) As                                             Debit
				  , IsNull(SUM(GL_VoucherDetails.Credit), 00) As                                            Credit
				  , IsNull(SUM(GL_VoucherDetails.Debit), 00) - IsNull(SUM(GL_VoucherDetails.Credit), 00) As Balance
			Into
				  #Details
			From
				  GL_Accounts
			Left Join GL_VoucherDetails
				  On GL_VoucherDetails.AccountNoID = GL_Accounts.AccountID
			Left Join GL_Vouchers
				  On GL_Vouchers.ID = GL_VoucherDetails.VoucherID
			Left Join #Accounts_Level
				  On #Accounts_Level.AccountID = GL_Accounts.AccountID
			WHERE
			 (@ToDate IS NULL OR GL_Vouchers.VouhcerDate<=@ToDate)
			 and
							(
											@SubsidaryID Is Null
											Or GL_Vouchers.SubsidaryID In(@SubsidaryID))
			And GL_Vouchers.Posted = 1
			Group By
						GL_Accounts.AccountID
					 , GL_Accounts.Code
					 , Gl_Accounts.Name
					 , GL_Vouchers.VouhcerDate
					 , #Accounts_Level.Hierarchy    
       
       
      
       
       -- Get BeginBalance
       -- #All_Account_BeginBalance
			Select
					 All_Accounts.AccountID
				  , All_Accounts.Code
				  , IsNull(SUM(#Details.Debit), 00) As   BeginBalance_Debit
				  , IsNull(SUM(#Details.Credit), 00) As  BeginBalance_Credit
				  , IsNull(SUM(#Details.Balance), 00) As BeginBalance_Balance
			Into
				  #All_Account_BeginBalance
			From
				  GL_Accounts All_Accounts
			Left Join #Accounts_Level
				  On #Accounts_Level.AccountID = All_Accounts.AccountID
				, #Details
			Where
							#Details.Hierarchy Like #Accounts_Level.Hierarchy+'%'
							And (
												 @FromDate Is Null
												 Or #Details.VouhcerDate < @FromDate)
			Group By
						All_Accounts.AccountID
					 , All_Accounts.Code
       
      
       
       -- Get All Acounts With It's Value !
			Select
					 All_Accounts.AccountID
				  , All_Accounts.Code
				  , IsNull(SUM(#Details.Debit), 00) As   Debit
				  , IsNull(SUM(#Details.Credit), 00) As  Credit
				  , IsNull(SUM(#Details.Balance), 00) As Balance
			Into
				  #All_Accounts
			From
				  GL_Accounts All_Accounts
			Left Join #Accounts_Level
				  On #Accounts_Level.AccountID = All_Accounts.AccountID
				, #Details
			Where
							#Details.Hierarchy Like #Accounts_Level.Hierarchy+'%'
							And (
												 @FromDate Is Null
												 Or #Details.VouhcerDate >= @FromDate)
							And (
												 @ToDate Is Null
												 Or #Details.VouhcerDate <= @ToDate)
			Group By
						All_Accounts.AccountID
					 , All_Accounts.Code
       
       -- Get Accounts_Balance_Hierarchy
			Select
					 GL_Accounts.AccountID
				  , GL_Accounts.ParentID
				  , GL_Accounts.Code
				  , GL_Accounts.Type
				  , GL_Accounts.LevelNo
				  , REPLICATE(' ', (GL_Accounts.LevelNo-1)*2)+#All_Accounts.Code As [Code For View]
				  , GL_Accounts.Name
				  , GL_Accounts.Name_AR
				  , REPLICATE(' ', (GL_Accounts.LevelNo-1)*2)+GL_Accounts.Name As   [Name For View]
				  , IsNull(#All_Accounts.Debit, 00) As                              Debit
				  , IsNull(#All_Accounts.Credit, 00) As                             Credit
				  , IsNull(#All_Accounts.Balance, 00) As                            Balance
				  , ISNull(Case
									When IsNull(#All_Accounts.Debit, 00) - IsNull(#All_Accounts.Credit, 00) > 0
									Then IsNull(#All_Accounts.Debit, 00) - IsNull(#All_Accounts.Credit, 00)
									Else 0
							  End, 0) As                                               Balance_Debit
				  , ISNull(Case
									When IsNull(#All_Accounts.Credit, 00) - IsNull(#All_Accounts.Debit, 00) > 0
									Then IsNull(#All_Accounts.Credit, 00) - IsNull(#All_Accounts.Debit, 00)
									Else 0
							  End, 0) As                                               Balance_Credit
				  , IsNull(#All_Account_BeginBalance.BeginBalance_Debit, 00) As     BeginBalance_Debit
				  , IsNull(#All_Account_BeginBalance.BeginBalance_Credit, 00) As    BeginBalance_Credit
				  , IsNull(#All_Account_BeginBalance.BeginBalance_Balance, 00) As   BeginBalance_Balance
			From
				  GL_Accounts
			Left Join #All_Accounts
				  On #All_Accounts.AccountID = GL_Accounts.AccountID
			Left Join #All_Account_BeginBalance
				  On #All_Account_BeginBalance.AccountID = GL_Accounts.AccountID
			Where
							(
											@Type Is Null
											Or GL_Accounts.Type = @Type)
							And (
												 @Level = 4
												 Or @Level Is Null
												 Or GL_Accounts.LevelNo <= @Level)
							And (
												 @Level = 4
           --OR  @Level IS NULL
												 Or GL_Accounts.LevelNo != 0)
							--And #All_Accounts.Debit - #All_Accounts.Credit <> 0
			Order By
						#All_Accounts.Code
	  End
 
-- Go
--Accounts_Balance_Hierarchy
GO
/****** Object:  StoredProcedure [dbo].[AddNewERPClient]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Proc [dbo].[AddNewERPClient] --'TrialERP_public',10,11
 @domain_name nvarchar(50) ,
 @no_of_subsidiary int = null ,
 @no_of_users int = null
 as
declare @DatabaseName nvarchar(50) 
declare @backupPath nvarchar(500) 
declare @TargetDataFilePath nvarchar(500) 
declare @TargetLogFilePath nvarchar(500) 
declare @cmdstring nvarchar(500) 

--set @ClientName = 'AutoDeletedDB'
set @DatabaseName = 'GL_WEB_' + @domain_name
set @backupPath = 'C:\Backup\GL_WEB_' + @domain_name + '.bak'

set @TargetLogFilePath = 'C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\' + @DatabaseName + '_log.ldf'
set @TargetDataFilePath = 'C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\' + @DatabaseName + '.mdf'

-- Backup source database
BACKUP DATABASE gl_web_vpcfirm
TO DISK = @backupPath;

RESTORE FILELISTONLY FROM DISK = @backupPath

-- Restore destination database
RESTORE DATABASE @DatabaseName FROM DISK = @backupPath
WITH FILE = 1,
   MOVE 'GL_WEB_vpcfirm' TO  @TargetDataFilePath,
   MOVE 'GL_WEB_vpcfirm_log' TO @TargetLogFilePath,
   NOUNLOAD, REPLACE, STATS = 10

   -- Insert into _Clients table
   insert into [GL_WEB_General].._Clients (ClientName,ClientDatabase,[Status]) values (@domain_name,@DatabaseName,1)

   -- Set new database Settings
  declare @SQL_SCRIPT nvarchar(200) 
  SET @SQL_SCRIPT = REPLACE('use {DATABASENAME} update _SETTINGS set NoOfSubsidiaryAllowed = {no_of_subsidiary}, NoOfUsersAllowed = {no_of_users}', '{DATABASENAME}', @DatabaseName)
  SET @SQL_SCRIPT = REPLACE(@SQL_SCRIPT, '{no_of_subsidiary}', @no_of_subsidiary)
  SET @SQL_SCRIPT = REPLACE(@SQL_SCRIPT, '{no_of_users}', @no_of_users)

  print @SQL_SCRIPT

  EXECUTE (@SQL_SCRIPT)

   -- delete temp backup
set @cmdstring = 'DEL ' + @backupPath
exec master..xp_cmdshell @cmdstring,no_output
GO
/****** Object:  StoredProcedure [dbo].[AdjustExpensesRaio]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[AdjustExpensesRaio] --42940
	    @InvoiceID integer
AS

--update Inv_ReceiptExpenses set BasicValue = Value , BasicLocalValue = LocalValue 
--where BasicValue is null or BasicLocalValue is null

--declare @ReceiptID int
--declare @ParentReceiptID int
--declare cur CURSOR LOCAL for

--select ReceiptID,ParentReceiptID
-- from Inv_ReceiptReceipts where ReceiptID = (select ReceiptID from Inv_ReceiptReceipts where ParentReceiptID = @InvoiceID)


--open cur

--fetch next from cur into @ReceiptID,@ParentReceiptID

--while @@FETCH_STATUS = 0 BEGIN	

----update Inv_ReceiptExpenses set BasicValue = (select top 1 Value from Inv_ReceiptExpenses where ReceiptID = @ReceiptID),
----BasicLocalValue = (select top 1 LocalValue from Inv_ReceiptExpenses where ReceiptID = @ReceiptID)
----where ReceiptID = @ParentReceiptID

--update RE set RE.BasicValue = (select top 1 Value from Inv_ReceiptExpenses where ReceiptID = @ReceiptID),
--RE.BasicLocalValue = (select top 1 LocalValue from Inv_ReceiptExpenses where ReceiptID = @ReceiptID)
--from Inv_ReceiptExpenses RE 
--inner join Inv_ReceiptExpenses PRE on RE.ExpenseID = PRE.ExpenseID and RE.ReceiptID = PRE.ReceiptID
--where RE.ReceiptID = @ParentReceiptID and RE.PurchaseExpense = 1

--    update RE set RE.Value = (RE.BasicValue / linkedRH.NetValue) * RH.NetValue , RE.LocalValue = ((RE.BasicLocalValue / linkedRH.NetValue) * RH.NetValue) * RE.ExchangeRate  
--from Inv_ReceiptExpenses RE
--inner join Inv_Receipt_h RH on RH.ID = RE.ReceiptID
--inner join Inv_Receipt_h linkedRH on linkedRH.ID = @ReceiptID
--where ReceiptID = @ParentReceiptID and RE.PurchaseExpense = 1
----and RE.RelatedToLC = 1

--    fetch next from cur into @ReceiptID,@ParentReceiptID
--END

--close cur
--deallocate cur
GO
/****** Object:  StoredProcedure [dbo].[Analytical_GroupBy_Matrix_Monthly]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Proc [dbo].[Analytical_GroupBy_Matrix_Monthly]
     @FromDate     DATE          = '20190101'
   , @ToDate       DATE          = '20190210'
   , @AccountID    INT           = Null
   , @CostCenterID INT           = Null
   , @DepartMentID INT           = Null
   , @LocationID   INT           = Null
   , @ClassID      INT           = Null
   , @ParentCode   NVARCHAR(MAX) = NULL
   , @SubsidaryID  INT           = Null
   , @RowGroup     NVARCHAR(50)  = 'Account' --Account, CostCenter, Department, Location, Class

   , @ColumnGroup  NVARCHAR(50)  = 'Account' --Account, CostCenter, Department, Location, Class

   , @ReportType   NVARCHAR(50)  = 'Monthly'	--GroupBy, Matrix, Monthly

As
         Begin
-- Get Value From @ParentCode ...!
             If(Exists
(
    Select
           *
    From
         dbo.Split(@ParentCode, ',')
    Where Item = -1
))
                 Set @ParentCode = Null
                 Else
             Select
                    *
             Into
                  #ParentCode
             From
                  dbo.Split(@ParentCode, ',')

             Select
                    GL_Accounts.AccountID
                  , Code
                  , ParentID
             Into
                  #T
             From
                  #ParentCode
             Left Join GL_Accounts
                  On GL_Accounts.Code = #ParentCode.Item    
      
      --SELECT * FROM #ParentCode
      --SELECT * FROM #T
      --return
-- ==> Get Value From @ParentCode   
---------------------------------------------------------------------------------------------------      
             Declare
                    @Sql NVARCHAR(MAX) = Null;

             Declare
                    @TblName_RowGroup NVARCHAR(50) = Case
                                                         When @RowGroup = 'Account'
                                                         Then 'GL_Accounts'
                                                         When @RowGroup = 'CostCenter'
                                                         Then 'mstr_Costcenter'
                                                         When @RowGroup = 'Department'
                                                         Then 'mstr_Departments'
                                                         When @RowGroup = 'Location'
                                                         Then 'mstr_Locations'
                                                         When @RowGroup = 'Class'
                                                         Then 'mstr_Classes'
                                                     End;

             Declare
                    @TblCol_RowGroup NVARCHAR(50) = Case
                                                        When @TblName_RowGroup = 'GL_Accounts'
                                                        Then 'AccountNoID'
                                                        When @TblName_RowGroup = 'mstr_Costcenter'
                                                        Then 'CostcenterID'
                                                        When @TblName_RowGroup = 'mstr_Departments'
                                                        Then 'DepartmentID'
                                                        When @TblName_RowGroup = 'mstr_Locations'
                                                        Then 'LocationID'
                                                        When @TblName_RowGroup = 'mstr_Classes'
                                                        Then 'ClassID'
                                                    End;

             Declare
                    @TblName_ColumnGroup NVARCHAR(50) = Case
                                                            When @ColumnGroup = 'Account'
                                                            Then 'GL_Accounts'
                                                            When @ColumnGroup = 'CostCenter'
                                                            Then 'mstr_Costcenter'
                                                            When @ColumnGroup = 'Department'
                                                            Then 'mstr_Departments'
                                                            When @ColumnGroup = 'Location'
                                                            Then 'mstr_Locations'
                                                            When @ColumnGroup = 'Class'
                                                            Then 'mstr_Classes'
                                                        End;

             Declare
                    @TblCol_ColumnGroup NVARCHAR(50) = Case
                                                           When @TblName_ColumnGroup = 'GL_Accounts'
                                                           Then 'AccountNoID'
                                                           When @TblName_ColumnGroup = 'mstr_Costcenter'
                                                           Then 'CostcenterID'
                                                           When @TblName_ColumnGroup = 'mstr_Departments'
                                                           Then 'DepartmentID'
                                                           When @TblName_ColumnGroup = 'mstr_Locations'
                                                           Then 'LocationID'
                                                           When @TblName_ColumnGroup = 'mstr_Classes'
                                                           Then 'ClassID'
                                                       End;



             Select
                    @Sql = '		
	SELECT     
			tbl.Name As [RowGroup]
			,tbl.Name_Ar As [RowGroup_AR]
           ,Sum(D.Debit) AS [Debit]
           ,Sum(D.Credit) AS [Credit]
           ,Sum(D.Debit) - Sum(D.Credit) AS [Balance]
           '+Case
                 When @ReportType = 'Monthly'
                 Then ',SUBSTRING(DateName( month , DateAdd( month , Month(Cast(H.VouhcerDate AS date)), -1 ) ), 1, 3) + '' '' + Cast( Year(Cast(H.VouhcerDate AS date)) AS nvarchar(4) )  '
                 When @ReportType = 'Matrix'
                 Then ',tbl_col.Name'
                 Else ',Null'
             End+' as [ColumnGroup]
           '+Case
                 When @ReportType = 'Monthly'
                 Then ',SUBSTRING(DateName( month , DateAdd( month , Month(Cast(H.VouhcerDate AS date)), -1 ) ), 1, 3) + '' '' + Cast( Year(Cast(H.VouhcerDate AS date)) AS nvarchar(4) )  '
                 When @ReportType = 'Matrix'
                 Then ',tbl_col.Name_Ar'
                 Else ',Null'
             End+' as [ColumnGroup_Ar]           
           '+ 
           -- Just Use It to sort the Column Group in report !! 
                    Case
                        When @ReportType = 'Monthly'
                        Then '
							,Month(H.VouhcerDate)			 
						  '
                        Else ',Null'
                    End+' as [Voucher_Month]
            
            '+
           -- Just Use It to sort the Column Group in report !! 
                    Case
                        When @ReportType = 'Monthly'
                        Then ' 
							,Year(H.VouhcerDate)				 
						  '
                        Else ',Null'
                    End+' as [Voucher_Year]
           
			 
			 
    FROM   GL_VoucherDetails D

    LEFT JOIN   GL_Vouchers H
      ON   H.ID = D.VoucherID
    LEFT JOIN   GL_Accounts A
      ON   D.AccountNoID = A.AccountID      
 
	LEFT JOIN   '+@TblName_RowGroup+' tbl 
	  ON tbl.
	  '+Case
             When @TblName_RowGroup = 'GL_Accounts'
             Then 'AccountID'
             Else 'ID'
         End+' = D.'+@TblCol_RowGroup+' 
 
	
	'+Case
           When @ReportType = 'Matrix'
           Then '
		 LEFT JOIN   '+@TblName_ColumnGroup+' tbl_Col 
		  ON tbl_Col.
		  '+Case
                  When @TblName_ColumnGroup = 'GL_Accounts'
                  Then 'AccountID'
                  Else 'ID'
              End+' = D.'+@TblCol_ColumnGroup+' 
			'
           Else ''
       End+'
           ,#T
    WHERE  
    (H.Posted = 1 )
 
        AND (
               @ParentCode IS NULL
           OR  A.Code LIKE #T.Code+''%''
        )
        and
        (
           @FromDate IS NULL
       OR   Cast(H.VouhcerDate as Date) >= @FromDate
       )
  AND  (
           @ToDate IS NULL
       OR  Cast(H.VouhcerDate as Date) <= @ToDate
       )
  AND  (
           @SubsidaryID IS NULL
       OR  H.SubsidaryID IN (@SubsidaryID)
       )
  AND  (
           @CostCenterID IS NULL
       OR  D.CostcenterID IN (@CostCenterID)
       )
  AND  (
           @DepartMentID IS NULL
       OR  D.DepartmentID IN (@DepartMentID)
       )
  AND  (
           @LocationID IS NULL
       OR  D.LocationID IN (@LocationID)
       )
  AND  (
           @ClassID IS NULL
       OR  D.ClassID IN (@ClassID)
       )
  AND  (
           @AccountID IS NULL
       OR  D.AccountNoID IN (@AccountID)
       )
  AND  (a.LevelNo != 0 )
  AND  (h.Posted = 1 )
	Group By
		tbl.Name
		,tbl.Name_Ar
		     '+Case
                     When @ReportType = 'Matrix'
                     Then ',tbl_col.Name,tbl_col.Name_AR'
                     Else ''
                 End+'
		
        '+Case
              When @ReportType = 'Monthly'
              Then '
       	
       	,SUBSTRING(DateName( month , DateAdd( month , Month(Cast(H.VouhcerDate AS date)), -1 ) ), 1, 3) + '+' '' '' '+' + Cast( Year(Cast(H.VouhcerDate AS date)) AS nvarchar(4) )
       	,Month(H.VouhcerDate) 
		,Year(H.VouhcerDate)  
		
		'
              Else ''
          End+'
	Order by
	tbl.Name
	,tbl.Name_Ar	
	'+Case
           When @ReportType = 'Monthly'
           Then '
			,Year(H.VouhcerDate)		
			,Month(H.VouhcerDate) 

		'
           Else ''
       End+'
        '
    -- SELECT @sql
    --return								      
             Exec Sp_executesql
                  @Sql
                , N'@FromDate			 Date	
        ,@ToDate			 Date
        ,@AccountID			 Int	
        ,@CostCenterID		 Int	
        ,@DepartMentID		 Int	
        ,@LocationID		 Int	
        ,@ClassID			 Int	
        ,@ParentCode		 Nvarchar(max)
        ,@SubsidaryID		 int'
                , @FromDate
                , @ToDate
                , @AccountID
                , @CostCenterID
                , @DepartMentID
                , @LocationID
                , @ClassID
                , @ParentCode
                , @SubsidaryID
         END
GO
/****** Object:  StoredProcedure [dbo].[CalcPreviouslyPaidAmount]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create PROCEDURE [dbo].[CalcPreviouslyPaidAmount] 
	-- Add the parameters for the stored procedure here
	@subId int ,
	@accountId int 
AS
BEGIN
	Select DISTINCT [dbo].[GL_VoucherPayments].* from [dbo].[GL_Vouchers]
	  JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID] 
	  JOIN [dbo].[GL_VoucherPayments] on [dbo].[GL_VoucherPayments].[TransactionVoucherId] = [dbo].[GL_Vouchers].[ID]
	  JOIN [GL_VoucherDetails] as paidVouchers on paidVouchers.VoucherId =  [dbo].[GL_VoucherPayments].VoucherID and paidVouchers.AccountNoID = @accountId
	  LEFT JOIN [dbo].[Inv_Receipt_h] on [dbo].[Inv_Receipt_h].[ID] = [dbo].[GL_Vouchers].[ReceiptID]

	  where paidVouchers.AccountNoID = @accountId and [GL_Vouchers].SubsidaryID = @subId
END
GO
/****** Object:  StoredProcedure [dbo].[CheckAccountExistance]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create procedure [dbo].[CheckAccountExistance]
@accstring varchar(max)
As
begin 

select * 
into #tempItems
from dbo.fn_Split(@accstring,',')
 
select STUFF((SELECT ',' + item    FROM #tempItems
where not exists(select 1 from  [dbo].[GL_Accounts] where Code = #tempItems.item)
   FOR XML PATH ('')), 1, 1, '') 


drop table #tempItems
end
GO
/****** Object:  StoredProcedure [dbo].[CheckUserPermission]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[CheckUserPermission]
	@UserID int = 14 ,
	@PermissionName NVARChar(Max)
AS
BEGIN
   
   SET NOCOUNT ON;

   Select SecurityUserPermissions.* from Security_Users 
			Join SecurityUserPermissions on Security_Users.Id = SecurityUserPermissions.UserId
			join Security_lkp_Permissions on Security_lkp_Permissions.PermissionID = SecurityUserPermissions.PermissionId
			Where UserId = @UserID and LOWER(REPLACE(PermissionNameEn, ' ','')) = LOWER(REPLACE(@PermissionName, ' ',''))

END
GO
/****** Object:  StoredProcedure [dbo].[CloseCashDrawerHistory]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[CloseCashDrawerHistory] 
	@CountedAmount DECIMAL(18,3),
	@LeftAmount DECIMAL(18,3),
	@CurrencyCode NVARCHAR(50),
	@Notes NVARCHAR(500),
	@CashDrawerId INT = NULL,
	@BranchId INT  = NULL,
	@EmployeeId INT
AS
BEGIN
    DECLARE @HoldedOrdersCount INT = (SELECT COUNT(ID) FROM Inv_Receipt_h 
	WHERE IsHolded = 1 AND Code <> 80 AND CashDrawerId = @CashDrawerId AND (Is_Canceled = 0 OR Is_Canceled IS NULL))
	IF @HoldedOrdersCount = 0
		BEGIN
				EXEC InsertCashDrawerHistory 'Cash Counted', @CountedAmount, @CurrencyCode, @Notes, @CashDrawerId, @EmployeeId, NULL;
				UPDATE A  SET A.IsClosed = 1, A.ClosedDateTime = GETDATE()
					FROM Inv_CashDrawerHistory AS A
					LEFT JOIN Inv_Receipt_h AS B ON A.ReceiptId = B.ID 
					LEFT JOIN Inv_PaymentType AS C ON B.Payment_Type = C.id AND C.Code <> -1
					WHERE A.CashDrawerId = COALESCE(@CashDrawerId, A.CashDrawerId) AND
						  (B.Branch_ID IS NULL OR B.Branch_ID = COALESCE(@BranchId, B.Branch_ID)) AND 
						  A.IsClosed = 0 ;
				EXEC InsertCashDrawerHistory 'Cash Left', @LeftAmount, @CurrencyCode, @Notes, @CashDrawerId, @EmployeeId , NULL;
		END
	ELSE
		BEGIN
				SELECT 0;
		END
END

GO
/****** Object:  StoredProcedure [dbo].[Costcenter_Balance_Hierarchy]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create PROC [dbo].[Costcenter_Balance_Hierarchy]
AS
BEGIN

-- How To Use this Proc 
 
/*
	Create TABLE #CosCenterBalance (
									 Level Nvarchar(50)
									,ID Nvarchar(50)
									,ParentID Nvarchar(50)
									,Hierarchy Nvarchar(50)
									,Name Nvarchar(50)
									,Debit Nvarchar(50)
									,credit Nvarchar(50)
									)

	INSERT INTO #CosCenterBalance
	Exec Costcenter_Balance_Hierarchy
*/

-- Data Context :  
-- mstr_Costcenter
-- GL_VoucherDetails

--#CostCenter_All_Level : All Level
SELECT 
	 MC.ID			  
	,MC.ParentID
	,MC.Code
	,MC.Name
	,GLVD.Debit
	,GLVD.credit
	,GLVD.VoucherID AS VoucherID
	,GLVD.ID        AS GL_VoucherDetailID
 INTO #CostCenter_All_Level
FROM 
 mstr_Costcenter MC
LEFT JOIN GL_VoucherDetails GLVD
ON MC.ID =GLVD.CostcenterID
WHERE 
MC.IsActive = 1
ORDER BY MC.ParentID


 
  
;with Costcenter_Balance_Hierarchy as
(
-- root level
select ID
     , ParentID
     , Name
     , 1 as [Level]
     , cast('-' + cast (ID as nvarchar(10)) + '-' as nvarchar(100)) as Hierarchy -- build hierarchy in format -L0-L1-L2-...-Ln--
     , Debit 
     , credit
  from #CostCenter_All_Level 
 where ParentID is NULL
  union all
  -- recursive join on parent, building hierarchy
SELECT CurrentLevel.ID
       ,CurrentLevel.ParentID
       ,CurrentLevel.Name
       ,ParentLevel.[Level]+1 AS [Level]
       ,cast(ParentLevel.Hierarchy + cast (CurrentLevel.ID AS nvarchar(10))+ '-' AS nvarchar(100)) AS Hierarchy
       ,CurrentLevel.Debit
       ,CurrentLevel.credit
FROM   #CostCenter_All_Level CurrentLevel
JOIN   Costcenter_Balance_Hierarchy ParentLevel
  ON   CurrentLevel.ParentID = ParentLevel.ID
)
 
SELECT CurrentHierarchyLevel.[Level]
       ,CurrentHierarchyLevel.ID
       ,CurrentHierarchyLevel.ParentID
       ,CurrentHierarchyLevel.Hierarchy       
       --,replicate('    ', CurrentHierarchyLevel.[Level]) + CurrentHierarchyLevel.ID AS AccouIDnt
       ,CurrentHierarchyLevel.Name
       ,sum(CASE 
                 WHEN CurrentHierarchyLevel.Hierarchy = substring(ChildLevel.Hierarchy, 1, len(CurrentHierarchyLevel.Hierarchy)) 
                 THEN ChildLevel.Debit
                 ELSE 0
            END) AS Debit
       ,sum(CASE 
                 WHEN CurrentHierarchyLevel.Hierarchy = substring(ChildLevel.Hierarchy, 1, len(CurrentHierarchyLevel.Hierarchy)) 
                 THEN ChildLevel.credit
                 ELSE 0
            END) AS credit 
                 
FROM   Costcenter_Balance_Hierarchy AS CurrentHierarchyLevel
CROSS 
JOIN   Costcenter_Balance_Hierarchy AS ChildLevel
GROUP BY
        CurrentHierarchyLevel.[Level]
       ,CurrentHierarchyLevel.Name
       ,CurrentHierarchyLevel.Hierarchy
		,CurrentHierarchyLevel.ID
		,CurrentHierarchyLevel.ParentID
ORDER BY
       CurrentHierarchyLevel.Hierarchy
       
       
       
END
 
GO
/****** Object:  StoredProcedure [dbo].[d_CRM_Lead_Owner]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[d_CRM_Lead_Owner]
     @SubsidiaryID    INT  = Null
   , @FromDate       DATE = Null
   , @ToDate         DATE = Null
As
         Begin

             Select
                    L.LeadOwnerId
                  , U.Name
                  , U.Name_AR
                  , L.StatusId
                  , Case L.StatusId
                        When 1
                        Then 'New'
                        When 2
                        Then 'Follow up'
                        When 3
                        Then 'Win'
                        When 4
                        Then 'Postponed'
                        When 5
                        Then 'Lost'
                        Else 'None'
                    End Status_En
                  , Case L.StatusId
                        When 1
                        Then N'جديد'
                        When 2
                        Then N'متابعه'
                        When 3
                        Then N'فائز'
                        When 4
                        Then N'مؤجل'
                        When 5
                        Then N'مفقود'
                        Else N'غير محدد'
                    End Status_Ar
             Into
                  #Context
             From
                  Crm_Lead L
             Left Join Security_Users U
                  On L.LeadOwnerId = U.Id
             Where			               
                    @SubsidiaryID Is Null
                    Or L.SubsidiaryID = @SubsidiaryID
                And (
                            @FromDate Is Null
                            Or CAST(l.CreatedDate AS DATE) >= CAST(@FromDate AS DATE))
                And (
                                @ToDate Is Null
                                Or CAST(L.CreatedDate AS DATE) <= CAST(@ToDate AS DATE))					

             Select
                    COUNT(1) Count
                  , LeadOwnerId
                  , Name
                  , Name_AR
                  , StatusId
                  , Status_En
                  , Status_Ar
             Into
                  #GetCount
             From
                  #Context
             Group By
                      LeadOwnerId
                    , Name
                    , Name_AR
                    , StatusId
                    , Status_En
                    , Status_Ar


             Select
                    SUM(Count)  SumCount
                  , LeadOwnerID LeadOwnerID
                  , Name
                  , Name_AR
                  , 6           StatusId
                  , 'Total'     Total
                  , N'الاجمالى' Total_Ar
             Into
                  #GetTotal
             From
                  #GetCount
             Group By
                      Name
                    , Name_AR
                    , LeadOwnerID

             Select
                    *
             Into
                  #GetCountAndTotal
             From
(
    Select
           *
    From
         #GetCount
    Union All
    Select
           *
    From
         #GetTotal
) T
             Order By
                      Name
                    , StatusId


             Select
                    LeadOwnerID
                  , Count
                  , StatusId
             Into
                  #GetTotalOnly
             From
                  #GetCountAndTotal
             Where StatusId = 6


             Select
                    LeadOwnerID
                  , Count
                  , StatusId
             Into
                  #GetWinOnly
             From
                  #GetCountAndTotal
             Where StatusId = 3


             Select
                  
			   Round( Cast(#GetWinOnly.Count as float) / Cast(#GetTotalOnly.Count as float),3) * 100  As Count
                    ,#GetCountAndTotal.LeadOwnerId
			   
			   ,#GetCountAndTotal.Name
			   ,#GetCountAndTotal.Name_Ar
                  , '7'                                                                                                  StatusId
                  , 'Win %'                                                                                              Total
                  , N'فائز %'                                                                                            Total_Ar
             Into
                  #GetWinPercent
             From
                  #GetCountAndTotal
             Left Join #GetTotalOnly
                  On #GetTotalOnly.LeadOwnerId = #GetCountAndTotal.LeadOwnerId
             Left Join #GetWinOnly
                  On #GetWinOnly.LeadOwnerId = #GetCountAndTotal.LeadOwnerId


             Select
                    *
             Into
                  #GetCountAndTotalAndWinPercent
             From
(
    Select
           *
    From
         #GetCount
    Union All
    Select
           *
    From
         #GetTotal
    Union All
    Select Distinct
           *
    From
         #GetWinPercent
) T
             Order By
                      Name
                    , StatusId

             Select
                    *
             From
                  #GetCountAndTotalAndWinPercent
             Order By
                      Name
                    , StatusId
         End
GO
/****** Object:  StoredProcedure [dbo].[d_CRM_SalesMen]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[d_CRM_SalesMen]
     @SubsidiaryID    INT  = Null
   , @FromDate       DATE = Null
   , @ToDate         DATE = Null
As
         Begin

                     Select
                    L.LeadOwnerId
                  , U.Name
                  , U.Name_AR
                  , L.StatusId
                  , Case L.StatusId
                        When 1
                        Then 'New'
                        When 2
                        Then 'Follow up'
                        When 3
                        Then 'Win'
                        When 4
                        Then 'Postponed'
                        When 5
                        Then 'Lost'
                        Else 'None'
                    End Status_En
                  , Case L.StatusId
                        When 1
                        Then N'جديد'
                        When 2
                        Then N'متابعه'
                        When 3
                        Then N'فائز'
                        When 4
                        Then N'مؤجل'
                        When 5
                        Then N'مفقود'
                        Else N'غير محدد'
                    End Status_Ar
             Into
                  #Context
             From
                  Crm_Lead L
             Left Join Security_Users U
                  On L.LeadOwnerId = U.Id
             Where
						L.SubsidiaryID = @SubsidiaryID
						 And (
                                     @FromDate Is Null
                                     Or CAST(l.CreatedDate AS DATE) >= CAST(@FromDate AS DATE))
                         And (
                                         @ToDate Is Null
                                         Or CAST(L.CreatedDate AS DATE) <= CAST(@ToDate AS DATE))

-- Get Leads
--Leads = Leads assigned to this employee with no appointments
--		status <>( postopen , lost or win)
             Select
                    LeadOwnerId
                  , Name
                  , Name_AR
                  , COUNT(1) Count
 
                  , 'Leads'  Status
			   ,1 Sort
             Into
                  #GetLeads
             From
                  #Context
             Where StatusId Not In(3, 4, 5)
             Group By
                      LeadOwnerId
                    , Name
                    , Name_AR
	 

 

-- Get Demos
--Demos =  appointments in this period
             Select
                    LeadOwnerId
                  , Name
                  , Name_AR
                  , COUNT(1) Count
 
                  , 'Demos'  Status
			   ,2 Sort

             Into
                  #GetDemos
             From
                  #Context
             Group By
                      LeadOwnerId
                    , Name
                    , Name_AR
 

-- Get Win
--Win = Leads assigned to this employee and satatus = Win
             Select
                    LeadOwnerId
                  , Name
                  , Name_AR
                  , COUNT(1) Count
 
                  , 'Win'    Status
			   ,3 Sort
             Into
                  #GetWin
             From
                  #Context
             Where StatusId = 3
             Group By
                      LeadOwnerId
                    , Name
 

                    , Name_AR

-- Get WIn %
--Win%= win/demos * 100
             Select Distinct
                    C.LeadOwnerId
                  , C.Name
                  , C.Name_AR
                  , ROUND((CAST(W.Count As FLOAT) / CAST(D.Count As FLOAT)) * 100, 1) As Count
                  , 'Win %'                                                              Status
			   ,4 Sort

             Into
                  #GetWinPercent
             From
                  #Context C
             Left Join #GetDemos D
                  On C.LeadOwnerId = D.LeadOwnerId
             Left Join #GetWin W
                  On C.LeadOwnerId = W.LeadOwnerId
 


             Select
                    *
             From
(
    Select
           *
    From
         #GetLeads
    Union All
    Select
           *
    From
         #GetDemos
    Union All
    Select
           *
    From
         #GetWin
    Union All
    Select
           *
    From
         #GetWinPercent
) T
order by Name
         End
GO
/****** Object:  StoredProcedure [dbo].[d_GetBranchReport]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [dbo].[d_GetBranchReport]
     @BranchId    INT      = Null
   , @OrderType   INT      = Null
   , @FromDate    DATETIME = Null
   , @ToDate      DATETIME = Null
   , @SubsidiaryID INT      = Null
As
         Begin
					 SELECT 
		BranchName,
		BranchNameAR,
		SUM (Sales) AS Sales 
		FROM (  Select
		(	Case
			When H.CODE In(51, 52)
			Then  H.NetValue
			Else 0
			End) - (Case
			When H.CODE In(53, 54)
			Then   H.NetValue
			Else 0
			End ) Sales
		, b.Name As  BranchName
		, b.Name_AR As	BranchNameAR
		From
		Inv_Receipt_h As H
		Left Join mstr_Branch b
		On h.Branch_ID = b.Id
		Left Join Inv_Receipt_d D
		On D.Parent_ID = H.ID  			  
		 Where
									 D.Item_ID Is Not Null
					 And			 H.Code In(51, 52, 53, 54)
					 And			 D.FinishedProductID Is Null
					 And (
									 @SubsidiaryID Is Null
									 Or h.SubsidiaryID In(@SubsidiaryID))
					 And (
									 @BranchId Is Null
									 Or H.ID In(@BranchId))
					 And (
									 @OrderType Is Null
									 Or h.OrderType In(@OrderType))
				 And (
								 @FromDate Is Null
								 Or CAST(H.Entry_Date AS DATE) >= CAST(@FromDate AS DATE))
				 And (
								 @ToDate Is Null
								 Or CAST(H.Entry_Date AS DATE) <= CAST(@ToDate AS DATE))
				 And (
								 h.Is_Canceled Is Null
								 Or h.Is_Canceled = 0)
		Group By
		b.Name, b.Name_AR,H.id,H.CODE,H.NetValue
             
		) RESULT 
		GROUP BY BranchName,BranchNameAR
		ORDER BY Sales desc
					 
         End
GO
/****** Object:  StoredProcedure [dbo].[d_GetBranchSalesLinearGhraph]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--- issue Id:0006858 modify by :Jay
CREATE PROCEDURE [dbo].[d_GetBranchSalesLinearGhraph] @BranchId     INT  = NULL
                                                   , @OrderType    INT  = NULL
                                                   , @FromDate     DATE = NULL--'20190325'
                                                   , @ToDate       DATE = NULL--'20190326'
                                                   , @SubsidiaryID INT  = NULL--63
AS
BEGIN
    
			SELECT Entry_Date AS CreationDate
		, 	(CASE
				WHEN H.CODE IN(51 , 52)
				THEN H.NetValue
				ELSE (CASE
						WHEN H.CODE IN(53 , 54)
						THEN H.NetValue * -1
						ELSE 0
						END)
				END ) 
				AS TotalNet
		INTO #t
		FROM Inv_Receipt_H H
		INNER JOIN Inv_Receipt_D D
		ON  D.Parent_ID = H.ID
		AND D.FinishedProductID IS NULL
		WHERE H.Code IN(51 , 52 , 53 , 54)
		AND (@SubsidiaryID IS NULL OR H.SubsidiaryID = @SubsidiaryID)
		AND (@BranchID IS NULL OR H.Branch_ID = @BranchID)
		AND (@OrderType IS NULL OR H.OrderType = @OrderType)
		AND (h.Is_Canceled IS NULL OR h.Is_Canceled = 0)
		AND ( @FromDate IS NULL OR CAST(Entry_Date AS DATE) >= CAST(@FromDate AS DATE))
		AND ( @ToDate IS NULL OR CAST(Entry_Date AS DATE) <= CAST(@ToDate AS DATE))
		GROUP BY H.Entry_Date,H.ID,H.Code,H.NetValue

		-- Get Hour
		SELECT FORMAT(CreationDate , 'HH') AS  Duration
		, SUM(TotalNet) AS Sales
		, 1 AS  [DurationType]
		, CAST(DATEPART(hour , CreationDate) AS INT) OrderVar
		INTO #Hour
		FROM #t
		WHERE(@FromDate IS NULL OR CAST(CreationDate AS DATE) >= CAST(@FromDate AS DATE))
		AND (@ToDate IS NULL OR CAST(CreationDate AS DATE) <= CAST(@ToDate AS DATE))
		GROUP BY FORMAT(CreationDate , 'HH'), CAST(DATEPART(hour , CreationDate) AS INT)

		-- Get Day
		SELECT FORMAT(CreationDate , 'dd/MM') AS Duration
		, SUM(TotalNet) AS Sales
		, 2 AS [DurationType]
		--, CAST(DATEPART(DAY , CreationDate) AS INT) + (CAST(DATEPART(MONTH , CreationDate) AS INT) * 30) OrderVar
		,CAST ( row_number() over( order by FORMAT(CreationDate , 'dd/MM') desc) AS int ) AS OrderVar
		INTO #Day
		FROM #t
		WHERE(CAST(CreationDate AS DATE) >= @FromDate )
		AND (CAST(CreationDate AS DATE) <= @ToDate )
		GROUP BY FORMAT(CreationDate , 'dd/MM')

		-- Get Week
		SELECT FORMAT(CreationDate , 'dddd') AS Duration
		, SUM(TotalNet) AS  Sales
		, 3 AS [DurationType]
		, CAST(DATEPART(WEEKDAY , CreationDate) AS INT) OrderVar
		INTO #Week
		FROM #t
		WHERE(	@FromDate IS NULL
				OR CAST(CreationDate AS DATE) >=  CASE
				WHEN DATEDIFF(day , @FromDate , @ToDate) < 6
				THEN DATEADD(wk , -1 , @ToDate)
				ELSE @FromDate
				END )
		AND ( @ToDate IS NULL OR  
			CAST(CreationDate AS DATE) <= CASE
										WHEN @ToDate IS NULL
										THEN GETDATE()
										ELSE @ToDate
										END)
		GROUP BY FORMAT(CreationDate , 'dddd')
		, CAST(DATEPART(WEEKDAY , CreationDate) AS INT)


		SELECT *
		FROM #Hour
		UNION
		SELECT *
		FROM #Day
		UNION
		SELECT *
		FROM #Week
		ORDER BY [DurationType]
		, OrderVar

		IF OBJECT_ID('tempdb..#t') IS NOT NULL DROP TABLE #t
		IF OBJECT_ID('tempdb..#Hour') IS NOT NULL DROP TABLE #Hour
		IF OBJECT_ID('tempdb..#Week') IS NOT NULL DROP TABLE #Week 
		IF OBJECT_ID('tempdb..#Day') IS NOT NULL DROP TABLE #Day

    -- [DurationType] 1:HOUR, 2:DAY, 3:Month
END
GO
/****** Object:  StoredProcedure [dbo].[d_GetBranchSalesLiveLinearGhraph]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[d_GetBranchSalesLiveLinearGhraph]
     @BranchId    INT      = Null
   , @OrderType   INT      = Null
   , @FromDate    DATETIME = Null
   , @ToDate      DATETIME = Null
   , @SubsidiaryID INT      = Null
As
DECLARE @TodayDate DATETIME = CAST(GetDate() AS DATE)
Begin
    Select  
        FORMAT(H.Entry_Date, 'HH') As Duration
        , SUM(Case
                            When H.CODE In(51, 52)
                            Then(D.Total / IsNull(H.Currency_Rate, 1)) - (D.H_Discount_Value / IsNull(H.Currency_Rate, 1))
                            Else 0
                        End) - SUM(Case
                                        When H.CODE In(53, 54)
                                        Then(D.Total / IsNull(H.Currency_Rate, 1)) - (D.H_Discount_Value / IsNull(H.Currency_Rate, 1))
                                        Else 0
                                    End)    AS Sales
        , 4 As                          [DurationType]
    From
        Inv_Receipt_h H
		Left Join Inv_Receipt_d D
        On D.Parent_ID = H.ID			
    Where
                D.Item_ID Is Not Null
	And h.CODE In(51, 52, 53, 54)
	And		D.FinishedProductID Is Null 			 
    And (
                    @SubsidiaryID Is Null
                    Or h.SubsidiaryID In(@SubsidiaryID))
    And (
                    @BranchId Is Null
                    Or H.Branch_ID In(@BranchId))
    And (
                    @OrderType Is Null
                    Or h.OrderType In(@OrderType))
And (                         
				CAST(h.Entry_Date AS DATE) >= @TodayDate)
And (
                CAST(h.Entry_Date AS DATE) <= @TodayDate)
And (
                h.Is_Canceled Is Null
                Or h.Is_Canceled = 0)
    Group By
            FORMAT(Entry_Date, 'HH')
End

GO
/****** Object:  StoredProcedure [dbo].[d_GetCategoryReport]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[d_GetCategoryReport]
     @BranchId    INT      = Null
   , @OrderType   INT      = Null
   , @FromDate    DATETIME = Null
   , @ToDate      DATETIME = Null
   , @SubsidiaryID INT      = Null
As
Begin

	SELECT TOP 10  Item_Category,Item_Category_AR,SUM(NetSale) AS NetSale FROM (SELECT 
                    Item_Category = Inv_ProductCategories.Name
                  , Item_Category_AR = Inv_ProductCategories.Name_Ar                                 
                  , NetSale = (Case
                                      When H.CODE In(51, 52)
                                      Then H.NetValue
                                      Else (Case
                                                 When H.CODE In(53, 54)
                                                 Then H.NetValue *-1
                                                 Else 0
                                             End)
                                  End)                                                    
             From
                  Inv_Receipt_H H
             INNER Join Inv_Receipt_d D
                  On D.Parent_ID = H.ID
             Left Join Inv_Items I
                  On I.ID = D.Item_ID
             Left Join Inv_CashCustomer
                  On Inv_CashCustomer.id = H.CashCustomerID
             Left Join GL_Accounts
                  On GL_Accounts.AccountID = H.Vendor_ID
              Join Inv_Items_Categories
                  On Inv_Items_Categories.Item_ID = I.ID
             Left Join Inv_ProductCategories
                  On Inv_ProductCategories.ID = Inv_Items_Categories.ItemCategory_ID
             Where
                         H.Code In(51, 52, 53, 54)
             
             And D.FinishedProductID Is Null             
             And (
                             @SubsidiaryID Is Null
                             Or H.SubsidiaryID = @SubsidiaryID)
             And D.Item_ID Is Not Null
             And (
                             @FromDate Is Null
                             Or CAST(H.Entry_Date As DATE) >= CAST(@FromDate AS DATE))
             And (
                             @ToDate Is Null
                             Or CAST(H.Entry_Date As DATE) <= CAST(@ToDate AS DATE))
             And (
                             @BranchID Is Null
                             Or H.Branch_ID In(@BranchID))

			And (			@OrderType Is Null
							Or H.OrderType In(@OrderType))
			 Group By
		   Inv_ProductCategories.Name, Inv_ProductCategories.Name_Ar,H.id,H.CODE,H.NetValue
			 ) RESULT 
             Group By
                      Item_Category
                    , Item_Category_AR
                    
             Order By
                     NetSale desc
         End
GO
/****** Object:  StoredProcedure [dbo].[d_GetFiguresValues]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 ---Issue Id: 0007016 ,Modify by : Jay
CREATE PROCEDURE [dbo].[d_GetFiguresValues]
(
	@BranchId INT,
	@OrderType INT,
	@FromDate DATE,
	@ToDate DATE,
	@SubsidiaryID INT 
)
AS
BEGIN
     
	SELECT h.ID,
	 (CASE
		WHEN H.CODE IN ( 51 , 52 )
		THEN ISNULL( h.NetValue , 0 ) 
		ELSE 0
		END ) - 
		CASE
		WHEN H.CODE IN ( 53 , 54 )
		THEN ISNULL( h.NetValue , 0 ) 
		ELSE 0
		END  AS TotalNet, 
	h.Is_Canceled,
    ( ISNULL(H.DeliveryFees,0) / H.Currency_Rate )   AS DeliveryFees,
	( ISNULL (H.Discount_Value,0) / H.Currency_Rate ) As Discount
	INTO #SalesData
	FROM Inv_Receipt_H H
	INNER JOIN Inv_Receipt_D D
	ON D.Parent_ID = H.ID
	AND D.FinishedProductID Is Null
	WHERE H.Code IN(51 , 52 , 53 , 54)
	AND ( @SubsidiaryID IS NULL  OR H.SubsidiaryID = @SubsidiaryID )
	AND ( @FromDate IS NULL OR CAST(H.Entry_Date AS DATE) >= @FromDate )
	AND ( @ToDate IS NULL OR CAST(H.Entry_Date AS DATE) <= @ToDate )
	AND ( @BranchID IS NULL OR H.Branch_ID = @BranchID )
	AND ( @OrderType IS NULL OR H.OrderType = @OrderType )
	GROUP BY h.ID, 
	H.CODE,
	h.Is_Canceled,
	H.Discount_Value,
	H.DeliveryFees,
	H.Currency_Rate,
	h.NetValue

	DECLARE @TotalSales DECIMAL(18 , 3)=
	(
		SELECT SUM(TotalNet)
		FROM #SalesData
		WHERE(IsNull(Is_Canceled ,0)= 0)
	)

	DECLARE @OrdersCount INT=
	(
		SELECT COUNT(ID)
		FROM #SalesData
		WHERE(Is_Canceled IS NULL
		OR Is_Canceled = 0)
	)

	DECLARE @CancelledOrdersCount INT=
	(
		SELECT COUNT(ID)
		FROM #SalesData
		WHERE Is_Canceled = 1
	)

	Declare @DeliveryFees decimal(18,6) =  ( SELECT SUM(DeliveryFees) FROM #SalesData )
	Declare @Discount decimal(18,8) =  ( SELECT SUM(Discount) FROM #SalesData )


	SELECT @TotalSales As TotalSales, @OrdersCount As OrdersCount,@CancelledOrdersCount As CancelledOrdersCount , @DeliveryFees As DeliveryFees ,@Discount As Discount

	IF OBJECT_ID('tempdb..#SalesData') IS NOT NULL DROP TABLE #SalesData

END
GO
/****** Object:  StoredProcedure [dbo].[d_GetOrderTypeReport]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[d_GetOrderTypeReport]
     @BranchId    INT      = Null
   , @OrderType   INT      = Null
   , @FromDate    DATETIME = Null
   , @ToDate      DATETIME = Null
   , @SubsidiaryID INT      = Null
As
         Begin
             Select
                    (SUM(Case
								When H.CODE In(51, 52)
								Then( IsNull(D.Total,0) / IsNull(H.Currency_Rate, 1)) - ( IsNull(D.H_Discount_Value,0) / IsNull(H.Currency_Rate, 1))
								Else 0
								End) - SUM(Case
                                When H.CODE In(53, 54)
                                Then( IsNull(D.Total,0) / IsNull(H.Currency_Rate, 1)) - ( IsNull(D.H_Discount_Value,0) / IsNull(H.Currency_Rate, 1))
                                Else 0
                            End)) Sales
                  , Case
                        When OrderType = 1
                        Then 'Take Away'
                        When OrderType = 2
                        Then 'Delivery'
                        When OrderType = 3
                        Then 'Dine In'
						When OrderType = 4
                        Then 'Pick Up'
                    End           [OrderType]
             From
                  Inv_Receipt_h H
			 Left Join Inv_Receipt_d D
                  On D.Parent_ID = H.ID 
             Where
                         
							 D.Item_ID Is Not Null
             And			 H.Code In(51, 52, 53, 54)
             And			 D.FinishedProductID Is Null

             And (
                             @SubsidiaryID Is Null
                             Or h.SubsidiaryID In(@SubsidiaryID))
             And (
                             @BranchId Is Null
                             Or H.Branch_ID In(@BranchId))
             And (
                             @OrderType Is Null
                             Or h.OrderType In(@OrderType))
         And (
                         @FromDate Is Null
                         Or CAST(h.Entry_Date AS DATE) >= CAST(@FromDate AS DATE))
         And (
                         @ToDate Is Null
                         Or CAST(h.Entry_Date AS DATE)<= CAST(@ToDate AS DATE))
         And (
                         h.Is_Canceled Is Null
                         Or h.Is_Canceled = 0)
		 AND OrderType is not null
             Group By
                      OrderType
			 Order By Sales Desc
         End

GO
/****** Object:  StoredProcedure [dbo].[d_GetTopTenDriversReport]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[d_GetTopTenDriversReport]
     @BranchId    INT      = Null
   , @OrderType   INT      = Null
   , @FromDate    DATETIME = Null
   , @ToDate      DATETIME = Null
   , @SubsidiaryID INT      = Null
As
         Begin
             Select Top 10
                    COUNT(H.ID) As TotalOrders
                  , S.Name As      [Name]
				  , S.Name_AR As      [NameAR]
             From
                  Inv_Receipt_h H
             Left Join Security_Users S
                  On H.DriverId = S.Id
             Where
                         (H.DriverId Is Not Null)                         
                         And h.CODE In(51, 52, 53, 54)
             And (
                             @SubsidiaryID Is Null
                             Or h.SubsidiaryID = @SubsidiaryID)
             And (
                             @BranchId Is Null
                             Or H.Branch_ID = @BranchId)
             And (
                             @OrderType Is Null
                             Or h.OrderType = @OrderType)
         And (
                         @FromDate Is Null
                         Or CAST(h.Entry_Date AS DATE) >= CAST(@FromDate AS DATE))
         And (
                         @ToDate Is Null
                         Or CAST(h.Entry_Date AS DATE) <= CAST(@ToDate AS DATE))
         And (
                         h.Is_Canceled Is Null
                         Or h.Is_Canceled = 0)
             Group By
                      S.Name, S.Name_AR
             Order By
                      COUNT(H.ID) Desc
         End
GO
/****** Object:  StoredProcedure [dbo].[d_GetTopTenItemsReport]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[d_GetTopTenItemsReport]--null,null,'04-17-2019','04-18-2019',1--,'07/04/2019 12:00:00','07/04/2019 14:21:24',63
     @BranchId    INT      = Null
   , @OrderType   INT      = Null
   , @FromDate    DATETIME = Null
   , @ToDate      DATETIME = Null
   , @SubsidiaryID INT      = Null
As
         Begin

             Select Top 10
                     Qty = SUM(Case
                                      When H.CODE In(51, 52)
                                      Then D.qty
                                      Else 0
                                  End) - SUM(Case
                                                 When H.CODE In(53, 54)
                                                 Then D.qty
                                                 Else 0
                                             End)
				   ,Total = SUM(Case
                                      When H.CODE In(51, 52)
                                      Then ( IsNull(D.Total,0) / IsNull(H.Currency_Rate, 1)) - ( IsNull(D.H_Discount_Value,0) / IsNull(H.Currency_Rate, 1))
                                      Else 0
                                  End) - SUM(Case
                                                 When H.CODE In(53, 54)
                                                 Then ( IsNull(D.Total,0) / IsNull(H.Currency_Rate, 1)) - ( IsNull(D.H_Discount_Value,0) / IsNull(H.Currency_Rate, 1))
                                                 Else 0
                                             End)
                  , i.Name As     [ItemName]
				  , i.Name_AR As  [ItemNameAR]
                  , Inv_Unit.Name_AR [ItemUnitNameAR]
                  , Inv_Unit.Name    [ItemUnitName]
				  , i.Code			[ItemCode]
             From
                  Inv_Receipt_H H
             Left Join Inv_Receipt_d D
                  On D.Parent_ID = H.ID
             Left Join Inv_Items I
                  On I.ID = D.Item_ID
             Left Join Inv_CashCustomer
                  On Inv_CashCustomer.id = H.CashCustomerID
             Left Join GL_Accounts
                  On GL_Accounts.AccountID = H.Vendor_ID
             Left Join Inv_Unit
                  On Inv_Unit.ID = I.Selling_UnitId
             Where
                         D.Item_ID Is Not Null
And D.FinishedProductID Is Null
                         And (
                                         @SubsidiaryID Is Null
                                         Or H.SubsidiaryID = @SubsidiaryID)
                         
            And				H.Code In(51, 52, 53, 54)
             And (
                             @FromDate Is Null
                             Or CAST(H.Entry_Date As DATE) >= CAST(@FromDate AS DATE))
             And (
                             @ToDate Is Null
                             Or CAST(H.Entry_Date As DATE) <= CAST(@ToDate AS DATE))
             And (
                             @BranchID Is Null
                             Or H.Branch_ID = @BranchID)
			 And (
                             @OrderType Is Null
                             Or H.OrderType = @OrderType)
And (
                             H.Is_Canceled Is Null
                             Or H.Is_Canceled = 0)

             Group By
                      I.Code
                    , I.Name
                    , I.Name_AR
                    , Inv_Unit.Name_AR
                    , Inv_Unit.Name
             Order By
                      Total desc
         End
GO
/****** Object:  StoredProcedure [dbo].[d_GetTopTenUsersReport]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [dbo].[d_GetTopTenUsersReport]
     @BranchId    INT      = Null
   , @OrderType   INT      = Null
   , @FromDate    DATETIME = Null
   , @ToDate      DATETIME = Null
   , @SubsidiaryID INT      = Null
As
         Begin
             Select Top 10 Name, NameAR, SUM(Sales) AS Sales FROM (
                Select    Sales = (Case
                                      When H.CODE In(51, 52)
                                      Then H.NetValue
                                      Else 0
                                  End) - (Case
                                                 When H.CODE In(53, 54)
                                                  Then H.NetValue
                                                 Else 0
                                             End)
                  , u.Name As  Name
				  , u.Name_AR As  NameAR
             From
                  Inv_Receipt_H H
             Left Join Inv_Receipt_d D
                  On D.Parent_ID = H.ID
             Left Join Inv_Items I
                  On I.ID = D.Item_ID
             Left Join Inv_CashCustomer
                  On Inv_CashCustomer.id = H.CashCustomerID
             Left Join GL_Accounts
                  On GL_Accounts.AccountID = H.Vendor_ID
             Left Join Inv_Unit
                  On Inv_Unit.ID = I.Selling_UnitId
             Left Join Security_Users U
                  On H.Empoyee_ID = U.Id
			Left Join AV_INV_TransactionDetails  AV_TransactionDetails
				On AV_TransactionDetails.ID= D.ID
				and AV_TransactionDetails.Parent_ID = H.ID             
Where
							 D.Item_ID Is Not Null
             And			 H.Code In(51, 52, 53, 54)
             And			 D.FinishedProductID Is Null
           
             And (
                             @SubsidiaryID Is Null
                             Or H.SubsidiaryID = @SubsidiaryID)
             And (
                             @FromDate Is Null
                             Or CAST(H.Entry_Date As DATE) >= CAST(@FromDate AS DATE))
             And (
                             @ToDate Is Null
                             Or CAST(H.Entry_Date As DATE) <= CAST(@ToDate AS DATE))
             And (
                             @BranchID Is Null
                             Or H.Branch_ID = @BranchID)

			And (			@OrderType Is Null
							Or H.OrderType = @OrderType)
         And (
							H.Is_Canceled Is Null
							Or h.Is_Canceled = 0)
             Group By
                      u.Name, u.Name_AR,H.ID,H.Code,H.NetValue ) Result
			 GROUP BY Name,NameAR
             Order By
                      Sales Desc
         End

GO
/****** Object:  StoredProcedure [dbo].[d_GroupByCustomerArea]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[d_GroupByCustomerArea]
     @BranchId    INT      = Null
   , @OrderType   INT      = Null
   , @FromDate    DATETIME = Null
   , @ToDate      DATETIME = Null
   , @SubsidiaryID INT      = Null
As
         Begin
-- proudct BackLog : 0003683
             Select
                    Sales = SUM(Case
                                      When H.CODE In(51, 52)
                                       Then( IsNull(D.Total,0) / IsNull(H.Currency_Rate, 1)) - ( IsNull(D.H_Discount_Value,0) / IsNull(H.Currency_Rate, 1))
                                      Else 0
                                  End) - SUM(Case
                                                 When H.CODE In(53, 54)
                                                   Then( IsNull(D.Total,0) / IsNull(H.Currency_Rate, 1)) - ( IsNull(D.H_Discount_Value,0) / IsNull(H.Currency_Rate, 1))
                                                 Else 0
                                             End)
                  , A.ID As         Area_ID
                  , A.Name As       Area_Name
                  , A.Name_Ar As    Area_Name_Ar
             From
                  Inv_Receipt_H H
             Left Join Inv_Receipt_d D
                  On D.Parent_ID = H.ID
             Left Join Inv_CashCustomerDetail
                  On Inv_CashCustomerDetail.id = H.CashCustomerDetailId
             Left Join GL_Area A
                  On A.ID = Inv_CashCustomerDetail.AreaId			
             Where    
							H.Code In(51, 52, 53, 54)
			 And			D.Item_ID Is Not Null
             And			D.FinishedProductID Is Null
             And (
                             @SubsidiaryID Is Null
                             Or H.SubsidiaryID = @SubsidiaryID)
             And (
                             @FromDate Is Null
                             Or CAST(H.Entry_Date As DATE) >= CAST(@FromDate AS DATE))
             And (
                             @ToDate Is Null
                             Or CAST(H.Entry_Date As DATE) <= CAST(@ToDate AS DATE))
             And (
                             @BranchID Is Null
                             Or H.Branch_ID In(@BranchID))
			 And (
                             @OrderType Is Null
                             Or h.OrderType In(@OrderType))

			 And (
							 h.Is_Canceled Is Null
							 Or h.Is_Canceled = 0)
							 AND A.ID IS NOT Null
             Group By
                      A.ID
                    , A.Name
                    , A.Name_Ar
			Order BY Sales DESC
         End

GO
/****** Object:  StoredProcedure [dbo].[d_GroupByPaymentTypes]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[d_GroupByPaymentTypes]
     @BranchId    INT      = Null
   , @OrderType   INT      = Null
   , @FromDate    DATETIME = Null
   , @ToDate      DATETIME = Null
   , @SubsidiaryID INT      = Null
As
Begin

	  SELECT 
	Inv_PaymentType.Id As Inv_PaymentType_Id
	, Inv_PaymentType.Code As Inv_PaymentType_code
	, Inv_PaymentType.Name As Inv_PaymentType_Name
	, Inv_PaymentType.Name_Ar As Inv_PaymentType_Name_AR              
	, Inv_Receipt_h.NetValue As NetValue
	, ISNULL(Inv_PaymentType_2.Id , Inv_PaymentType.Id) As Inv_PaymentType_2_Id
	, ISNULL(Inv_PaymentType_2.Name , Inv_PaymentType.Name) As Inv_PaymentType_2_Name
	, ISNULL(Inv_PaymentType_2.Name_Ar , Inv_PaymentType.Name_Ar) As Inv_PaymentType_2_Name_AR
	, ISNULL(Inv_receiptmultipayment.Amount , Inv_Receipt_h.NetValue) AS Value,
	Inv_Receipt_h.Code
	INTO #context
	FROM Inv_Receipt_h
	LEFT JOIN Inv_PaymentType
	ON Inv_Receipt_h.Payment_Type = Inv_PaymentType.id         
	LEFT JOIN Inv_receiptmultipayment
	ON Inv_receiptmultipayment.ReceiptId = Inv_Receipt_h.id
	AND Inv_PaymentType.Code = 0
	LEFT JOIN Inv_PaymentType Inv_PaymentType_2
	ON Inv_receiptmultipayment.PaymentTypeId = Inv_PaymentType_2.id
	WHERE  	Inv_Receipt_h.Code In(51, 52, 53, 54)
	And (@SubsidiaryID Is Null Or Inv_Receipt_h.SubsidiaryID In(@SubsidiaryID))
	And (@BranchId Is Null Or Inv_Receipt_h.ID In(@BranchId))
	And (@OrderType Is Null Or Inv_Receipt_h.OrderType In(@OrderType))
	And (@FromDate Is Null Or CAST(Inv_Receipt_h.Entry_Date AS DATE)>= CAST(@FromDate AS DATE))
	And (@ToDate Is Null Or CAST(Inv_Receipt_h.Entry_Date AS DATE) <= CAST(@ToDate AS DATE))
	And (Inv_Receipt_h.Is_Canceled Is Null Or Inv_Receipt_h.Is_Canceled = 0)
	
	SELECT Inv_PaymentType_2_Id  As  Payment_Type_ID
	, Inv_PaymentType_2_Name  As  Payment_Type_Name
	, Inv_PaymentType_2_Name_AR Payment_Type_Name_Ar
	, SUM(case when Code in (51,52) THEN Value ELSE 0 END ) - SUM(case when Code in (53,54) THEN Value ELSE 0 END ) As sales
	FROM #Context
	GROUP BY Inv_PaymentType_2_Id
	, Inv_PaymentType_2_Name
	, Inv_PaymentType_2_Name_AR

	Order By Sales DESC
	IF OBJECT_ID('tempdb..#Context') IS NOT NULL DROP TABLE #Context

End
GO
/****** Object:  StoredProcedure [dbo].[d_MonthlySales]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[d_MonthlySales] @BranchId     INT  = NULL
                                     , @OrderType    INT  = NULL
                                     , @FromDate     DATE = '20180423'
                                     , @ToDate       DATE = '20190423'
                                     , @SubsidiaryID INT  = NULL
AS
    BEGIN

       SELECT  Duration,SUM(Sales) AS Sales FROM(
 SELECT CONVERT(NVARCHAR(7) , Entry_Date , 120) Duration
             , Sales = (CASE
                               WHEN H.CODE IN(51 , 52)
                               THEN H.NetValue 
                               ELSE (CASE
                                          WHEN H.CODE IN(53 , 54)
                                          THEN H.NetValue * - 1
                                          ELSE 0
                                      END)
                           END)   FROM Inv_Receipt_H H
             LEFT JOIN Inv_Receipt_d D
             ON D.Parent_ID = H.ID
             LEFT JOIN Inv_Items I
             ON I.ID = D.Item_ID
             LEFT JOIN Inv_CashCustomer
             ON Inv_CashCustomer.id = H.CashCustomerID
             LEFT JOIN GL_Accounts
             ON GL_Accounts.AccountID = H.Vendor_ID
        WHERE D.Item_ID IS NOT NULL
              AND D.FinishedProductID IS NULL
              AND (@SubsidiaryID IS NULL
                   OR H.SubsidiaryID = @SubsidiaryID)
              AND H.Code IN(51 , 52 , 53 , 54)
             AND (@FromDate IS NULL
                  OR CAST(H.Entry_Date AS DATE) >= DATEADD(M , -12 , @ToDate))
             AND (@ToDate IS NULL
                  OR CAST(H.Entry_Date AS DATE) <= @ToDate)
             AND (@BranchID IS NULL
                  OR H.Branch_ID IN(@BranchID))
        AND (@OrderType IS NULL
             OR H.OrderType IN(@OrderType))
        --AND (@ToDate is null or CAST(H.Entry_Date AS DATE) >= DATEADD(M , -12 , @ToDate))
        AND (h.Is_Canceled IS NULL
             OR h.Is_Canceled = 0)
        GROUP BY CONVERT(NVARCHAR(7) , Entry_Date , 120),
		H.CODE,
		H.id,
		H.NetValue ) RESULT
		GROUP BY Duration
        ORDER BY Duration
		
    END
GO
/****** Object:  StoredProcedure [dbo].[DeductCustomOptionQty]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[DeductCustomOptionQty] --1149
@CustomOptionReceiptDetailParentId INT
as
 DECLARE @deductionQty FLOAT, @Id INT, @ReceiptDetailId INT

    SELECT @deductionQty = Qty, @ReceiptDetailId = ReceiptDetailId FROM Inv_ReceiptDetailCustomAttribute
	where id = @CustomOptionReceiptDetailParentId

	update Inv_Receipt_d set Qty =  Qty - @deductionQty where  id = @ReceiptDetailId 
GO
/****** Object:  StoredProcedure [dbo].[DeleteBranchRelations]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[DeleteBranchRelations]

@BranchID int 

AS

Delete From [dbo].[Inv_Posting] where [dbo].[Inv_Posting].[branchid] = @BranchID
Delete From [dbo].[Inv_Posting_PaymentTypes] where [dbo].[Inv_Posting_PaymentTypes].[BranchID] = @BranchID
Delete From [dbo].[Inv_Transactions_branchs_Account] where [dbo].[Inv_Transactions_branchs_Account].[BranchID] = @BranchID
Delete From [dbo].[mstr_BranchesMenu] where [dbo].[mstr_BranchesMenu].[BranchId] = @BranchID
Delete From [dbo].[UserBranch] where [dbo].[UserBranch].[BranchId] = @BranchID

GO
/****** Object:  StoredProcedure [dbo].[DeleteCostPostedVouchers]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[DeleteCostPostedVouchers] 

@CostPostedSer int

AS
    BEGIN
	 Delete from GL_VoucherDetails where VoucherID IN (Select ID from GL_Vouchers Where CostPostedSer = @CostPostedSer)
Update Inv_Receipt_h set CostPosted = 0 Where  Code IN (Select ReceiptID from GL_Vouchers Where CostPostedSer = @CostPostedSer)
Update Inv_Receipt_h set CostPosted = 0 Where  ID IN (Select ReceiptID from GL_Vouchers Where CostPostedSer = @CostPostedSer)

Delete from GL_Vouchers Where CostPostedSer = @CostPostedSer
Delete from GL_InvPostinigDate Where ID = @CostPostedSer END

GO
/****** Object:  StoredProcedure [dbo].[DeleteERPClient]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Proc [dbo].[DeleteERPClient]
@database_name nvarchar(50),
@domain_id int
as
DECLARE @v_SQL NVARCHAR(max)

SET @v_SQL = N'DROP DATABASE ' + @database_name
exec (@v_SQL)

delete from [GL_WEB_General].._Clients
where [GL_WEB_General].._Clients.ID = @domain_id


GO
/****** Object:  StoredProcedure [dbo].[DeleteInvoiceInstallmentsbyIdAndStatus]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[DeleteInvoiceInstallmentsbyIdAndStatus]

@InvoiceInstallmentsId int
,@StatusId int

AS

Delete From [dbo].[Crm_Invoice_Installments_Details] where [dbo].[Crm_Invoice_Installments_Details].[InvoiceInstallmentsID] = @InvoiceInstallmentsId 
AND StatusID = @StatusId
GO
/****** Object:  StoredProcedure [dbo].[DeleteInvoiceInstallmentsRelations]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[DeleteInvoiceInstallmentsRelations]

@InvoiceInstallmentsId int 

AS

Delete From [dbo].[Crm_Invoice_Installments_Details] where [dbo].[Crm_Invoice_Installments_Details].[InvoiceInstallmentsID] = @InvoiceInstallmentsId
Delete From [dbo].[Crm_Lead_Attachments] where [dbo].[Crm_Lead_Attachments].[InvoiceInstallmentsID] = @InvoiceInstallmentsId




GO
/****** Object:  StoredProcedure [dbo].[DeleteSubsidiaryRelations]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[DeleteSubsidiaryRelations] --81

@SubsidiaryID int 

AS

Delete From [dbo].mstr_ConfigurationParameter where [dbo].mstr_ConfigurationParameter.[SubsidaryID] = @SubsidiaryID
Delete From [dbo].[Inv_PaymentType] where [dbo].[Inv_PaymentType].[SubsidiaryID] = @SubsidiaryID
Delete From [dbo].[UserSubsidary] where [dbo].[UserSubsidary].[SubsidaryID] = @SubsidiaryID
Delete From [dbo].mstr_Subsidary_currency where [dbo].mstr_Subsidary_currency.[SubsidaryID] = @SubsidiaryID
Delete From [dbo].[mstr_Subsidaries] where [dbo].[mstr_Subsidaries].[ID] = @SubsidiaryID



GO
/****** Object:  StoredProcedure [dbo].[Get_Gl_UnBalanced_Voucher]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Get_Gl_UnBalanced_Voucher]
AS
    BEGIN

        SELECT GL_Vouchers.ID           GL_Vouchers_ID
             , GL_Vouchers.Code         GL_Vouchers_Code
             , GL_Vouchers.VouhcerDate  GL_Vouchers_VouhcerDate
             , GL_Vouchers.memo
               --GL_VoucherType
             , GL_VoucherType.ID        GL_VoucherType_ID
             , GL_VoucherType.Code      GL_VoucherType_Code
             , GL_VoucherType.Name      GL_VoucherType_Name
             , GL_VoucherType.Name_AR   GL_VoucherType_Name_AR
               -- mstr_Subsidaries
             , mstr_Subsidaries.ID      mstr_Subsidaries_ID
             , mstr_Subsidaries.Code    mstr_Subsidaries_Code
             , mstr_Subsidaries.Name    mstr_Subsidaries_Name
             , mstr_Subsidaries.Name_AR mstr_Subsidaries_Name_Ar
               --GL_VoucherDetails
             , COUNT(1)                 Count
             , SUM(Debit)               Debit
             , SUM(Credit)              Credit
             , SUM(Debit) - SUM(Credit) Balance
        FROM GL_VoucherDetails
             LEFT JOIN GL_Vouchers
             ON GL_Vouchers.ID = GL_VoucherDetails.VoucherID
             LEFT JOIN GL_VoucherType
             ON GL_Vouchers.VoucherTypeID = GL_VoucherType.ID
             LEFT JOIN mstr_Subsidaries
             ON GL_Vouchers.SubsidaryID = mstr_Subsidaries.ID
        GROUP BY GL_Vouchers.ID
               , GL_Vouchers.VoucherTypeID
               , GL_Vouchers.Code
               , GL_Vouchers.SubsidaryID
               , GL_Vouchers.VouhcerDate
               , GL_Vouchers.memo
                 --GL_VoucherType
               , GL_VoucherType.ID
               , GL_VoucherType.Code
               , GL_VoucherType.Name
               , GL_VoucherType.Name_AR

                 -- mstr_Subsidaries
               , mstr_Subsidaries.ID
               , mstr_Subsidaries.Code
               , mstr_Subsidaries.Name
               , mstr_Subsidaries.Name_Ar
        HAVING SUM(Debit) <> SUM(Credit)
        ORDER BY GL_Vouchers.Code

        SELECT GL_Accounts.Code
             , GL_Accounts.Name
             , GL_VoucherDetails.ID
             , GL_VoucherDetails.VoucherID
             , GL_VoucherDetails.AccountNoID
             , GL_VoucherDetails.Credit
             , GL_VoucherDetails.Debit
        FROM GL_VoucherDetails
             LEFT JOIN GL_Accounts
             ON GL_VoucherDetails.AccountNoID = GL_Accounts.AccountID
        WHERE GL_VoucherDetails.AccountNoID IS NULL
        ORDER BY Code
    END
GO
/****** Object:  StoredProcedure [dbo].[Get_INV_GL_UnBalanced_Total_Sales_Accounts]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Get_INV_GL_UnBalanced_Total_Sales_Accounts]
AS
    BEGIN
        -- Get Data From #Inv_Receipt_h
        SELECT Inv_Receipt_H.ID
             , Inv_Receipt_H.Value
             , Inv_Receipt_h.Payment_Type
             , Inv_Receipt_h.code
        INTO #Inv_Receipt_h
        FROM Inv_Receipt_h
        WHERE(ISNULL(Is_Canceled , 0) <> 1
              AND ISNULL(IsHolded , 0) <> 1)
             AND inv_receipt_h.code NOT IN(11 , 81,1)

        -- Get Data From #GL_Vouchers
        SELECT GL_Vouchers.Id
             , GL_Vouchers.ReceiptID
             , GL_VoucherDetails.Debit
             , GL_VoucherDetails.Credit
             , GL_VoucherDetails.AccountNoID
        INTO #GL_Vouchers
        FROM GL_Vouchers
             LEFT JOIN GL_VoucherDetails
             ON GL_Vouchers.ID = GL_VoucherDetails.VoucherID



        -- Get  Sum(Value) And Count 
        SELECT COUNT(1)   Count_INV
             , SUM(Value) Value
        INTO #Inv_Receipt_h_SUM_Count
        FROM #Inv_Receipt_h

        SELECT COUNT(#GL_Vouchers.ReceiptID) Count_GL
             , SUM(#GL_Vouchers.Credit)      Credit
        INTO #GL_Vouchers_SUM_Count
        FROM #GL_Vouchers
        WHERE #GL_Vouchers.AccountNoID IN
        (
         SELECT AccountID
         FROM gl_Accounts
         WHERE code = '410101'
        )

        SELECT #Inv_Receipt_h_SUM_Count.Count_INV
             , #Inv_Receipt_h_SUM_Count.[Value]
             , #GL_Vouchers_SUM_Count.Count_GL
             , #GL_Vouchers_SUM_Count.Credit
             , Count_INV - Count_GL Count_Balance
             , Value - Credit       Value_Balance
        FROM #Inv_Receipt_h_SUM_Count , 
             #GL_Vouchers_SUM_Count

        -- Check : Receipt Not Exists in Voucher
        SELECT #Inv_Receipt_h.ID
             , #Inv_Receipt_h.[Value]
             , #Inv_Receipt_h.Payment_Type
        FROM #Inv_Receipt_h
        WHERE #Inv_Receipt_h.ID NOT IN
        (
         SELECT #GL_Vouchers.ReceiptID
         FROM #GL_Vouchers
         WHERE #GL_Vouchers.ReceiptID = #Inv_Receipt_h.Id
        )

        -- Check : Sales Account whith Inv_Receipt_H.Value 

        SELECT ID         Inv_Receipt_h_ID
             , SUM(Value) Inv_Receipt_h_Value
        INTO #Inv_Receipt_h_Value
        FROM #Inv_Receipt_h
        GROUP BY ID

        SELECT #GL_Vouchers.ReceiptID
             , #GL_Vouchers.AccountNoID
             , SUM(#GL_Vouchers.Debit)  Debit
             , SUM(#GL_Vouchers.Credit) Credit
        INTO #GL_Vouchers_AccountNoID_ReceiptID
        FROM #GL_Vouchers
        WHERE #GL_Vouchers.AccountNoID IN
        (
         SELECT AccountID
         FROM gl_Accounts
         WHERE code = '410101'
        )
        GROUP BY #GL_Vouchers.ReceiptID
               , #GL_Vouchers.AccountNoID

        SELECT Inv_Receipt_h.ID Inv_Receipt_h_ID
             , Inv_Receipt_h.Entry_Date
             , Inv_Receipt_h.Entry_No
             , Inv_Transaction_Codes.Name_Ar
             , Inv_PaymentType.Name_AR
             , #Inv_Receipt_h_Value.Inv_Receipt_h_Value
             , '.'              [.]
             , Gl_Vouchers.id
             , GL_Accounts.name
             , #GL_Vouchers_AccountNoID_ReceiptID.AccountNoID
             , #GL_Vouchers_AccountNoID_ReceiptID.Debit
             , #GL_Vouchers_AccountNoID_ReceiptID.Credit
        FROM #GL_Vouchers_AccountNoID_ReceiptID
             LEFT JOIN #Inv_Receipt_h_Value
             ON #Inv_Receipt_h_Value.Inv_Receipt_h_ID = #GL_Vouchers_AccountNoID_ReceiptID.ReceiptID
             -- Inv_Receipt_h
             LEFT JOIN Inv_Receipt_h
             ON Inv_Receipt_h.id = #Inv_Receipt_h_Value.Inv_Receipt_h_ID
             LEFT JOIN Inv_Transaction_Codes
             ON Inv_Transaction_Codes.Code = Inv_Receipt_h.Code
             LEFT JOIN Inv_PaymentType
             ON Inv_PaymentType.id = Inv_Receipt_h.Payment_Type 
             -- Gl_Vouchers
             LEFT JOIN Gl_Vouchers
             ON #GL_Vouchers_AccountNoID_ReceiptID.ReceiptID = GL_Vouchers.ReceiptID
             LEFT JOIN GL_Accounts
             ON #GL_Vouchers_AccountNoID_ReceiptID.AccountNoID = GL_Accounts.AccountID
        WHERE #GL_Vouchers_AccountNoID_ReceiptID.Credit <> #Inv_Receipt_h_Value.Inv_Receipt_h_Value
        ORDER BY Inv_Receipt_h.ID
    END
GO
/****** Object:  StoredProcedure [dbo].[Get_INV_Header_Not_Exist_In_Details]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Get_INV_Header_Not_Exist_In_Details]
AS
    BEGIN
        SELECT inv_Receipt_h.ID              inv_Receipt_h_ID
             , Inv_Receipt_h.Entry_No        Inv_Receipt_h_Entry_No
             , Inv_Receipt_h.entry_Date      Inv_Receipt_h_entry_Date
             , Inv_Receipt_h.Code            Inv_Receipt_h_Code
             , Inv_Receipt_h.[Value]         Inv_Receipt_h_Value
             , Inv_Receipt_h.CashDrawerId    Inv_Receipt_h_CashDrawerId
               --mstr_Subsidaries
             , mstr_Subsidaries.ID           mstr_Subsidaries_ID
             , mstr_Subsidaries.Code         mstr_Subsidaries_Code
             , mstr_Subsidaries.Name         mstr_Subsidaries_Name
             , mstr_Subsidaries.Name_Ar      mstr_Subsidaries_Name_Ar
               --Inv_Transaction_Codes
             , Inv_Transaction_Codes.Code    Inv_Transaction_Codes_Code
             , Inv_Transaction_Codes.Name    Inv_Transaction_Codes_Name
             , Inv_Transaction_Codes.Name_Ar Inv_Transaction_Codes_Name_Ar
        FROM
             dbo.inv_Receipt_h
        LEFT JOIN
        dbo.mstr_Subsidaries ON mstr_Subsidaries.ID = inv_Receipt_h.SubsidiaryID
        LEFT JOIN
        dbo.Inv_Transaction_Codes ON Inv_Transaction_Codes.Code = inv_Receipt_h.Code
        WHERE inv_Receipt_h.Id NOT IN
        (
         SELECT inv_Receipt_d.Parent_Id
         FROM dbo.inv_Receipt_d
         WHERE inv_Receipt_d.Parent_ID = inv_Receipt_h.ID
        )
    END
	
GO
/****** Object:  StoredProcedure [dbo].[Get_INV_UnBalanced_DisCount]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Get_INV_UnBalanced_DisCount]
AS
    BEGIN

        SELECT Inv_Receipt_d.Parent_ID             Inv_Receipt_d_Parent_ID
             , SUM(Inv_Receipt_d.H_Discount_Value) Inv_Receipt_d_H_Discount_Value
        INTO #Tbl
        FROM
             dbo.Inv_Receipt_d
        LEFT JOIN
        Inv_Receipt_h ON Inv_Receipt_d.Parent_ID = Inv_Receipt_h.ID
 
        GROUP BY Inv_Receipt_d.Parent_ID

        SELECT #Tbl.*
             , inv_Receipt_h.ID              inv_Receipt_h_ID
             , Inv_Receipt_h.Entry_No        Inv_Receipt_h_Entry_No
             , Inv_Receipt_h.entry_Date      Inv_Receipt_h_entry_Date
             , Inv_Receipt_h.Code            Inv_Receipt_h_Code
             , Inv_Receipt_h.Discount_Value  Inv_Receipt_h_Discount_Value
               --mstr_Subsidaries
             , mstr_Subsidaries.ID           mstr_Subsidaries_ID
             , mstr_Subsidaries.Code         mstr_Subsidaries_Code
             , mstr_Subsidaries.Name         mstr_Subsidaries_Name
             , mstr_Subsidaries.Name_Ar      mstr_Subsidaries_Name_Ar
               --Inv_Transaction_Codes
             , Inv_Transaction_Codes.Code    Inv_Transaction_Codes_Code
             , Inv_Transaction_Codes.Name    Inv_Transaction_Codes_Name
             , Inv_Transaction_Codes.Name_Ar Inv_Transaction_Codes_Name_Ar
        FROM
             inv_Receipt_h
        LEFT JOIN
        mstr_Subsidaries ON mstr_Subsidaries.ID = inv_Receipt_h.SubsidiaryID
        LEFT JOIN
        Inv_Transaction_Codes ON Inv_Transaction_Codes.Code = inv_Receipt_h.Code
        RIGHT JOIN
        #Tbl ON #Tbl.Inv_Receipt_d_Parent_ID = inv_Receipt_h.id
        WHERE #Tbl.Inv_Receipt_d_H_Discount_Value <> Inv_Receipt_h.Discount_Value
        ORDER BY Entry_Date DESC
    END
GO
/****** Object:  StoredProcedure [dbo].[Get_INV_UnBalanced_Total]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Get_INV_UnBalanced_Total]
AS
    BEGIN

        SELECT Inv_Receipt_d.Parent_ID  Inv_Receipt_d_Parent_ID
             , SUM(Inv_Receipt_d.Total) Inv_Receipt_d_Total
        INTO #Tbl
        FROM
             dbo.Inv_Receipt_d
        LEFT JOIN
        Inv_Receipt_h ON Inv_Receipt_d.Parent_ID = Inv_Receipt_h.ID
        GROUP BY Inv_Receipt_d.Parent_ID

        SELECT #Tbl.*
             , (Inv_Receipt_h.NetValue - inv_Receipt_h.DeliveryFees + Inv_Receipt_h.Discount_Value) [NetValue - DeliveryFees + DisCount]
             , Inv_Receipt_h.NetValue
             , Inv_Receipt_h.[Value]
             , inv_Receipt_h.DeliveryFees
             , Inv_Receipt_h.Discount_Value
             , inv_Receipt_h.ID                                                                     inv_Receipt_h_ID
             , Inv_Receipt_h.Entry_No                                                               Inv_Receipt_h_Entry_No
             , Inv_Receipt_h.entry_Date                                                             Inv_Receipt_h_entry_Date
             , Inv_Receipt_h.Code                                                                   Inv_Receipt_h_Code
             , Inv_Receipt_h.Discount_Value                                                         Inv_Receipt_h_Discount_Value
               --mstr_Subsidaries
             , mstr_Subsidaries.ID                                                                  mstr_Subsidaries_ID
             , mstr_Subsidaries.Code                                                                mstr_Subsidaries_Code
             , mstr_Subsidaries.Name                                                                mstr_Subsidaries_Name
             , mstr_Subsidaries.Name_Ar                                                             mstr_Subsidaries_Name_Ar
               --Inv_Transaction_Codes
             , Inv_Transaction_Codes.Code                                                           Inv_Transaction_Codes_Code
             , Inv_Transaction_Codes.Name                                                           Inv_Transaction_Codes_Name
             , Inv_Transaction_Codes.Name_Ar                                                        Inv_Transaction_Codes_Name_Ar
        FROM
             inv_Receipt_h
        LEFT JOIN
        mstr_Subsidaries ON mstr_Subsidaries.ID = inv_Receipt_h.SubsidiaryID
        LEFT JOIN
        Inv_Transaction_Codes ON Inv_Transaction_Codes.Code = inv_Receipt_h.Code
        RIGHT JOIN
        #Tbl ON #Tbl.Inv_Receipt_d_Parent_ID = inv_Receipt_h.id
        WHERE #Tbl.Inv_Receipt_d_Total <> Inv_Receipt_h.NetValue - inv_Receipt_h.DeliveryFees + Inv_Receipt_h.Discount_Value
        ORDER BY Inv_Receipt_d_Parent_ID
    END
GO
/****** Object:  StoredProcedure [dbo].[GetActiveItemsBySubsNCategories]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetActiveItemsBySubsNCategories]  				 

@Subsidiary_ID int,
@ItemCategoriesIDs nvarchar(500)

AS
BEGIN   
	SELECT DISTINCT i.ID as ItemID, i.Code as ItemCode, i.Name as ItemName  
	FROM Inv_Items as i  
	LEFT JOIN Inv_Items_Categories as ic on ic.Item_ID = i.ID

	 Where i.Subsidiary_ID = @Subsidiary_ID
		AND i.IsActive = 1
		AND(ic.ItemCategory_ID IN (select * from ParseCommaDelimitedString(@ItemCategoriesIDs)))
	  
END
GO
/****** Object:  StoredProcedure [dbo].[GetAllAccountChildsTransactionCount]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
 CREATE PROCEDURE [dbo].[GetAllAccountChildsTransactionCount]
	@AccountId int 
	AS
BEGIN
;WITH cte AS 
 (
  SELECT a.AccountID, a.parentId, a.Name , a.Name_AR , a.Type , a.LevelNo
  FROM GL_Accounts a
  left Join GL_AccountSubsidiary on GL_AccountSubsidiary.AccountID = a.AccountID
  WHERE a.AccountID = @AccountId
  UNION ALL
  SELECT a.AccountID, a.parentid, a.Name , a.Name_AR, a.Type , a.LevelNo
  FROM GL_Accounts a 
  JOIN cte c ON a.parentId = c.AccountID Where  a.LevelNo != 0
  )
  SELECT ParentId, cte.AccountID, Name, Name_AR , Type , SubsidiaryID , LevelNo
  FROM cte
  left join GL_AccountSubsidiary on GL_AccountSubsidiary.AccountID = cte.AccountID
END
GO
/****** Object:  StoredProcedure [dbo].[GetAllBranchTables]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetAllBranchTables]
	@BranchId INT
AS
BEGIN 
  SELECT 
	   A.Id, 
	   D.ID [BranchId], 
	   D.Name [BranchName], 
	   A.TableNumber [TableNumber],
	   X.ID [FloorId],
	   X.Name [FloorName],
	   x.NameAr [FloorName_Ar],
	   C.Id [ReceiptTableId], 
	   B.ID [RecieptId],
	   CONVERT(varchar, B.Entry_No) [OrderNumber]
  FROM [dbo].[BranchTables] A
  LEFT OUTER JOIN [dbo].[Inv_ReceiptTables] C ON A.Id = C.BranchTableId AND C.IsDeleted = 0 AND C.IsActive = 1
  LEFT OUTER JOIN [dbo].[Inv_Receipt_h]  B ON C.ReceiptId = B.Id AND B.IsHolded = 1 AND (B.Is_Canceled = 0 OR B.Is_Canceled IS NULL)
  INNER JOIN [dbo].[mstr_Branch] D ON A.BranchId = D.ID
  INNER JOIN [dbo].[mstr_Floor] X ON A.Floor = X.ID  
  WHERE D.ID = @BranchId
  order by A.Id
END
GO
/****** Object:  StoredProcedure [dbo].[GetAllCashSalesReceipts]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetAllCashSalesReceipts]

@SubsidiaryID int ,
@UserID int ,
@Language NVARCHAR(10),
@Skip int = 0,
@Take int = 200,
@SearchValue NVARCHAR(150)

AS
   
   if(@Language = 'en-US')
   Begin
   SELECT Distinct
       [dbo].[Inv_Receipt_h].[ID] as ID
      ,[dbo].[Inv_Receipt_h].[Entry_No] as Entry_No
	  ,CONVERT(varchar(23), [dbo].[Inv_Receipt_h].[Entry_Date] , 101) as [Entry_Date]
      ,[dbo].[mstr_Branch].[Name] as BranchName
      ,(CASE WHEN [dbo].[Inv_Receipt_h].[Vendor_ID] IS NOT NULL  THEN  [dbo].[GL_Accounts].[Name] ELSE
	    CASE WHEN [dbo].[Inv_Receipt_h].CashCustomerID IS NOT NULL  THEN  [dbo].[Inv_CashCustomer].[Name] ELSE '' END END  )as CustomerName
      ,(CASE WHEN [dbo].[Inv_Receipt_h].[Vendor_ID] IS NOT NULL  THEN  [dbo].[GL_Accounts].[Phone] ELSE
	    CASE WHEN [dbo].[Inv_Receipt_h].CashCustomerID IS NOT NULL  THEN  [dbo].[Inv_CashCustomer].[PhoneNumber] ELSE '' END END  )as CustomerPhone
	  ,[dbo].[Inv_Receipt_h].[NetValue] as [NetValue]
	  FROM [dbo].[Inv_Receipt_h]
	  LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[Inv_Receipt_h].[Vendor_ID]
	  LEFT JOIN [dbo].[Inv_CashCustomer] on [dbo].[Inv_CashCustomer].[id] = [dbo].[Inv_Receipt_h].[CashCustomerID]
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[Inv_Receipt_h].[Branch_ID]

 Where 
 ([dbo].[Inv_Receipt_h].[SubsidiaryID] = @SubsidiaryID ) AND
 ([dbo].[Inv_Receipt_h].[Branch_ID] in (select BranchID from UserBranch where UserID = @UserID) ) AND
  ([dbo].[Inv_Receipt_h].[Code] = 51 ) AND -- Cash Sales Code
 ((Cast([dbo].[Inv_Receipt_h].[Entry_No]  as nVarchar(100)) like '%'+@SearchValue+'%' )  OR
    (Cast([dbo].[Inv_Receipt_h].[NetValue]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[mstr_Branch].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[mstr_Branch].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[GL_Accounts].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[GL_Accounts].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[GL_Accounts].[Phone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[Inv_CashCustomer].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[Inv_CashCustomer].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[Inv_CashCustomer].[PhoneNumber]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR  
 (CONVERT(varchar(23), [dbo].[Inv_Receipt_h].[Entry_Date] , 101) like '%'+@SearchValue+'%' ) OR  
 (@SearchValue IS NULL) OR (@SearchValue  = ''))

  ORDER BY [dbo].[Inv_Receipt_h].[ID]
  OFFSET     @Skip ROWS       
  FETCH NEXT @Take ROWS ONLY; 
  END
  else
     Begin
   SELECT Distinct
       [dbo].[Inv_Receipt_h].[ID] as ID
      ,[dbo].[Inv_Receipt_h].[Entry_No] as Entry_No
      ,CONVERT(varchar(23), [dbo].[Inv_Receipt_h].[Entry_Date] , 101) as [Entry_Date]
      ,[dbo].[mstr_Branch].[Name_AR] as BranchName
      ,(CASE WHEN [dbo].[Inv_Receipt_h].[Vendor_ID] IS NOT NULL  THEN  [dbo].[GL_Accounts].[Name_AR] ELSE
	    CASE WHEN [dbo].[Inv_Receipt_h].CashCustomerID IS NOT NULL  THEN  [dbo].[Inv_CashCustomer].[Name_AR] ELSE '' END END  )as CustomerName
      ,(CASE WHEN [dbo].[Inv_Receipt_h].[Vendor_ID] IS NOT NULL  THEN  [dbo].[GL_Accounts].[Phone] ELSE
	    CASE WHEN [dbo].[Inv_Receipt_h].CashCustomerID IS NOT NULL  THEN  [dbo].[Inv_CashCustomer].[PhoneNumber] ELSE '' END END  )as CustomerPhone
	  ,[dbo].[Inv_Receipt_h].[NetValue] as [NetValue]
	  FROM [dbo].[Inv_Receipt_h]
	  LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[Inv_Receipt_h].[Vendor_ID]
	  LEFT JOIN [dbo].[Inv_CashCustomer] on [dbo].[Inv_CashCustomer].[id] = [dbo].[Inv_Receipt_h].[CashCustomerID]
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[Inv_Receipt_h].[Branch_ID]

 Where 
 ([dbo].[Inv_Receipt_h].[SubsidiaryID] = @SubsidiaryID ) AND
  ([dbo].[Inv_Receipt_h].[Branch_ID] in (select BranchID from UserBranch where UserID = @UserID) ) AND
   ([dbo].[Inv_Receipt_h].[Code] = 51 ) AND -- Cash Sales Code
 ((Cast([dbo].[Inv_Receipt_h].[Entry_No]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
    (Cast([dbo].[Inv_Receipt_h].[NetValue]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[mstr_Branch].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[mstr_Branch].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[GL_Accounts].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[GL_Accounts].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[GL_Accounts].[Phone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[Inv_CashCustomer].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[Inv_CashCustomer].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[Inv_CashCustomer].[PhoneNumber]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR  
 (CONVERT(varchar(23), [dbo].[Inv_Receipt_h].[Entry_Date] , 101) like '%'+@SearchValue+'%' ) OR  
 (@SearchValue IS NULL) OR (@SearchValue  = ''))

  ORDER BY [dbo].[Inv_Receipt_h].[ID]
  OFFSET     @Skip ROWS       
  FETCH NEXT @Take ROWS ONLY; 
  END
GO
/****** Object:  StoredProcedure [dbo].[GetAllCashSalesReceiptsCount]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetAllCashSalesReceiptsCount] --1 ,51,5, 'en-US',''

@SubsidiaryID int ,
@ReceiptCode int ,
@UserID int ,
@Language NVARCHAR(10),
@SearchValue NVARCHAR(150)

AS


   if(@Language = 'en-US')
   Begin
      	SELECT  COUNT(cashSales.ID) as Count
	from
  (
   SELECT Distinct
       [dbo].[Inv_Receipt_h].[ID] as ID
      ,[dbo].[Inv_Receipt_h].[Entry_No] as Entry_No
	  ,CONVERT(varchar(23), [dbo].[Inv_Receipt_h].[Entry_Date] , 101) as [Entry_Date]
      ,[dbo].[mstr_Branch].[Name] as BranchName
      ,(CASE WHEN [dbo].[Inv_Receipt_h].[Vendor_ID] IS NOT NULL  THEN  [dbo].[GL_Accounts].[Name] ELSE
	    CASE WHEN [dbo].[Inv_Receipt_h].CashCustomerID IS NOT NULL  THEN  [dbo].[Inv_CashCustomer].[Name] ELSE '' END END  )as CustomerName
      ,(CASE WHEN [dbo].[Inv_Receipt_h].[Vendor_ID] IS NOT NULL  THEN  [dbo].[GL_Accounts].[Phone] ELSE
	    CASE WHEN [dbo].[Inv_Receipt_h].CashCustomerID IS NOT NULL  THEN  [dbo].[Inv_CashCustomer].[PhoneNumber] ELSE '' END END  )as CustomerPhone
	  ,[dbo].[Inv_Receipt_h].[NetValue] as NetValue
	  FROM [dbo].[Inv_Receipt_h]
	  LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[Inv_Receipt_h].[Vendor_ID]
	  LEFT JOIN [dbo].[Inv_CashCustomer] on [dbo].[Inv_CashCustomer].[id] = [dbo].[Inv_Receipt_h].[CashCustomerID]
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[Inv_Receipt_h].[Branch_ID]

 Where 
 ([dbo].[Inv_Receipt_h].[SubsidiaryID] = @SubsidiaryID ) AND
  ([dbo].[Inv_Receipt_h].[Branch_ID] in (select BranchID from UserBranch where UserID = @UserID) ) AND
   ([dbo].[Inv_Receipt_h].[Code] = @ReceiptCode ) AND -- 
 ((Cast([dbo].[Inv_Receipt_h].[Entry_No]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
    (Cast([dbo].[Inv_Receipt_h].[NetValue]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[mstr_Branch].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[mstr_Branch].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[GL_Accounts].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[GL_Accounts].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[GL_Accounts].[Phone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[Inv_CashCustomer].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[Inv_CashCustomer].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[Inv_CashCustomer].[PhoneNumber]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR  
 (CONVERT(varchar(23), [dbo].[Inv_Receipt_h].[Entry_Date] , 101) like '%'+@SearchValue+'%' ) OR  
 (@SearchValue IS NULL) OR (@SearchValue  = ''))
 )cashSales
  END
  else
     Begin
	    	SELECT  COUNT(cashSales.ID) as Count
	from
  (
   SELECT Distinct
       [dbo].[Inv_Receipt_h].[ID] as ID
      ,[dbo].[Inv_Receipt_h].[Entry_No] as Entry_No
,CONVERT(varchar(23), [dbo].[Inv_Receipt_h].[Entry_Date] , 101) as [Entry_Date]
      ,[dbo].[mstr_Branch].[Name_AR] as BranchName
      ,(CASE WHEN [dbo].[Inv_Receipt_h].[Vendor_ID] IS NOT NULL  THEN  [dbo].[GL_Accounts].[Name_AR] ELSE
	    CASE WHEN [dbo].[Inv_Receipt_h].CashCustomerID IS NOT NULL  THEN  [dbo].[Inv_CashCustomer].[Name_AR] ELSE '' END END  )as CustomerName
      ,(CASE WHEN [dbo].[Inv_Receipt_h].[Vendor_ID] IS NOT NULL  THEN  [dbo].[GL_Accounts].[Phone] ELSE
	    CASE WHEN [dbo].[Inv_Receipt_h].CashCustomerID IS NOT NULL  THEN  [dbo].[Inv_CashCustomer].[PhoneNumber] ELSE '' END END  )as CustomerPhone
	  ,[dbo].[Inv_Receipt_h].[NetValue] as [NetValue]
	  FROM [dbo].[Inv_Receipt_h]
	  LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[Inv_Receipt_h].[Vendor_ID]
	  LEFT JOIN [dbo].[Inv_CashCustomer] on [dbo].[Inv_CashCustomer].[id] = [dbo].[Inv_Receipt_h].[CashCustomerID]
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[Inv_Receipt_h].[Branch_ID]

 Where 
 ([dbo].[Inv_Receipt_h].[SubsidiaryID] = @SubsidiaryID ) AND
  ([dbo].[Inv_Receipt_h].[Branch_ID] in (select BranchID from UserBranch where UserID = @UserID) ) AND
    ([dbo].[Inv_Receipt_h].[Code] = @ReceiptCode ) AND -- Cash Sales Code
 ((Cast([dbo].[Inv_Receipt_h].[Entry_No]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
    (Cast([dbo].[Inv_Receipt_h].[NetValue]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[mstr_Branch].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[mstr_Branch].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[GL_Accounts].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[GL_Accounts].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[GL_Accounts].[Phone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[Inv_CashCustomer].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[Inv_CashCustomer].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[Inv_CashCustomer].[PhoneNumber]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR  
 (CONVERT(varchar(23), [dbo].[Inv_Receipt_h].[Entry_Date] , 101) like '%'+@SearchValue+'%' ) OR  
 (@SearchValue IS NULL) OR (@SearchValue  = ''))
 )cashSales
  END

  
GO
/****** Object:  StoredProcedure [dbo].[GetAllCustomerCreditSalesInvoices]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetAllCustomerCreditSalesInvoices]

@SubsidiaryID int ,
@AccountID int ,
@Language nvarchar(50),
@Skip    int	 = 0,
@Take    int	 = 200,
@ReceiptID int ,
@CustomerPaymentID int = null,
@ReconciliationID int = null

AS

if @CustomerPaymentID IS null and @ReconciliationID IS null
     
	 Select * from  (
       SELECT Distinct
        CONVERT(varchar(25),[dbo].[GL_Vouchers].[ID]) as DT_RowId -- Voucher ID of Receipt
	   ,MAX([dbo].[GL_Vouchers].[VouhcerDate]) as VDate
	   ,MAX([dbo].[Inv_Receipt_h].[ID]) as ReceiptId
	   ,MAX([dbo].[mstr_Branch].[Code]) as BranchCode
	   ,MAX([dbo].[Inv_Receipt_h].[Entry_No]) as InvoiceCode
       ,MAX(CONVERT(varchar(23), ([dbo].[GL_Vouchers].[VouhcerDate]), 103)) as VouhcerDate
       ,MAX(CASE WHEN  @Language = 'en-Us' THEN 
	     ([dbo].[GL_VoucherType].[Name])
	    ELSE
         ([dbo].[GL_VoucherType].[Name_AR]) END)
	    as VoucherTypeName
	   ,MAX(CASE WHEN  @Language = 'en-Us' THEN 
	         CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN 'Debit' ELSE 'Credit' END 
			 ELSE 
			 CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN N'مدين' ELSE N'دائن' END  
		END) as AmountType
	   	,MAX((ISNULL([dbo].[Inv_Receipt_h].[NetValue],0))) as Value
	   ,MAX(CASE WHEN  @Language = 'en-Us' THEN 
	       ([dbo].[mstr_Currencies].[Name]) 
	   ELSE 
	      ([dbo].[mstr_Currencies].[Name_Ar]) END )
       as CurrencyName 
	   ,MAX(ISNULL( ([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount]),0)) as PreviouslyPaidAmount
       , CONVERT(DECIMAL(18,3), 0) as PaidAmount 
       ,MAX(ISNULL([dbo].[Inv_Receipt_h].[NetValue],0) - ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0)) as Remaining,
	   MAX(CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 
	    THEN  CASE WHEN ( ([dbo].[GL_VoucherDetails].[Debit]) = ([dbo].[GL_VoucherPayments].[Amount]) ) THEN 1 ELSE 0 END
	    ELSE CASE WHEN ( ([dbo].[GL_VoucherDetails].[Credit]) = ([dbo].[GL_VoucherPayments].[Amount]) ) THEN 1 ELSE 0 END END) as IsSelected
	   , 0 as VoucherPaymentId
	   , 0 as ReconciliationID
	   , (CASE WHEN (Select Count(ID) from Crm_Invoice_Installments Where InvoiceID = Max([dbo].[Inv_Receipt_h].[ID]))> 0 
	   Then 1 Else 0 END) as ReceiptHasInstallments 
	   ,MAX(CASE WHEN  @Language = 'en-Us' THEN 
	     ([dbo].[GL_Accounts].[Name])
	    ELSE
         ([dbo].[GL_Accounts].[Name_AR]) END)
	    as RelatedAccountName
	  FROM 
	  [dbo].[GL_Vouchers]
	  JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  JOIN [dbo].[GL_Accounts] on [dbo].[GL_VoucherDetails].[AccountNoID] = [dbo].[GL_Accounts].[AccountID]
	  JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  JOIN [dbo].[mstr_Currencies] on [dbo].[mstr_Currencies].[ID] = [dbo].[GL_Vouchers].[CurrencyID]
	  JOIN [dbo].[Inv_Receipt_h] on [dbo].[Inv_Receipt_h].[ID] = [dbo].[GL_Vouchers].[ReceiptID]
	  JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].ID = [dbo].[Inv_Receipt_h].[Branch_ID]
	  JOIN [dbo].[GL_VoucherPayments] on [dbo].[GL_VoucherPayments].ReceiptId = [dbo].[Inv_Receipt_h].[ID]

	  Where 
      [dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID AND
	  ([dbo].[GL_Vouchers].[ReceiptID] = @ReceiptID or @ReceiptID is NULL) AND
	  ([dbo].[GL_VoucherDetails].[AccountNoID] = @AccountID OR [dbo].[GL_VoucherDetails].[AccountNoID] in (Select RelatedAccountID from GL_RelatedAccounts where AccountID = @AccountID) ) AND
	  [dbo].[GL_VoucherType].[Code] IN ( '22','40') 
	  AND ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0) != [dbo].[Inv_Receipt_h].[NetValue]
	  AND (GL_VoucherPayments.VoucherId = @CustomerPaymentID or @CustomerPaymentID IS null)

	  GRoup By GL_VoucherPayments.ReceiptId , [dbo].[GL_Vouchers].[ID]

	  UNIon ALL

   SELECT Distinct
        CONVERT(varchar(25),[dbo].[GL_Vouchers].[ID]) as DT_RowId -- Voucher ID of Receipt
	   ,[dbo].[GL_Vouchers].[VouhcerDate] as VDate
	   ,([dbo].[Inv_Receipt_h].[ID]) as ReceiptId
	   ,([dbo].[mstr_Branch].[Code]) as BranchCode
	   ,([dbo].[Inv_Receipt_h].[Entry_No]) as InvoiceCode
       ,CONVERT(varchar(23), ([dbo].[GL_Vouchers].[VouhcerDate]), 103) as VouhcerDate
       ,CASE WHEN  @Language = 'en-Us' THEN 
	     ([dbo].[GL_VoucherType].[Name])
	    ELSE
         ([dbo].[GL_VoucherType].[Name_AR]) END
	    as VoucherTypeName
	   ,CASE WHEN  @Language = 'en-Us' THEN 
	         CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN 'Debit' ELSE 'Credit' END 
			 ELSE 
			 CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN N'مدين' ELSE N'دائن' END  
		END as AmountType
	   	,(ISNULL([dbo].[Inv_Receipt_h].[NetValue],0)) as Value
	   ,CASE WHEN  @Language = 'en-Us' THEN 
	       ([dbo].[mstr_Currencies].[Name]) 
	   ELSE 
	      ([dbo].[mstr_Currencies].[Name_Ar]) END 
       as CurrencyName 
	   ,ISNULL( ([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount]),0) as PreviouslyPaidAmount
       ,0 as PaidAmount 
       ,ISNULL([dbo].[Inv_Receipt_h].[NetValue],0) - ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0) as Remaining,
	   (CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 
	    THEN  CASE WHEN ( ([dbo].[GL_VoucherDetails].[Debit]) = ([dbo].[GL_VoucherPayments].[Amount]) ) THEN 1 ELSE 0 END
	    ELSE CASE WHEN ( ([dbo].[GL_VoucherDetails].[Credit]) = ([dbo].[GL_VoucherPayments].[Amount]) ) THEN 1 ELSE 0 END END) as IsSelected
	   , 0 as VoucherPaymentId
	   , ISNULL(([dbo].[GL_VoucherPayments].[ReconciliationID]),0) as ReconciliationID
	   , CASE WHEN (Select Count(ID) from Crm_Invoice_Installments Where InvoiceID = ([dbo].[Inv_Receipt_h].[ID]))> 0 
	   Then 1 Else 0 END as ReceiptHasInstallments 
	   	   ,(CASE WHEN  @Language = 'en-Us' THEN 
	     ([dbo].[GL_Accounts].[Name])
	    ELSE
         ([dbo].[GL_Accounts].[Name_AR]) END)
	    as RelatedAccountName

	  FROM 
	  [dbo].[GL_Vouchers]
	  JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  JOIN [dbo].[GL_Accounts] on [dbo].[GL_VoucherDetails].[AccountNoID] = [dbo].[GL_Accounts].[AccountID]
	  JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  JOIN [dbo].[mstr_Currencies] on [dbo].[mstr_Currencies].[ID] = [dbo].[GL_Vouchers].[CurrencyID]
	  JOIN [dbo].[Inv_Receipt_h] on [dbo].[Inv_Receipt_h].[ID] = [dbo].[GL_Vouchers].[ReceiptID]
	  JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].ID = [dbo].[Inv_Receipt_h].[Branch_ID]
	  LEFT JOIN [dbo].[GL_VoucherPayments] on [dbo].[GL_VoucherPayments].ReceiptId = [dbo].[Inv_Receipt_h].[ID]

	  Where 
      [dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID AND
	  ([dbo].[GL_Vouchers].[ReceiptID] = @ReceiptID or @ReceiptID is NULL) AND
	  ([dbo].[GL_VoucherDetails].[AccountNoID] = @AccountID OR [dbo].[GL_VoucherDetails].[AccountNoID] in (Select RelatedAccountID from GL_RelatedAccounts where AccountID = @AccountID) ) AND
	  ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0) != [dbo].[Inv_Receipt_h].[NetValue] AND
	  [dbo].[GL_VoucherType].[Code] IN ( '22','40') AND
	  (
	  [GL_VoucherPayments].ReceiptId NOT IN (SELECT Distinct ([dbo].[Inv_Receipt_h].[ID]) as ReceiptId
	  FROM [dbo].[GL_Vouchers] JOIN [dbo].[Inv_Receipt_h] on [dbo].[Inv_Receipt_h].[ID] = [dbo].[GL_Vouchers].[ReceiptID]
	  JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  JOIN [dbo].[GL_VoucherPayments] on [dbo].[GL_VoucherPayments].ReceiptId = [dbo].[Inv_Receipt_h].[ID]
	  Where 
      [dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID AND
	  ([dbo].[GL_Vouchers].[ReceiptID] = @ReceiptID or @ReceiptID is NULL) AND
	  ([dbo].[GL_VoucherDetails].[AccountNoID] = @AccountID OR [dbo].[GL_VoucherDetails].[AccountNoID] in (Select RelatedAccountID from GL_RelatedAccounts where AccountID = @AccountID) ) AND
	  [dbo].[GL_VoucherType].[Code] IN ( '22','40') 
	  AND (GL_VoucherPayments.VoucherId = @CustomerPaymentID or @CustomerPaymentID IS null))
	  OR [GL_VoucherPayments].ReceiptId IS NULL  
	  )
	  ) VV 
	  Order By VV.VDate desc
	  else if @CustomerPaymentID is not null and  @ReconciliationID is null
    
	Select * from (
	  SELECT Distinct
        CONVERT(varchar(25),[dbo].[GL_Vouchers].[ID]) as DT_RowId -- Voucher ID of Receipt
	   ,[dbo].[GL_Vouchers].[VouhcerDate] as VDate
	   ,([dbo].[Inv_Receipt_h].[ID]) as ReceiptId
	   ,([dbo].[mstr_Branch].[Code]) as BranchCode
	   ,([dbo].[Inv_Receipt_h].[Entry_No]) as InvoiceCode
       ,CONVERT(varchar(23), ([dbo].[GL_Vouchers].[VouhcerDate]), 103) as VouhcerDate
       ,CASE WHEN  @Language = 'en-Us' THEN 
	     ([dbo].[GL_VoucherType].[Name])
	    ELSE
         ([dbo].[GL_VoucherType].[Name_AR]) END
	    as VoucherTypeName
	   ,CASE WHEN  @Language = 'en-Us' THEN 
	         CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN 'Debit' ELSE 'Credit' END 
			 ELSE 
			 CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN N'مدين' ELSE N'دائن' END  
		END as AmountType
	   	,(ISNULL([dbo].[Inv_Receipt_h].[NetValue],0)) as Value
	   ,CASE WHEN  @Language = 'en-Us' THEN 
	       ([dbo].[mstr_Currencies].[Name]) 
	   ELSE 
	      ([dbo].[mstr_Currencies].[Name_Ar]) END 
       as CurrencyName 
	   ,ISNULL( ([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount]),0) as PreviouslyPaidAmount
       ,ISNULL([dbo].[GL_VoucherPayments].[Amount],0) as PaidAmount 
       ,ISNULL([dbo].[Inv_Receipt_h].[NetValue],0) - ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0) as Remaining,
	   (CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 
	    THEN  CASE WHEN ( ([dbo].[GL_VoucherDetails].[Debit]) = ([dbo].[GL_VoucherPayments].[Amount]) ) THEN 1 ELSE 0 END
	    ELSE CASE WHEN ( ([dbo].[GL_VoucherDetails].[Credit]) = ([dbo].[GL_VoucherPayments].[Amount]) ) THEN 1 ELSE 0 END END) as IsSelected
	   , ISNULL(([dbo].[GL_VoucherPayments].[Id]),0) as VoucherPaymentId
	   , ISNULL(([dbo].[GL_VoucherPayments].[ReconciliationID]),0) as ReconciliationID
	   	   , CASE WHEN (Select Count(ID) from Crm_Invoice_Installments Where InvoiceID = ([dbo].[Inv_Receipt_h].[ID]))> 0 
	   Then 1 Else 0 END as ReceiptHasInstallments 
	   	   ,(CASE WHEN  @Language = 'en-Us' THEN 
	     ([dbo].[GL_Accounts].[Name])
	    ELSE
         ([dbo].[GL_Accounts].[Name_AR]) END)
	    as RelatedAccountName
	  FROM 
	  [dbo].[GL_Vouchers]
	  JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  JOIN [dbo].[GL_Accounts] on [dbo].[GL_VoucherDetails].[AccountNoID] = [dbo].[GL_Accounts].[AccountID]
	  JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  JOIN [dbo].[mstr_Currencies] on [dbo].[mstr_Currencies].[ID] = [dbo].[GL_Vouchers].[CurrencyID]
	  JOIN [dbo].[Inv_Receipt_h] on [dbo].[Inv_Receipt_h].[ID] = [dbo].[GL_Vouchers].[ReceiptID]
	  JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].ID = [dbo].[Inv_Receipt_h].[Branch_ID]
	  JOIN [dbo].[GL_VoucherPayments] on [dbo].[GL_VoucherPayments].ReceiptId = [dbo].[Inv_Receipt_h].[ID]

	  Where 
      [dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID AND
	  ([dbo].[GL_Vouchers].[ReceiptID] = @ReceiptID or @ReceiptID is NULL) AND
	  ([dbo].[GL_VoucherDetails].[AccountNoID] = @AccountID OR [dbo].[GL_VoucherDetails].[AccountNoID] in (Select RelatedAccountID from GL_RelatedAccounts where AccountID = @AccountID) ) AND
	  [dbo].[GL_VoucherType].[Code] IN ( '22','40') 
	  AND (GL_VoucherPayments.VoucherId = @CustomerPaymentID or @CustomerPaymentID IS null)
	  
	  UNIon ALL

   SELECT Distinct
        CONVERT(varchar(25),[dbo].[GL_Vouchers].[ID]) as DT_RowId -- Voucher ID of Receipt
	   ----,([dbo].[GL_VoucherPayments].[VoucherId]) as VoucherId
	   --,([dbo].[GL_VoucherPayments].[CreationDate]) as [CreationDate]
	   --,([dbo].[GL_VoucherPayments].[LastModifiedDate]) as [LastModifiedDate]
	   ,[dbo].[GL_Vouchers].[VouhcerDate] as VDate
	   ,([dbo].[Inv_Receipt_h].[ID]) as ReceiptId
	   ,([dbo].[mstr_Branch].[Code]) as BranchCode
	   ,([dbo].[Inv_Receipt_h].[Entry_No]) as InvoiceCode
       ,CONVERT(varchar(23), ([dbo].[GL_Vouchers].[VouhcerDate]), 103) as VouhcerDate
       ,CASE WHEN  @Language = 'en-Us' THEN 
	     ([dbo].[GL_VoucherType].[Name])
	    ELSE
         ([dbo].[GL_VoucherType].[Name_AR]) END
	    as VoucherTypeName
	   ,CASE WHEN  @Language = 'en-Us' THEN 
	         CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN 'Debit' ELSE 'Credit' END 
			 ELSE 
			 CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN N'مدين' ELSE N'دائن' END  
		END as AmountType
	   	,(ISNULL([dbo].[Inv_Receipt_h].[NetValue],0)) as Value
	   ,CASE WHEN  @Language = 'en-Us' THEN 
	       ([dbo].[mstr_Currencies].[Name]) 
	   ELSE 
	      ([dbo].[mstr_Currencies].[Name_Ar]) END 
       as CurrencyName 
	   ,ISNULL( ([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount]),0) as PreviouslyPaidAmount
       ,0 as PaidAmount 
       ,ISNULL([dbo].[Inv_Receipt_h].[NetValue],0) - ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0) as Remaining,
	   (CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 
	    THEN  CASE WHEN ( ([dbo].[GL_VoucherDetails].[Debit]) = ([dbo].[GL_VoucherPayments].[Amount]) ) THEN 1 ELSE 0 END
	    ELSE CASE WHEN ( ([dbo].[GL_VoucherDetails].[Credit]) = ([dbo].[GL_VoucherPayments].[Amount]) ) THEN 1 ELSE 0 END END) as IsSelected
	   , 0 as VoucherPaymentId
	   , 0 as ReconciliationID
	   , CASE WHEN (Select Count(ID) from Crm_Invoice_Installments Where InvoiceID = ([dbo].[Inv_Receipt_h].[ID]))> 0 
	   Then 1 Else 0 END as ReceiptHasInstallments 
	   	   ,(CASE WHEN  @Language = 'en-Us' THEN 
	     ([dbo].[GL_Accounts].[Name])
	    ELSE
         ([dbo].[GL_Accounts].[Name_AR]) END)
	    as RelatedAccountName
	  FROM 
	  [dbo].[GL_Vouchers]
	  JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  JOIN [dbo].[GL_Accounts] on [dbo].[GL_VoucherDetails].[AccountNoID] = [dbo].[GL_Accounts].[AccountID]
	  JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  JOIN [dbo].[mstr_Currencies] on [dbo].[mstr_Currencies].[ID] = [dbo].[GL_Vouchers].[CurrencyID]
	  JOIN [dbo].[Inv_Receipt_h] on [dbo].[Inv_Receipt_h].[ID] = [dbo].[GL_Vouchers].[ReceiptID]
	  JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].ID = [dbo].[Inv_Receipt_h].[Branch_ID]
	  LEFT JOIN [dbo].[GL_VoucherPayments] on [dbo].[GL_VoucherPayments].ReceiptId = [dbo].[Inv_Receipt_h].[ID]

	  Where 
      [dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID AND
	  ([dbo].[GL_Vouchers].[ReceiptID] = @ReceiptID or @ReceiptID is NULL) AND
	  ([dbo].[GL_VoucherDetails].[AccountNoID] = @AccountID OR [dbo].[GL_VoucherDetails].[AccountNoID] in (Select RelatedAccountID from GL_RelatedAccounts where AccountID = @AccountID) ) AND
	  ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0) != [dbo].[Inv_Receipt_h].[NetValue] AND
	  [dbo].[GL_VoucherType].[Code] IN ( '22','40') AND
	  (
	  [GL_VoucherPayments].ReceiptId NOT IN (SELECT Distinct ([dbo].[Inv_Receipt_h].[ID]) as ReceiptId
	  FROM [dbo].[GL_Vouchers] JOIN [dbo].[Inv_Receipt_h] on [dbo].[Inv_Receipt_h].[ID] = [dbo].[GL_Vouchers].[ReceiptID]
	  JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  JOIN [dbo].[GL_VoucherPayments] on [dbo].[GL_VoucherPayments].ReceiptId = [dbo].[Inv_Receipt_h].[ID]
	  Where 
      [dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID AND
	  ([dbo].[GL_Vouchers].[ReceiptID] = @ReceiptID or @ReceiptID is NULL) AND
	  ([dbo].[GL_VoucherDetails].[AccountNoID] = @AccountID OR [dbo].[GL_VoucherDetails].[AccountNoID] in (Select RelatedAccountID from GL_RelatedAccounts where AccountID = @AccountID) ) AND
	  [dbo].[GL_VoucherType].[Code] IN ( '22','40') 
	  AND (GL_VoucherPayments.VoucherId = @CustomerPaymentID or @CustomerPaymentID IS null))
	  OR [GL_VoucherPayments].ReceiptId IS NULL  
	  )
	  )BB
	  Order By BB.VDate desc

	else if @ReconciliationID is not null

	Select * from (
		SELECT Distinct
		CONVERT(varchar(25),[dbo].[GL_Vouchers].[ID]) as DT_RowId -- Voucher ID of Receipt
		,[dbo].[GL_Vouchers].[VouhcerDate] as VDate
		,([dbo].[Inv_Receipt_h].[ID]) as ReceiptId
		,([dbo].[mstr_Branch].[Code]) as BranchCode
		,([dbo].[Inv_Receipt_h].[Entry_No]) as InvoiceCode
		,CONVERT(varchar(23), ([dbo].[GL_Vouchers].[VouhcerDate]), 103) as VouhcerDate
		,CASE WHEN  @Language = 'en-Us' THEN 
			([dbo].[GL_VoucherType].[Name])
		ELSE
			([dbo].[GL_VoucherType].[Name_AR]) END
		as VoucherTypeName
		,CASE WHEN  @Language = 'en-Us' THEN 
				CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN 'Debit' ELSE 'Credit' END 
				ELSE 
				CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN N'مدين' ELSE N'دائن' END  
		END as AmountType
	   	,(ISNULL([dbo].[Inv_Receipt_h].[NetValue],0)) as Value
		,CASE WHEN  @Language = 'en-Us' THEN 
			([dbo].[mstr_Currencies].[Name]) 
		ELSE 
			([dbo].[mstr_Currencies].[Name_Ar]) END 
		as CurrencyName 
		,ISNULL( ([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount]),0) as PreviouslyPaidAmount
		,ISNULL([dbo].[GL_VoucherPayments].[Amount],0) as PaidAmount 
		,ISNULL([dbo].[Inv_Receipt_h].[NetValue],0) - ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0) as Remaining,
		(CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 
		THEN  CASE WHEN ( ([dbo].[GL_VoucherDetails].[Debit]) = ([dbo].[GL_VoucherPayments].[Amount]) ) THEN 1 ELSE 0 END
		ELSE CASE WHEN ( ([dbo].[GL_VoucherDetails].[Credit]) = ([dbo].[GL_VoucherPayments].[Amount]) ) THEN 1 ELSE 0 END END) as IsSelected
		, ISNULL(([dbo].[GL_VoucherPayments].[Id]),0) as VoucherPaymentId
		, ISNULL(([dbo].[GL_VoucherPayments].[ReconciliationID]),0) as ReconciliationID
	   , CASE WHEN (Select Count(ID) from Crm_Invoice_Installments Where InvoiceID = ([dbo].[Inv_Receipt_h].[ID]))> 0 
	   Then 1 Else 0 END as ReceiptHasInstallments 
	   	   ,(CASE WHEN  @Language = 'en-Us' THEN 
	     ([dbo].[GL_Accounts].[Name])
	    ELSE
         ([dbo].[GL_Accounts].[Name_AR]) END)
	    as RelatedAccountName
		FROM 
		[dbo].[GL_Vouchers]
		JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
		JOIN [dbo].[GL_Accounts] on [dbo].[GL_VoucherDetails].[AccountNoID] = [dbo].[GL_Accounts].[AccountID]
		JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
		JOIN [dbo].[mstr_Currencies] on [dbo].[mstr_Currencies].[ID] = [dbo].[GL_Vouchers].[CurrencyID]
		JOIN [dbo].[Inv_Receipt_h] on [dbo].[Inv_Receipt_h].[ID] = [dbo].[GL_Vouchers].[ReceiptID]
		JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].ID = [dbo].[Inv_Receipt_h].[Branch_ID]
		JOIN [dbo].[GL_VoucherPayments] on [dbo].[GL_VoucherPayments].ReceiptId = [dbo].[Inv_Receipt_h].[ID]

		Where 
		[dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID AND
		([dbo].[GL_Vouchers].[ReceiptID] = @ReceiptID or @ReceiptID is NULL) AND
		([dbo].[GL_VoucherDetails].[AccountNoID] = @AccountID OR [dbo].[GL_VoucherDetails].[AccountNoID] in (Select RelatedAccountID from GL_RelatedAccounts where AccountID = @AccountID) ) AND
		[dbo].[GL_VoucherType].[Code] IN ( '22','40') 
		AND (GL_VoucherPayments.ReconciliationID = @ReconciliationID or @ReconciliationID IS NULL)
	  
		UNIon ALL

	SELECT Distinct
        CONVERT(varchar(25),[dbo].[GL_Vouchers].[ID]) as DT_RowId -- Voucher ID of Receipt
	   --,([dbo].[GL_VoucherPayments].[VoucherId]) as VoucherId
	   --,([dbo].[GL_VoucherPayments].[CreationDate]) as [CreationDate]
	   --,([dbo].[GL_VoucherPayments].[LastModifiedDate]) as [LastModifiedDate]
	   ,[dbo].[GL_Vouchers].[VouhcerDate] as VDate
	   ,([dbo].[Inv_Receipt_h].[ID]) as ReceiptId
	   ,([dbo].[mstr_Branch].[Code]) as BranchCode
	   ,([dbo].[Inv_Receipt_h].[Entry_No]) as InvoiceCode
       ,CONVERT(varchar(23), ([dbo].[GL_Vouchers].[VouhcerDate]), 103) as VouhcerDate
       ,CASE WHEN  @Language = 'en-Us' THEN 
	     ([dbo].[GL_VoucherType].[Name])
	    ELSE
         ([dbo].[GL_VoucherType].[Name_AR]) END
	    as VoucherTypeName
	   ,CASE WHEN  @Language = 'en-Us' THEN 
	         CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN 'Debit' ELSE 'Credit' END 
			 ELSE 
			 CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN N'مدين' ELSE N'دائن' END  
		END as AmountType
	   	,(ISNULL([dbo].[Inv_Receipt_h].[NetValue],0)) as Value
	   ,CASE WHEN  @Language = 'en-Us' THEN 
	       ([dbo].[mstr_Currencies].[Name]) 
	   ELSE 
	      ([dbo].[mstr_Currencies].[Name_Ar]) END 
       as CurrencyName 
	   ,ISNULL( ([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount]),0) as PreviouslyPaidAmount
       ,0 as PaidAmount 
       ,ISNULL([dbo].[Inv_Receipt_h].[NetValue],0) - ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0) as Remaining,
	   (CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 
	    THEN  CASE WHEN ( ([dbo].[GL_VoucherDetails].[Debit]) = ([dbo].[GL_VoucherPayments].[Amount]) ) THEN 1 ELSE 0 END
	    ELSE CASE WHEN ( ([dbo].[GL_VoucherDetails].[Credit]) = ([dbo].[GL_VoucherPayments].[Amount]) ) THEN 1 ELSE 0 END END) as IsSelected
	   , 0 as VoucherPaymentId
	   , 0 as ReconciliationID
	   , CASE WHEN (Select Count(ID) from Crm_Invoice_Installments Where InvoiceID = ([dbo].[Inv_Receipt_h].[ID]))> 0 
	   Then 1 Else 0 END as ReceiptHasInstallments 
	   	   ,(CASE WHEN  @Language = 'en-Us' THEN 
	     ([dbo].[GL_Accounts].[Name])
	    ELSE
         ([dbo].[GL_Accounts].[Name_AR]) END)
	    as RelatedAccountName
	  FROM 
	  [dbo].[GL_Vouchers]
	  JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  JOIN [dbo].[GL_Accounts] on [dbo].[GL_VoucherDetails].[AccountNoID] = [dbo].[GL_Accounts].[AccountID]
	  JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  JOIN [dbo].[mstr_Currencies] on [dbo].[mstr_Currencies].[ID] = [dbo].[GL_Vouchers].[CurrencyID]
	  JOIN [dbo].[Inv_Receipt_h] on [dbo].[Inv_Receipt_h].[ID] = [dbo].[GL_Vouchers].[ReceiptID]
	  JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].ID = [dbo].[Inv_Receipt_h].[Branch_ID]
	  LEFT JOIN [dbo].[GL_VoucherPayments] on [dbo].[GL_VoucherPayments].ReceiptId = [dbo].[Inv_Receipt_h].[ID]

	  Where 
      [dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID AND
	  ([dbo].[GL_Vouchers].[ReceiptID] = @ReceiptID or @ReceiptID is NULL) AND
	  ([dbo].[GL_VoucherDetails].[AccountNoID] = @AccountID OR [dbo].[GL_VoucherDetails].[AccountNoID] in (Select RelatedAccountID from GL_RelatedAccounts where AccountID = @AccountID) ) AND
	  ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0) != [dbo].[Inv_Receipt_h].[NetValue] AND
      [dbo].[GL_VoucherType].[Code] IN ( '22','40') AND
	  (
	  [GL_VoucherPayments].ReceiptId NOT IN (SELECT Distinct ([dbo].[Inv_Receipt_h].[ID]) as ReceiptId
		FROM 
		[dbo].[GL_Vouchers]
		JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
		JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
		JOIN [dbo].[mstr_Currencies] on [dbo].[mstr_Currencies].[ID] = [dbo].[GL_Vouchers].[CurrencyID]
		JOIN [dbo].[Inv_Receipt_h] on [dbo].[Inv_Receipt_h].[ID] = [dbo].[GL_Vouchers].[ReceiptID]
		JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].ID = [dbo].[Inv_Receipt_h].[Branch_ID]
		JOIN [dbo].[GL_VoucherPayments] on [dbo].[GL_VoucherPayments].ReceiptId = [dbo].[Inv_Receipt_h].[ID]

		Where 
		[dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID AND
		([dbo].[GL_Vouchers].[ReceiptID] = @ReceiptID or @ReceiptID is NULL) AND
		([dbo].[GL_VoucherDetails].[AccountNoID] = @AccountID OR [dbo].[GL_VoucherDetails].[AccountNoID] in (Select RelatedAccountID from GL_RelatedAccounts where AccountID = @AccountID) ) AND
		[dbo].[GL_VoucherType].[Code] IN ( '22','40') 
		AND (GL_VoucherPayments.ReconciliationID = @ReconciliationID or @ReconciliationID IS NULL))
	  OR [GL_VoucherPayments].ReceiptId IS NULL  
	  )
	  )RR
		Order By RR.VDate desc

	OFFSET     @Skip ROWS       
	FETCH NEXT @Take ROWS ONLY; 
GO
/****** Object:  StoredProcedure [dbo].[GetAllCustomerCreditSalesInvoicesCount]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[GetAllCustomerCreditSalesInvoicesCount]

@SubsidiaryID int ,
@AccountID int ,
@Language nvarchar(50),
@ReceiptID int 

AS

	SELECT  COUNT(vouchers.ID) as Count
	from
  (
   SELECT Distinct
        [dbo].[GL_Vouchers].[ID] 
	   ,[dbo].[GL_VoucherDetails].[ID] as VoucherDetailsId
       ,CONVERT(varchar(23), [dbo].[GL_Vouchers].[VouhcerDate], 103) as VouhcerDate
       ,CASE WHEN  @Language = 'en-Us' THEN 
	     [dbo].[GL_VoucherType].[Name]
	    ELSE
         [dbo].[GL_VoucherType].[Name_AR] END
	    as VoucherTypeName
	   ,CASE WHEN  @Language = 'en-Us' THEN 
	         CASE WHEN [dbo].[GL_VoucherDetails].[Debit] > 0 THEN 'Debit' ELSE 'Credit' END 
			 ELSE 
			 CASE WHEN [dbo].[GL_VoucherDetails].[Debit] > 0 THEN N'مدين' ELSE N'دائن' END  
		END as AmountType
       --,CASE WHEN [dbo].[GL_VoucherDetails].[Debit] > 0 THEN 'Debit' ELSE 'Credit' END as AmountType
	   --,CASE WHEN [dbo].[GL_VoucherDetails].[Debit] > 0 THEN N'مدين' ELSE N'دائن' END as AmountTypeAr
	   ,CASE WHEN [dbo].[GL_VoucherDetails].[Debit] > 0 THEN [dbo].[GL_VoucherDetails].[Debit] ELSE [dbo].[GL_VoucherDetails].[Credit] END as Value
	   ,CASE WHEN  @Language = 'en-Us' THEN 
	       [dbo].[mstr_Currencies].[Name] 
	   ELSE 
	      [dbo].[mstr_Currencies].[Name_Ar] END 
       as CurrencyName 
	   ,[dbo].[Inv_Receipt_h].[PaidAmount] as PreviouslyPaidAmount
       ,'' as PaidAmount 
       ,CASE WHEN [dbo].[GL_VoucherDetails].[Debit] > 0 THEN
	    [dbo].[GL_VoucherDetails].[Debit] - ISNULL([dbo].[Inv_Receipt_h].[PaidAmount],0)
		ELSE 
		[dbo].[GL_VoucherDetails].[Credit] - ISNULL([dbo].[Inv_Receipt_h].[PaidAmount],0) END 
		as Remaining

	  FROM 
	  [dbo].[GL_Vouchers]
	  JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  JOIN [dbo].[mstr_Currencies] on [dbo].[mstr_Currencies].[ID] = [dbo].[GL_Vouchers].[CurrencyID]
	  JOIN [dbo].[Inv_Receipt_h] on [dbo].[Inv_Receipt_h].[ID] = [dbo].[GL_Vouchers].[ReceiptID]
	  --JOIN [dbo].[Inv_PaymentType] on [dbo].[Inv_PaymentType].[id] = [dbo].[Inv_Receipt_h].[Payment_Type]

	  Where 
      [dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID AND
	  ([dbo].[GL_Vouchers].[ReceiptID] = @ReceiptID or @ReceiptID is NULL) AND
	  [dbo].[GL_VoucherDetails].[AccountNoID] = @AccountID AND
	  [dbo].[GL_VoucherType].[Code] IN ( '22','40') --AND  -- Voucher Type Code for Credit Sales
	  --[dbo].[Inv_PaymentType].[Code] = '2' AND
	  --(ISNULL([dbo].[Inv_Receipt_h].[PaidAmount],0) <> CASE WHEN [dbo].[GL_VoucherDetails].[Debit] > 0 THEN [dbo].[GL_VoucherDetails].[Debit] ELSE [dbo].[GL_VoucherDetails].[Credit] END)
	  
	   )vouchers
GO
/****** Object:  StoredProcedure [dbo].[GetAllCustomerTransactions]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetAllCustomerTransactions]

@SubsidiaryID int ,
@AccountID int ,
@Language nvarchar(50),
@Skip    int	 = 0,
@Take    int	 = 200,
@CustomerPaymentID int = null,
@ReconciliationID int = null
AS

if @CustomerPaymentID IS null and @ReconciliationID IS null
  SELECT Distinct
        CONVERT(varchar(25),[dbo].[GL_Vouchers].[ID]) as DT_RowId -- Voucher ID of Receipt
	   ,Max([dbo].[GL_Vouchers].[Code]) as Code
	   ,0 as [VoucherId]
	   ,Sum([dbo].[GL_VoucherDetails].[Credit]) as Credit
	   ,Sum([dbo].[GL_VoucherDetails].[Debit]) as Debit
	   ,Sum([dbo].[GL_VoucherDetails].[CreditForeign]) as CreditForeign
	   ,Sum([dbo].[GL_VoucherDetails].[DebitForeign]) as DebitForeign
       ,MAX(CONVERT(varchar(23), ([dbo].[GL_Vouchers].[VouhcerDate]), 103)) as VouhcerDate
       ,MAX(CASE WHEN  @Language = 'en-Us' THEN 
	     ([dbo].[GL_VoucherType].[Name])
	    ELSE
         ([dbo].[GL_VoucherType].[Name_AR]) END)
	    as VoucherTypeName
	   ,MAX(CASE WHEN  @Language = 'en-Us' THEN 
	         CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN 'Debit' ELSE 'Credit' END 
			 ELSE 
			 CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN N'مدين' ELSE N'دائن' END  
		END) as AmountType
	   	--,MAX((ISNULL([dbo].[Inv_Receipt_h].[NetValue],0))) as Value
	   ,MAX(CASE WHEN  @Language = 'en-Us' THEN 
	       ([dbo].[mstr_Currencies].[Name]) 
	   ELSE 
	      ([dbo].[mstr_Currencies].[Name_Ar]) END )
       as CurrencyName 
	   ,MAX(ISNULL( ([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount]),0)) as TransPreviouslyPaidAmount
       ,0.0 as TransPaidAmount 
       ,
	   (CASE WHEN SUM([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN 
	   (SUm([dbo].[GL_VoucherDetails].[Debit]) - mAX(ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0)))
	   ELSE 
	   (SUm([dbo].[GL_VoucherDetails].[Credit]) - mAX(ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0)))
	   END )as TransRemaining,
	   MAX(CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 
	    THEN  CASE WHEN ( ([dbo].[GL_VoucherDetails].[Debit]) = ([dbo].[GL_VoucherPayments].[Amount]) ) THEN 1 ELSE 0 END
	    ELSE CASE WHEN ( ([dbo].[GL_VoucherDetails].[Credit]) = ([dbo].[GL_VoucherPayments].[Amount]) ) THEN 1 ELSE 0 END END) as IsSelected
	   , 0 as VoucherPaymentId
	   , 0 as ReconciliationID

	  FROM 
	  [dbo].[GL_Vouchers]
	  JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  JOIN [dbo].[mstr_Currencies] on [dbo].[mstr_Currencies].[ID] = [dbo].[GL_Vouchers].[CurrencyID]
	  JOIN [dbo].[GL_VoucherPayments] on [dbo].[GL_VoucherPayments].[TransactionVoucherId] = [dbo].[GL_Vouchers].[ID]
	  LEFT JOIN [dbo].[Inv_Receipt_h] on [dbo].[Inv_Receipt_h].[ID] = [dbo].[GL_Vouchers].[ReceiptID]

	  Where 
      [dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID AND
	  ([dbo].[GL_Vouchers].[Prepaid] = 0 OR [dbo].[GL_Vouchers].[Prepaid] Is NULL) AND
				(ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0) != [dbo].[Inv_Receipt_h].[NetValue] OR [dbo].[Inv_Receipt_h].[NetValue] IS NULL )  AND
	  [dbo].[GL_VoucherType].[Code] Not IN ( '22','40')   -- Voucher Type Code for Credit Sales Invoices
	  AND (([dbo].[GL_VoucherType].[Code] = '11' AND [dbo].[GL_Vouchers].[Prepaid] = 1) OR ([dbo].[GL_VoucherType].[Code] <> '11' )) --AND
	  AND ([dbo].[GL_VoucherDetails].[AccountNoID] = @AccountID OR [dbo].[GL_VoucherDetails].[AccountNoID] in (Select RelatedAccountID from GL_RelatedAccounts where AccountID = @AccountID) ) 

	  GRoup By  [dbo].[GL_Vouchers].[ID]   ,([dbo].[GL_VoucherPayments].[VoucherId])  
	  --Order By VouhcerDate desc

	  Union ALL

		SELECT Distinct
				CONVERT(varchar(25),[dbo].[GL_Vouchers].[ID]) as DT_RowId -- Voucher ID of Receipt
				,Max([dbo].[GL_Vouchers].[Code]) as Code
				,([dbo].[GL_VoucherPayments].[VoucherId]) as [VoucherId]
				,Sum([dbo].[GL_VoucherDetails].[Credit]) as Credit
				,Sum([dbo].[GL_VoucherDetails].[Debit]) as Debit
				,Sum([dbo].[GL_VoucherDetails].[CreditForeign]) as CreditForeign
				,Sum([dbo].[GL_VoucherDetails].[DebitForeign]) as DebitForeign
				,MAX(CONVERT(varchar(23), ([dbo].[GL_Vouchers].[VouhcerDate]), 103)) as VouhcerDate
				,MAX(CASE WHEN  @Language = 'en-Us' THEN 
					([dbo].[GL_VoucherType].[Name])
				ELSE
					([dbo].[GL_VoucherType].[Name_AR]) END)
				as VoucherTypeName
				,MAX(CASE WHEN  @Language = 'en-Us' THEN 
						CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN 'Debit' ELSE 'Credit' END 
						ELSE 
						CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN N'مدين' ELSE N'دائن' END  
				END) as AmountType
	   			--,MAX((ISNULL([dbo].[Inv_Receipt_h].[NetValue],0))) as Value
				,MAX(CASE WHEN  @Language = 'en-Us' THEN 
					([dbo].[mstr_Currencies].[Name]) 
				ELSE 
					([dbo].[mstr_Currencies].[Name_Ar]) END )
				as CurrencyName 
				,MAX(ISNULL( ([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount]),0)) as TransPreviouslyPaidAmount
				,MAX(ISNULL([dbo].[GL_VoucherPayments].[Amount],0)) as TransPaidAmount 
				,
				(CASE WHEN SUM([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN 
				(SUm([dbo].[GL_VoucherDetails].[Debit]) - mAX(ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0)))
				ELSE 
				(SUm([dbo].[GL_VoucherDetails].[Credit]) - mAX(ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0)))
				END )as TransRemaining,
				MAX(CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 
				THEN  CASE WHEN ( ([dbo].[GL_VoucherDetails].[Debit]) = ([dbo].[GL_VoucherPayments].[Amount]) ) THEN 1 ELSE 0 END
				ELSE CASE WHEN ( ([dbo].[GL_VoucherDetails].[Credit]) = ([dbo].[GL_VoucherPayments].[Amount]) ) THEN 1 ELSE 0 END END) as IsSelected
				, ISNULL(MAX([dbo].[GL_VoucherPayments].[Id]),0) as VoucherPaymentId
				, 0 as ReconciliationID

				FROM 
				[dbo].[GL_Vouchers]
				JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
				JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
				JOIN [dbo].[mstr_Currencies] on [dbo].[mstr_Currencies].[ID] = [dbo].[GL_Vouchers].[CurrencyID]
			    LEFT JOIN [dbo].[Inv_Receipt_h] on [dbo].[Inv_Receipt_h].[ID] = [dbo].[GL_Vouchers].[ReceiptID]
				Left JOIN [dbo].[GL_VoucherPayments] on [dbo].[GL_VoucherPayments].[TransactionVoucherId] = [dbo].[GL_Vouchers].[ID]
	 
				Where 
				[dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID AND
				(ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0) != [dbo].[Inv_Receipt_h].[NetValue] OR [dbo].[Inv_Receipt_h].[NetValue] IS NULL )  AND
				[dbo].[GL_VoucherType].[Code] Not IN ( '22','40')   -- Voucher Type Code for Credit Sales Invoices
			    AND (([dbo].[GL_VoucherType].[Code] = '11' AND [dbo].[GL_Vouchers].[Prepaid] = 1) OR ([dbo].[GL_VoucherType].[Code] <> '11' )) --AND
	            AND ([dbo].[GL_VoucherPayments].[Amount] = 0 or [dbo].[GL_VoucherPayments].[Amount] IS NULL)
				AND ([dbo].[GL_VoucherDetails].[AccountNoID] = @AccountID OR [dbo].[GL_VoucherDetails].[AccountNoID] in (Select RelatedAccountID from GL_RelatedAccounts where AccountID = @AccountID) ) 
				AND ([GL_Vouchers].[ID] NOT IN (SELECT [TransactionVoucherId]
				  FROM 
				  [dbo].[GL_Vouchers]
				  JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
				  JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
				  JOIN [dbo].[mstr_Currencies] on [dbo].[mstr_Currencies].[ID] = [dbo].[GL_Vouchers].[CurrencyID]
				  JOIN [dbo].[GL_VoucherPayments] on [dbo].[GL_VoucherPayments].[TransactionVoucherId] = [dbo].[GL_Vouchers].[ID]
	 
				  Where 
				  [dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID AND
				  ([dbo].[GL_Vouchers].[Prepaid] = 0 OR [dbo].[GL_Vouchers].[Prepaid] Is NULL) AND
			   	 ([dbo].[GL_VoucherDetails].[AccountNoID] = @AccountID OR [dbo].[GL_VoucherDetails].[AccountNoID] in (Select RelatedAccountID from GL_RelatedAccounts where AccountID = @AccountID) ) 
				  AND [dbo].[GL_VoucherType].[Code] Not IN ( '22','40')   -- Voucher Type Code for Credit Sales Invoices
				  AND (([dbo].[GL_VoucherType].[Code] = '11' AND [dbo].[GL_Vouchers].[Prepaid] = 1) OR ([dbo].[GL_VoucherType].[Code] <> '11' )) --AND
				     ))
				GRoup By  [dbo].[GL_Vouchers].[ID]   ,([dbo].[GL_VoucherPayments].[VoucherId])  
				Order By VouhcerDate desc


else if @CustomerPaymentID is not null and @ReconciliationID is NULL
   SELECT Distinct
        CONVERT(varchar(25),[dbo].[GL_Vouchers].[ID]) as DT_RowId -- Voucher ID of Receipt
	   ,Max([dbo].[GL_Vouchers].[Code]) as Code
	   ,([dbo].[GL_VoucherPayments].[VoucherId]) as [VoucherId]
	   ,Sum([dbo].[GL_VoucherDetails].[Credit]) as Credit
	   ,Sum([dbo].[GL_VoucherDetails].[Debit]) as Debit
	   ,Sum([dbo].[GL_VoucherDetails].[CreditForeign]) as CreditForeign
	   ,Sum([dbo].[GL_VoucherDetails].[DebitForeign]) as DebitForeign
       ,MAX(CONVERT(varchar(23), ([dbo].[GL_Vouchers].[VouhcerDate]), 103)) as VouhcerDate
       ,MAX(CASE WHEN  @Language = 'en-Us' THEN 
	     ([dbo].[GL_VoucherType].[Name])
	    ELSE
         ([dbo].[GL_VoucherType].[Name_AR]) END)
	    as VoucherTypeName
	   ,MAX(CASE WHEN  @Language = 'en-Us' THEN 
	         CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN 'Debit' ELSE 'Credit' END 
			 ELSE 
			 CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN N'مدين' ELSE N'دائن' END  
		END) as AmountType
	   	--,MAX((ISNULL([dbo].[Inv_Receipt_h].[NetValue],0))) as Value
	   ,MAX(CASE WHEN  @Language = 'en-Us' THEN 
	       ([dbo].[mstr_Currencies].[Name]) 
	   ELSE 
	      ([dbo].[mstr_Currencies].[Name_Ar]) END )
       as CurrencyName 
	   ,MAX(ISNULL( ([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount]),0)) as TransPreviouslyPaidAmount
       ,MAX(ISNULL([dbo].[GL_VoucherPayments].[Amount],0)) as TransPaidAmount 
       ,
	   (CASE WHEN SUM([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN 
	   (SUm([dbo].[GL_VoucherDetails].[Debit]) - mAX(ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0)))
	   ELSE 
	   (SUm([dbo].[GL_VoucherDetails].[Credit]) - mAX(ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0)))
	   END )as TransRemaining,
	   MAX(CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 
	    THEN  CASE WHEN ( ([dbo].[GL_VoucherDetails].[Debit]) = ([dbo].[GL_VoucherPayments].[Amount]) ) THEN 1 ELSE 0 END
	    ELSE CASE WHEN ( ([dbo].[GL_VoucherDetails].[Credit]) = ([dbo].[GL_VoucherPayments].[Amount]) ) THEN 1 ELSE 0 END END) as IsSelected
	   , ISNULL(MAX([dbo].[GL_VoucherPayments].[Id]),0) as VoucherPaymentId
	   , 0 as ReconciliationID

	  FROM 
	  [dbo].[GL_Vouchers]
	  JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  JOIN [dbo].[mstr_Currencies] on [dbo].[mstr_Currencies].[ID] = [dbo].[GL_Vouchers].[CurrencyID]
	  JOIN [dbo].[GL_VoucherPayments] on [dbo].[GL_VoucherPayments].[TransactionVoucherId] = [dbo].[GL_Vouchers].[ID]
	  LEFT JOIN [dbo].[Inv_Receipt_h] on [dbo].[Inv_Receipt_h].[ID] = [dbo].[GL_Vouchers].[ReceiptID]

	  Where 
      [dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID AND
	  ([dbo].[GL_Vouchers].[Prepaid] = 0 OR [dbo].[GL_Vouchers].[Prepaid] Is NULL) AND
	  [dbo].[GL_VoucherType].[Code] Not IN ( '22','40')   -- Voucher Type Code for Credit Sales Invoices
	  AND (GL_VoucherPayments.VoucherId = @CustomerPaymentID)
	  AND ([dbo].[GL_VoucherDetails].[AccountNoID] = @AccountID OR [dbo].[GL_VoucherDetails].[AccountNoID] in (Select RelatedAccountID from GL_RelatedAccounts where AccountID = @AccountID) ) 
	  GRoup By  [dbo].[GL_Vouchers].[ID]   ,([dbo].[GL_VoucherPayments].[VoucherId])  
	  --Order By VouhcerDate desc

	  Union ALL

		SELECT Distinct
				CONVERT(varchar(25),[dbo].[GL_Vouchers].[ID]) as DT_RowId -- Voucher ID of Receipt
				,Max([dbo].[GL_Vouchers].[Code]) as Code
				,([dbo].[GL_VoucherPayments].[VoucherId]) as [VoucherId]
				,Sum([dbo].[GL_VoucherDetails].[Credit]) as Credit
				,Sum([dbo].[GL_VoucherDetails].[Debit]) as Debit
				,Sum([dbo].[GL_VoucherDetails].[CreditForeign]) as CreditForeign
				,Sum([dbo].[GL_VoucherDetails].[DebitForeign]) as DebitForeign
				,MAX(CONVERT(varchar(23), ([dbo].[GL_Vouchers].[VouhcerDate]), 103)) as VouhcerDate
				,MAX(CASE WHEN  @Language = 'en-Us' THEN 
					([dbo].[GL_VoucherType].[Name])
				ELSE
					([dbo].[GL_VoucherType].[Name_AR]) END)
				as VoucherTypeName
				,MAX(CASE WHEN  @Language = 'en-Us' THEN 
						CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN 'Debit' ELSE 'Credit' END 
						ELSE 
						CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN N'مدين' ELSE N'دائن' END  
				END) as AmountType
	   			--,MAX((ISNULL([dbo].[Inv_Receipt_h].[NetValue],0))) as Value
				,MAX(CASE WHEN  @Language = 'en-Us' THEN 
					([dbo].[mstr_Currencies].[Name]) 
				ELSE 
					([dbo].[mstr_Currencies].[Name_Ar]) END )
				as CurrencyName 
				,MAX(ISNULL( ([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount]),0)) as TransPreviouslyPaidAmount
				,0.0 as TransPaidAmount 
				,
				(CASE WHEN SUM([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN 
				(SUm([dbo].[GL_VoucherDetails].[Debit]) - mAX(ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0)))
				ELSE 
				(SUm([dbo].[GL_VoucherDetails].[Credit]) - mAX(ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0)))
				END )as TransRemaining,
				MAX(CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 
				THEN  CASE WHEN ( ([dbo].[GL_VoucherDetails].[Debit]) = ([dbo].[GL_VoucherPayments].[Amount]) ) THEN 1 ELSE 0 END
				ELSE CASE WHEN ( ([dbo].[GL_VoucherDetails].[Credit]) = ([dbo].[GL_VoucherPayments].[Amount]) ) THEN 1 ELSE 0 END END) as IsSelected
	            , ISNULL(MAX([dbo].[GL_VoucherPayments].[Id]),0) as VoucherPaymentId
				, 0 as ReconciliationID

				FROM 
				[dbo].[GL_Vouchers]
				JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
				JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
				JOIN [dbo].[mstr_Currencies] on [dbo].[mstr_Currencies].[ID] = [dbo].[GL_Vouchers].[CurrencyID]
				LEFT JOIN [dbo].[Inv_Receipt_h] on [dbo].[Inv_Receipt_h].[ID] = [dbo].[GL_Vouchers].[ReceiptID]
				Left JOIN [dbo].[GL_VoucherPayments] on [dbo].[GL_VoucherPayments].[TransactionVoucherId] = [dbo].[GL_Vouchers].[ID]
	 
				Where 
				[dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID AND
				([dbo].[GL_Vouchers].[Prepaid] = 0 OR [dbo].[GL_Vouchers].[Prepaid] Is NULL) AND
				(ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0) != [dbo].[Inv_Receipt_h].[NetValue] OR [dbo].[Inv_Receipt_h].[NetValue] IS NULL )  AND
				[dbo].[GL_VoucherType].[Code] Not IN ( '22','40')   -- Voucher Type Code for Credit Sales Invoices
			    AND (([dbo].[GL_VoucherType].[Code] = '11' AND [dbo].[GL_Vouchers].[Prepaid] = 1) OR ([dbo].[GL_VoucherType].[Code] <> '11' )) --AND
				AND ([dbo].[GL_VoucherDetails].[AccountNoID] = @AccountID OR [dbo].[GL_VoucherDetails].[AccountNoID] in (Select RelatedAccountID from GL_RelatedAccounts where AccountID = @AccountID) ) 
				AND ([GL_Vouchers].[ID] NOT IN (SELECT Distinct [dbo].[GL_Vouchers].[ID] FROM 
				  [dbo].[GL_Vouchers]
				  JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
				  JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
				  JOIN [dbo].[mstr_Currencies] on [dbo].[mstr_Currencies].[ID] = [dbo].[GL_Vouchers].[CurrencyID]
				  Left JOIN [dbo].[GL_VoucherPayments] on [dbo].[GL_VoucherPayments].[TransactionVoucherId] = [dbo].[GL_Vouchers].[ID] 
				  Where 
				  [dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID AND
				  ([dbo].[GL_Vouchers].[Prepaid] = 0 OR [dbo].[GL_Vouchers].[Prepaid] Is NULL) AND
				 ([dbo].[GL_VoucherDetails].[AccountNoID] = @AccountID OR [dbo].[GL_VoucherDetails].[AccountNoID] in (Select RelatedAccountID from GL_RelatedAccounts where AccountID = @AccountID) ) 
				AND  [dbo].[GL_VoucherType].[Code] Not IN ( '22','40')   -- Voucher Type Code for Credit Sales Invoices
				  AND (GL_VoucherPayments.VoucherId = @CustomerPaymentID)))
				GRoup By  [dbo].[GL_Vouchers].[ID]   ,([dbo].[GL_VoucherPayments].[VoucherId])  
				Order By VouhcerDate desc



		OFFSET     @Skip ROWS       
		FETCH NEXT @Take ROWS ONLY;

else if @ReconciliationID is not null 
   SELECT Distinct
        CONVERT(varchar(25),[dbo].[GL_Vouchers].[ID]) as DT_RowId -- Voucher ID of Receipt
	   ,Max([dbo].[GL_Vouchers].[Code]) as Code
	   ,([dbo].[GL_VoucherPayments].[VoucherId]) as [VoucherId]
	   ,Sum([dbo].[GL_VoucherDetails].[Credit]) as Credit
	   ,Sum([dbo].[GL_VoucherDetails].[Debit]) as Debit
	   ,Sum([dbo].[GL_VoucherDetails].[CreditForeign]) as CreditForeign
	   ,Sum([dbo].[GL_VoucherDetails].[DebitForeign]) as DebitForeign
       ,MAX(CONVERT(varchar(23), ([dbo].[GL_Vouchers].[VouhcerDate]), 103)) as VouhcerDate
       ,MAX(CASE WHEN  @Language = 'en-Us' THEN 
	     ([dbo].[GL_VoucherType].[Name])
	    ELSE
         ([dbo].[GL_VoucherType].[Name_AR]) END)
	    as VoucherTypeName
	   ,MAX(CASE WHEN  @Language = 'en-Us' THEN 
	         CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN 'Debit' ELSE 'Credit' END 
			 ELSE 
			 CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN N'مدين' ELSE N'دائن' END  
		END) as AmountType
	   	--,MAX((ISNULL([dbo].[Inv_Receipt_h].[NetValue],0))) as Value
	   ,MAX(CASE WHEN  @Language = 'en-Us' THEN 
	       ([dbo].[mstr_Currencies].[Name]) 
	   ELSE 
	      ([dbo].[mstr_Currencies].[Name_Ar]) END )
       as CurrencyName 
	   ,MAX(ISNULL( ([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount]),0)) as TransPreviouslyPaidAmount
       ,MAX(ISNULL([dbo].[GL_VoucherPayments].[Amount],0)) as TransPaidAmount 
       ,
	   (CASE WHEN SUM([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN 
	   (SUm([dbo].[GL_VoucherDetails].[Debit]) - mAX(ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0)))
	   ELSE 
	   (SUm([dbo].[GL_VoucherDetails].[Credit]) - mAX(ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0)))
	   END )as TransRemaining,
	   MAX(CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 
	    THEN  CASE WHEN ( ([dbo].[GL_VoucherDetails].[Debit]) = ([dbo].[GL_VoucherPayments].[Amount]) ) THEN 1 ELSE 0 END
	    ELSE CASE WHEN ( ([dbo].[GL_VoucherDetails].[Credit]) = ([dbo].[GL_VoucherPayments].[Amount]) ) THEN 1 ELSE 0 END END) as IsSelected
	   , ISNULL(MAX([dbo].[GL_VoucherPayments].[Id]),0) as VoucherPaymentId
	   , Max (ReconciliationID) as ReconciliationID

	  FROM 
	  [dbo].[GL_Vouchers]
	  JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  JOIN [dbo].[mstr_Currencies] on [dbo].[mstr_Currencies].[ID] = [dbo].[GL_Vouchers].[CurrencyID]
	  JOIN [dbo].[GL_VoucherPayments] on [dbo].[GL_VoucherPayments].[TransactionVoucherId] = [dbo].[GL_Vouchers].[ID]
	  LEFT JOIN [dbo].[Inv_Receipt_h] on [dbo].[Inv_Receipt_h].[ID] = [dbo].[GL_Vouchers].[ReceiptID]
	 
	  Where 
      [dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID AND
	  ([dbo].[GL_Vouchers].[Prepaid] = 0 OR [dbo].[GL_Vouchers].[Prepaid] Is NULL) AND
	  --ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0) != [dbo].[Inv_Receipt_h].[NetValue]  AND
	  [dbo].[GL_VoucherType].[Code] Not IN ( '22','40')   -- Voucher Type Code for Credit Sales Invoices
	  AND (GL_VoucherPayments.ReconciliationID = @ReconciliationID)
	  AND ([dbo].[GL_VoucherDetails].[AccountNoID] = @AccountID OR [dbo].[GL_VoucherDetails].[AccountNoID] in (Select RelatedAccountID from GL_RelatedAccounts where AccountID = @AccountID) ) 
	  GRoup By  [dbo].[GL_Vouchers].[ID]   ,([dbo].[GL_VoucherPayments].[VoucherId])  
	  --Order By VouhcerDate desc

	  Union ALL

		SELECT Distinct
				        CONVERT(varchar(25),[dbo].[GL_Vouchers].[ID]) as DT_RowId -- Voucher ID of Receipt
	   ,Max([dbo].[GL_Vouchers].[Code]) as Code
	   ,([dbo].[GL_VoucherPayments].[VoucherId]) as [VoucherId]
	   ,Sum([dbo].[GL_VoucherDetails].[Credit]) as Credit
	   ,Sum([dbo].[GL_VoucherDetails].[Debit]) as Debit
	   ,Sum([dbo].[GL_VoucherDetails].[CreditForeign]) as CreditForeign
	   ,Sum([dbo].[GL_VoucherDetails].[DebitForeign]) as DebitForeign
       ,MAX(CONVERT(varchar(23), ([dbo].[GL_Vouchers].[VouhcerDate]), 103)) as VouhcerDate
       ,MAX(CASE WHEN  @Language = 'en-Us' THEN 
	     ([dbo].[GL_VoucherType].[Name])
	    ELSE
         ([dbo].[GL_VoucherType].[Name_AR]) END)
	    as VoucherTypeName
	   ,MAX(CASE WHEN  @Language = 'en-Us' THEN 
	         CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN 'Debit' ELSE 'Credit' END 
			 ELSE 
			 CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN N'مدين' ELSE N'دائن' END  
		END) as AmountType
	   	--,MAX((ISNULL([dbo].[Inv_Receipt_h].[NetValue],0))) as Value
	   ,MAX(CASE WHEN  @Language = 'en-Us' THEN 
	       ([dbo].[mstr_Currencies].[Name]) 
	   ELSE 
	      ([dbo].[mstr_Currencies].[Name_Ar]) END )
       as CurrencyName 
	   ,MAX(ISNULL( ([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount]),0)) as TransPreviouslyPaidAmount
       ,0.0 as TransPaidAmount 
       ,
	   (CASE WHEN SUM([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN 
	   (SUm([dbo].[GL_VoucherDetails].[Debit]) - mAX(ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0)))
	   ELSE 
	   (SUm([dbo].[GL_VoucherDetails].[Credit]) - mAX(ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0)))
	   END )as TransRemaining,
	   MAX(CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 
	    THEN  CASE WHEN ( ([dbo].[GL_VoucherDetails].[Debit]) = ([dbo].[GL_VoucherPayments].[Amount]) ) THEN 1 ELSE 0 END
	    ELSE CASE WHEN ( ([dbo].[GL_VoucherDetails].[Credit]) = ([dbo].[GL_VoucherPayments].[Amount]) ) THEN 1 ELSE 0 END END) as IsSelected
	   , ISNULL(MAX([dbo].[GL_VoucherPayments].[Id]),0) as VoucherPaymentId
	   , 0 as ReconciliationID

				FROM 
				[dbo].[GL_Vouchers]
				JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
				JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
				JOIN [dbo].[mstr_Currencies] on [dbo].[mstr_Currencies].[ID] = [dbo].[GL_Vouchers].[CurrencyID]
				LEFT JOIN [dbo].[Inv_Receipt_h] on [dbo].[Inv_Receipt_h].[ID] = [dbo].[GL_Vouchers].[ReceiptID]
				Left JOIN [dbo].[GL_VoucherPayments] on [dbo].[GL_VoucherPayments].[TransactionVoucherId] = [dbo].[GL_Vouchers].[ID]
	 
				Where 
				[dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID AND
				(ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0) != [dbo].[Inv_Receipt_h].[NetValue] OR [dbo].[Inv_Receipt_h].[NetValue] IS NULL )  AND
				([dbo].[GL_Vouchers].[Prepaid] = 0 OR [dbo].[GL_Vouchers].[Prepaid] Is NULL) AND
				 ([dbo].[GL_VoucherDetails].[AccountNoID] = @AccountID OR [dbo].[GL_VoucherDetails].[AccountNoID] in (Select RelatedAccountID from GL_RelatedAccounts where AccountID = @AccountID) ) 
				AND [dbo].[GL_VoucherType].[Code] Not IN ( '22','40')   -- Voucher Type Code for Credit Sales Invoices
			    AND (([dbo].[GL_VoucherType].[Code] = '11' AND [dbo].[GL_Vouchers].[Prepaid] = 1) OR ([dbo].[GL_VoucherType].[Code] <> '11' )) --AND
				AND ([GL_Vouchers].[ID] NOT IN (SELECT Distinct [dbo].[GL_Vouchers].[ID] FROM 
				  [dbo].[GL_Vouchers]
				  JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
				  JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
				  JOIN [dbo].[mstr_Currencies] on [dbo].[mstr_Currencies].[ID] = [dbo].[GL_Vouchers].[CurrencyID]
				  Left JOIN [dbo].[GL_VoucherPayments] on [dbo].[GL_VoucherPayments].[TransactionVoucherId] = [dbo].[GL_Vouchers].[ID] 
				  Where 
				  [dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID AND
				  ([dbo].[GL_Vouchers].[Prepaid] = 0 OR [dbo].[GL_Vouchers].[Prepaid] Is NULL) AND
				  [dbo].[GL_VoucherType].[Code] Not IN ( '22','40')   -- Voucher Type Code for Credit Sales Invoices
				  AND (GL_VoucherPayments.ReconciliationID = @ReconciliationID)))
				  AND ([dbo].[GL_VoucherDetails].[AccountNoID] = @AccountID OR [dbo].[GL_VoucherDetails].[AccountNoID] in (Select RelatedAccountID from GL_RelatedAccounts where AccountID = @AccountID) ) 
				GRoup By  [dbo].[GL_Vouchers].[ID]   ,([dbo].[GL_VoucherPayments].[VoucherId])  
				Order By VouhcerDate desc



		OFFSET     @Skip ROWS       
		FETCH NEXT @Take ROWS ONLY;
GO
/****** Object:  StoredProcedure [dbo].[GetAllLeadActivitiesTypes]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetAllLeadActivitiesTypes]

@SubsidiaryID int ,
@LeadOwnerId int =NULL,
@AssignedToId int = NULL,
@TaskTypeId int = NULL,
@RelatedToId int = NULL,
@ActivityStatusId int = NULL ,
@DateFrom date = NULL,
@DateTo date = NULL,
@Description NVARCHAR(150) = NULL,
@Skip int = 0,
@Take int = 200,
@SearchValue NVARCHAR(150)= NULL,
@SortBy NVARCHAR(150)= NULL,
@SortDir NVARCHAR(150)= NULL

AS
	--Get All Activities From Lead
   SELECT Distinct
       [dbo].[Crm_Lead].[ID] as LeadID
	  ,[dbo].[Crm_Lead].[Name] as LeadName
	  ,[dbo].[Crm_Lead].[Name_AR] as LeadNameAR
	  ,[dbo].[Crm_Lead].[Phone] as Phone
      ,[dbo].[Crm_Lead_Activities].[ID] as ActivityID
      ,[dbo].[Crm_Lead_Activities].[Subject] as ActivitySubject
	  ,[dbo].[Crm_Lead_Activities].[ActivityTypeID] 
	  ,[dbo].[Crm_Lead_Activities].[StatusID]
	  ,[dbo].[Crm_Lead_Activities].[Description] 
	  ,CONVERT(varchar(23), [dbo].[Crm_Lead_Activities].[StartDate] , 103) as StartDate
      ,CONVERT(varchar(23), [dbo].[Crm_Lead_Activities].[EndDate]  , 103) as EndDate
      ,[dbo].[Crm_Lead_Activities].[AssignedToId]
	  ,[dbo].[Crm_Lead].[LeadOwnerId]

	  FROM [dbo].[Crm_Lead_Activities]
	  JOIN [dbo].[Crm_Lead] ON [dbo].[Crm_Lead_Activities].[LeadID] = [dbo].[Crm_Lead].[ID]
	  JOIN [dbo].[Crm_Activity] on [dbo].[Crm_Activity].[ID] = [dbo].[Crm_Lead_Activities].[ActivityTypeID]

	  Where 
 ([dbo].[Crm_Lead].[SubsidiaryID] = @SubsidiaryID ) AND
 ([dbo].[Crm_Lead].[LeadOwnerId] = @LeadOwnerId OR @LeadOwnerId IS NULL) AND
 ([dbo].[Crm_Lead_Activities].[AssignedToId] = @AssignedToId OR @AssignedToId IS NULL) AND
 ([dbo].[Crm_Lead_Activities].[RelatedToId] = @RelatedToId OR @RelatedToId IS NULL) AND
 ([dbo].[Crm_Lead_Activities].[Description] like '%'+@Description+'%'   OR @Description IS NULL) AND
 ([dbo].[Crm_Lead_Activities].[StatusID] = @ActivityStatusId OR @ActivityStatusId IS NULL) AND
 ([dbo].[Crm_Lead_Activities].[ActivityTypeID] = @TaskTypeId OR @TaskTypeId IS NULL OR ([dbo].[Crm_Lead_Activities].[ActivityTypeID] >= @TaskTypeId AND @TaskTypeId  =21 )) AND
 (([dbo].[Crm_Lead_Activities].[StartDate] >= @DateFrom And [dbo].[Crm_Lead_Activities].[StartDate] <= @DateTo)OR( @DateFrom IS NULL and @DateTo IS NULL)) AND
 (([dbo].[Crm_Lead].[Name] like '%'+@SearchValue+'%' ) OR
 ([dbo].[Crm_Lead].[Phone] like '%'+@SearchValue+'%' ) OR
 ([dbo].[Crm_Lead_Activities].[Subject] like '%'+@SearchValue+'%' ) OR
 (CONVERT(varchar(23), [dbo].[Crm_Lead_Activities].[StartDate] , 103) like '%'+@SearchValue+'%' ) OR
 ([dbo].[Crm_Activity].[Name] like '%'+@SearchValue+'%' ) OR
 ([dbo].[Crm_Activity].[Name_AR] like '%'+@SearchValue+'%' ) OR
 ([dbo].[Crm_Lead_Activities].[Description] like '%'+@SearchValue+'%' ) OR
 (@SearchValue IS NULL) OR (@SearchValue  = ''))

UNION ALL

	--Get All Activities From Installments
   SELECT Distinct
       [dbo].[GL_Accounts].[AccountID] as LeadID
	  ,[dbo].[GL_Accounts].[Name] as LeadName
	  ,[dbo].[GL_Accounts].[Name_AR] as LeadNameAR
	  ,[dbo].[GL_Accounts].[Phone] as Phone
      ,[dbo].[Crm_Lead_Activities].[ID] as ActivityID
      ,[dbo].[Crm_Lead_Activities].[Subject] as ActivitySubject
	  ,[dbo].[Crm_Lead_Activities].[ActivityTypeID] 
	  ,[dbo].[Crm_Lead_Activities].[StatusID]
	  ,[dbo].[Crm_Lead_Activities].[Description] 
	  ,CONVERT(varchar, [dbo].[Crm_Lead_Activities].[StartDate] , 101) as StartDate
      ,CONVERT(varchar, [dbo].[Crm_Lead_Activities].[EndDate]  , 101) as EndDate
      ,[dbo].[Crm_Lead_Activities].[AssignedToId]
	  ,'' as [LeadOwnerId]

	  FROM [dbo].[Crm_Lead_Activities]
	  JOIN [dbo].[Crm_Activity] on [dbo].[Crm_Activity].[ID] = [dbo].[Crm_Lead_Activities].[ActivityTypeID]
	  JOIN [dbo].[Crm_Invoice_Installments_Details] ON [dbo].[Crm_Lead_Activities].[InstallmentsDetailID] = [dbo].[Crm_Invoice_Installments_Details].[ID]
	  JOIN [Crm_Invoice_Installments] ON [Crm_Invoice_Installments].[ID] = [dbo].[Crm_Invoice_Installments_Details].[InvoiceInstallmentsID]
	  JOIN [dbo].[Inv_Receipt_h] ON [dbo].[Inv_Receipt_h].[ID] = [dbo].[Crm_Invoice_Installments].[InvoiceID]
	  JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[Inv_Receipt_h].[SupplierAccount_ID]
 Where 
 ([dbo].[Inv_Receipt_h].[SubsidiaryID] = @SubsidiaryID ) AND
 (@LeadOwnerId IS NULL) AND
 ([dbo].[Crm_Lead_Activities].[AssignedToId] = @AssignedToId OR @AssignedToId IS NULL) AND
 ([dbo].[Crm_Lead_Activities].[RelatedToId] = @RelatedToId OR @RelatedToId IS NULL) AND
 ([dbo].[Crm_Lead_Activities].[Description] like '%'+@Description+'%'   OR @Description IS NULL) AND
 ([dbo].[Crm_Lead_Activities].[StatusID] = @ActivityStatusId OR @ActivityStatusId IS NULL) AND
 ([dbo].[Crm_Lead_Activities].[ActivityTypeID] = @TaskTypeId OR @TaskTypeId IS NULL OR ([dbo].[Crm_Lead_Activities].[ActivityTypeID] >= @TaskTypeId AND @TaskTypeId  =21 )) AND
 (([dbo].[Crm_Lead_Activities].[StartDate] >= @DateFrom And [dbo].[Crm_Lead_Activities].[StartDate] <= @DateTo)OR( @DateFrom IS NULL and @DateTo IS NULL)) AND
 (([dbo].[GL_Accounts].[Name] like '%'+@SearchValue+'%' ) OR
 ([dbo].[GL_Accounts].[Phone] like '%'+@SearchValue+'%' ) OR
 ([dbo].[Crm_Lead_Activities].[Subject] like '%'+@SearchValue+'%' ) OR
 (CONVERT(varchar(23), [dbo].[Crm_Lead_Activities].[StartDate] , 103) like '%'+@SearchValue+'%' ) OR
 ([dbo].[Crm_Activity].[Name] like '%'+@SearchValue+'%' ) OR
 ([dbo].[Crm_Activity].[Name_AR] like '%'+@SearchValue+'%' ) OR
 ([dbo].[Crm_Lead_Activities].[Description] like '%'+@SearchValue+'%' ) OR
 (@SearchValue IS NULL) OR (@SearchValue  = ''))

 UNION ALL

 	--Get All Activities From Customer
   SELECT Distinct
       [dbo].[GL_Accounts].[AccountID] as LeadID
	  ,[dbo].[GL_Accounts].[Name] as LeadName
	  ,[dbo].[GL_Accounts].[Name_AR] as LeadNameAR
	  ,[dbo].[GL_Accounts].[Phone] as Phone
      ,[dbo].[Crm_Lead_Activities].[ID] as ActivityID
      ,[dbo].[Crm_Lead_Activities].[Subject] as ActivitySubject
	  ,[dbo].[Crm_Lead_Activities].[ActivityTypeID] 
	  ,[dbo].[Crm_Lead_Activities].[StatusID]
	  ,[dbo].[Crm_Lead_Activities].[Description] 
	  ,CONVERT(varchar, [dbo].[Crm_Lead_Activities].[StartDate] , 101) as StartDate
      ,CONVERT(varchar, [dbo].[Crm_Lead_Activities].[EndDate]  , 101) as EndDate
      ,[dbo].[Crm_Lead_Activities].[AssignedToId]
	  ,'' as [LeadOwnerId]

	  FROM [dbo].[Crm_Lead_Activities]
	  JOIN [dbo].[Crm_Activity] on [dbo].[Crm_Activity].[ID] = [dbo].[Crm_Lead_Activities].[ActivityTypeID]
	  JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[Crm_Lead_Activities].[CustomerId]
	  JOIN [dbo].[GL_AccountSubsidiary] on [dbo].[GL_AccountSubsidiary].[AccountID] = [dbo].[GL_Accounts].[AccountID]
 Where 
 ([dbo].[GL_AccountSubsidiary].[SubsidiaryID] = @SubsidiaryID ) AND
 ([dbo].[GL_Accounts].[IsActive] = 1 )AND
 (@LeadOwnerId IS NULL) AND
 ([dbo].[Crm_Lead_Activities].[AssignedToId] = @AssignedToId OR @AssignedToId IS NULL) AND
 ([dbo].[Crm_Lead_Activities].[RelatedToId] = @RelatedToId OR @RelatedToId IS NULL) AND
 ([dbo].[Crm_Lead_Activities].[Description] like '%'+@Description+'%'   OR @Description IS NULL) AND
 ([dbo].[Crm_Lead_Activities].[StatusID] = @ActivityStatusId OR @ActivityStatusId IS NULL) AND
 ([dbo].[Crm_Lead_Activities].[ActivityTypeID] = @TaskTypeId OR @TaskTypeId IS NULL OR ([dbo].[Crm_Lead_Activities].[ActivityTypeID] >= @TaskTypeId AND @TaskTypeId  =21 )) AND
 (([dbo].[Crm_Lead_Activities].[StartDate] >= @DateFrom And [dbo].[Crm_Lead_Activities].[StartDate] <= @DateTo)OR( @DateFrom IS NULL and @DateTo IS NULL)) AND
 (([dbo].[GL_Accounts].[Name] like '%'+@SearchValue+'%' ) OR
 ([dbo].[GL_Accounts].[Phone] like '%'+@SearchValue+'%' ) OR
 ([dbo].[Crm_Lead_Activities].[Subject] like '%'+@SearchValue+'%' ) OR
 (CONVERT(varchar(23), [dbo].[Crm_Lead_Activities].[StartDate] , 103) like '%'+@SearchValue+'%' ) OR
 ([dbo].[Crm_Activity].[Name] like '%'+@SearchValue+'%' ) OR
 ([dbo].[Crm_Activity].[Name_AR] like '%'+@SearchValue+'%' ) OR
 ([dbo].[Crm_Lead_Activities].[Description] like '%'+@SearchValue+'%' ) OR
 (@SearchValue IS NULL) OR (@SearchValue  = ''))

  ORDER BY [dbo].[Crm_Lead_Activities].[ID]
  OFFSET     @Skip ROWS       
 FETCH NEXT @Take ROWS ONLY; 
GO
/****** Object:  StoredProcedure [dbo].[GetAllLeadActivitiesTypesCount]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetAllLeadActivitiesTypesCount]

@SubsidiaryID int ,
@LeadOwnerId int = NULL,
@AssignedToId int = NULL,
@TaskTypeId int = NULL,
@RelatedToId int = NULL,
@ActivityStatusId int = NULL ,
@DateFrom date = NULL,
@DateTo date = NULL,
@SearchValue NVARCHAR(150)= NULL

AS

	SELECT  COUNT(leadactivities.ActivityID) as Count
	from
  ( SELECT Distinct
       [dbo].[Crm_Lead].[ID] as LeadID
	  ,[dbo].[Crm_Lead].[Name] as LeadName
	  ,[dbo].[Crm_Lead].[Name_AR] as LeadNameAR
	  ,[dbo].[Crm_Lead].[Phone] as Phone
      ,[dbo].[Crm_Lead_Activities].[ID] as ActivityID
      ,[dbo].[Crm_Lead_Activities].[Subject] as ActivitySubject
	  ,[dbo].[Crm_Lead_Activities].[ActivityTypeID] 
	  ,[dbo].[Crm_Lead_Activities].[StatusID]
	  ,CONVERT(varchar(23), [dbo].[Crm_Lead_Activities].[StartDate] , 103) as StartDate
      ,CONVERT(varchar(23), [dbo].[Crm_Lead_Activities].[EndDate]  , 103) as EndDate
      ,[dbo].[Crm_Lead_Activities].[AssignedToId]
	  ,[dbo].[Crm_Lead].[LeadOwnerId]

	  FROM [dbo].[Crm_Lead_Activities]
	  JOIN [dbo].[Crm_Activity] on [dbo].[Crm_Activity].[ID] = [dbo].[Crm_Lead_Activities].[ActivityTypeID]
	  JOIN [dbo].[Crm_Lead] ON [dbo].[Crm_Lead_Activities].[LeadID] = [dbo].[Crm_Lead].[ID]

	  Where 
  ([dbo].[Crm_Lead].[SubsidiaryID] = @SubsidiaryID ) AND
 ([dbo].[Crm_Lead].[LeadOwnerId] = @LeadOwnerId OR @LeadOwnerId IS NULL) AND
 ([dbo].[Crm_Lead_Activities].[AssignedToId] = @AssignedToId OR @AssignedToId IS NULL) AND
 ([dbo].[Crm_Lead_Activities].[RelatedToId] = @RelatedToId OR @RelatedToId IS NULL) AND
 ([dbo].[Crm_Lead_Activities].[StatusID] = @ActivityStatusId OR @ActivityStatusId IS NULL) AND
  ([dbo].[Crm_Lead_Activities].[ActivityTypeID] = @TaskTypeId OR @TaskTypeId IS NULL OR ([dbo].[Crm_Lead_Activities].[ActivityTypeID] >= @TaskTypeId AND @TaskTypeId  =21 )) AND
 (([dbo].[Crm_Lead_Activities].[StartDate] >= @DateFrom And [dbo].[Crm_Lead_Activities].[StartDate] <= @DateTo)OR( @DateFrom IS NULL and @DateTo IS NULL)) AND
 (([dbo].[Crm_Lead].[Name] like '%'+@SearchValue+'%' ) OR
 ([dbo].[Crm_Lead].[Phone] like '%'+@SearchValue+'%' ) OR
 ([dbo].[Crm_Lead_Activities].[Subject] like '%'+@SearchValue+'%' ) OR
 (CONVERT(varchar(23), [dbo].[Crm_Lead_Activities].[StartDate] , 103) like '%'+@SearchValue+'%' ) OR
 ([dbo].[Crm_Activity].[Name] like '%'+@SearchValue+'%' ) OR
 ([dbo].[Crm_Activity].[Name_AR] like '%'+@SearchValue+'%' ) OR
 ([dbo].[Crm_Lead_Activities].[Description] like '%'+@SearchValue+'%' ) OR
 (@SearchValue IS NULL) OR (@SearchValue  = ''))

UNION ALL
   SELECT Distinct
       [dbo].[GL_Accounts].[AccountID] as LeadID
	  ,[dbo].[GL_Accounts].[Name] as LeadName
	  ,[dbo].[GL_Accounts].[Name_AR] as LeadNameAR
	  ,[dbo].[GL_Accounts].[Phone] as Phone
      ,[dbo].[Crm_Lead_Activities].[ID] as ActivityID
      ,[dbo].[Crm_Lead_Activities].[Subject] as ActivitySubject
	  ,[dbo].[Crm_Lead_Activities].[ActivityTypeID] 
	  ,[dbo].[Crm_Lead_Activities].[StatusID]
	  ,CONVERT(varchar, [dbo].[Crm_Lead_Activities].[StartDate] , 101) as StartDate
      ,CONVERT(varchar, [dbo].[Crm_Lead_Activities].[EndDate]  , 101) as EndDate
      ,[dbo].[Crm_Lead_Activities].[AssignedToId]
	  ,'' as [LeadOwnerId]

	  FROM [dbo].[Crm_Lead_Activities]
	  JOIN [dbo].[Crm_Activity] on [dbo].[Crm_Activity].[ID] = [dbo].[Crm_Lead_Activities].[ActivityTypeID]
	  JOIN [dbo].[Crm_Invoice_Installments_Details] ON [dbo].[Crm_Lead_Activities].[InstallmentsDetailID] = [dbo].[Crm_Invoice_Installments_Details].[ID]
	  JOIN [Crm_Invoice_Installments] ON [Crm_Invoice_Installments].[ID] = [dbo].[Crm_Invoice_Installments_Details].[InvoiceInstallmentsID]
	  JOIN [dbo].[Inv_Receipt_h] ON [dbo].[Inv_Receipt_h].[ID] = [dbo].[Crm_Invoice_Installments].[InvoiceID]
	  JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[Inv_Receipt_h].[SupplierAccount_ID]
 Where 
 ([dbo].[Inv_Receipt_h].[SubsidiaryID] = @SubsidiaryID ) AND
  (@LeadOwnerId IS NULL) AND
 ([dbo].[Crm_Lead_Activities].[AssignedToId] = @AssignedToId OR @AssignedToId IS NULL) AND
 ([dbo].[Crm_Lead_Activities].[RelatedToId] = @RelatedToId OR @RelatedToId IS NULL) AND
 ([dbo].[Crm_Lead_Activities].[StatusID] = @ActivityStatusId OR @ActivityStatusId IS NULL) AND
  ([dbo].[Crm_Lead_Activities].[ActivityTypeID] = @TaskTypeId OR @TaskTypeId IS NULL OR ([dbo].[Crm_Lead_Activities].[ActivityTypeID] >= @TaskTypeId AND @TaskTypeId  =21 )) AND
 (([dbo].[Crm_Lead_Activities].[StartDate] >= @DateFrom And [dbo].[Crm_Lead_Activities].[StartDate] <= @DateTo)OR( @DateFrom IS NULL and @DateTo IS NULL)) AND
 (([dbo].[GL_Accounts].[Name] like '%'+@SearchValue+'%' ) OR
 ([dbo].[GL_Accounts].[Phone] like '%'+@SearchValue+'%' ) OR
 ([dbo].[Crm_Lead_Activities].[Subject] like '%'+@SearchValue+'%' ) OR
 (CONVERT(varchar(23), [dbo].[Crm_Lead_Activities].[StartDate] , 103) like '%'+@SearchValue+'%' ) OR
 ([dbo].[Crm_Activity].[Name] like '%'+@SearchValue+'%' ) OR
 ([dbo].[Crm_Activity].[Name_AR] like '%'+@SearchValue+'%' ) OR
 ([dbo].[Crm_Lead_Activities].[Description] like '%'+@SearchValue+'%' ) OR
 (@SearchValue IS NULL) OR (@SearchValue  = ''))

   UNION ALL

 	--Get All Activities From Customer
   SELECT Distinct
       [dbo].[GL_Accounts].[AccountID] as LeadID
	  ,[dbo].[GL_Accounts].[Name] as LeadName
	  ,[dbo].[GL_Accounts].[Name_AR] as LeadNameAR
	  ,[dbo].[GL_Accounts].[Phone] as Phone
      ,[dbo].[Crm_Lead_Activities].[ID] as ActivityID
      ,[dbo].[Crm_Lead_Activities].[Subject] as ActivitySubject
	  ,[dbo].[Crm_Lead_Activities].[ActivityTypeID] 
	  ,[dbo].[Crm_Lead_Activities].[StatusID]
	  ,CONVERT(varchar, [dbo].[Crm_Lead_Activities].[StartDate] , 101) as StartDate
      ,CONVERT(varchar, [dbo].[Crm_Lead_Activities].[EndDate]  , 101) as EndDate
      ,[dbo].[Crm_Lead_Activities].[AssignedToId]
	  ,'' as [LeadOwnerId]

	  FROM [dbo].[Crm_Lead_Activities]
	  JOIN [dbo].[Crm_Activity] on [dbo].[Crm_Activity].[ID] = [dbo].[Crm_Lead_Activities].[ActivityTypeID]
	  JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[Crm_Lead_Activities].[CustomerId]
	  JOIN [dbo].[GL_AccountSubsidiary] on [dbo].[GL_AccountSubsidiary].[AccountID] = [dbo].[GL_Accounts].[AccountID]
 Where 
 ([dbo].[GL_AccountSubsidiary].[SubsidiaryID] = @SubsidiaryID ) AND
 ([dbo].[GL_Accounts].[IsActive] = 1 )AND
  (@LeadOwnerId IS NULL) AND
 ([dbo].[Crm_Lead_Activities].[AssignedToId] = @AssignedToId OR @AssignedToId IS NULL) AND
  ([dbo].[Crm_Lead_Activities].[RelatedToId] = @RelatedToId OR @RelatedToId IS NULL) AND
  ([dbo].[Crm_Lead_Activities].[StatusID] = @ActivityStatusId OR @ActivityStatusId IS NULL) AND
 ([dbo].[Crm_Lead_Activities].[ActivityTypeID] = @TaskTypeId OR @TaskTypeId IS NULL OR ([dbo].[Crm_Lead_Activities].[ActivityTypeID] >= @TaskTypeId AND @TaskTypeId  =21 )) AND
  (([dbo].[Crm_Lead_Activities].[StartDate] >= @DateFrom And [dbo].[Crm_Lead_Activities].[StartDate] <= @DateTo)OR( @DateFrom IS NULL and @DateTo IS NULL)) AND
 (([dbo].[GL_Accounts].[Name] like '%'+@SearchValue+'%' ) OR
 ([dbo].[GL_Accounts].[Phone] like '%'+@SearchValue+'%' ) OR
 ([dbo].[Crm_Lead_Activities].[Subject] like '%'+@SearchValue+'%' ) OR
 (CONVERT(varchar(23), [dbo].[Crm_Lead_Activities].[StartDate] , 103) like '%'+@SearchValue+'%' ) OR
 ([dbo].[Crm_Activity].[Name] like '%'+@SearchValue+'%' ) OR
 ([dbo].[Crm_Activity].[Name_AR] like '%'+@SearchValue+'%' ) OR
 ([dbo].[Crm_Lead_Activities].[Description] like '%'+@SearchValue+'%' ) OR
 (@SearchValue IS NULL) OR (@SearchValue  = ''))
  )leadactivities


GO
/****** Object:  StoredProcedure [dbo].[GetAllLeadSources]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetAllLeadSources]

@SubsidiaryID int ,
@SourceTypeId nvarchar(50)  ,
@language nvarchar(50),
@Term nvarchar(500)

AS

  IF @language = 'en-US' 
  BEGIN 
		IF @SourceTypeId = '4' 
			BEGIN 
				SELECT Top 10  [ID] as ID, [Name]  as [Name], (Cast([dbo].[Crm_Lead].[ID]  as nVarchar(100))) as [Code] FROM [dbo].[Crm_Lead]
				WHERE CustomerType = 1 AND SubsidiaryID = @SubsidiaryID 
				AND  [Name] like @Term+'%' OR  (@Term IS NULL) OR (@Term  = '')
			END 
	    ELSE IF @SourceTypeId = '5' 
			BEGIN 
				SELECT Top 10  [dbo].[GL_Accounts].[AccountID] as ID,[Name] as [Name], (Cast([dbo].[GL_Accounts].[AccountID]  as nVarchar(100))) as [Code] FROM [dbo].[GL_Accounts]
				JOIN [dbo].[GL_AccountSubsidiary] ON [dbo].[GL_AccountSubsidiary].[AccountID]= [dbo].[GL_Accounts].[AccountID]
				WHERE IsActive = 1 AND IsVendor = 0 AND SubsidiaryID = @SubsidiaryID AND IsHidden = 1 AND Type = 2 AND LevelNo = 0
			    AND  [Name] like @Term+'%' OR  (@Term IS NULL) OR (@Term  = '')
			END 
		ELSE IF @SourceTypeId = '6' 
			BEGIN 
				SELECT Top 10  [ID] as ID, [Name]  as [Name], (Cast([dbo].[Security_Users].[ID]  as nVarchar(100))) as [Code] FROM [dbo].[Security_Users]
				WHERE IsHidden = 0 AND  [Name] like @Term+'%' OR  (@Term IS NULL) OR (@Term  = '')
			END 
		ELSE IF @SourceTypeId = 'Area' 
			BEGIN 
				SELECT Top 10 [ID] as ID, Replace(Name,' ', '')  as [Name], (Cast([dbo].[GL_Area].[ID]  as nVarchar(100))) as [Code] FROM [dbo].[GL_Area]
				Where  Replace(Name,' ', '') like @Term+'%' OR  (@Term IS NULL) OR (@Term  = '')
				Order By [Name] 			
			END 
  END 
ELSE 
  BEGIN 
      		IF @SourceTypeId = '4' 
			BEGIN 
				SELECT Top 10  [ID] as ID, [Name_AR]  as [Name], (Cast([dbo].[Crm_Lead].[ID]  as nVarchar(100))) as [Code] FROM [dbo].[Crm_Lead]
				WHERE CustomerType = 1 AND SubsidiaryID = @SubsidiaryID AND  [Name_AR] like @Term+'%' 
			    OR  (@Term IS NULL) OR (@Term  = '')
			END 
	    ELSE IF @SourceTypeId = '5' 
			BEGIN 
				SELECT Top 10  [dbo].[GL_Accounts].[AccountID] as ID, [Name_AR]   as [Name], (Cast([dbo].[GL_Accounts].[AccountID]  as nVarchar(100))) as [Code] FROM [dbo].[GL_Accounts]
				JOIN [dbo].[GL_AccountSubsidiary] ON [dbo].[GL_AccountSubsidiary].[AccountID]= [dbo].[GL_Accounts].[AccountID]
				WHERE IsActive = 1 AND IsVendor = 0 AND SubsidiaryID = @SubsidiaryID AND IsHidden = 1 AND Type = 2 AND LevelNo = 0
			    AND  [Name_AR] like @Term+'%' OR  (@Term IS NULL) OR (@Term  = '')
			END 
		ELSE IF @SourceTypeId = '6' 
			BEGIN 
				SELECT Top 10  [ID] as ID, [Name_AR]  as [Name], (Cast([dbo].[Security_Users].[Id]  as nVarchar(100))) as [Code] FROM [dbo].[Security_Users]
				WHERE IsHidden = 0  AND  [Name_AR] like @Term+'%' OR  (@Term IS NULL) OR (@Term  = '')
			END 
		ELSE IF @SourceTypeId = 'Area' 
			BEGIN 
				SELECT Top 10  [ID] as ID, Replace(Name_AR,' ', '')  as [Name], (Cast([dbo].[GL_Area].[ID]  as nVarchar(100))) as [Code] FROM [dbo].[GL_Area]
				Where  Replace(Name_AR,' ', '') like N''+ @Term +''+'%' OR  (@Term IS NULL) OR (@Term  = '')
				Order By [Name_AR] 
			END 
  END
GO
/****** Object:  StoredProcedure [dbo].[GetAllPosting]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetAllPosting]

@SubsidiaryID int 

AS

   SELECT Distinct
       [dbo].[Inv_Posting].[ID] 
       ,[dbo].[GL_Accounts].[Code] as   AccountCode 
       ,[dbo].[GL_Accounts].[AccountID] 
       ,[dbo].[GL_Accounts].[Name] as RecivableAccountNameEn
	   ,[dbo].[GL_Accounts].Name_AR as RecivableAccountNameAr 
       ,[dbo].[Inv_Posting].BranchID 
       ,[dbo].[mstr_Branch].[Name] as  BranchNameEn
	   ,[dbo].[mstr_Branch].[Name_AR] as  BranchNameAr
	   ,deliveryAccounts.[Name] as deliveryAccountNameEn
	   ,deliveryAccounts.Name_AR as deliveryAccountNameAr 
	   ,commissionAccount.[Name] as commissionAccountAccountNameEn
	   ,commissionAccount.Name_AR as commissionAccountAccountNameAr 
	    ,OperationProfitAccount.[Name] as OperationProfitAccountNameEn
	   ,OperationProfitAccount.Name_AR as OperationProfitAccountNameAr 
	   ,PayableAccount.[Name] as PayableAccountNameEn
	   ,PayableAccount.Name_AR as PayableAccountNameAr 

	  FROM 
	  [dbo].[Inv_Posting]
	  LEFT JOIN [dbo].[GL_Accounts] on [dbo].[Inv_Posting].[RecivableAccount] = [dbo].[GL_Accounts].[AccountID]
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[Inv_Posting].[BranchID]
	  LEFT JOIN [dbo].[GL_Accounts] as deliveryAccounts on [dbo].[Inv_Posting].[deliveryAccount] = deliveryAccounts.[AccountID]
	  	  LEFT JOIN [dbo].[GL_Accounts] as commissionAccount on [dbo].[Inv_Posting].[OutsideSalesCommissionAcc] = commissionAccount.[AccountID]
		  	  LEFT JOIN [dbo].[GL_Accounts] as OperationProfitAccount on [dbo].[Inv_Posting].[OperationProfitAccount] = OperationProfitAccount.[AccountID]
			  		  	  LEFT JOIN [dbo].[GL_Accounts] as PayableAccount on [dbo].[Inv_Posting].payableAccount = PayableAccount.[AccountID]

	  Where 
      [dbo].[mstr_Branch].[Subsidaryid] = @SubsidiaryID AND
	   [dbo].[mstr_Branch].IsActive = 1
	  

	  Order By [dbo].[Inv_Posting].[BranchID]
GO
/****** Object:  StoredProcedure [dbo].[GetAllPostingPaymentType]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetAllPostingPaymentType]

@SubsidiaryID int 

AS

   SELECT Distinct
       [dbo].[Inv_Posting_PaymentTypes].[ID] 
       ,[dbo].[GL_Accounts].[Code] as   AccountCode 
       ,[dbo].[GL_Accounts].[AccountID] 
       ,[dbo].[GL_Accounts].[Name] as AccountNameEn
	   ,[dbo].[GL_Accounts].Name_AR as AccountNameAr 
       ,[dbo].[Inv_Posting_PaymentTypes].BranchID 
       ,[dbo].[mstr_Branch].[Name] as  BranchNameEn
	   ,[dbo].[mstr_Branch].[Name_AR] as  BranchNameAr 
       ,[dbo].[Inv_Posting_PaymentTypes].[PaymentTypeID] as PaymentTypeID 
       ,[dbo].[Inv_PaymentType].[Name] as PaymentTypeNameEn 
	   ,[dbo].[Inv_PaymentType].[Name_Ar] as PaymentTypeNameAr
	   ,[CommissionAccount]
	   ,[PercentageOrValue]
	   ,[CommissionPerc]

	  FROM 
	  [dbo].[Inv_Posting_PaymentTypes]
	  LEFT JOIN [dbo].[GL_Accounts] on [dbo].[Inv_Posting_PaymentTypes].[AccountID] = [dbo].[GL_Accounts].[AccountID]
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[Inv_Posting_PaymentTypes].[BranchID]
	  LEFT JOIN [dbo].[GL_Accounts] as AccountCommission on AccountCommission.[AccountID] = [dbo].[Inv_Posting_PaymentTypes].[CommissionAccount]
	  LEFT JOIN [dbo].[Inv_PaymentType] on [dbo].[Inv_PaymentType].[ID] = [dbo].[Inv_Posting_PaymentTypes].[PaymentTypeID]

	  Where 
      [dbo].[mstr_Branch].[Subsidaryid] = @SubsidiaryID 
	  AND
	   [dbo].[mstr_Branch].IsActive = 1
	  AND
	   [dbo].[Inv_PaymentType].Code != 2
	  AND
	   [dbo].[Inv_PaymentType].Code != 0

	  Order By [dbo].[Inv_Posting_PaymentTypes].[BranchID]
GO
/****** Object:  StoredProcedure [dbo].[GetAllProductionReceiptList]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetAllProductionReceiptList]
	@SubsidiaryID int ,
	@StartDate date,
	@EndDate date,
	@ReceiptCode int,
	@NetTransactions float
AS
BEGIN
	SET NOCOUNT ON;
	--Declare @ItemId1 int ,@ItemId2 int ;

	IF @StartDate IS NOT NULL
	BEgin
	Declare @Sum_OF_TotalIndirectExpenses  float = (SELECT  Sum(Inv_Receipt_d.Qty * Inv_Items.IndirectExpensesUnit)
	FROM Inv_Receipt_h 
    JOIN Inv_Receipt_d ON Inv_Receipt_h.ID = Inv_Receipt_d.Parent_ID
	JOIN Inv_Items ON Inv_Items.ID = Inv_Receipt_d.Item_ID
	Where
	 Inv_Receipt_h.SubsidiaryID = @SubsidiaryID AND 
	 Inv_Receipt_h.Code= @ReceiptCode AND
	 FinishedProductID IS NULL AND
	 Transaction_move = 1 AND
	(CAST(Entry_Date as date) >= CAST(@StartDate as date) AND CAST(Entry_Date as date) <= CAST(@EndDate as date)))

	--Select @Sum_OF_TotalIndirectExpenses 

DECLARE @ReceiptId int ,@ReceiptDetialId int, @ItemId int , @ProductQty float, @IndirectExpenses float, @TotalIndirectExpenses float

DECLARE MY_CURSOR CURSOR 
  LOCAL STATIC READ_ONLY FORWARD_ONLY
FOR 
SELECT  Inv_Receipt_h.ID as ReceiptId,
	Inv_Receipt_d.ID as ReceiptDetialId,
	Inv_Items.ID as ItemId,
	Inv_Receipt_d.Qty as ProductQty,
	Inv_Items.IndirectExpensesUnit as IndirectExpenses,
	(Inv_Receipt_d.Qty * Inv_Items.IndirectExpensesUnit) as TotalIndirectExpenses

	FROM Inv_Receipt_h 
    JOIN Inv_Receipt_d ON Inv_Receipt_h.ID = Inv_Receipt_d.Parent_ID
	JOIN Inv_Items ON Inv_Items.ID = Inv_Receipt_d.Item_ID
	Where
	 Inv_Receipt_h.SubsidiaryID = @SubsidiaryID AND 
	 Inv_Receipt_h.Code= @ReceiptCode AND
	 FinishedProductID IS NULL AND
	 Transaction_move = 1 AND
	(CAST(Entry_Date as date) >= CAST(@StartDate as date) AND CAST(Entry_Date as date) <= CAST(@EndDate as date))

OPEN MY_CURSOR
FETCH NEXT FROM MY_CURSOR INTO  @ReceiptId  ,@ReceiptDetialId , @ItemId  , @ProductQty , @IndirectExpenses , @TotalIndirectExpenses 
WHILE @@FETCH_STATUS = 0
BEGIN 
    --Do something with Id here
    --PRINT @Inv_Items_StoreId
	--Select @ProductQty
		 
 IF (@ProductQty IS NOT NULL  AND  @Sum_OF_TotalIndirectExpenses IS NOT NULL
	 AND @ProductQty != 0  AND  @Sum_OF_TotalIndirectExpenses != 0 )
    Begin

	Update Inv_Receipt_d 
	Set ProductionQtyExpense = ((@TotalIndirectExpenses / @Sum_OF_TotalIndirectExpenses) * @NetTransactions) ,
    ProductionUnitExpense = ((@TotalIndirectExpenses / @Sum_OF_TotalIndirectExpenses) * @NetTransactions) / @ProductQty
	WHERE Inv_Receipt_d.ID = @ReceiptDetialId

 --   Set @ItemId1 = (Select Item_ID FROM Inv_Receipt_d WHERE ID = @ReceiptDetialId
	--AND NOT EXISTS (SELECT [ItemId] FROM   [GL_ExpensesDistributionsItems] ))

	--IF @ItemId1 IS NOT NULL and @ItemId1 != 0
 --     INSERT INTO [dbo].[GL_ExpensesDistributionsItems]([ItemId])VALUES(@ItemId1)
	--Select Parent_ID , Item_ID , ProductionQtyExpense ,ProductionUnitExpense from Inv_Receipt_d
	--Join INv_Items on Inv_Items.ID = Inv_Receipt_d.Item_ID   WHERE Inv_Receipt_d.ID = @ReceiptDetialId

	END

    FETCH NEXT FROM MY_CURSOR INTO @ReceiptId  ,@ReceiptDetialId , @ItemId  , @ProductQty , @IndirectExpenses , @TotalIndirectExpenses 
END
CLOSE MY_CURSOR
DEALLOCATE MY_CURSOR

DECLARE @ReceiptHeaderId int , @SumOFProductionQtyExpense float

DECLARE MY_CURSOR2 CURSOR 
  LOCAL STATIC READ_ONLY FORWARD_ONLY
FOR 
SELECT  Inv_Receipt_h.ID
	FROM Inv_Receipt_h 
	Where
	 Inv_Receipt_h.SubsidiaryID = @SubsidiaryID AND 
	 Inv_Receipt_h.Code= @ReceiptCode AND
	(CAST(Entry_Date as date) >= CAST(@StartDate as date) AND CAST(Entry_Date as date) <= CAST(@EndDate as date))


OPEN MY_CURSOR2
FETCH NEXT FROM MY_CURSOR2 INTO @ReceiptHeaderId
WHILE @@FETCH_STATUS = 0
BEGIN 
 
    --Select @ReceiptHeaderId as ReceiptHeaderId
	Set @SumOFProductionQtyExpense = (Select SUM(ProductionQtyExpense) 
	from Inv_Receipt_d 
	Where Parent_ID = @ReceiptHeaderId
	AND FinishedProductID IS NULL AND Transaction_move = 1 )
	--Select  @SumOFProductionQtyExpense
	Update Inv_Receipt_h SET 
	TotalProductionCost = @SumOFProductionQtyExpense,
	TotalProductionCostForeign = (@SumOFProductionQtyExpense * Currency_Rate),
	TotalVoucherCost = (Inv_Receipt_h.NetValue + @SumOFProductionQtyExpense),
	TotalVoucherCostForeign = (Inv_Receipt_h.NetValue + @SumOFProductionQtyExpense) * Currency_Rate
	Where Inv_Receipt_h.ID = @ReceiptHeaderId 
  

   	Select    Inv_Receipt_h.NetValue,
	TotalProductionCost = @SumOFProductionQtyExpense,
	TotalProductionCostForeign = (@SumOFProductionQtyExpense * Currency_Rate),
	TotalVoucherCost = (Inv_Receipt_h.NetValue + @SumOFProductionQtyExpense),
	TotalVoucherCostForeign = (Inv_Receipt_h.NetValue + @SumOFProductionQtyExpense) * Currency_Rate
	from Inv_Receipt_h Where Inv_Receipt_h.ID = @ReceiptHeaderId 

    FETCH NEXT FROM MY_CURSOR2 INTO @ReceiptHeaderId
END
CLOSE MY_CURSOR2
DEALLOCATE MY_CURSOR2

END
	ELSE

	BEgin
	Declare @Sum_OF_TotalIndirectExpenses_2  float = (SELECT  Sum(Inv_Receipt_d.Qty * Inv_Items.IndirectExpensesUnit)
	FROM Inv_Receipt_h 
    JOIN Inv_Receipt_d ON Inv_Receipt_h.ID = Inv_Receipt_d.Parent_ID
	JOIN Inv_Items ON Inv_Items.ID = Inv_Receipt_d.Item_ID
	Where
	 Inv_Receipt_h.SubsidiaryID = @SubsidiaryID AND 
	 Inv_Receipt_h.Code= @ReceiptCode AND
	 FinishedProductID IS NULL AND
	 Transaction_move = 1 AND
	(CAST(Entry_Date as date) <= CAST(@EndDate as date)))

DECLARE @ReceiptId_2 int ,@ReceiptDetialId_2 int, @ItemId_2 int , @ProductQty_2 float, @IndirectExpenses_2 float, @TotalIndirectExpenses_2 float

DECLARE MY_CURSOR CURSOR 
  LOCAL STATIC READ_ONLY FORWARD_ONLY
FOR 
SELECT  Inv_Receipt_h.ID as ReceiptId_2,
	Inv_Receipt_d.ID as ReceiptDetialId_2,
	Inv_Items.ID as ItemId_2,
	Inv_Receipt_d.Qty as ProductQty_2,
	Inv_Items.IndirectExpensesUnit as IndirectExpenses_2,
	(Inv_Receipt_d.Qty * Inv_Items.IndirectExpensesUnit) as TotalIndirectExpenses_2

	FROM Inv_Receipt_h 
    JOIN Inv_Receipt_d ON Inv_Receipt_h.ID = Inv_Receipt_d.Parent_ID
	JOIN Inv_Items ON Inv_Items.ID = Inv_Receipt_d.Item_ID
	Where
	 Inv_Receipt_h.SubsidiaryID = @SubsidiaryID AND 
	 Inv_Receipt_h.Code= @ReceiptCode AND
	 FinishedProductID IS NULL AND
	 Transaction_move = 1 AND
	(CAST(Entry_Date as date) <= CAST(@EndDate as date))

OPEN MY_CURSOR
FETCH NEXT FROM MY_CURSOR INTO  @ReceiptId_2  ,@ReceiptDetialId_2 , @ItemId_2  , @ProductQty_2 , @IndirectExpenses_2 , @TotalIndirectExpenses_2 
WHILE @@FETCH_STATUS = 0
BEGIN 

    IF (@ProductQty_2 IS NOT NULL  AND  @Sum_OF_TotalIndirectExpenses_2 IS NOT NULL
	 AND @ProductQty_2 != 0  AND  @Sum_OF_TotalIndirectExpenses_2 != 0 )
    Begin

	Update Inv_Receipt_d 
	Set ProductionQtyExpense = ((@TotalIndirectExpenses_2 / @Sum_OF_TotalIndirectExpenses_2) * @NetTransactions) ,
    ProductionUnitExpense = ((@TotalIndirectExpenses_2 / @Sum_OF_TotalIndirectExpenses_2) * @NetTransactions) / @ProductQty_2
	WHERE Inv_Receipt_d.ID = @ReceiptDetialId_2
	
 --   Set @ItemId2 = (Select Item_ID FROM Inv_Receipt_d WHERE ID = @ReceiptDetialId_2 
	--AND  NOT EXISTS (SELECT [ItemId] FROM   [GL_ExpensesDistributionsItems] ))

	--IF @ItemId IS NOT NULL and @ItemId != 0
 --     INSERT INTO [dbo].[GL_ExpensesDistributionsItems]([ItemId])VALUES(@ItemId2)
	--Select Parent_ID , Item_ID , ProductionQtyExpense ,ProductionUnitExpense from Inv_Receipt_d
	--Join INv_Items on Inv_Items.ID = Inv_Receipt_d.Item_ID   WHERE Inv_Receipt_d.ID = @ReceiptDetialId

	END

    FETCH NEXT FROM MY_CURSOR INTO @ReceiptId_2  ,@ReceiptDetialId_2 , @ItemId_2  , @ProductQty_2 , @IndirectExpenses_2 , @TotalIndirectExpenses_2 
END
CLOSE MY_CURSOR
DEALLOCATE MY_CURSOR

DECLARE @ReceiptHeaderId_2 int , @SumOFProductionQtyExpense_2 float

DECLARE MY_CURSOR2 CURSOR 
  LOCAL STATIC READ_ONLY FORWARD_ONLY
FOR 
SELECT  Inv_Receipt_h.ID
	FROM Inv_Receipt_h 
	Where
	 Inv_Receipt_h.SubsidiaryID = @SubsidiaryID AND 
	 Inv_Receipt_h.Code= @ReceiptCode AND
	(CAST(Entry_Date as date) <= CAST(@EndDate as date))


OPEN MY_CURSOR2
FETCH NEXT FROM MY_CURSOR2 INTO @ReceiptHeaderId_2
WHILE @@FETCH_STATUS = 0
BEGIN 

	Set @SumOFProductionQtyExpense_2 = (Select SUM(ProductionQtyExpense) from Inv_Receipt_d 
	Where Parent_ID = @ReceiptHeaderId_2
	AND FinishedProductID IS NULL AND Transaction_move = 1 )

	Update Inv_Receipt_h SET 
	TotalProductionCost = @SumOFProductionQtyExpense_2,
	TotalProductionCostForeign = (@SumOFProductionQtyExpense_2 * Currency_Rate),
	TotalVoucherCost = (Inv_Receipt_h.NetValue + @SumOFProductionQtyExpense_2),
	TotalVoucherCostForeign = (Inv_Receipt_h.NetValue + @SumOFProductionQtyExpense_2) * Currency_Rate
	Where Inv_Receipt_h.ID = @ReceiptHeaderId_2 
  
  	Select    Inv_Receipt_h.NetValue,
	TotalProductionCost = @SumOFProductionQtyExpense,
	TotalProductionCostForeign = (@SumOFProductionQtyExpense * Currency_Rate),
	TotalVoucherCost = (Inv_Receipt_h.NetValue + @SumOFProductionQtyExpense),
	TotalVoucherCostForeign = (Inv_Receipt_h.NetValue + @SumOFProductionQtyExpense) * Currency_Rate
	from Inv_Receipt_h Where Inv_Receipt_h.ID = @ReceiptHeaderId 


    FETCH NEXT FROM MY_CURSOR2 INTO @ReceiptHeaderId_2
END
CLOSE MY_CURSOR2
DEALLOCATE MY_CURSOR2

END
END
GO
/****** Object:  StoredProcedure [dbo].[GetAllProducts]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE
PROCEDURE [dbo].[GetAllProducts] --1,46
	@CompanyId INT, --1
	@BranchId INT,--16,
	@isfirsttime bit = 0,
	@CategoryId int = 0,
	@itemId int = 0,
	@serchValue nvarchar(MAX) = ''
AS
BEGIN
		
		DECLARE @StoreId INT = (SELECT StoreID FROM mstr_Branch WHERE ID = @BranchId)
		DECLARE @ERPDomainName NVARCHAR(250) = 'https://erp.matixerp.com/';

		select A.* 
		INTO #HT_Items_Categories
		from Inv_Items_Categories A
		INNER JOIN Inv_ProductCategories B
		ON A.ItemCategory_ID = B.ID
		AND B.IsActive = 1
		AND ( @CategoryId = 0 OR B.ID = @CategoryId OR B.ParentID = @CategoryId )
		AND B.ID NOT IN (SELECT DISTINCT ParentID FROM [Inv_ProductCategories] WHERE ParentID IS NOT NULL)
		INNER JOIN mstr_BranchesMenu K ON B.ID = K.ItemCategoryId 
		AND K.BranchId = @BranchId

		SELECT  Item_ID, STUFF((SELECT  ',' + ItemBarCode
		FROM Inv_Items_Barcode EE
		WHERE  EE.Item_ID=E.Item_ID
		AND EE.IsActiveBarCode = 1
		ORDER BY Item_ID
		FOR XML PATH('')), 1, 1, '') AS ItemBarCode
		INTO #HT_itemWiseBarcode
		FROM Inv_Items_Barcode E
		WHERE E.IsActiveBarCode = 1
		GROUP BY E.Item_ID

		DECLARE @IsGoldImplemented BIT = (SELECT CASE WHEN Value Like 'true' then 1 else 0 end 
		FROM mstr_ConfigurationParameter WHERE Name Like 'IsGoldStore' AND SubsidaryId = @CompanyId)

		;WITH AllProducts AS (select 
		ROW_NUMBER() OVER(Partition by  Item.ID,Unit.ID ORDER BY Item.ID) Number,
		Item.ID,
		Item.Name  COLLATE Arabic_CI_AI_KS_WS [Name],
		Item.Name_AR COLLATE Arabic_CI_AI_KS_WS [ArabicName],
		Categoty.ItemCategory_ID [CategoryId], 
		Unit.Name [UnitName], 
		CASE --WHEN ISNULL(@IsGoldImplemented, 0) = 1 THEN (M.Sale_price1 * Item.Weigth) + Item.Service
		WHEN ISNULL(Item.SpecialPrice, 0) =  0 THEN  ISNULL(ItemUnit.Sale_price1, 0)
		WHEN ISNULL(Item.SpecialPrice, 0) = 1 THEN ISNULL(Item.SpecialPriceValue, 0)
		WHEN ISNULL(Item.SpecialPrice, 0) = 2 AND Item.SpecialPriceFromDate <= GETDATE() AND Item.SpecialPriceToDate >= GETDATE() THEN ISNULL(Item.SpecialPriceValue, 0)
		ELSE ItemUnit.Sale_price1
		END [UnitPrice],
		Unit.ID [UnitID],
		@StoreId [StoreID],
		ISNULL(ItemUnit.BarCode, ISNULL(Item.Code, '')) [ItemCode],
		CASE 
		WHEN NULLIF(Item.ImagePath, '') IS NULL THEN '/Content/img/item Orange Strap 2.png'
		WHEN Item.IsUploadedFromPos = 1  THEN Item.ImagePath 
		ELSE @ERPDomainName + Item.ImagePath END AS [ImagePath],
		ItemUnit.Conv [Conv],
		ItemUnit.FinalConv [FinalConv],
		Item.POSFeatured,
		Item.IsEditPrice,
		ISNULL(Item.Service, 0) [ServiceItemCost],
		ISNULL(Item.Weigth, 0) Weigth,
		ISNULL(Item.GoldClovesWeigth, 0) [GoldClovesWeigth],
		ISNULL(Item.GoldCaliber, 0) GoldCaliber,
		ItemUnit.Sale_price1 [UnitPrice1],
		ItemUnit.Sale_price2 [UnitPrice2],
		ItemUnit.Sale_price3 [UnitPrice3],
		ItemUnit.Sale_price4 [UnitPrice4],
		Item.Item_Type [ItemType],
		ISNULL(Item.LoyalityBalance, 0) LoyalityBalance,
		ISNULL(Item.IsMemebership, 0) IsMemebership,
		ISNULL(Item.Color,'') Color,
		ISNULL(Item.Size,'') Size,
		ISNULL(consignment,0) AS consignment,
		ISNULL( H.ItemBarCode ,'') AS ItemBarCode,
		Item.RestockOnReturn
		FROM Inv_Items Item
		INNER JOIN #HT_Items_Categories Categoty
		ON Item.ID = Categoty.Item_ID
		AND ( @itemId = 0 OR Item.ID = @itemId )
		AND (ISNULL(Item.AvailableForSale, 1) = 1 OR (Item.AvailableForSale = 2 AND Item.AvailableForSaleFromDate <= GETDATE() AND Item.AvailableForSaleToDate >= GETDATE()))
		AND Item.IsActive = 1
		AND Item.StopSales = 0
		AND Item.Item_Type <> 5
		AND ( @isfirsttime = 0  OR Item.POSFeatured = 1  )  
		AND ISNULL( Item.AvailableForSale , 1 ) = 1
		AND Categoty.ItemCategory_ID NOT IN (SELECT DISTINCT ParentID FROM [Inv_ProductCategories] WHERE ParentID IS NOT NULL)
		INNER JOIN Inv_Items_Units ItemUnit
		ON Item.ID = ItemUnit.Item_ID
		AND ItemUnit.POS IS NOT NULL AND  ItemUnit.POS = 1
		INNER JOIN [Dbo].[Inv_Unit] Unit ON ItemUnit.Unit_id = Unit.ID
		LEFT JOIN #HT_itemWiseBarcode H ON H.Item_ID = Item.ID
		WHERE ( Item.Name Like '%'+@serchValue+'%' OR Item.Name_AR Like '%'+@serchValue+'%' OR H.ItemBarCode Like '%'+@serchValue+'%' OR Item.Code like '%'+@serchValue+'%' OR ItemUnit.BarCode Like '%'+@serchValue+'%'  )
		)
		SELECT ID,
		Name,
		ArabicName,
		CategoryId,
		UnitName,
		UnitPrice,
		UnitID,
		StoreID,
		ItemCode,
		ImagePath,
		Conv,
		FinalConv,
		POSFeatured,
		IsEditPrice,
		ServiceItemCost,
		Weigth,
		GoldClovesWeigth,
		GoldCaliber,
		UnitPrice1,
		UnitPrice2,
		UnitPrice3,
		UnitPrice4,
		ItemType,
		LoyalityBalance,
		IsMemebership,
		Color,
		Size,
		consignment,
		ItemBarCode,
		RestockOnReturn
		FROM AllProducts
		WHERE number =1 
		order by Name;

		IF OBJECT_ID('tempdb..#HT_Items_Categories') IS NOT NULL DROP TABLE #HT_Items_Categories 
		IF OBJECT_ID('tempdb..#HT_itemWiseBarcode') IS NOT NULL DROP TABLE #HT_itemWiseBarcode  

END

--[GetAllProducts] 1, 48

GO
/****** Object:  StoredProcedure [dbo].[GetAllReceipts]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetAllReceipts]
  
@SubsidiaryID int ,  
@ReceiptCode int ,  
@UserID int ,  
@Language NVARCHAR(10),  
@Skip int = 0,  
@Take int = 200,  
@SearchValue NVARCHAR(150),  
@sortOrder   NVARCHAR(500),  
@sortColumn  NVARCHAR(500),  
@OpenListForFirstTime bit,  
@branchName NVARCHAR(1000) = '',  
@entryNo int = 0,  
@appoveId int =0  
  
AS  
 CREATE TABLE #ERPstatusTemp  
  
 (  
  
 ID int NOT NULL,  
  
 StatusName nvarchar(200),  
  
 StatusName_AR nvarchar(200)  
  
 )  
 insert into #ERPstatusTemp  
 values (1,N'New',N'جديد' )  
 insert into #ERPstatusTemp  
 values (2,N'PartiallyReceived',N'الاستلام الجزئي')  
 insert into #ERPstatusTemp  
 values (3,N'Received',N'تم الاستلام')  
 declare @format int = 103  
 SET @format = ( select CASE WHEN Date_format = 'MM/dd/yyyy' THEN  101 ELSE 103 END from mstr_Subsidaries WHERE ID = @SubsidiaryID )  
  
  
 IF(@OpenListForFirstTime = 1)   
  IF(@Language = 'en-US')  
  BEGIN  
   SELECT * From (SELECT Distinct  
   [dbo].[Inv_Receipt_h].[ID] as ID  
   ,[dbo].[Inv_Receipt_h].[Entry_No] as Entry_No  
   ,CONVERT(varchar(23), [dbo].[Inv_Receipt_h].[Entry_Date] , @format) as [Entry_Date]  
   ,[dbo].[Inv_Receipt_h].[Entry_Date]  as Entry_Dates
   ,[dbo].[Inv_Receipt_h].[Is_Canceled]  as Is_Canceled
   ,[dbo].[mstr_Branch].[Name] as BranchName  
   ,[dbo].[Inv_PaymentType].[Name] as PaymentTypeName  
   ,(CASE WHEN ([Inv_Receipt_h].[Vendor_ID] IS NULL And [dbo].[Inv_Receipt_h].CashCustomerID IS NULL ) THEN  QuotationCustomerName ELSE  
   CASE WHEN [Inv_Receipt_h].[Vendor_ID] IS NOT NULL  THEN  [dbo].[GL_Accounts].[Name] ELSE  
   CASE WHEN [dbo].[Inv_Receipt_h].CashCustomerID IS NOT NULL  THEN  [dbo].[Inv_CashCustomer].[Name] ELSE '' END END END )as CustomerName   
   ,(CASE WHEN [dbo].[Inv_Receipt_h].[Vendor_ID] IS NOT NULL  THEN  [dbo].[GL_Accounts].[Phone] ELSE  
   CASE WHEN [dbo].[Inv_Receipt_h].CashCustomerID IS NOT NULL  THEN  [dbo].[Inv_CashCustomer].[PhoneNumber] ELSE '' END END  )as CustomerPhone  
   --,[dbo].[Inv_Receipt_h].[NetValue] as [NetValue]  
   ,((select sum((Qty * Price) - Discount_Value)  from Inv_Receipt_d where FinishedProductID is null and Parent_ID = Inv_Receipt_h.ID) - isnull(Discount_Value,0) + isnull(SurchargeValue,0)) as [NetValue]  
   ,[dbo].[Inv_Receipt_h].[Reference_No] as [Reference_No]  
   ,CASE [Inv_Receipt_h].QuotationStatusId   
   WHEN 1 THEN 'New'   
   WHEN 2 THEN 'Approved'    
   WHEN 3 THEN 'Disapproved'   
   WHEN 4 THEN 'Invoiced'   
   WHEN 5 THEN 'Sales Order'   
   ELSE '-'   
   END as QuotationStatus   
   ,SU.Name as CreatedByName  
   ,SU_employee.Name as EmployeeName  
   ,FS.Name as FromStoreName  
   ,TS.Name as ToStoreName  
   ,ES.StatusName as ERPstatus  
   ,AppS.Status_Name as ApprovalStatus  
   ,SalesT.[Name] as SalesType  
   ,CONVERT(varchar(23), [dbo].[Inv_Receipt_h].ContractStartDate , 101) as ContractStartDate  
   ,CONVERT(varchar(23), [dbo].[Inv_Receipt_h].ContractEndDate , 101) as ContractEndDate  
   ,CASE WHEN [dbo].[Inv_Receipt_h].Code = 11 THEN [dbo].[Inv_Receipt_h].PurchaseOrderStatusId   
        WHEN [dbo].[Inv_Receipt_h].Code = 12 THEN [dbo].[Inv_Receipt_h].PurchaseRequestStatusId  
     WHEN [dbo].[Inv_Receipt_h].Code = 50 THEN [dbo].[Inv_Receipt_h].QuotationStatusId  
     WHEN [dbo].[Inv_Receipt_h].Code = 88 THEN [dbo].[Inv_Receipt_h].SalesOrderStatusId  
    ELSE [dbo].[Inv_Receipt_h].ApprovalStatus_ID END  AS ApprovalId  
   --,[Inv_Receipt_h].CreatedByID  
   FROM [dbo].[Inv_Receipt_h]  
   LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[Inv_Receipt_h].[Vendor_ID]  
   LEFT JOIN [dbo].[Inv_CashCustomer] on [dbo].[Inv_CashCustomer].[id] = [dbo].[Inv_Receipt_h].[CashCustomerID]  
   LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[Inv_Receipt_h].[Branch_ID]  
   LEFT JOIN [dbo].[Inv_PaymentType] on [dbo].[Inv_PaymentType].[ID] = [dbo].[Inv_Receipt_h].[Payment_Type]  
   LEFT JOIN [dbo].[Inv_Store] FS on FS.[ID] = [dbo].[Inv_Receipt_h].[FromStoreID]  
   LEFT JOIN [dbo].[Inv_Store] TS on TS.[ID] = [dbo].[Inv_Receipt_h].[ToStoreID]  
   LEFT JOIN [dbo].Security_Users SU on SU.[ID] = [dbo].[Inv_Receipt_h].[CreatedByID]  
   LEFT JOIN [dbo].Security_Users SU_employee on SU_employee.[ID] = [dbo].[Inv_Receipt_h].[Empoyee_ID]  
   LEFT JOIN #ERPstatusTemp ES on ES.[ID] = [dbo].[Inv_Receipt_h].[ERPStatus]  
   LEFT JOIN [dbo].Inv_Receipt_ApprovalStatus AppS on AppS.[ID] = [dbo].[Inv_Receipt_h].ApprovalStatus_ID  
   LEFT JOIN [dbo].Inv_SalesTypes SalesT on SalesT.[ID] = [dbo].[Inv_Receipt_h].SalesTypeID  
  
   Where   
   ([dbo].[Inv_Receipt_h].[SubsidiaryID] = @SubsidiaryID ) AND  
   ([dbo].[Inv_Receipt_h].[Branch_ID] in (select BranchID from UserBranch where UserID = @UserID) ) AND  
   ([dbo].[Inv_Receipt_h].[Code] = @ReceiptCode ) AND   
   ((Cast([dbo].[Inv_Receipt_h].[Entry_No]  as nVarchar(100)) like '%'+@SearchValue+'%' )  OR  
   (Cast([dbo].[Inv_Receipt_h].[NetValue]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
   (Cast([dbo].[mstr_Branch].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
   (Cast([dbo].[Inv_PaymentType].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
   (Cast([dbo].[GL_Accounts].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR  
   (Cast([dbo].[GL_Accounts].[Phone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR  
   (Cast([dbo].[Inv_CashCustomer].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
   (Cast([dbo].[Inv_CashCustomer].[PhoneNumber]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR    
   (Cast([dbo].[Inv_Receipt_h].[Reference_No]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR    
   (CONVERT(varchar(23), [dbo].[Inv_Receipt_h].[Entry_Date] , @format) like '%'+@SearchValue+'%' ) OR    
   (Cast(SU.[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
   (Cast(TS.[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
   (Cast(FS.[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
   (Cast(ES.[StatusName]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR     
   (@SearchValue IS NULL) OR (@SearchValue  = ''))  
   AND Inv_Receipt_h.Entry_No = CASE WHEN @entryNo > 0 THEN @entryNo ELSE Inv_Receipt_h.Entry_No END  
   AND Cast([dbo].[mstr_Branch].[Name]  as nVarchar(100)) = CASE WHEN @branchName !='' THEN @branchName ELSE Cast([dbo].[mstr_Branch].[Name]  as nVarchar(100)) END  
   AND (CASE WHEN [dbo].[Inv_Receipt_h].Code = 11 THEN ISNULL([dbo].[Inv_Receipt_h].PurchaseOrderStatusId,0)   
        WHEN [dbo].[Inv_Receipt_h].Code = 12 THEN ISNULL([dbo].[Inv_Receipt_h].PurchaseRequestStatusId,0)   
     WHEN [dbo].[Inv_Receipt_h].Code = 50 THEN ISNULL([dbo].[Inv_Receipt_h].QuotationStatusId,0)   
     WHEN [dbo].[Inv_Receipt_h].Code = 88 THEN ISNULL([dbo].[Inv_Receipt_h].SalesOrderStatusId,0)   
     ELSE ISNULL([dbo].[Inv_Receipt_h].ApprovalStatus_ID,0) END ) = CASE WHEN @appoveId > 0   
                  THEN @appoveId   
                  ELSE   
                   (CASE WHEN [dbo].[Inv_Receipt_h].Code = 11 THEN ISNULL([dbo].[Inv_Receipt_h].PurchaseOrderStatusId,0)   
                    WHEN [dbo].[Inv_Receipt_h].Code = 12 THEN ISNULL([dbo].[Inv_Receipt_h].PurchaseRequestStatusId,0)   
                    WHEN [dbo].[Inv_Receipt_h].Code = 50 THEN ISNULL([dbo].[Inv_Receipt_h].QuotationStatusId,0)   
                    WHEN [dbo].[Inv_Receipt_h].Code = 88 THEN ISNULL([dbo].[Inv_Receipt_h].SalesOrderStatusId,0)   
                    ELSE ISNULL([dbo].[Inv_Receipt_h].ApprovalStatus_ID,0) END )   
                   END  
      
   ) Receipts  
   ORDER BY   
   case  
   when @sortOrder <> 'ASC' then 0  
   when @sortColumn = 'Entry_No' then Entry_No  
   end ASC  
   ,       case  
   when @sortOrder <> 'ASC' then cast(null as date)  
   when @sortColumn = 'Entry_Date' then Entry_Dates  
   end ASC  
   , case  
   when @sortOrder <> 'ASC' then cast(null as date)  
   when @sortColumn = 'ContractStartDate' then ContractStartDate  
   end ASC  
   , case  
   when @sortOrder <> 'ASC' then cast(null as date)  
   when @sortColumn = 'ContractEndDate' then ContractEndDate  
   end ASC  
   ,       case  
   when @sortOrder <> 'ASC' then 0  
   when @sortColumn = 'NetValue' then NetValue  
   end ASC  
   ,       case  
   when @sortOrder <> 'ASC' then ''  
   when @sortColumn = 'CustomerName' then CustomerName  
   end ASC  
   ,       case  
   when @sortOrder <> 'ASC' then ''  
   when @sortColumn = 'CustomerPhone' then CustomerPhone  
   end ASC  
  
   ,       case  
   when @sortOrder <> 'ASC' then ''  
   when @sortColumn = 'CreatedByName' then CreatedByName  
   end ASC  
   ,       case  
   when @sortOrder <> 'ASC' then ''  
   when @sortColumn = 'FromStoreName' then FromStoreName  
   end ASC  
   ,       case  
   when @sortOrder <> 'ASC' then ''  
   when @sortColumn = 'ToStoreName' then FromStoreName  
   end ASC  
   ,       case  
   when @sortOrder <> 'ASC' then ''  
   when @sortColumn = 'ERPstatus' then ERPstatus  
   end ASC  
  
   ,       case  
   when @sortOrder <> 'DESC' then 0  
   when @sortColumn = 'Entry_No' then Entry_No  
   end DESC  
   ,       case  
   when @sortOrder <> 'DESC' then cast(null as date)  
   when @sortColumn = 'Entry_Date' then Entry_Dates  
   end DESC  
   , case  
   when @sortOrder <> 'DESC' then cast(null as date)  
   when @sortColumn = 'ContractStartDate' then ContractStartDate  
   end DESC  
   , case  
   when @sortOrder <> 'DESC' then cast(null as date)  
   when @sortColumn = 'ContractEndDate' then ContractEndDate  
   end DESC  
   ,       case  
   when @sortOrder <> 'DESC' then 0  
   when @sortColumn = 'NetValue' then NetValue  
   end DESC   
   ,       case  
   when @sortOrder <> 'DESC' then ''  
   when @sortColumn = 'CustomerName' then CustomerName  
   end DESC  
   ,       case  
   when @sortOrder <> 'DESC' then ''  
   when @sortColumn = 'CustomerPhone' then CustomerPhone  
   end DESC  
  
   ,       case  
   when @sortOrder <> 'DESC' then ''  
   when @sortColumn = 'CreatedByName' then CreatedByName  
   end DESC  
   ,       case  
   when @sortOrder <> 'DESC' then ''  
   when @sortColumn = 'FromStoreName' then FromStoreName  
   end DESC  
   ,       case  
   when @sortOrder <> 'DESC' then ''  
   when @sortColumn = 'ToStoreName' then ToStoreName  
   end DESC  
   ,       case  
   when @sortOrder <> 'DESC' then ''  
   when @sortColumn = 'ERPstatus' then ERPstatus  
   end DESC  
  
  
OFFSET     @Skip ROWS         
FETCH NEXT @Take ROWS ONLY;   
  END  
  ELSE  
  BEGIN  
  
   Select * From(  SELECT Distinct  
   [dbo].[Inv_Receipt_h].[ID] as ID  
   ,[dbo].[Inv_Receipt_h].[Entry_No] as Entry_No  
   ,CONVERT(varchar(23), [dbo].[Inv_Receipt_h].[Entry_Date] , @format) as [Entry_Date]  
   ,[dbo].[Inv_Receipt_h].[Entry_Date]  as Entry_Dates
   ,[dbo].[Inv_Receipt_h].[Is_Canceled]  as Is_Canceled
   ,[dbo].[mstr_Branch].[Name_AR] as BranchName  
   ,[dbo].[Inv_PaymentType].[Name_AR] as PaymentTypeName  
   ,(CASE WHEN ([Inv_Receipt_h].[Vendor_ID] IS NULL And [dbo].[Inv_Receipt_h].CashCustomerID IS NULL ) THEN  QuotationCustomerName ELSE  
   CASE WHEN [Inv_Receipt_h].[Vendor_ID] IS NOT NULL  THEN  [dbo].[GL_Accounts].Name_AR ELSE  
   CASE WHEN [dbo].[Inv_Receipt_h].CashCustomerID IS NOT NULL  THEN  [dbo].[Inv_CashCustomer].[Name_AR] ELSE '' END END END )as CustomerName   
   ,(CASE WHEN [dbo].[Inv_Receipt_h].[Vendor_ID] IS NOT NULL  THEN  [dbo].[GL_Accounts].[Phone] ELSE  
   CASE WHEN [dbo].[Inv_Receipt_h].CashCustomerID IS NOT NULL  THEN  [dbo].[Inv_CashCustomer].[PhoneNumber] ELSE '' END END  )as CustomerPhone  
   --,[dbo].[Inv_Receipt_h].[NetValue] as [NetValue]  
   ,((select sum((Qty * Price) - Discount_Value) from Inv_Receipt_d where FinishedProductID is null and Parent_ID = Inv_Receipt_h.ID)- isnull(Discount_Value,0)+ isnull(SurchargeValue,0)) as [NetValue]  
   ,[dbo].[Inv_Receipt_h].[Reference_No] as [Reference_No]  
   ,CASE [Inv_Receipt_h].QuotationStatusId   
   WHEN 1 THEN N'جديد'   
   WHEN 2 THEN N'مقبول'    
   WHEN 3 THEN N'مرفوض'   
   WHEN 4 THEN N'تم عمل فاتوره'   
   WHEN 5 THEN N'تم عمل سند بيع'   
   ELSE '-'   
   END as QuotationStatus  
   ,SU.Name_AR as CreatedByName  
   ,SU_employee.Name_AR as EmployeeName  
   ,FS.Name_AR as FromStoreName  
   ,TS.Name_AR as ToStoreName  
   ,ES.StatusName_AR as ERPstatus  
   ,AppS.Status_Name_Ar as ApprovalStatus  
   ,SalesT.Name_AR as SalesType  
   ,CONVERT(varchar(23), [dbo].[Inv_Receipt_h].ContractStartDate , 101) as ContractStartDate  
   ,CONVERT(varchar(23), [dbo].[Inv_Receipt_h].ContractEndDate , 101) as ContractEndDate  
   ,CASE WHEN [dbo].[Inv_Receipt_h].Code = 11 THEN [dbo].[Inv_Receipt_h].PurchaseOrderStatusId   
        WHEN [dbo].[Inv_Receipt_h].Code = 12 THEN [dbo].[Inv_Receipt_h].PurchaseRequestStatusId  
     WHEN [dbo].[Inv_Receipt_h].Code = 50 THEN [dbo].[Inv_Receipt_h].QuotationStatusId  
     WHEN [dbo].[Inv_Receipt_h].Code = 88 THEN [dbo].[Inv_Receipt_h].SalesOrderStatusId  
    ELSE [dbo].[Inv_Receipt_h].ApprovalStatus_ID END AS ApprovalId  
   FROM [dbo].[Inv_Receipt_h]  
   LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[Inv_Receipt_h].[Vendor_ID]  
   LEFT JOIN [dbo].[Inv_CashCustomer] on [dbo].[Inv_CashCustomer].[id] = [dbo].[Inv_Receipt_h].[CashCustomerID]  
   LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[Inv_Receipt_h].[Branch_ID]  
   LEFT JOIN [dbo].[Inv_PaymentType] on [dbo].[Inv_PaymentType].[ID] = [dbo].[Inv_Receipt_h].[Payment_Type]  
   LEFT JOIN [dbo].[Inv_Store] FS on FS.[ID] = [dbo].[Inv_Receipt_h].[FromStoreID]  
   LEFT JOIN [dbo].[Inv_Store] TS on TS.[ID] = [dbo].[Inv_Receipt_h].[ToStoreID]  
   LEFT JOIN [dbo].Security_Users SU on SU.[ID] = [dbo].[Inv_Receipt_h].[CreatedByID]  
   LEFT JOIN [dbo].Security_Users SU_employee on SU_employee.[ID] = [dbo].[Inv_Receipt_h].[Empoyee_ID]  
   LEFT JOIN #ERPstatusTemp ES on ES.[ID] = [dbo].[Inv_Receipt_h].[ERPStatus]  
   LEFT JOIN [dbo].Inv_Receipt_ApprovalStatus AppS on AppS.[ID] = [dbo].[Inv_Receipt_h].ApprovalStatus_ID  
   LEFT JOIN [dbo].Inv_SalesTypes SalesT on SalesT.[ID] = [dbo].[Inv_Receipt_h].SalesTypeID  
  
   Where   
   ([dbo].[Inv_Receipt_h].[SubsidiaryID] = @SubsidiaryID ) AND  
   ([dbo].[Inv_Receipt_h].[Branch_ID] in (select BranchID from UserBranch where UserID = @UserID) ) AND  
   ([dbo].[Inv_Receipt_h].[Code] = @ReceiptCode ) AND   
   ((Cast([dbo].[Inv_Receipt_h].[Entry_No]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR  
   (Cast([dbo].[Inv_Receipt_h].[NetValue]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
   (Cast([dbo].[Inv_PaymentType].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
   (Cast([dbo].[mstr_Branch].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
   (Cast([dbo].[GL_Accounts].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR  
   (Cast([dbo].[GL_Accounts].[Phone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR  
   (Cast([dbo].[Inv_CashCustomer].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR  
   (Cast([dbo].[Inv_CashCustomer].[PhoneNumber]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR    
   (Cast([dbo].[Inv_Receipt_h].[Reference_No]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
   (CONVERT(varchar(23), [dbo].[Inv_Receipt_h].[Entry_Date] , @format) like '%'+@SearchValue+'%' ) OR    
   (Cast(SU.[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
   (Cast(TS.[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
   (Cast(FS.[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
   (Cast(ES.[StatusName_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
   (@SearchValue IS NULL) OR (@SearchValue  = ''))  
   AND Inv_Receipt_h.Entry_No = CASE WHEN @entryNo > 0 THEN @entryNo ELSE Inv_Receipt_h.Entry_No END  
   AND Cast([dbo].[mstr_Branch].[Name_AR]  as nVarchar(100)) = CASE WHEN @branchName !='' THEN @branchName ELSE Cast([dbo].[mstr_Branch].[Name_AR]  as nVarchar(100)) END  
   AND (CASE WHEN [dbo].[Inv_Receipt_h].Code = 11 THEN ISNULL([dbo].[Inv_Receipt_h].PurchaseOrderStatusId,0)   
        WHEN [dbo].[Inv_Receipt_h].Code = 12 THEN ISNULL([dbo].[Inv_Receipt_h].PurchaseRequestStatusId,0)   
     WHEN [dbo].[Inv_Receipt_h].Code = 50 THEN ISNULL([dbo].[Inv_Receipt_h].QuotationStatusId,0)   
     WHEN [dbo].[Inv_Receipt_h].Code = 88 THEN ISNULL([dbo].[Inv_Receipt_h].SalesOrderStatusId,0)   
     ELSE ISNULL([dbo].[Inv_Receipt_h].ApprovalStatus_ID,0) END ) = CASE WHEN @appoveId > 0   
                  THEN @appoveId   
                  ELSE   
                   (CASE WHEN [dbo].[Inv_Receipt_h].Code = 11 THEN ISNULL([dbo].[Inv_Receipt_h].PurchaseOrderStatusId,0)   
                    WHEN [dbo].[Inv_Receipt_h].Code = 12 THEN ISNULL([dbo].[Inv_Receipt_h].PurchaseRequestStatusId,0)   
                    WHEN [dbo].[Inv_Receipt_h].Code = 50 THEN ISNULL([dbo].[Inv_Receipt_h].QuotationStatusId,0)   
                    WHEN [dbo].[Inv_Receipt_h].Code = 88 THEN ISNULL([dbo].[Inv_Receipt_h].SalesOrderStatusId,0)   
                    ELSE ISNULL([dbo].[Inv_Receipt_h].ApprovalStatus_ID,0) END )   
                   END  
   ) Receipts  
   ORDER BY case  
   when @sortOrder <> 'ASC' then ''  
   when @sortColumn = 'BranchName' then BranchName  
   end ASC  
   ,   
   case  
   when @sortOrder <> 'ASC' then 0  
   when @sortColumn = 'Entry_No' then Entry_No  
   end ASC  
   ,       case  
   when @sortOrder <> 'ASC' then cast(null as date)  
   when @sortColumn = 'Entry_Date' then Entry_Dates  
   end ASC  
   , case  
   when @sortOrder <> 'ASC' then cast(null as date)  
   when @sortColumn = 'ContractStartDate' then ContractStartDate  
   end ASC  
   , case  
   when @sortOrder <> 'ASC' then cast(null as date)  
   when @sortColumn = 'ContractEndDate' then ContractEndDate  
   end ASC  
   ,       case  
   when @sortOrder <> 'ASC' then 0  
   when @sortColumn = 'NetValue' then NetValue  
   end ASC  
   ,       case  
   when @sortOrder <> 'ASC' then ''  
   when @sortColumn = 'CustomerName' then CustomerName  
   end ASC  
   ,       case  
   when @sortOrder <> 'ASC' then ''  
   when @sortColumn = 'CustomerPhone' then CustomerPhone  
   end ASC  
   ,       case  
   when @sortOrder <> 'ASC' then ''  
   when @sortColumn = 'CreatedByName' then CreatedByName  
   end ASC  
   ,       case  
   when @sortOrder <> 'ASC' then ''  
   when @sortColumn = 'FromStoreName' then FromStoreName  
   end ASC  
   ,       case  
   when @sortOrder <> 'ASC' then ''  
   when @sortColumn = 'ToStoreName' then ToStoreName  
   end ASC  
   ,       case  
   when @sortOrder <> 'ASC' then ''  
   when @sortColumn = 'ERPstatus' then ERPstatus  
   end ASC  
  
   , CASE when @sortOrder <> 'DESC' then ''  
   when @sortColumn = 'BranchName' then BranchName  
   end DESC  
   ,     
   case  
   when @sortOrder <> 'DESC' then 0  
   when @sortColumn = 'Entry_No' then Entry_No  
   end DESC  
   ,       case  
   when @sortOrder <> 'DESC' then cast(null as date)  
   when @sortColumn = 'Entry_Date' then Entry_Dates  
   end DESC  
   , case  
   when @sortOrder <> 'DESC' then cast(null as date)  
   when @sortColumn = 'ContractStartDate' then ContractStartDate  
   end DESC  
   , case  
   when @sortOrder <> 'DESC' then cast(null as date)  
   when @sortColumn = 'ContractEndDate' then ContractEndDate  
   end DESC  
   ,       case  
   when @sortOrder <> 'DESC' then 0  
   when @sortColumn = 'NetValue' then NetValue  
   end DESC  
   ,       case  
   when @sortOrder <> 'DESC' then ''  
   when @sortColumn = 'CustomerName' then CustomerName  
   end DESC  
   ,       case  
   when @sortOrder <> 'DESC' then ''  
   when @sortColumn = 'CustomerPhone' then CustomerPhone  
   end DESC  
   ,       case  
   when @sortOrder <> 'DESC' then ''  
   when @sortColumn = 'CreatedByName' then CreatedByName  
   end DESC  
   ,       case  
   when @sortOrder <> 'DESC' then ''  
   when @sortColumn = 'FromStoreName' then FromStoreName  
   end DESC  
   ,       case  
   when @sortOrder <> 'DESC' then ''  
   when @sortColumn = 'ToStoreName' then ToStoreName  
   end DESC  
   ,       case  
   when @sortOrder <> 'DESC' then ''  
   when @sortColumn = 'ERPstatus' then ERPstatus  
   end DESC  
   OFFSET     @Skip ROWS         
   FETCH NEXT @Take ROWS ONLY;   
  
  END  
  ELSE  
  IF(@Language = 'en-US')  
  BEGIN  
  
   Select * From (SELECT Distinct  
    [dbo].[Inv_Receipt_h].[ID] as ID  
    ,[dbo].[Inv_Receipt_h].[Entry_No] as Entry_No  
 ,CONVERT(varchar(23), [dbo].[Inv_Receipt_h].[Entry_Date] , @format) as [Entry_Date]  
    ,[dbo].[Inv_Receipt_h].[Entry_Date]  as Entry_Dates
	,[dbo].[Inv_Receipt_h].[Is_Canceled]  as Is_Canceled
    ,[dbo].[mstr_Branch].[Name] as BranchName  
 ,[dbo].[Inv_PaymentType].[Name] as PaymentTypeName  
    ,(CASE WHEN [dbo].[Inv_Receipt_h].[Vendor_ID] IS NOT NULL  THEN  [dbo].[GL_Accounts].[Name] ELSE  
 CASE WHEN [dbo].[Inv_Receipt_h].CashCustomerID IS NOT NULL  THEN  [dbo].[Inv_CashCustomer].[Name] ELSE '' END END  )as CustomerName  
    ,(CASE WHEN [dbo].[Inv_Receipt_h].[Vendor_ID] IS NOT NULL  THEN  [dbo].[GL_Accounts].[Phone] ELSE  
 CASE WHEN [dbo].[Inv_Receipt_h].CashCustomerID IS NOT NULL  THEN  [dbo].[Inv_CashCustomer].[PhoneNumber] ELSE '' END END  )as CustomerPhone  
-- ,[dbo].[Inv_Receipt_h].[NetValue] as [NetValue]  
,((select sum((Qty * Price) - Discount_Value) from Inv_Receipt_d where FinishedProductID is null and Parent_ID = Inv_Receipt_h.ID)- isnull(Discount_Value,0)+ isnull(SurchargeValue,0)) as [NetValue]  
 ,[dbo].[Inv_Receipt_h].[Reference_No] as [Reference_No]  
   ,CASE [Inv_Receipt_h].QuotationStatusId   
 WHEN 1 THEN 'New'   
 WHEN 2 THEN 'Approved'    
 WHEN 3 THEN 'Disapproved'   
 WHEN 4 THEN 'Invoiced'   
 WHEN 5 THEN 'Sales Order'   
 ELSE '-'   
 END as QuotationStatus   
  ,SU.Name as CreatedByName  
  ,SU_employee.Name as EmployeeName  
 ,FS.Name as FromStoreName  
 ,TS.Name as ToStoreName  
 ,ES.StatusName as ERPstatus  
 ,AppS.Status_Name as ApprovalStatus  
 ,SalesT.[Name] as SalesType  
    ,CONVERT(varchar(23), [dbo].[Inv_Receipt_h].ContractStartDate , 101) as ContractStartDate  
 ,CONVERT(varchar(23), [dbo].[Inv_Receipt_h].ContractEndDate , 101) as ContractEndDate  
 ,CASE WHEN [dbo].[Inv_Receipt_h].Code = 11 THEN [dbo].[Inv_Receipt_h].PurchaseOrderStatusId   
        WHEN [dbo].[Inv_Receipt_h].Code = 12 THEN [dbo].[Inv_Receipt_h].PurchaseRequestStatusId  
     WHEN [dbo].[Inv_Receipt_h].Code = 50 THEN [dbo].[Inv_Receipt_h].QuotationStatusId  
     WHEN [dbo].[Inv_Receipt_h].Code = 88 THEN [dbo].[Inv_Receipt_h].SalesOrderStatusId  
    ELSE [dbo].[Inv_Receipt_h].ApprovalStatus_ID END AS ApprovalId  
 FROM [dbo].[Inv_Receipt_h]  
 LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[Inv_Receipt_h].[Vendor_ID]  
 LEFT JOIN [dbo].[Inv_CashCustomer] on [dbo].[Inv_CashCustomer].[id] = [dbo].[Inv_Receipt_h].[CashCustomerID]  
 LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[Inv_Receipt_h].[Branch_ID]  
    LEFT JOIN [dbo].[Inv_PaymentType] on [dbo].[Inv_PaymentType].[ID] = [dbo].[Inv_Receipt_h].[Payment_Type]  
LEFT JOIN [dbo].[Inv_Store] FS on FS.[ID] = [dbo].[Inv_Receipt_h].[FromStoreID]  
 LEFT JOIN [dbo].[Inv_Store] TS on TS.[ID] = [dbo].[Inv_Receipt_h].[ToStoreID]  
 LEFT JOIN [dbo].Security_Users SU on SU.[ID] = [dbo].[Inv_Receipt_h].[CreatedByID]  
 LEFT JOIN [dbo].Security_Users SU_employee on SU_employee.[ID] = [dbo].[Inv_Receipt_h].[Empoyee_ID]  
 LEFT JOIN #ERPstatusTemp ES on ES.[ID] = [dbo].[Inv_Receipt_h].[ERPStatus]  
    LEFT JOIN [dbo].Inv_Receipt_ApprovalStatus AppS on AppS.[ID] = [dbo].[Inv_Receipt_h].ApprovalStatus_ID  
     LEFT JOIN [dbo].Inv_SalesTypes SalesT on SalesT.[ID] = [dbo].[Inv_Receipt_h].SalesTypeID  
  
Where   
([dbo].[Inv_Receipt_h].[SubsidiaryID] = @SubsidiaryID ) AND  
([dbo].[Inv_Receipt_h].[Branch_ID] in (select BranchID from UserBranch where UserID = @UserID) ) AND  
([dbo].[Inv_Receipt_h].[Code] = @ReceiptCode ) AND   
((Cast([dbo].[Inv_Receipt_h].[Entry_No]  as nVarchar(100)) like '%'+@SearchValue+'%' )  OR  
(Cast([dbo].[Inv_Receipt_h].[NetValue]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
(Cast([dbo].[mstr_Branch].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
(Cast([dbo].[Inv_PaymentType].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
(Cast([dbo].[GL_Accounts].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR  
(Cast([dbo].[GL_Accounts].[Phone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR  
(Cast([dbo].[Inv_CashCustomer].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
(Cast([dbo].[Inv_CashCustomer].[PhoneNumber]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR    
(Cast([dbo].[Inv_Receipt_h].[Reference_No]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
(CONVERT(varchar(23), [dbo].[Inv_Receipt_h].[Entry_Date] , @format) like '%'+@SearchValue+'%' ) OR  
(Cast(SU.[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
(Cast(TS.[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
(Cast(FS.[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
(Cast(ES.[StatusName]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR       
(@SearchValue IS NULL) OR (@SearchValue  = ''))  
AND Inv_Receipt_h.Entry_No = CASE WHEN @entryNo > 0 THEN @entryNo ELSE Inv_Receipt_h.Entry_No END  
AND Cast([dbo].[mstr_Branch].[Name]  as nVarchar(100)) = CASE WHEN @branchName !='' THEN @branchName ELSE Cast([dbo].[mstr_Branch].[Name]  as nVarchar(100)) END  
) Receipts  
ORDER BY  
 CASE when @sortOrder <> 'ASC' then ''  
   when @sortColumn = 'BranchName' then BranchName  
   end ASC  
   ,     
    case  
    when @sortOrder <> 'ASC' then 0  
    when @sortColumn = 'Entry_No' then Entry_No  
    end ASC  
,       case  
    when @sortOrder <> 'ASC' then cast(null as date)  
    when @sortColumn = 'Entry_Date' then Entry_Dates  
    end ASC  
   , case  
    when @sortOrder <> 'ASC' then cast(null as date)  
    when @sortColumn = 'ContractStartDate' then ContractStartDate  
    end ASC  
 , case  
    when @sortOrder <> 'ASC' then cast(null as date)  
    when @sortColumn = 'ContractEndDate' then ContractEndDate  
    end ASC  
,       case  
    when @sortOrder <> 'ASC' then 0  
    when @sortColumn = 'NetValue' then NetValue  
    end ASC  
,       case  
    when @sortOrder <> 'ASC' then ''  
    when @sortColumn = 'CustomerName' then CustomerName  
    end ASC  
,       case  
    when @sortOrder <> 'ASC' then ''  
    when @sortColumn = 'CustomerPhone' then CustomerPhone  
    end ASC  
 ,       case  
    when @sortOrder <> 'ASC' then ''  
    when @sortColumn = 'CreatedByName' then CreatedByName  
    end ASC  
 ,       case  
    when @sortOrder <> 'ASC' then ''  
    when @sortColumn = 'FromStoreName' then FromStoreName  
    end ASC  
 ,       case  
    when @sortOrder <> 'ASC' then ''  
    when @sortColumn = 'ToStoreName' then ToStoreName  
    end ASC  
 ,       case  
    when @sortOrder <> 'ASC' then ''  
    when @sortColumn = 'ERPstatus' then ERPstatus  
    end ASC,  
 CASE when @sortOrder <> 'DESC' then ''  
   when @sortColumn = 'BranchName' then BranchName  
   end DESC  
     
,       case  
    when @sortOrder <> 'DESC' then 0  
    when @sortColumn = 'Entry_No' then Entry_No  
    end DESC  
,       case  
    when @sortOrder <> 'DESC' then cast(null as date)  
    when @sortColumn = 'Entry_Date' then Entry_Dates  
    end DESC  
   , case  
    when @sortOrder <> 'DESC' then cast(null as date)  
    when @sortColumn = 'ContractStartDate' then ContractStartDate  
    end DESC  
 , case  
    when @sortOrder <> 'DESC' then cast(null as date)  
    when @sortColumn = 'ContractEndDate' then ContractEndDate  
    end DESC  
,       case  
    when @sortOrder <> 'DESC' then 0  
    when @sortColumn = 'NetValue' then NetValue  
    end DESC  
,       case  
    when @sortOrder <> 'DESC' then ''  
    when @sortColumn = 'CustomerName' then CustomerName  
    end DESC  
,       case  
    when @sortOrder <> 'DESC' then ''  
    when @sortColumn = 'CustomerPhone' then CustomerPhone  
    end DESC  
  ,       case  
    when @sortOrder <> 'DESC' then ''  
    when @sortColumn = 'CreatedByName' then CreatedByName  
    end DESC  
 ,       case  
    when @sortOrder <> 'DESC' then ''  
    when @sortColumn = 'FromStoreName' then FromStoreName  
    end DESC  
 ,       case  
    when @sortOrder <> 'DESC' then ''  
    when @sortColumn = 'ToStoreName' then ToStoreName  
    end ASC  
 ,       case  
    when @sortOrder <> 'DESC' then ''  
    when @sortColumn = 'ERPstatus' then ERPstatus  
    end DESC  
OFFSET     @Skip ROWS         
FETCH NEXT @Take ROWS ONLY;   
  
  END  
  ELSE  
  BEGIN  
  
   Select * From (  SELECT Distinct  
   [dbo].[Inv_Receipt_h].[ID] as ID  
   ,[dbo].[Inv_Receipt_h].[Entry_No] as Entry_No  
   ,CONVERT(varchar(23), [dbo].[Inv_Receipt_h].[Entry_Date] , @format) as [Entry_Date]  
   ,[dbo].[Inv_Receipt_h].[Entry_Date]  as Entry_Dates
   ,[dbo].[Inv_Receipt_h].[Is_Canceled]  as Is_Canceled
   ,[dbo].[mstr_Branch].[Name_AR] as BranchName  
   ,[dbo].[Inv_PaymentType].[Name_AR] as PaymentTypeName  
   ,(CASE WHEN [dbo].[Inv_Receipt_h].[Vendor_ID] IS NOT NULL  THEN  [dbo].[GL_Accounts].[Name_AR] ELSE  
   CASE WHEN [dbo].[Inv_Receipt_h].CashCustomerID IS NOT NULL  THEN  [dbo].[Inv_CashCustomer].[Name_AR] ELSE '' END END  )as CustomerName  
   ,(CASE WHEN [dbo].[Inv_Receipt_h].[Vendor_ID] IS NOT NULL  THEN  [dbo].[GL_Accounts].[Phone] ELSE  
   CASE WHEN [dbo].[Inv_Receipt_h].CashCustomerID IS NOT NULL  THEN  [dbo].[Inv_CashCustomer].[PhoneNumber] ELSE '' END END  )as CustomerPhone  
  -- ,[dbo].[Inv_Receipt_h].[NetValue] as [NetValue]  
  ,((select sum((Qty * Price) - Discount_Value) from Inv_Receipt_d where FinishedProductID is null and Parent_ID = Inv_Receipt_h.ID)- isnull(Discount_Value,0)+ isnull(SurchargeValue,0)) as [NetValue]  
   ,[dbo].[Inv_Receipt_h].[Reference_No] as [Reference_No]  
   ,CASE [Inv_Receipt_h].QuotationStatusId   
   WHEN 1 THEN N'جديد'   
   WHEN 2 THEN N'مقبول'    
   WHEN 3 THEN N'مرفوض'   
   WHEN 4 THEN N'تم عمل فاتوره'   
   WHEN 5 THEN N'تم عمل سند بيع'   
   ELSE '-'   
   END as QuotationStatus  
   ,SU.Name_AR as CreatedByName  
   ,SU_employee.Name_AR as EmployeeName  
   ,FS.Name_AR as FromStoreName  
   ,TS.Name_AR as ToStoreName  
   ,ES.StatusName_AR as ERPstatus  
   ,AppS.Status_Name_Ar as ApprovalStatus  
   ,SalesT.Name_AR as SalesType  
   ,CONVERT(varchar(23), [dbo].[Inv_Receipt_h].ContractStartDate , 101) as ContractStartDate  
   ,CONVERT(varchar(23), [dbo].[Inv_Receipt_h].ContractEndDate , 101) as ContractEndDate  
   ,CASE WHEN [dbo].[Inv_Receipt_h].Code = 11 THEN [dbo].[Inv_Receipt_h].PurchaseOrderStatusId   
        WHEN [dbo].[Inv_Receipt_h].Code = 12 THEN [dbo].[Inv_Receipt_h].PurchaseRequestStatusId  
     WHEN [dbo].[Inv_Receipt_h].Code = 50 THEN [dbo].[Inv_Receipt_h].QuotationStatusId  
     WHEN [dbo].[Inv_Receipt_h].Code = 88 THEN [dbo].[Inv_Receipt_h].SalesOrderStatusId  
    ELSE [dbo].[Inv_Receipt_h].ApprovalStatus_ID END AS ApprovalId  
   FROM [dbo].[Inv_Receipt_h]  
   LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[Inv_Receipt_h].[Vendor_ID]  
   LEFT JOIN [dbo].[Inv_CashCustomer] on [dbo].[Inv_CashCustomer].[id] = [dbo].[Inv_Receipt_h].[CashCustomerID]  
   LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[Inv_Receipt_h].[Branch_ID]  
   LEFT JOIN [dbo].[Inv_PaymentType] on [dbo].[Inv_PaymentType].[ID] = [dbo].[Inv_Receipt_h].[Payment_Type]  
   LEFT JOIN [dbo].[Inv_Store] FS on FS.[ID] = [dbo].[Inv_Receipt_h].[FromStoreID]  
   LEFT JOIN [dbo].[Inv_Store] TS on TS.[ID] = [dbo].[Inv_Receipt_h].[ToStoreID]  
   LEFT JOIN [dbo].Security_Users SU on SU.[ID] = [dbo].[Inv_Receipt_h].[CreatedByID]  
   LEFT JOIN [dbo].Security_Users SU_employee on SU_employee.[ID] = [dbo].[Inv_Receipt_h].[Empoyee_ID]  
   LEFT JOIN #ERPstatusTemp ES on ES.[ID] = [dbo].[Inv_Receipt_h].[ERPStatus]  
   LEFT JOIN [dbo].Inv_Receipt_ApprovalStatus AppS on AppS.[ID] = [dbo].[Inv_Receipt_h].ApprovalStatus_ID  
   LEFT JOIN [dbo].Inv_SalesTypes SalesT on SalesT.[ID] = [dbo].[Inv_Receipt_h].SalesTypeID  
  
   Where   
   ([dbo].[Inv_Receipt_h].[SubsidiaryID] = @SubsidiaryID ) AND  
   ([dbo].[Inv_Receipt_h].[Branch_ID] in (select BranchID from UserBranch where UserID = @UserID) ) AND  
   ([dbo].[Inv_Receipt_h].[Code] = @ReceiptCode ) AND   
   ((Cast([dbo].[Inv_Receipt_h].[Entry_No]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR  
   (Cast([dbo].[Inv_Receipt_h].[NetValue]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
   (Cast([dbo].[Inv_PaymentType].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
   (Cast([dbo].[mstr_Branch].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
   (Cast([dbo].[GL_Accounts].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR  
   (Cast([dbo].[GL_Accounts].[Phone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR  
   (Cast([dbo].[Inv_CashCustomer].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR  
   (Cast([dbo].[Inv_CashCustomer].[PhoneNumber]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
   (Cast([dbo].[Inv_Receipt_h].[Reference_No]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR    
   (CONVERT(varchar(23), [dbo].[Inv_Receipt_h].[Entry_Date] , @format) like '%'+@SearchValue+'%' ) OR      
   (Cast(SU.[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
   (Cast(TS.[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
   (Cast(FS.[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
   (Cast(ES.[StatusName_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR    
   (@SearchValue IS NULL) OR (@SearchValue  = ''))  
   AND Inv_Receipt_h.Entry_No = CASE WHEN @entryNo > 0 THEN @entryNo ELSE Inv_Receipt_h.Entry_No END  
   AND Cast([dbo].[mstr_Branch].[Name_AR]  as nVarchar(100)) = CASE WHEN @branchName !='' THEN @branchName ELSE Cast([dbo].[mstr_Branch].[Name_AR]  as nVarchar(100)) END  
   ) Receipts  
   ORDER BY   
   case  
   when @sortOrder <> 'ASC' then 0  
   when @sortColumn = 'Entry_No' then Entry_No  
   end ASC  
   ,       case  
   when @sortOrder <> 'ASC' then cast(null as date)  
   when @sortColumn = 'Entry_Date' then Entry_Dates  
   end ASC  
   , case  
   when @sortOrder <> 'ASC' then cast(null as date)  
   when @sortColumn = 'ContractStartDate' then ContractStartDate  
   end ASC  
   , case  
   when @sortOrder <> 'ASC' then cast(null as date)  
   when @sortColumn = 'ContractEndDate' then ContractEndDate  
   end ASC  
   ,       case  
   when @sortOrder <> 'ASC' then 0  
   when @sortColumn = 'NetValue' then NetValue  
   end ASC  
   ,       case  
   when @sortOrder <> 'ASC' then ''  
   when @sortColumn = 'CustomerName' then CustomerName  
   end ASC  
   ,       case  
   when @sortOrder <> 'ASC' then ''  
   when @sortColumn = 'CustomerPhone' then CustomerPhone  
   end ASC  
   ,       case  
   when @sortOrder <> 'ASC' then ''  
   when @sortColumn = 'CreatedByName' then CreatedByName  
   end ASC  
   ,       case  
   when @sortOrder <> 'ASC' then ''  
   when @sortColumn = 'FromStoreName' then FromStoreName  
   end ASC  
   ,       case  
   when @sortOrder <> 'ASC' then ''  
   when @sortColumn = 'ToStoreName' then ToStoreName  
   end ASC  
   ,       case  
   when @sortOrder <> 'ASC' then ''  
   when @sortColumn = 'ERPstatus' then ERPstatus  
   end ASC  
  
   ,       case  
   when @sortOrder <> 'DESC' then 0  
   when @sortColumn = 'Entry_No' then Entry_No  
   end DESC  
   ,       case  
   when @sortOrder <> 'DESC' then cast(null as date)  
   when @sortColumn = 'Entry_Date' then Entry_Dates  
   end DESC  
   , case  
   when @sortOrder <> 'DESC' then cast(null as date)  
   when @sortColumn = 'ContractStartDate' then ContractStartDate  
   end DESC  
   , case  
   when @sortOrder <> 'DESC' then cast(null as date)  
   when @sortColumn = 'ContractEndDate' then ContractEndDate  
   end DESC  
   ,       case  
   when @sortOrder <> 'DESC' then 0  
   when @sortColumn = 'NetValue' then NetValue  
   end DESC  
   ,       case  
   when @sortOrder <> 'DESC' then ''  
   when @sortColumn = 'CustomerName' then CustomerName  
   end DESC  
   ,       case  
   when @sortOrder <> 'DESC' then ''  
   when @sortColumn = 'CustomerPhone' then CustomerPhone  
   end DESC  
   ,       case  
   when @sortOrder <> 'DESC' then ''  
   when @sortColumn = 'CreatedByName' then CreatedByName  
   end DESC  
   ,       case  
   when @sortOrder <> 'DESC' then ''  
   when @sortColumn = 'FromStoreName' then FromStoreName  
   end DESC  
   ,       case  
   when @sortOrder <> 'DESC' then ''  
   when @sortColumn = 'ToStoreName' then ToStoreName  
   end DESC  
   ,       case  
   when @sortOrder <> 'DESC' then ''  
   when @sortColumn = 'ERPstatus' then ERPstatus  
   end DESC  
   OFFSET     @Skip ROWS         
   FETCH NEXT @Take ROWS ONLY;   
  
  END  
GO
/****** Object:  StoredProcedure [dbo].[GetAllReceipts_Filter]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetAllReceipts_Filter] --63,1,1019,'en-US',0,100,'','ToStoreName','ASC',0

@SubsidiaryID int ,
@ReceiptCode int ,
@UserID int ,
@Language NVARCHAR(10),
@Skip int = 0,
@Take int = 200,
@SearchValue NVARCHAR(150),
@sortOrder   NVARCHAR(500),
@sortColumn  NVARCHAR(500),
@OpenListForFirstTime bit,
@FromStore int,
@ToStore int,
@DateFrom nvarchar(100),
@DateTo nvarchar(100),
@Schedule_Date nvarchar(100),
@Schedule_ToDate nvarchar(100)

AS
Declare @transferRApprove nvarchar(10) = '0'
if(@ReceiptCode = -1)
begin
set @ReceiptCode = 80
set @transferRApprove = '-1'
end
   if(@OpenListForFirstTime = 1) 
   if(@Language = 'en-US')
   Begin
   SELECT * From (SELECT Distinct
       [dbo].[Inv_Receipt_h].[ID] as ID
      ,[dbo].[Inv_Receipt_h].[Entry_No] as Entry_No
	  ,CONVERT(varchar(23), [dbo].[Inv_Receipt_h].[Entry_Date] , 101) as [Entry_Date]
	  ,[dbo].[Inv_Receipt_h].[Entry_Date]  as Entry_Dates
	   ,CONVERT(varchar(23), [dbo].[Inv_Receipt_h].Schedule_Date , 101) as Schedule_Date
	    ,(select isnull(sum(isnull(d.Qty,0)),0) from Inv_Receipt_d d where d.Parent_ID =[Inv_Receipt_h].ID) totalQty  
      ,[dbo].[mstr_Branch].[Name] as BranchName
	  ,[dbo].[Inv_PaymentType].[Name] as PaymentTypeName
      ,(CASE WHEN ([Inv_Receipt_h].[Vendor_ID] IS NULL And [dbo].[Inv_Receipt_h].CashCustomerID IS NULL ) THEN  QuotationCustomerName ELSE
CASE WHEN [Inv_Receipt_h].[Vendor_ID] IS NOT NULL  THEN  [dbo].[GL_Accounts].[Name] ELSE
	    CASE WHEN [dbo].[Inv_Receipt_h].CashCustomerID IS NOT NULL  THEN  [dbo].[Inv_CashCustomer].[Name] ELSE '' END END END )as CustomerName 
      ,(CASE WHEN [dbo].[Inv_Receipt_h].[Vendor_ID] IS NOT NULL  THEN  [dbo].[GL_Accounts].[Phone] ELSE
	    CASE WHEN [dbo].[Inv_Receipt_h].CashCustomerID IS NOT NULL  THEN  [dbo].[Inv_CashCustomer].[PhoneNumber] ELSE '' END END  )as CustomerPhone
	  ,[dbo].[Inv_Receipt_h].[NetValue] as [NetValue]
	  ,[dbo].[Inv_Receipt_h].[Reference_No] as [Reference_No]
	  ,SU.Name as CreatedByName
	  ,FS.Name as FromStoreName
	  ,TS.Name as ToStoreName
,FS.ID as FromStoreID
	  ,TS.ID as ToStoreID
	  ,ES.StatusName as ERPstatus
	  ,AppS.Status_Name as ApprovalStatus
	  ,SalesT.[Name] as SalesType
	  ,CONVERT(varchar(23), [dbo].[Inv_Receipt_h].ContractStartDate , 101) as ContractStartDate
	  ,CONVERT(varchar(23), [dbo].[Inv_Receipt_h].ContractEndDate , 101) as ContractEndDate
	  --,[Inv_Receipt_h].CreatedByID
	  FROM [dbo].[Inv_Receipt_h]
	  LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[Inv_Receipt_h].[Vendor_ID]
	  LEFT JOIN [dbo].[Inv_CashCustomer] on [dbo].[Inv_CashCustomer].[id] = [dbo].[Inv_Receipt_h].[CashCustomerID]
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[Inv_Receipt_h].[Branch_ID]
	  LEFT JOIN [dbo].[Inv_PaymentType] on [dbo].[Inv_PaymentType].[ID] = [dbo].[Inv_Receipt_h].[Payment_Type]
	  LEFT JOIN [dbo].[Inv_Store] FS on FS.[ID] = [dbo].[Inv_Receipt_h].[FromStoreID]
	  LEFT JOIN [dbo].[Inv_Store] TS on TS.[ID] = [dbo].[Inv_Receipt_h].[ToStoreID]
	  LEFT JOIN [dbo].Security_Users SU on SU.[ID] = [dbo].[Inv_Receipt_h].[CreatedByID]
	  LEFT JOIN [dbo].ERPStatus ES on ES.[ID] = [dbo].[Inv_Receipt_h].[ERPStatus]
	  LEFT JOIN [dbo].Inv_Receipt_ApprovalStatus AppS on AppS.[ID] = [dbo].[Inv_Receipt_h].ApprovalStatus_ID
	  LEFT JOIN [dbo].Inv_SalesTypes SalesT on SalesT.[ID] = [dbo].[Inv_Receipt_h].SalesTypeID

 Where 
 ([dbo].[Inv_Receipt_h].[SubsidiaryID] = @SubsidiaryID ) AND
 ([dbo].[Inv_Receipt_h].[ToStoreID] in (select b.StoreID from UserBranch u join mstr_Branch B on
u.BranchID = b.ID where UserID = @UserID) ) AND
  (([dbo].[Inv_Receipt_h].[Code] = @ReceiptCode and @transferRApprove <> '-1' ) or ([dbo].[Inv_Receipt_h].[Code] = @ReceiptCode and @transferRApprove = '-1'  and ([Inv_Receipt_h].isApproved = 0 or [Inv_Receipt_h].isApproved is null))) AND 
 ((Cast([dbo].[Inv_Receipt_h].[Entry_No]  as nVarchar(100)) like '%'+@SearchValue+'%' )  OR
    (Cast([dbo].[Inv_Receipt_h].[NetValue]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[mstr_Branch].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[Inv_PaymentType].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[GL_Accounts].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[GL_Accounts].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[GL_Accounts].[Phone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[Inv_CashCustomer].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[Inv_CashCustomer].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[Inv_CashCustomer].[PhoneNumber]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR  
  (Cast([dbo].[Inv_Receipt_h].[Reference_No]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR  
 (CONVERT(varchar(23), [dbo].[Inv_Receipt_h].[Entry_Date] , 101) like '%'+@SearchValue+'%' ) OR  
 (Cast(SU.[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast(TS.[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast(FS.[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast(ES.[StatusName]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
 (Cast(SU.[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast(TS.[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast(FS.[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast(ES.[StatusName_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (@SearchValue IS NULL) OR (@SearchValue  = ''))
And ((Entry_Date >= @DateFrom and Entry_Date <= @DateTo)or @DateFrom is null)
And ((Schedule_Date >= @Schedule_Date and Schedule_Date <= @Schedule_ToDate)or @Schedule_Date is null)
And ((FS.ID = @FromStore )or @FromStore = 0)
And ((TS.ID = @ToStore )or @ToStore = 0)
And ([Inv_Receipt_h].[ERPStatus] =1 or [Inv_Receipt_h].[ERPStatus] is null or [Inv_Receipt_h].[ERPStatus] =0)
 ) Receipts
  ORDER BY BranchName ,
        case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Entry_No' then Entry_No
        end ASC
,       case
        when @sortOrder <> 'ASC' then cast(null as date)
        when @sortColumn = 'Entry_Date' then Entry_Dates
        end ASC
		, case
        when @sortOrder <> 'ASC' then cast(null as date)
        when @sortColumn = 'ContractStartDate' then ContractStartDate
        end ASC
		, case
        when @sortOrder <> 'ASC' then cast(null as date)
        when @sortColumn = 'ContractEndDate' then ContractEndDate
        end ASC
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'NetValue' then NetValue
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CustomerName' then CustomerName
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CustomerPhone' then CustomerPhone
        end ASC

,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CreatedByName' then CreatedByName
        end ASC
		,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'FromStoreName' then FromStoreName
        end ASC
		,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'ToStoreName' then FromStoreName
        end ASC
		,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'ERPstatus' then ERPstatus
        end ASC

,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Entry_No' then Entry_No
        end DESC
,       case
        when @sortOrder <> 'DESC' then cast(null as date)
        when @sortColumn = 'Entry_Date' then Entry_Dates
        end DESC
		, case
        when @sortOrder <> 'DESC' then cast(null as date)
        when @sortColumn = 'ContractStartDate' then ContractStartDate
        end DESC
		, case
        when @sortOrder <> 'DESC' then cast(null as date)
        when @sortColumn = 'ContractEndDate' then ContractEndDate
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'NetValue' then NetValue
        end DESC 
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CustomerName' then CustomerName
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CustomerPhone' then CustomerPhone
        end DESC

		,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CreatedByName' then CreatedByName
        end DESC
		,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'FromStoreName' then FromStoreName
        end DESC
		,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'ToStoreName' then ToStoreName
        end DESC
		,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'ERPstatus' then ERPstatus
        end DESC


  OFFSET     @Skip ROWS       
  FETCH NEXT @Take ROWS ONLY; 
  END
  else
     Begin
 Select * From(  SELECT Distinct
       [dbo].[Inv_Receipt_h].[ID] as ID
      ,[dbo].[Inv_Receipt_h].[Entry_No] as Entry_No
      ,CONVERT(varchar(23), [dbo].[Inv_Receipt_h].[Entry_Date] , 101) as [Entry_Date]
      ,[dbo].[Inv_Receipt_h].[Entry_Date]  as Entry_Dates
	  ,CONVERT(varchar(23), [dbo].[Inv_Receipt_h].Schedule_Date , 101) as Schedule_Date	
	    ,(select isnull(sum(isnull(d.Qty,0)),0) from Inv_Receipt_d d where d.Parent_ID =[Inv_Receipt_h].ID) totalQty   
      ,[dbo].[mstr_Branch].[Name_AR] as BranchName
	  ,[dbo].[Inv_PaymentType].[Name_AR] as PaymentTypeName
      ,(CASE WHEN ([Inv_Receipt_h].[Vendor_ID] IS NULL And [dbo].[Inv_Receipt_h].CashCustomerID IS NULL ) THEN  QuotationCustomerName ELSE
CASE WHEN [Inv_Receipt_h].[Vendor_ID] IS NOT NULL  THEN  [dbo].[GL_Accounts].Name_AR ELSE
	    CASE WHEN [dbo].[Inv_Receipt_h].CashCustomerID IS NOT NULL  THEN  [dbo].[Inv_CashCustomer].[Name_AR] ELSE '' END END END )as CustomerName 
      ,(CASE WHEN [dbo].[Inv_Receipt_h].[Vendor_ID] IS NOT NULL  THEN  [dbo].[GL_Accounts].[Phone] ELSE
	    CASE WHEN [dbo].[Inv_Receipt_h].CashCustomerID IS NOT NULL  THEN  [dbo].[Inv_CashCustomer].[PhoneNumber] ELSE '' END END  )as CustomerPhone
	  ,[dbo].[Inv_Receipt_h].[NetValue] as [NetValue]
	    ,[dbo].[Inv_Receipt_h].[Reference_No] as [Reference_No]
		  ,SU.Name_AR as CreatedByName
	  ,FS.Name_AR as FromStoreName
	  ,TS.Name_AR as ToStoreName
,FS.ID as FromStoreID
	  ,TS.ID as ToStoreID
	  ,ES.StatusName_AR as ERPstatus
	  ,AppS.Status_Name_Ar as ApprovalStatus
	  ,SalesT.Name_AR as SalesType
	  	  ,CONVERT(varchar(23), [dbo].[Inv_Receipt_h].ContractStartDate , 101) as ContractStartDate
	  ,CONVERT(varchar(23), [dbo].[Inv_Receipt_h].ContractEndDate , 101) as ContractEndDate
	  FROM [dbo].[Inv_Receipt_h]
	  LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[Inv_Receipt_h].[Vendor_ID]
	  LEFT JOIN [dbo].[Inv_CashCustomer] on [dbo].[Inv_CashCustomer].[id] = [dbo].[Inv_Receipt_h].[CashCustomerID]
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[Inv_Receipt_h].[Branch_ID]
	  LEFT JOIN [dbo].[Inv_PaymentType] on [dbo].[Inv_PaymentType].[ID] = [dbo].[Inv_Receipt_h].[Payment_Type]
	  LEFT JOIN [dbo].[Inv_Store] FS on FS.[ID] = [dbo].[Inv_Receipt_h].[FromStoreID]
	  LEFT JOIN [dbo].[Inv_Store] TS on TS.[ID] = [dbo].[Inv_Receipt_h].[ToStoreID]
	  LEFT JOIN [dbo].Security_Users SU on SU.[ID] = [dbo].[Inv_Receipt_h].[CreatedByID]
	  LEFT JOIN [dbo].ERPStatus ES on ES.[ID] = [dbo].[Inv_Receipt_h].[ERPStatus]
	  	  LEFT JOIN [dbo].Inv_Receipt_ApprovalStatus AppS on AppS.[ID] = [dbo].[Inv_Receipt_h].ApprovalStatus_ID
		  	  LEFT JOIN [dbo].Inv_SalesTypes SalesT on SalesT.[ID] = [dbo].[Inv_Receipt_h].SalesTypeID

 Where 
 ([dbo].[Inv_Receipt_h].[SubsidiaryID] = @SubsidiaryID ) AND
   ([dbo].[Inv_Receipt_h].[ToStoreID] in (select b.StoreID from UserBranch u join mstr_Branch B on
u.BranchID = b.ID where UserID = @UserID) ) AND
   (([dbo].[Inv_Receipt_h].[Code] = @ReceiptCode and @transferRApprove <> '-1' ) or ([dbo].[Inv_Receipt_h].[Code] = @ReceiptCode and @transferRApprove = '-1'  and ([Inv_Receipt_h].isApproved = 0 or [Inv_Receipt_h].isApproved is null))) AND 
 ((Cast([dbo].[Inv_Receipt_h].[Entry_No]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
    (Cast([dbo].[Inv_Receipt_h].[NetValue]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[Inv_PaymentType].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[mstr_Branch].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[GL_Accounts].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[GL_Accounts].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[GL_Accounts].[Phone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[Inv_CashCustomer].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[Inv_CashCustomer].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[Inv_CashCustomer].[PhoneNumber]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR  
 (Cast([dbo].[Inv_Receipt_h].[Reference_No]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (CONVERT(varchar(23), [dbo].[Inv_Receipt_h].[Entry_Date] , 101) like '%'+@SearchValue+'%' ) OR 
 (Cast(SU.[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast(TS.[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast(FS.[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast(ES.[StatusName]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR  
 (Cast(SU.[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast(TS.[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast(FS.[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast(ES.[StatusName_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (@SearchValue IS NULL) OR (@SearchValue  = ''))
And ((Entry_Date >= @DateFrom and Entry_Date <= @DateTo)or @DateFrom is null)
And ((Schedule_Date >= @Schedule_Date and Schedule_Date <= @Schedule_ToDate)or @Schedule_Date is null)
And ((FS.ID = @FromStore )or @FromStore = 0)
And ((TS.ID = @ToStore )or @ToStore = 0)
And ([Inv_Receipt_h].[ERPStatus] =1 or [Inv_Receipt_h].[ERPStatus] is null or [Inv_Receipt_h].[ERPStatus] =0)
 ) Receipts
    ORDER BY BranchName ,
        case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Entry_No' then Entry_No
        end ASC
,       case
        when @sortOrder <> 'ASC' then cast(null as date)
        when @sortColumn = 'Entry_Date' then Entry_Dates
        end ASC
				, case
        when @sortOrder <> 'ASC' then cast(null as date)
        when @sortColumn = 'ContractStartDate' then ContractStartDate
        end ASC
		, case
        when @sortOrder <> 'ASC' then cast(null as date)
        when @sortColumn = 'ContractEndDate' then ContractEndDate
        end ASC
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'NetValue' then NetValue
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CustomerName' then CustomerName
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CustomerPhone' then CustomerPhone
        end ASC
		,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CreatedByName' then CreatedByName
        end ASC
		,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'FromStoreName' then FromStoreName
        end ASC
		,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'ToStoreName' then ToStoreName
        end ASC
		,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'ERPstatus' then ERPstatus
        end ASC

,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Entry_No' then Entry_No
        end DESC
,       case
        when @sortOrder <> 'DESC' then cast(null as date)
        when @sortColumn = 'Entry_Date' then Entry_Dates
        end DESC
				, case
        when @sortOrder <> 'DESC' then cast(null as date)
        when @sortColumn = 'ContractStartDate' then ContractStartDate
        end DESC
		, case
        when @sortOrder <> 'DESC' then cast(null as date)
        when @sortColumn = 'ContractEndDate' then ContractEndDate
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'NetValue' then NetValue
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CustomerName' then CustomerName
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CustomerPhone' then CustomerPhone
        end DESC
			,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CreatedByName' then CreatedByName
        end DESC
		,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'FromStoreName' then FromStoreName
        end DESC
		,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'ToStoreName' then ToStoreName
        end DESC
		,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'ERPstatus' then ERPstatus
        end DESC
  OFFSET     @Skip ROWS       
  FETCH NEXT @Take ROWS ONLY; 
  END
  else
    if(@Language = 'en-US')
   Begin
   Select * From (SELECT Distinct
       [dbo].[Inv_Receipt_h].[ID] as ID
      ,[dbo].[Inv_Receipt_h].[Entry_No] as Entry_No
	  ,CONVERT(varchar(23), [dbo].[Inv_Receipt_h].[Entry_Date] , 101) as [Entry_Date]
      ,[dbo].[Inv_Receipt_h].[Entry_Date]  as Entry_Dates
	  ,CONVERT(varchar(23), [dbo].[Inv_Receipt_h].Schedule_Date , 101) as Schedule_Date 
	    ,(select isnull(sum(isnull(d.Qty,0)),0) from Inv_Receipt_d d where d.Parent_ID =[Inv_Receipt_h].ID) totalQty  	  
      ,[dbo].[mstr_Branch].[Name] as BranchName
	  ,[dbo].[Inv_PaymentType].[Name] as PaymentTypeName
      ,(CASE WHEN [dbo].[Inv_Receipt_h].[Vendor_ID] IS NOT NULL  THEN  [dbo].[GL_Accounts].[Name] ELSE
	    CASE WHEN [dbo].[Inv_Receipt_h].CashCustomerID IS NOT NULL  THEN  [dbo].[Inv_CashCustomer].[Name] ELSE '' END END  )as CustomerName
      ,(CASE WHEN [dbo].[Inv_Receipt_h].[Vendor_ID] IS NOT NULL  THEN  [dbo].[GL_Accounts].[Phone] ELSE
	    CASE WHEN [dbo].[Inv_Receipt_h].CashCustomerID IS NOT NULL  THEN  [dbo].[Inv_CashCustomer].[PhoneNumber] ELSE '' END END  )as CustomerPhone
	  ,[dbo].[Inv_Receipt_h].[NetValue] as [NetValue]
	    ,[dbo].[Inv_Receipt_h].[Reference_No] as [Reference_No]
		  ,SU.Name as CreatedByName
	  ,FS.Name as FromStoreName
	  ,TS.Name as ToStoreName
,FS.ID as FromStoreID
	  ,TS.ID as ToStoreID
	  ,ES.StatusName as ERPstatus
	  ,AppS.Status_Name as ApprovalStatus
	  ,SalesT.[Name] as SalesType
	  	  ,CONVERT(varchar(23), [dbo].[Inv_Receipt_h].ContractStartDate , 101) as ContractStartDate
	  ,CONVERT(varchar(23), [dbo].[Inv_Receipt_h].ContractEndDate , 101) as ContractEndDate
	  FROM [dbo].[Inv_Receipt_h]
	  LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[Inv_Receipt_h].[Vendor_ID]
	  LEFT JOIN [dbo].[Inv_CashCustomer] on [dbo].[Inv_CashCustomer].[id] = [dbo].[Inv_Receipt_h].[CashCustomerID]
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[Inv_Receipt_h].[Branch_ID]
	  	  LEFT JOIN [dbo].[Inv_PaymentType] on [dbo].[Inv_PaymentType].[ID] = [dbo].[Inv_Receipt_h].[Payment_Type]
 LEFT JOIN [dbo].[Inv_Store] FS on FS.[ID] = [dbo].[Inv_Receipt_h].[FromStoreID]
	  LEFT JOIN [dbo].[Inv_Store] TS on TS.[ID] = [dbo].[Inv_Receipt_h].[ToStoreID]
	  LEFT JOIN [dbo].Security_Users SU on SU.[ID] = [dbo].[Inv_Receipt_h].[CreatedByID]
	  LEFT JOIN [dbo].ERPStatus ES on ES.[ID] = [dbo].[Inv_Receipt_h].[ERPStatus]
	  	  LEFT JOIN [dbo].Inv_Receipt_ApprovalStatus AppS on AppS.[ID] = [dbo].[Inv_Receipt_h].ApprovalStatus_ID
		  	  LEFT JOIN [dbo].Inv_SalesTypes SalesT on SalesT.[ID] = [dbo].[Inv_Receipt_h].SalesTypeID

 Where 
 ([dbo].[Inv_Receipt_h].[SubsidiaryID] = @SubsidiaryID ) AND
  ([dbo].[Inv_Receipt_h].[ToStoreID] in (select b.StoreID from UserBranch u join mstr_Branch B on
u.BranchID = b.ID where UserID = @UserID) ) AND
  (([dbo].[Inv_Receipt_h].[Code] = @ReceiptCode and @transferRApprove <> '-1' ) or ([dbo].[Inv_Receipt_h].[Code] = @ReceiptCode and @transferRApprove = '-1'  and ([Inv_Receipt_h].isApproved = 0 or [Inv_Receipt_h].isApproved is null))) AND 
 ((Cast([dbo].[Inv_Receipt_h].[Entry_No]  as nVarchar(100)) like '%'+@SearchValue+'%' )  OR
    (Cast([dbo].[Inv_Receipt_h].[NetValue]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[mstr_Branch].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[Inv_PaymentType].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[GL_Accounts].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[GL_Accounts].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[GL_Accounts].[Phone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[Inv_CashCustomer].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[Inv_CashCustomer].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[Inv_CashCustomer].[PhoneNumber]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR  
 (Cast([dbo].[Inv_Receipt_h].[Reference_No]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (CONVERT(varchar(23), [dbo].[Inv_Receipt_h].[Entry_Date] , 101) like '%'+@SearchValue+'%' ) OR
 (Cast(SU.[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast(TS.[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast(FS.[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast(ES.[StatusName]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR  
 (Cast(SU.[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast(TS.[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast(FS.[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast(ES.[StatusName_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR     
 (@SearchValue IS NULL) OR (@SearchValue  = ''))
And ((Entry_Date >= @DateFrom and Entry_Date <= @DateTo)or @DateFrom is null)
And ((Schedule_Date >= @Schedule_Date and Schedule_Date <= @Schedule_ToDate)or @Schedule_Date is null)
And ((FS.ID = @FromStore )or @FromStore = 0)
And ((TS.ID = @ToStore )or @ToStore = 0)
And ([Inv_Receipt_h].[ERPStatus] =1 or [Inv_Receipt_h].[ERPStatus] is null or [Inv_Receipt_h].[ERPStatus] =0)
 ) Receipts
  ORDER BY
        case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Entry_No' then Entry_No
        end ASC
,       case
        when @sortOrder <> 'ASC' then cast(null as date)
        when @sortColumn = 'Entry_Date' then Entry_Dates
        end ASC
				, case
        when @sortOrder <> 'ASC' then cast(null as date)
        when @sortColumn = 'ContractStartDate' then ContractStartDate
        end ASC
		, case
        when @sortOrder <> 'ASC' then cast(null as date)
        when @sortColumn = 'ContractEndDate' then ContractEndDate
        end ASC
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'NetValue' then NetValue
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CustomerName' then CustomerName
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CustomerPhone' then CustomerPhone
        end ASC
		,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CreatedByName' then CreatedByName
        end ASC
		,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'FromStoreName' then FromStoreName
        end ASC
		,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'ToStoreName' then ToStoreName
        end ASC
		,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'ERPstatus' then ERPstatus
        end ASC

,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Entry_No' then Entry_No
        end DESC
,       case
        when @sortOrder <> 'DESC' then cast(null as date)
        when @sortColumn = 'Entry_Date' then Entry_Dates
        end DESC
				, case
        when @sortOrder <> 'DESC' then cast(null as date)
        when @sortColumn = 'ContractStartDate' then ContractStartDate
        end DESC
		, case
        when @sortOrder <> 'DESC' then cast(null as date)
        when @sortColumn = 'ContractEndDate' then ContractEndDate
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'NetValue' then NetValue
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CustomerName' then CustomerName
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CustomerPhone' then CustomerPhone
        end DESC
			,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CreatedByName' then CreatedByName
        end DESC
		,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'FromStoreName' then FromStoreName
        end DESC
		,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'ToStoreName' then ToStoreName
        end ASC
		,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'ERPstatus' then ERPstatus
        end DESC
  OFFSET     @Skip ROWS       
  FETCH NEXT @Take ROWS ONLY; 
  END
  else
     Begin
  Select * From (  SELECT Distinct
       [dbo].[Inv_Receipt_h].[ID] as ID
      ,[dbo].[Inv_Receipt_h].[Entry_No] as Entry_No
      ,CONVERT(varchar(23), [dbo].[Inv_Receipt_h].[Entry_Date] , 101) as [Entry_Date]
      ,[dbo].[Inv_Receipt_h].[Entry_Date]  as Entry_Dates
	  ,CONVERT(varchar(23), [dbo].[Inv_Receipt_h].Schedule_Date , 101) as Schedule_Date 
	    ,(select isnull(sum(isnull(d.Qty,0)),0) from Inv_Receipt_d d where d.Parent_ID =[Inv_Receipt_h].ID)	totalQty 
      ,[dbo].[mstr_Branch].[Name_AR] as BranchName
	  ,[dbo].[Inv_PaymentType].[Name_AR] as PaymentTypeName
      ,(CASE WHEN [dbo].[Inv_Receipt_h].[Vendor_ID] IS NOT NULL  THEN  [dbo].[GL_Accounts].[Name_AR] ELSE
	    CASE WHEN [dbo].[Inv_Receipt_h].CashCustomerID IS NOT NULL  THEN  [dbo].[Inv_CashCustomer].[Name_AR] ELSE '' END END  )as CustomerName
      ,(CASE WHEN [dbo].[Inv_Receipt_h].[Vendor_ID] IS NOT NULL  THEN  [dbo].[GL_Accounts].[Phone] ELSE
	    CASE WHEN [dbo].[Inv_Receipt_h].CashCustomerID IS NOT NULL  THEN  [dbo].[Inv_CashCustomer].[PhoneNumber] ELSE '' END END  )as CustomerPhone
	  ,[dbo].[Inv_Receipt_h].[NetValue] as [NetValue]
	    ,[dbo].[Inv_Receipt_h].[Reference_No] as [Reference_No]
		  ,SU.Name_AR as CreatedByName
	  ,FS.Name_AR as FromStoreName
	  ,TS.Name_AR as ToStoreName
,FS.ID as FromStoreID
	  ,TS.ID as ToStoreID
	  ,ES.StatusName_AR as ERPstatus
	  ,AppS.Status_Name_Ar as ApprovalStatus
	  ,SalesT.Name_AR as SalesType
	  	  ,CONVERT(varchar(23), [dbo].[Inv_Receipt_h].ContractStartDate , 101) as ContractStartDate
	  ,CONVERT(varchar(23), [dbo].[Inv_Receipt_h].ContractEndDate , 101) as ContractEndDate
	  FROM [dbo].[Inv_Receipt_h]
	  LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[Inv_Receipt_h].[Vendor_ID]
	  LEFT JOIN [dbo].[Inv_CashCustomer] on [dbo].[Inv_CashCustomer].[id] = [dbo].[Inv_Receipt_h].[CashCustomerID]
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[Inv_Receipt_h].[Branch_ID]
	  	  LEFT JOIN [dbo].[Inv_PaymentType] on [dbo].[Inv_PaymentType].[ID] = [dbo].[Inv_Receipt_h].[Payment_Type]
 LEFT JOIN [dbo].[Inv_Store] FS on FS.[ID] = [dbo].[Inv_Receipt_h].[FromStoreID]
	  LEFT JOIN [dbo].[Inv_Store] TS on TS.[ID] = [dbo].[Inv_Receipt_h].[ToStoreID]
	  LEFT JOIN [dbo].Security_Users SU on SU.[ID] = [dbo].[Inv_Receipt_h].[CreatedByID]
	  LEFT JOIN [dbo].ERPStatus ES on ES.[ID] = [dbo].[Inv_Receipt_h].[ERPStatus]
	  	  LEFT JOIN [dbo].Inv_Receipt_ApprovalStatus AppS on AppS.[ID] = [dbo].[Inv_Receipt_h].ApprovalStatus_ID
		  	  LEFT JOIN [dbo].Inv_SalesTypes SalesT on SalesT.[ID] = [dbo].[Inv_Receipt_h].SalesTypeID

 Where 
 ([dbo].[Inv_Receipt_h].[SubsidiaryID] = @SubsidiaryID ) AND
   ([dbo].[Inv_Receipt_h].[ToStoreID] in (select b.StoreID from UserBranch u join mstr_Branch B on
u.BranchID = b.ID where UserID = @UserID) ) AND
   (([dbo].[Inv_Receipt_h].[Code] = @ReceiptCode and @transferRApprove <> '-1' ) or ([dbo].[Inv_Receipt_h].[Code] = @ReceiptCode and @transferRApprove = '-1'  and ([Inv_Receipt_h].isApproved = 0 or [Inv_Receipt_h].isApproved is null))) AND 
 ((Cast([dbo].[Inv_Receipt_h].[Entry_No]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
    (Cast([dbo].[Inv_Receipt_h].[NetValue]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[Inv_PaymentType].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[mstr_Branch].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[GL_Accounts].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[GL_Accounts].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[GL_Accounts].[Phone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[Inv_CashCustomer].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[Inv_CashCustomer].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[Inv_CashCustomer].[PhoneNumber]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[Inv_Receipt_h].[Reference_No]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR  
 (CONVERT(varchar(23), [dbo].[Inv_Receipt_h].[Entry_Date] , 101) like '%'+@SearchValue+'%' ) OR 
 (Cast(SU.[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast(TS.[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast(FS.[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast(ES.[StatusName]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR    
 (Cast(SU.[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast(TS.[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast(FS.[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast(ES.[StatusName_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR  
 (@SearchValue IS NULL) OR (@SearchValue  = ''))
And ((Entry_Date >= @DateFrom and Entry_Date <= @DateTo)or @DateFrom is null)
And ((Schedule_Date >= @Schedule_Date and Schedule_Date <= @Schedule_ToDate)or @Schedule_Date is null)
And ((FS.ID = @FromStore )or @FromStore = 0)
And ((TS.ID = @ToStore )or @ToStore = 0)
And ([Inv_Receipt_h].[ERPStatus] =1 or [Inv_Receipt_h].[ERPStatus] is null or [Inv_Receipt_h].[ERPStatus] =0)
 ) Receipts
    ORDER BY 
        case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Entry_No' then Entry_No
        end ASC
,       case
        when @sortOrder <> 'ASC' then cast(null as date)
        when @sortColumn = 'Entry_Date' then Entry_Dates
        end ASC
					, case
        when @sortOrder <> 'ASC' then cast(null as date)
        when @sortColumn = 'ContractStartDate' then ContractStartDate
        end ASC
		, case
        when @sortOrder <> 'ASC' then cast(null as date)
        when @sortColumn = 'ContractEndDate' then ContractEndDate
        end ASC
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'NetValue' then NetValue
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CustomerName' then CustomerName
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CustomerPhone' then CustomerPhone
        end ASC
		,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CreatedByName' then CreatedByName
        end ASC
		,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'FromStoreName' then FromStoreName
        end ASC
		,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'ToStoreName' then ToStoreName
        end ASC
		,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'ERPstatus' then ERPstatus
        end ASC

,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Entry_No' then Entry_No
        end DESC
,       case
        when @sortOrder <> 'DESC' then cast(null as date)
        when @sortColumn = 'Entry_Date' then Entry_Dates
        end DESC
					, case
        when @sortOrder <> 'DESC' then cast(null as date)
        when @sortColumn = 'ContractStartDate' then ContractStartDate
        end DESC
		, case
        when @sortOrder <> 'DESC' then cast(null as date)
        when @sortColumn = 'ContractEndDate' then ContractEndDate
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'NetValue' then NetValue
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CustomerName' then CustomerName
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CustomerPhone' then CustomerPhone
        end DESC
			,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CreatedByName' then CreatedByName
        end DESC
		,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'FromStoreName' then FromStoreName
        end DESC
		,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'ToStoreName' then ToStoreName
        end DESC
		,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'ERPstatus' then ERPstatus
        end DESC
  OFFSET     @Skip ROWS       
  FETCH NEXT @Take ROWS ONLY; 
  END
GO
/****** Object:  StoredProcedure [dbo].[GetAllReceiptsCount]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetAllReceiptsCount] --1 ,51,13, 'en-US',''

@SubsidiaryID int ,
@ReceiptCode int ,
@UserID int ,
@Language NVARCHAR(10),
@SearchValue NVARCHAR(150),
@branchName NVARCHAR(1000) = '',
@entryNo int = 0,
@appoveId int =0

AS

  declare @format int = 103
  SET @format = ( select CASE WHEN Date_format = 'MM/dd/yyyy' THEN  101 ELSE 103 END from mstr_Subsidaries WHERE ID = @SubsidiaryID )

--CREATE TABLE #ERPstatusTemp

--(

--ID int NOT NULL,

--StatusName nvarchar(200),

--StatusName_AR nvarchar(200)

--)
--insert into #ERPstatusTemp
--values (1,N'New',N'جديد')
--insert into #ERPstatusTemp
--values (2,N'PartiallyReceived',N'الاستلام الجزئي')
--insert into #ERPstatusTemp
--values (3,N'Received',N'تم الاستلام')


   if(@Language = 'en-US')
   Begin
      	SELECT  COUNT(cashSales.ID) as Count
	from
  (
   SELECT Distinct
       [dbo].[Inv_Receipt_h].[ID] as ID
      ,[dbo].[Inv_Receipt_h].[Entry_No] as Entry_No
	  ,CONVERT(varchar(23), [dbo].[Inv_Receipt_h].[Entry_Date] , @format) as [Entry_Date]
      ,[dbo].[mstr_Branch].[Name] as BranchName
      ,(CASE WHEN [dbo].[Inv_Receipt_h].[Vendor_ID] IS NOT NULL  THEN  [dbo].[GL_Accounts].[Name] ELSE
	    CASE WHEN [dbo].[Inv_Receipt_h].CashCustomerID IS NOT NULL  THEN  [dbo].[Inv_CashCustomer].[Name] ELSE '' END END  )as CustomerName
      ,(CASE WHEN [dbo].[Inv_Receipt_h].[Vendor_ID] IS NOT NULL  THEN  [dbo].[GL_Accounts].[Phone] ELSE
	    CASE WHEN [dbo].[Inv_Receipt_h].CashCustomerID IS NOT NULL  THEN  [dbo].[Inv_CashCustomer].[PhoneNumber] ELSE '' END END  )as CustomerPhone
	  ,[dbo].[Inv_Receipt_h].[NetValue] as NetValue
	  FROM [dbo].[Inv_Receipt_h]
	  LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[Inv_Receipt_h].[Vendor_ID]
	  LEFT JOIN [dbo].[Inv_CashCustomer] on [dbo].[Inv_CashCustomer].[id] = [dbo].[Inv_Receipt_h].[CashCustomerID]
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[Inv_Receipt_h].[Branch_ID]
      LEFT JOIN [dbo].Security_Users SU on SU.[ID] = [dbo].[Inv_Receipt_h].[CreatedByID]
	 -- LEFT JOIN #ERPstatusTemp ES on ES.[ID] = [dbo].[Inv_Receipt_h].[ERPStatus]
	 
 Where 
 ([dbo].[Inv_Receipt_h].[SubsidiaryID] = @SubsidiaryID ) AND
  ([dbo].[Inv_Receipt_h].[Branch_ID] in (select BranchID from UserBranch where UserID = @UserID) ) AND
   ([dbo].[Inv_Receipt_h].[Code] = @ReceiptCode ) AND -- 
 ((Cast([dbo].[Inv_Receipt_h].[Entry_No]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
    (Cast([dbo].[Inv_Receipt_h].[NetValue]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[mstr_Branch].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[mstr_Branch].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[GL_Accounts].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[GL_Accounts].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[GL_Accounts].[Phone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[Inv_CashCustomer].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[Inv_CashCustomer].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[Inv_CashCustomer].[PhoneNumber]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR  
 (CONVERT(varchar(23), [dbo].[Inv_Receipt_h].[Entry_Date] , @format) like '%'+@SearchValue+'%' ) OR  
(Cast(SU.[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
-- (Cast(ES.[StatusName]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR  
(@SearchValue IS NULL) OR (@SearchValue  = ''))
AND Inv_Receipt_h.Entry_No = CASE WHEN @entryNo > 0 THEN @entryNo ELSE Inv_Receipt_h.Entry_No END
AND Cast([dbo].[mstr_Branch].[Name]  as nVarchar(100)) = CASE WHEN @branchName !='' THEN @branchName ELSE Cast([dbo].[mstr_Branch].[Name]  as nVarchar(100)) END
AND (CASE WHEN [dbo].[Inv_Receipt_h].Code = 11 THEN ISNULL([dbo].[Inv_Receipt_h].PurchaseOrderStatusId,0) 
			     WHEN [dbo].[Inv_Receipt_h].Code = 12 THEN ISNULL([dbo].[Inv_Receipt_h].PurchaseRequestStatusId,0) 
				 WHEN [dbo].[Inv_Receipt_h].Code = 50 THEN ISNULL([dbo].[Inv_Receipt_h].QuotationStatusId,0) 
				 WHEN [dbo].[Inv_Receipt_h].Code = 88 THEN ISNULL([dbo].[Inv_Receipt_h].SalesOrderStatusId,0) 
				 ELSE ISNULL([dbo].[Inv_Receipt_h].ApprovalStatus_ID,0) END ) = CASE WHEN @appoveId > 0 
																		THEN @appoveId 
																		ELSE 
																			(CASE WHEN [dbo].[Inv_Receipt_h].Code = 11 THEN ISNULL([dbo].[Inv_Receipt_h].PurchaseOrderStatusId,0) 
																			 WHEN [dbo].[Inv_Receipt_h].Code = 12 THEN ISNULL([dbo].[Inv_Receipt_h].PurchaseRequestStatusId,0) 
																			 WHEN [dbo].[Inv_Receipt_h].Code = 50 THEN ISNULL([dbo].[Inv_Receipt_h].QuotationStatusId,0) 
																			 WHEN [dbo].[Inv_Receipt_h].Code = 88 THEN ISNULL([dbo].[Inv_Receipt_h].SalesOrderStatusId,0) 
																			 ELSE ISNULL([dbo].[Inv_Receipt_h].ApprovalStatus_ID,0) END ) 
																		 END
 )cashSales
  END
  else
     Begin
	    	SELECT  COUNT(cashSales.ID) as Count
	from
  (
   SELECT Distinct
       [dbo].[Inv_Receipt_h].[ID] as ID
      ,[dbo].[Inv_Receipt_h].[Entry_No] as Entry_No
,CONVERT(varchar(23), [dbo].[Inv_Receipt_h].[Entry_Date] , @format) as [Entry_Date]
      ,[dbo].[mstr_Branch].[Name_AR] as BranchName
      ,(CASE WHEN [dbo].[Inv_Receipt_h].[Vendor_ID] IS NOT NULL  THEN  [dbo].[GL_Accounts].[Name_AR] ELSE
	    CASE WHEN [dbo].[Inv_Receipt_h].CashCustomerID IS NOT NULL  THEN  [dbo].[Inv_CashCustomer].[Name_AR] ELSE '' END END  )as CustomerName
      ,(CASE WHEN [dbo].[Inv_Receipt_h].[Vendor_ID] IS NOT NULL  THEN  [dbo].[GL_Accounts].[Phone] ELSE
	    CASE WHEN [dbo].[Inv_Receipt_h].CashCustomerID IS NOT NULL  THEN  [dbo].[Inv_CashCustomer].[PhoneNumber] ELSE '' END END  )as CustomerPhone
	  ,[dbo].[Inv_Receipt_h].[NetValue] as [NetValue]
	  FROM [dbo].[Inv_Receipt_h]
	  LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[Inv_Receipt_h].[Vendor_ID]
	  LEFT JOIN [dbo].[Inv_CashCustomer] on [dbo].[Inv_CashCustomer].[id] = [dbo].[Inv_Receipt_h].[CashCustomerID]
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[Inv_Receipt_h].[Branch_ID]
      LEFT JOIN [dbo].Security_Users SU on SU.[ID] = [dbo].[Inv_Receipt_h].[CreatedByID]
	--  LEFT JOIN #ERPstatusTemp ES on ES.[ID] = [dbo].[Inv_Receipt_h].[ERPStatus]
	 
 Where 
 ([dbo].[Inv_Receipt_h].[SubsidiaryID] = @SubsidiaryID ) AND
  ([dbo].[Inv_Receipt_h].[Branch_ID] in (select BranchID from UserBranch where UserID = @UserID) ) AND
    ([dbo].[Inv_Receipt_h].[Code] = @ReceiptCode ) AND -- Cash Sales Code
 ((Cast([dbo].[Inv_Receipt_h].[Entry_No]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
    (Cast([dbo].[Inv_Receipt_h].[NetValue]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[mstr_Branch].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[mstr_Branch].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[GL_Accounts].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[GL_Accounts].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[GL_Accounts].[Phone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[Inv_CashCustomer].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[Inv_CashCustomer].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[Inv_CashCustomer].[PhoneNumber]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR  
 (CONVERT(varchar(23), [dbo].[Inv_Receipt_h].[Entry_Date] , @format) like '%'+@SearchValue+'%' ) OR  
(Cast(SU.[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
-- (Cast(ES.[StatusName_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (@SearchValue IS NULL) OR (@SearchValue  = ''))
 AND Inv_Receipt_h.Entry_No = CASE WHEN @entryNo > 0 THEN @entryNo ELSE Inv_Receipt_h.Entry_No END
AND Cast([dbo].[mstr_Branch].[Name_AR]  as nVarchar(100)) = CASE WHEN @branchName !='' THEN @branchName ELSE Cast([dbo].[mstr_Branch].[Name_AR]  as nVarchar(100)) END
AND (CASE WHEN [dbo].[Inv_Receipt_h].Code = 11 THEN ISNULL([dbo].[Inv_Receipt_h].PurchaseOrderStatusId,0) 
			     WHEN [dbo].[Inv_Receipt_h].Code = 12 THEN ISNULL([dbo].[Inv_Receipt_h].PurchaseRequestStatusId,0) 
				 WHEN [dbo].[Inv_Receipt_h].Code = 50 THEN ISNULL([dbo].[Inv_Receipt_h].QuotationStatusId,0) 
				 WHEN [dbo].[Inv_Receipt_h].Code = 88 THEN ISNULL([dbo].[Inv_Receipt_h].SalesOrderStatusId,0) 
				 ELSE ISNULL([dbo].[Inv_Receipt_h].ApprovalStatus_ID,0) END ) = CASE WHEN @appoveId > 0 
																		THEN @appoveId 
																		ELSE 
																			(CASE WHEN [dbo].[Inv_Receipt_h].Code = 11 THEN ISNULL([dbo].[Inv_Receipt_h].PurchaseOrderStatusId,0) 
																			 WHEN [dbo].[Inv_Receipt_h].Code = 12 THEN ISNULL([dbo].[Inv_Receipt_h].PurchaseRequestStatusId,0) 
																			 WHEN [dbo].[Inv_Receipt_h].Code = 50 THEN ISNULL([dbo].[Inv_Receipt_h].QuotationStatusId,0) 
																			 WHEN [dbo].[Inv_Receipt_h].Code = 88 THEN ISNULL([dbo].[Inv_Receipt_h].SalesOrderStatusId,0) 
																			 ELSE ISNULL([dbo].[Inv_Receipt_h].ApprovalStatus_ID,0) END ) 
																		 END
 )cashSales
  END

  
GO
/****** Object:  StoredProcedure [dbo].[GetAllReceiptsCount_Filter]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetAllReceiptsCount_Filter] --1 ,51,5, 'en-US',''

@SubsidiaryID int ,
@ReceiptCode int ,
@UserID int ,
@Language NVARCHAR(10),
@SearchValue NVARCHAR(150),
@FromStore int,
@ToStore int,
@DateFrom nvarchar(100),
@DateTo nvarchar(100),
@Schedule_Date nvarchar(100),
@Schedule_ToDate nvarchar(100)


AS
Declare @transferRApprove nvarchar(10) = '0'
if(@ReceiptCode = -1)
begin
set @ReceiptCode = 80
set @transferRApprove = '-1'
end

   if(@Language = 'en-US')
   Begin
      	SELECT  COUNT(cashSales.ID) as Count
	from
  (
   SELECT Distinct
       [dbo].[Inv_Receipt_h].[ID] as ID
      ,[dbo].[Inv_Receipt_h].[Entry_No] as Entry_No
	  ,CONVERT(varchar(23), [dbo].[Inv_Receipt_h].[Entry_Date] , 101) as [Entry_Date]
      ,[dbo].[mstr_Branch].[Name] as BranchName
      ,(CASE WHEN [dbo].[Inv_Receipt_h].[Vendor_ID] IS NOT NULL  THEN  [dbo].[GL_Accounts].[Name] ELSE
	    CASE WHEN [dbo].[Inv_Receipt_h].CashCustomerID IS NOT NULL  THEN  [dbo].[Inv_CashCustomer].[Name] ELSE '' END END  )as CustomerName
      ,(CASE WHEN [dbo].[Inv_Receipt_h].[Vendor_ID] IS NOT NULL  THEN  [dbo].[GL_Accounts].[Phone] ELSE
	    CASE WHEN [dbo].[Inv_Receipt_h].CashCustomerID IS NOT NULL  THEN  [dbo].[Inv_CashCustomer].[PhoneNumber] ELSE '' END END  )as CustomerPhone
	  ,[dbo].[Inv_Receipt_h].[NetValue] as NetValue
	  FROM [dbo].[Inv_Receipt_h]
	  LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[Inv_Receipt_h].[Vendor_ID]
	  LEFT JOIN [dbo].[Inv_CashCustomer] on [dbo].[Inv_CashCustomer].[id] = [dbo].[Inv_Receipt_h].[CashCustomerID]
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[Inv_Receipt_h].[Branch_ID]

 Where 
 ([dbo].[Inv_Receipt_h].[SubsidiaryID] = @SubsidiaryID ) AND
   ([dbo].[Inv_Receipt_h].[ToStoreID] in (select b.StoreID from UserBranch u join mstr_Branch B on
u.BranchID = b.ID where UserID = @UserID) ) AND
   (([dbo].[Inv_Receipt_h].[Code] = @ReceiptCode and @transferRApprove <> '-1' ) or ([dbo].[Inv_Receipt_h].[Code] = @ReceiptCode and @transferRApprove = '-1'  and ([Inv_Receipt_h].isApproved = 0 or [Inv_Receipt_h].isApproved is null))) AND  -- 
 ((Cast([dbo].[Inv_Receipt_h].[Entry_No]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
    (Cast([dbo].[Inv_Receipt_h].[NetValue]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[mstr_Branch].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[mstr_Branch].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[GL_Accounts].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[GL_Accounts].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[GL_Accounts].[Phone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[Inv_CashCustomer].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[Inv_CashCustomer].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[Inv_CashCustomer].[PhoneNumber]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR  
 (CONVERT(varchar(23), [dbo].[Inv_Receipt_h].[Entry_Date] , 101) like '%'+@SearchValue+'%' ) OR  
 (@SearchValue IS NULL) OR (@SearchValue  = ''))
And ((Entry_Date >= @DateFrom and Entry_Date <= @DateTo)or @DateFrom is null)
And ((Schedule_Date >= @Schedule_Date and Schedule_Date <= @Schedule_ToDate)or @Schedule_Date is null)
And ((FromStoreID = @FromStore )or @FromStore = 0)
And ((ToStoreID = @ToStore )or @ToStore = 0)
And ([Inv_Receipt_h].[ERPStatus] =1 or [Inv_Receipt_h].[ERPStatus] is null or [Inv_Receipt_h].[ERPStatus] =0)
 )cashSales
  END
  else
     Begin
	    	SELECT  COUNT(cashSales.ID) as Count
	from
  (
   SELECT Distinct
       [dbo].[Inv_Receipt_h].[ID] as ID
      ,[dbo].[Inv_Receipt_h].[Entry_No] as Entry_No
,CONVERT(varchar(23), [dbo].[Inv_Receipt_h].[Entry_Date] , 101) as [Entry_Date]
      ,[dbo].[mstr_Branch].[Name_AR] as BranchName
      ,(CASE WHEN [dbo].[Inv_Receipt_h].[Vendor_ID] IS NOT NULL  THEN  [dbo].[GL_Accounts].[Name_AR] ELSE
	    CASE WHEN [dbo].[Inv_Receipt_h].CashCustomerID IS NOT NULL  THEN  [dbo].[Inv_CashCustomer].[Name_AR] ELSE '' END END  )as CustomerName
      ,(CASE WHEN [dbo].[Inv_Receipt_h].[Vendor_ID] IS NOT NULL  THEN  [dbo].[GL_Accounts].[Phone] ELSE
	    CASE WHEN [dbo].[Inv_Receipt_h].CashCustomerID IS NOT NULL  THEN  [dbo].[Inv_CashCustomer].[PhoneNumber] ELSE '' END END  )as CustomerPhone
	  ,[dbo].[Inv_Receipt_h].[NetValue] as [NetValue]
	  FROM [dbo].[Inv_Receipt_h]
	  LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[Inv_Receipt_h].[Vendor_ID]
	  LEFT JOIN [dbo].[Inv_CashCustomer] on [dbo].[Inv_CashCustomer].[id] = [dbo].[Inv_Receipt_h].[CashCustomerID]
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[Inv_Receipt_h].[Branch_ID]

 Where 
 ([dbo].[Inv_Receipt_h].[SubsidiaryID] = @SubsidiaryID ) AND
   ([dbo].[Inv_Receipt_h].[ToStoreID] in (select b.StoreID from UserBranch u join mstr_Branch B on
u.BranchID = b.ID where UserID = @UserID) ) AND
   (([dbo].[Inv_Receipt_h].[Code] = @ReceiptCode and @transferRApprove <> '-1' ) or ([dbo].[Inv_Receipt_h].[Code] = @ReceiptCode and @transferRApprove = '-1'  and ([Inv_Receipt_h].isApproved = 0 or [Inv_Receipt_h].isApproved is null))) AND  -- Cash Sales Code
 ((Cast([dbo].[Inv_Receipt_h].[Entry_No]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
    (Cast([dbo].[Inv_Receipt_h].[NetValue]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[mstr_Branch].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[mstr_Branch].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[GL_Accounts].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[GL_Accounts].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[GL_Accounts].[Phone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[Inv_CashCustomer].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[Inv_CashCustomer].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[Inv_CashCustomer].[PhoneNumber]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR  
 (CONVERT(varchar(23), [dbo].[Inv_Receipt_h].[Entry_Date] , 101) like '%'+@SearchValue+'%' ) OR  
 (@SearchValue IS NULL) OR (@SearchValue  = ''))
And ((Entry_Date >= @DateFrom and Entry_Date <= @DateTo)or @DateFrom is null)
And ((Schedule_Date >= @Schedule_Date and Schedule_Date <= @Schedule_ToDate)or @Schedule_Date is null)
And ((FromStoreID = @FromStore )or @FromStore = 0)
And ((ToStoreID = @ToStore )or @ToStore = 0)
And ([Inv_Receipt_h].[ERPStatus] =1 or [Inv_Receipt_h].[ERPStatus] is null or [Inv_Receipt_h].[ERPStatus] =0)
 )cashSales
  END

  
GO
/****** Object:  StoredProcedure [dbo].[GetAllTransactionsBranchsAccount]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetAllTransactionsBranchsAccount]

@SubsidiaryID int ,
@Lang NVARCHAR(50)

AS

   if (@Lang = 'en-US')

   SELECT Distinct
       [dbo].[Inv_Transactions_branchs_Account].[ID] 
       ,[dbo].[GL_Accounts].[Code] as   AccountCode 
       ,[dbo].[GL_Accounts].[AccountID] 
       ,[dbo].[GL_Accounts].[Name] as AccountName
       ,[dbo].[Inv_Transactions_branchs_Account].BranchID 
       ,[dbo].[mstr_Branch].[Name] as  BranchName
       ,[dbo].[Inv_Transactions_branchs_Account].[ClassID] as ClassID 
       ,[dbo].[mstr_Classes].[Name] as ClassName 
       ,[dbo].[Inv_Transactions_branchs_Account].[ID] as CostCenterID
	   ,[dbo].[mstr_Costcenter].[Name] as CostCenterName 
       ,[dbo].[Inv_Transactions_branchs_Account].[DepartmentID] as DepartmentID 
       ,[dbo].[mstr_Departments].[Name] as DepartmentName
       ,[dbo].[Inv_Transactions_branchs_Account].[LocationID]  
       ,[dbo].[mstr_Locations].[Name] as LocationName 
       ,[dbo].[Inv_Transactions_branchs_Account].[TransctionID] as TransctionID
       ,[dbo].[Inv_Transaction_Codes].[Name] as TransctionName 
	   ,CostOfInventoryAccount.[Name] as CostOfInventory 

	  FROM 
	  [dbo].[Inv_Transactions_branchs_Account]
	  LEFT JOIN [dbo].[GL_Accounts] on [dbo].[Inv_Transactions_branchs_Account].[AccountID] = [dbo].[GL_Accounts].[AccountID]
	  LEFT JOIN [dbo].[GL_Accounts] as CostOfInventoryAccount on [dbo].[Inv_Transactions_branchs_Account].[CostOfInventory] = CostOfInventoryAccount.[AccountID]
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[Inv_Transactions_branchs_Account].[BranchID]
	  LEFT JOIN [dbo].[mstr_Classes] on [dbo].[mstr_Classes].[ID] = [dbo].[Inv_Transactions_branchs_Account].[ClassID]
	  LEFT JOIN [dbo].[mstr_Costcenter] on [dbo].[mstr_Costcenter].[ID] = [dbo].[Inv_Transactions_branchs_Account].[CostCenterID]
	  LEFT JOIN [dbo].[mstr_Departments] on [dbo].[mstr_Departments].[ID] = [dbo].[Inv_Transactions_branchs_Account].[DepartmentID]
	  LEFT JOIN [dbo].[mstr_Locations] on [dbo].[mstr_Locations].[ID] = [dbo].[Inv_Transactions_branchs_Account].[LocationID]
	  LEFT JOIN [dbo].[Inv_Transaction_Codes] on [dbo].[Inv_Transaction_Codes].[Code] = [dbo].[Inv_Transactions_branchs_Account].[TransctionID]

	  Where 
      [dbo].[mstr_Branch].[Subsidaryid] = @SubsidiaryID 
	  AND
	   [dbo].[mstr_Branch].IsActive = 1
	  AND 
	  -- Purchase Order  -- Transfer Request      -- Internal Purchase order         -- Production Voucher                                                                       
	  -- Quotation       -- Gift Receipt          -- Purchase Invoice                                                        
	  -- Issue Request   -- Transfer Goods        -- Purchase Return                                       
	   [dbo].[Inv_Transactions_branchs_Account].TransctionID NOT IN (11,50,64,80,4,81,12,1,2,82)                                     
                                  
	  Order By [dbo].[Inv_Transactions_branchs_Account].[BranchID]

   ELSE

      SELECT Distinct
       [dbo].[Inv_Transactions_branchs_Account].[ID] 
       ,[dbo].[GL_Accounts].[Code] as   AccountCode 
       ,[dbo].[GL_Accounts].[AccountID] 
	   ,[dbo].[GL_Accounts].Name_AR as AccountName 
       ,[dbo].[Inv_Transactions_branchs_Account].BranchID 
	   ,[dbo].[mstr_Branch].[Name_AR] as  BranchName
       ,[dbo].[Inv_Transactions_branchs_Account].[ClassID] as ClassID 
	   ,[dbo].[mstr_Classes].[Name_AR] as ClassName
       ,[dbo].[Inv_Transactions_branchs_Account].[ID] as CostCenterID
	   ,[dbo].[mstr_Costcenter].[Name_AR] as CostCenterName
       ,[dbo].[Inv_Transactions_branchs_Account].[DepartmentID] as DepartmentID 
	   ,[dbo].[mstr_Departments].[Name_AR] as DepartmentName
       ,[dbo].[Inv_Transactions_branchs_Account].[LocationID]  
	   ,[dbo].[mstr_Locations].[Name_AR] as LocationName
       ,[dbo].[Inv_Transactions_branchs_Account].[TransctionID] as TransctionID
	   ,[dbo].[Inv_Transaction_Codes].[Name_Ar] as TransctionName
	   ,CostOfInventoryAccount.[Name_Ar] as CostOfInventory

	  FROM 
	  [dbo].[Inv_Transactions_branchs_Account]
	  LEFT JOIN [dbo].[GL_Accounts] on [dbo].[Inv_Transactions_branchs_Account].[AccountID] = [dbo].[GL_Accounts].[AccountID]
	  LEFT JOIN [dbo].[GL_Accounts] as CostOfInventoryAccount on [dbo].[Inv_Transactions_branchs_Account].[CostOfInventory] = CostOfInventoryAccount.[AccountID]
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[Inv_Transactions_branchs_Account].[BranchID]
	  LEFT JOIN [dbo].[mstr_Classes] on [dbo].[mstr_Classes].[ID] = [dbo].[Inv_Transactions_branchs_Account].[ClassID]
	  LEFT JOIN [dbo].[mstr_Costcenter] on [dbo].[mstr_Costcenter].[ID] = [dbo].[Inv_Transactions_branchs_Account].[CostCenterID]
	  LEFT JOIN [dbo].[mstr_Departments] on [dbo].[mstr_Departments].[ID] = [dbo].[Inv_Transactions_branchs_Account].[DepartmentID]
	  LEFT JOIN [dbo].[mstr_Locations] on [dbo].[mstr_Locations].[ID] = [dbo].[Inv_Transactions_branchs_Account].[LocationID]
	  LEFT JOIN [dbo].[Inv_Transaction_Codes] on [dbo].[Inv_Transaction_Codes].[Code] = [dbo].[Inv_Transactions_branchs_Account].[TransctionID]

	  Where 
      [dbo].[mstr_Branch].[Subsidaryid] = @SubsidiaryID 
	  AND
	   [dbo].[mstr_Branch].IsActive = 1
	  AND 
	  -- Purchase Order  -- Transfer Request      -- Internal Purchase order         -- Production Voucher                                                                       
	  -- Quotation       -- Gift Receipt          -- Purchase Invoice                                                        
	  -- Issue Request   -- Transfer Goods        -- Purchase Return                                       
	   [dbo].[Inv_Transactions_branchs_Account].TransctionID NOT IN (11,50,64,80,4,81,12,1,2,82)                                     
                                  
	  Order By [dbo].[Inv_Transactions_branchs_Account].[BranchID]

GO
/****** Object:  StoredProcedure [dbo].[GetAllVendorPurchaseInvoices]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetAllVendorPurchaseInvoices]

@SubsidiaryID int ,
@AccountID int ,
@Language nvarchar(50),
@Skip    int	 = 0,
@Take    int	 = 200,
@ReceiptID int ,
@CustomerPaymentID int = null
AS

if @CustomerPaymentID IS null  
Select * from (  
   SELECT Distinct
        CONVERT(varchar(25),[dbo].[GL_Vouchers].[ID]) as DT_RowId -- Voucher ID of Receipt
	   --,MAX([dbo].[GL_VoucherPayments].[VoucherId]) as VoucherId
	   --,MAX([dbo].[GL_VoucherPayments].[CreationDate]) as [CreationDate]
	   --,MAX([dbo].[GL_VoucherPayments].[LastModifiedDate]) as [LastModifiedDate]
	   ,Max([dbo].[GL_Vouchers].[VouhcerDate]) as VDate
	   ,MAX([dbo].[Inv_Receipt_h].[ID]) as ReceiptId
	   ,MAX([dbo].[mstr_Branch].[Code]) as BranchCode
	   ,MAX([dbo].[Inv_Receipt_h].[Entry_No]) as InvoiceCode
       ,MAX(CONVERT(varchar(23), ([dbo].[GL_Vouchers].[VouhcerDate]), 103)) as VouhcerDate
       ,MAX(CASE WHEN  @Language = 'en-Us' THEN 
	     ([dbo].[GL_VoucherType].[Name])
	    ELSE
         ([dbo].[GL_VoucherType].[Name_AR]) END)
	    as VoucherTypeName
	   ,MAX(CASE WHEN  @Language = 'en-Us' THEN 
	         CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN 'Debit' ELSE 'Credit' END 
			 ELSE 
			 CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN N'مدين' ELSE N'دائن' END  
		END) as AmountType
	   	,MAX((ISNULL([dbo].[Inv_Receipt_h].[NetValue],0))) as Value
	   ,MAX(CASE WHEN  @Language = 'en-Us' THEN 
	       ([dbo].[mstr_Currencies].[Name]) 
	   ELSE 
	      ([dbo].[mstr_Currencies].[Name_Ar]) END )
       as CurrencyName 
	   ,MAX(ISNULL( ([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount]),0)) as PreviouslyPaidAmount
       ,MAX(ISNULL([dbo].[GL_VoucherPayments].[Amount],0)) as PaidAmount 
       ,MAX(ISNULL([dbo].[Inv_Receipt_h].[NetValue],0) - ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0)) as Remaining,
	   MAX(CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 
	    THEN  CASE WHEN ( ([dbo].[GL_VoucherDetails].[Debit]) = ([dbo].[GL_VoucherPayments].[Amount]) ) THEN 1 ELSE 0 END
	    ELSE CASE WHEN ( ([dbo].[GL_VoucherDetails].[Credit]) = ([dbo].[GL_VoucherPayments].[Amount]) ) THEN 1 ELSE 0 END END) as IsSelected
	   , 0 as VoucherPaymentId
	   , (CASE WHEN (Select Count(ID) from Crm_Invoice_Installments Where InvoiceID = Max([dbo].[Inv_Receipt_h].[ID]))> 0 
	   Then 1 Else 0 END) as ReceiptHasInstallments 

	  FROM 
	  [dbo].[GL_Vouchers]
	  JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  JOIN [dbo].[mstr_Currencies] on [dbo].[mstr_Currencies].[ID] = [dbo].[GL_Vouchers].[CurrencyID]
	  JOIN [dbo].[Inv_Receipt_h] on [dbo].[Inv_Receipt_h].[ID] = [dbo].[GL_Vouchers].[ReceiptID]
	  JOIN [dbo].[Inv_PaymentType] on [dbo].[Inv_PaymentType].id = [dbo].[Inv_Receipt_h].[Payment_Type]
	  JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].ID = [dbo].[Inv_Receipt_h].[Branch_ID]
	  JOIN [dbo].[GL_VoucherPayments] on [dbo].[GL_VoucherPayments].ReceiptId = [dbo].[Inv_Receipt_h].[ID]

	  Where 
      [dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID AND
	  ([dbo].[GL_Vouchers].[ReceiptID] = @ReceiptID or @ReceiptID is NULL) AND
	  [dbo].[GL_VoucherDetails].[AccountNoID] = @AccountID AND
	  [dbo].[GL_VoucherType].[Code] = '25' AND  -- Voucher Type Code for Purchase Invoices
	  [dbo].[Inv_PaymentType].[Code] = '2' AND 
	  ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0) != [dbo].[Inv_Receipt_h].[NetValue] AND
	  (GL_VoucherPayments.VoucherId = @CustomerPaymentID or @CustomerPaymentID IS null)

	  GRoup By GL_VoucherPayments.ReceiptId , [dbo].[GL_Vouchers].[ID]

	  UNIon ALL

   SELECT Distinct
        CONVERT(varchar(25),[dbo].[GL_Vouchers].[ID]) as DT_RowId -- Voucher ID of Receipt
	   --,([dbo].[GL_VoucherPayments].[VoucherId]) as VoucherId
	   --,([dbo].[GL_VoucherPayments].[CreationDate]) as [CreationDate]
	   ,[dbo].[GL_Vouchers].[VouhcerDate] as VDate
	   --,([dbo].[GL_VoucherPayments].[LastModifiedDate]) as [LastModifiedDate]
	   ,([dbo].[Inv_Receipt_h].[ID]) as ReceiptId
	   ,([dbo].[mstr_Branch].[Code]) as BranchCode
	   ,([dbo].[Inv_Receipt_h].[Entry_No]) as InvoiceCode
       ,CONVERT(varchar(23), ([dbo].[GL_Vouchers].[VouhcerDate]), 103) as VouhcerDate
       ,CASE WHEN  @Language = 'en-Us' THEN 
	     ([dbo].[GL_VoucherType].[Name])
	    ELSE
         ([dbo].[GL_VoucherType].[Name_AR]) END
	    as VoucherTypeName
	   ,CASE WHEN  @Language = 'en-Us' THEN 
	         CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN 'Debit' ELSE 'Credit' END 
			 ELSE 
			 CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN N'مدين' ELSE N'دائن' END  
		END as AmountType
	   	,(ISNULL([dbo].[Inv_Receipt_h].[NetValue],0)) as Value
	   ,CASE WHEN  @Language = 'en-Us' THEN 
	       ([dbo].[mstr_Currencies].[Name]) 
	   ELSE 
	      ([dbo].[mstr_Currencies].[Name_Ar]) END 
       as CurrencyName 
	   ,ISNULL( ([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount]),0) as PreviouslyPaidAmount
       ,CONVERT(DECIMAL(18,3), 0) as PaidAmount 
       ,ISNULL([dbo].[Inv_Receipt_h].[NetValue],0) - ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0) as Remaining,
	   (CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 
	    THEN  CASE WHEN ( ([dbo].[GL_VoucherDetails].[Debit]) = ([dbo].[GL_VoucherPayments].[Amount]) ) THEN 1 ELSE 0 END
	    ELSE CASE WHEN ( ([dbo].[GL_VoucherDetails].[Credit]) = ([dbo].[GL_VoucherPayments].[Amount]) ) THEN 1 ELSE 0 END END) as IsSelected
	   , 0 as VoucherPaymentId
	   , CASE WHEN (Select Count(ID) from Crm_Invoice_Installments Where InvoiceID = ([dbo].[Inv_Receipt_h].[ID]))> 0 
	   Then 1 Else 0 END as ReceiptHasInstallments 

	  FROM 
	  [dbo].[GL_Vouchers]
	  JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  JOIN [dbo].[mstr_Currencies] on [dbo].[mstr_Currencies].[ID] = [dbo].[GL_Vouchers].[CurrencyID]
	  JOIN [dbo].[Inv_Receipt_h] on [dbo].[Inv_Receipt_h].[ID] = [dbo].[GL_Vouchers].[ReceiptID]
	  JOIN [dbo].[Inv_PaymentType] on [dbo].[Inv_PaymentType].id = [dbo].[Inv_Receipt_h].[Payment_Type]
	  JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].ID = [dbo].[Inv_Receipt_h].[Branch_ID]
	  LEFT JOIN [dbo].[GL_VoucherPayments] on [dbo].[GL_VoucherPayments].ReceiptId = [dbo].[Inv_Receipt_h].[ID]

	  Where 
      [dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID AND
	  ([dbo].[GL_Vouchers].[ReceiptID] = @ReceiptID or @ReceiptID is NULL) AND
	  [dbo].[GL_VoucherDetails].[AccountNoID] = @AccountID AND
	  [dbo].[GL_VoucherType].[Code] = '25' AND  -- Voucher Type Code for Purchase Invoices
	  ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0) != [dbo].[Inv_Receipt_h].[NetValue] AND
	  [dbo].[Inv_PaymentType].[Code] = '2' AND 
	  (
	  [GL_VoucherPayments].ReceiptId NOT IN (SELECT Distinct ([dbo].[Inv_Receipt_h].[ID]) as ReceiptId
	  FROM [dbo].[GL_Vouchers] JOIN [dbo].[Inv_Receipt_h] on [dbo].[Inv_Receipt_h].[ID] = [dbo].[GL_Vouchers].[ReceiptID]
	  JOIN [dbo].[Inv_PaymentType] on [dbo].[Inv_PaymentType].id = [dbo].[Inv_Receipt_h].[Payment_Type]
	  JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  JOIN [dbo].[GL_VoucherPayments] on [dbo].[GL_VoucherPayments].ReceiptId = [dbo].[Inv_Receipt_h].[ID]
	  Where 
      [dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID AND
	  ([dbo].[GL_Vouchers].[ReceiptID] = @ReceiptID or @ReceiptID is NULL) AND
	  [dbo].[GL_VoucherDetails].[AccountNoID] = @AccountID AND
	  [dbo].[GL_VoucherType].[Code] = '25' AND  -- Voucher Type Code for Purchase Invoices
	  [dbo].[Inv_PaymentType].[Code] = '2' AND 
	  (GL_VoucherPayments.VoucherId = @CustomerPaymentID or @CustomerPaymentID IS null))
	  OR [GL_VoucherPayments].ReceiptId IS NULL
	  )
	  )WW
	  order By WW.VDate desc
   else 
   Select * from (
   SELECT Distinct
        CONVERT(varchar(25),[dbo].[GL_Vouchers].[ID]) as DT_RowId -- Voucher ID of Receipt
	   --,([dbo].[GL_VoucherPayments].[VoucherId]) as VoucherId
	   --,([dbo].[GL_VoucherPayments].[CreationDate]) as [CreationDate]
	   --,([dbo].[GL_VoucherPayments].[LastModifiedDate]) as [LastModifiedDate]
	   ,[dbo].[GL_Vouchers].[VouhcerDate] as VDate
	   ,([dbo].[Inv_Receipt_h].[ID]) as ReceiptId
	   ,([dbo].[mstr_Branch].[Code]) as BranchCode
	   ,([dbo].[Inv_Receipt_h].[Entry_No]) as InvoiceCode
       ,CONVERT(varchar(23), ([dbo].[GL_Vouchers].[VouhcerDate]), 103) as VouhcerDate
       ,CASE WHEN  @Language = 'en-Us' THEN 
	     ([dbo].[GL_VoucherType].[Name])
	    ELSE
         ([dbo].[GL_VoucherType].[Name_AR]) END
	    as VoucherTypeName
	   ,CASE WHEN  @Language = 'en-Us' THEN 
	         CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN 'Debit' ELSE 'Credit' END 
			 ELSE 
			 CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN N'مدين' ELSE N'دائن' END  
		END as AmountType
	   	,(ISNULL([dbo].[Inv_Receipt_h].[NetValue],0)) as Value
	   ,CASE WHEN  @Language = 'en-Us' THEN 
	       ([dbo].[mstr_Currencies].[Name]) 
	   ELSE 
	      ([dbo].[mstr_Currencies].[Name_Ar]) END 
       as CurrencyName 
	   ,ISNULL( ([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount]),0) as PreviouslyPaidAmount
       ,ISNULL([dbo].[GL_VoucherPayments].[Amount],0) as PaidAmount 
       ,ISNULL([dbo].[Inv_Receipt_h].[NetValue],0) - ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0) as Remaining,
	   (CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 
	    THEN  CASE WHEN ( ([dbo].[GL_VoucherDetails].[Debit]) = ([dbo].[GL_VoucherPayments].[Amount]) ) THEN 1 ELSE 0 END
	    ELSE CASE WHEN ( ([dbo].[GL_VoucherDetails].[Credit]) = ([dbo].[GL_VoucherPayments].[Amount]) ) THEN 1 ELSE 0 END END) as IsSelected
	   , ISNULL(([dbo].[GL_VoucherPayments].[Id]),0) as VoucherPaymentId
	   , CASE WHEN (Select Count(ID) from Crm_Invoice_Installments Where InvoiceID = ([dbo].[Inv_Receipt_h].[ID]))> 0 
	   Then 1 Else 0 END as ReceiptHasInstallments 

	  FROM 
	  [dbo].[GL_Vouchers]
	  JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  JOIN [dbo].[mstr_Currencies] on [dbo].[mstr_Currencies].[ID] = [dbo].[GL_Vouchers].[CurrencyID]
	  JOIN [dbo].[Inv_Receipt_h] on [dbo].[Inv_Receipt_h].[ID] = [dbo].[GL_Vouchers].[ReceiptID]
	  JOIN [dbo].[Inv_PaymentType] on [dbo].[Inv_PaymentType].id = [dbo].[Inv_Receipt_h].[Payment_Type]
	  JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].ID = [dbo].[Inv_Receipt_h].[Branch_ID]
	  JOIN [dbo].[GL_VoucherPayments] on [dbo].[GL_VoucherPayments].ReceiptId = [dbo].[Inv_Receipt_h].[ID]

	  Where 
      [dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID AND
	  ([dbo].[GL_Vouchers].[ReceiptID] = @ReceiptID or @ReceiptID is NULL) AND
	  [dbo].[GL_VoucherDetails].[AccountNoID] = @AccountID AND
	  [dbo].[GL_VoucherType].[Code] = '25' AND  -- Voucher Type Code for Purchase Invoices
	  [dbo].[Inv_PaymentType].[Code] = '2' AND 
	  (GL_VoucherPayments.VoucherId = @CustomerPaymentID or @CustomerPaymentID IS null)
	  
	  UNIon ALL

   SELECT Distinct
        CONVERT(varchar(25),[dbo].[GL_Vouchers].[ID]) as DT_RowId -- Voucher ID of Receipt
	   --,([dbo].[GL_VoucherPayments].[VoucherId]) as VoucherId
	   --,([dbo].[GL_VoucherPayments].[CreationDate]) as [CreationDate]
	   --,([dbo].[GL_VoucherPayments].[LastModifiedDate]) as [LastModifiedDate]
	   ,[dbo].[GL_Vouchers].[VouhcerDate] as VDate
	   ,([dbo].[Inv_Receipt_h].[ID]) as ReceiptId
	   ,([dbo].[mstr_Branch].[Code]) as BranchCode
	   ,([dbo].[Inv_Receipt_h].[Entry_No]) as InvoiceCode
       ,CONVERT(varchar(23), ([dbo].[GL_Vouchers].[VouhcerDate]), 103) as VouhcerDate
       ,CASE WHEN  @Language = 'en-Us' THEN 
	     ([dbo].[GL_VoucherType].[Name])
	    ELSE
         ([dbo].[GL_VoucherType].[Name_AR]) END
	    as VoucherTypeName
	   ,CASE WHEN  @Language = 'en-Us' THEN 
	         CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN 'Debit' ELSE 'Credit' END 
			 ELSE 
			 CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN N'مدين' ELSE N'دائن' END  
		END as AmountType
	   	,(ISNULL([dbo].[Inv_Receipt_h].[NetValue],0)) as Value
	   ,CASE WHEN  @Language = 'en-Us' THEN 
	       ([dbo].[mstr_Currencies].[Name]) 
	   ELSE 
	      ([dbo].[mstr_Currencies].[Name_Ar]) END 
       as CurrencyName 
	   ,ISNULL( ([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount]),0) as PreviouslyPaidAmount
       ,CONVERT(DECIMAL(18,3), 0) as PaidAmount 
       ,ISNULL([dbo].[Inv_Receipt_h].[NetValue],0) - ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0) as Remaining,
	   (CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 
	    THEN  CASE WHEN ( ([dbo].[GL_VoucherDetails].[Debit]) = ([dbo].[GL_VoucherPayments].[Amount]) ) THEN 1 ELSE 0 END
	    ELSE CASE WHEN ( ([dbo].[GL_VoucherDetails].[Credit]) = ([dbo].[GL_VoucherPayments].[Amount]) ) THEN 1 ELSE 0 END END) as IsSelected
	   , 0 as VoucherPaymentId
	   , CASE WHEN (Select Count(ID) from Crm_Invoice_Installments Where InvoiceID = ([dbo].[Inv_Receipt_h].[ID]))> 0 
	   Then 1 Else 0 END as ReceiptHasInstallments 

	  FROM 
	  [dbo].[GL_Vouchers]
	  JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  JOIN [dbo].[mstr_Currencies] on [dbo].[mstr_Currencies].[ID] = [dbo].[GL_Vouchers].[CurrencyID]
	  JOIN [dbo].[Inv_Receipt_h] on [dbo].[Inv_Receipt_h].[ID] = [dbo].[GL_Vouchers].[ReceiptID]
	  JOIN [dbo].[Inv_PaymentType] on [dbo].[Inv_PaymentType].id = [dbo].[Inv_Receipt_h].[Payment_Type]
	  JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].ID = [dbo].[Inv_Receipt_h].[Branch_ID]
	  LEFT JOIN [dbo].[GL_VoucherPayments] on [dbo].[GL_VoucherPayments].ReceiptId = [dbo].[Inv_Receipt_h].[ID]

	  Where 
      [dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID AND
	  ([dbo].[GL_Vouchers].[ReceiptID] = @ReceiptID or @ReceiptID is NULL) AND
	  [dbo].[GL_VoucherDetails].[AccountNoID] = @AccountID AND
	  [dbo].[GL_VoucherType].[Code] = '25' AND  -- Voucher Type Code for Purchase Invoices
	  [dbo].[Inv_PaymentType].[Code] = '2' AND 
	  (
	  [GL_VoucherPayments].ReceiptId NOT IN (SELECT Distinct ([dbo].[Inv_Receipt_h].[ID]) as ReceiptId
	  FROM [dbo].[GL_Vouchers] JOIN [dbo].[Inv_Receipt_h] on [dbo].[Inv_Receipt_h].[ID] = [dbo].[GL_Vouchers].[ReceiptID]
	  JOIN [dbo].[Inv_PaymentType] on [dbo].[Inv_PaymentType].id = [dbo].[Inv_Receipt_h].[Payment_Type]
	  JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  JOIN [dbo].[GL_VoucherPayments] on [dbo].[GL_VoucherPayments].ReceiptId = [dbo].[Inv_Receipt_h].[ID]
	  
	  Where 
      [dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID AND
	  ([dbo].[GL_Vouchers].[ReceiptID] = @ReceiptID or @ReceiptID is NULL) AND
	  [dbo].[GL_VoucherDetails].[AccountNoID] = @AccountID AND
	  [dbo].[GL_VoucherType].[Code] = '25' AND  -- Voucher Type Code for Purchase Invoices
	  [dbo].[Inv_PaymentType].[Code] = '2' AND
	  (GL_VoucherPayments.VoucherId = @CustomerPaymentID or @CustomerPaymentID IS null))
	  OR [GL_VoucherPayments].ReceiptId IS NULL
	  )
	  )YY

	  Order By YY.VDate desc

 OFFSET     @Skip ROWS       
 FETCH NEXT @Take ROWS ONLY; 
GO
/****** Object:  StoredProcedure [dbo].[GetAllVendorPurchaseInvoicesCount]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetAllVendorPurchaseInvoicesCount]

@SubsidiaryID int ,
@AccountID int ,
@Language nvarchar(50)
AS

	SELECT  COUNT(vouchers.ID) as Count
	from
  (
   SELECT Distinct
        [dbo].[GL_Vouchers].[ID] 
	   ,[dbo].[GL_VoucherDetails].[ID] as VoucherDetailsId
       ,CONVERT(varchar(23), [dbo].[GL_Vouchers].[VouhcerDate], 103) as VouhcerDate
       ,CASE WHEN  @Language = 'en-Us' THEN 
	     [dbo].[GL_VoucherType].[Name]
	    ELSE
         [dbo].[GL_VoucherType].[Name_AR] END
	    as VoucherTypeName
	   ,CASE WHEN  @Language = 'en-Us' THEN 
	         CASE WHEN [dbo].[GL_VoucherDetails].[Debit] > 0 THEN 'Debit' ELSE 'Credit' END 
			 ELSE 
			 CASE WHEN [dbo].[GL_VoucherDetails].[Debit] > 0 THEN N'مدين' ELSE N'دائن' END  
		END as AmountType
       --,CASE WHEN [dbo].[GL_VoucherDetails].[Debit] > 0 THEN 'Debit' ELSE 'Credit' END as AmountType
	   --,CASE WHEN [dbo].[GL_VoucherDetails].[Debit] > 0 THEN N'مدين' ELSE N'دائن' END as AmountTypeAr
	   ,CASE WHEN [dbo].[GL_VoucherDetails].[Debit] > 0 THEN [dbo].[GL_VoucherDetails].[Debit] ELSE [dbo].[GL_VoucherDetails].[Credit] END as Value
	   ,CASE WHEN  @Language = 'en-Us' THEN 
	       [dbo].[mstr_Currencies].[Name] 
	   ELSE 
	      [dbo].[mstr_Currencies].[Name_Ar] END 
       as CurrencyName 
	   ,[dbo].[Inv_Receipt_h].[PaidAmount] as PreviouslyPaidAmount
       ,'' as PaidAmount 
       ,CASE WHEN [dbo].[GL_VoucherDetails].[Debit] > 0 THEN
	    [dbo].[GL_VoucherDetails].[Debit] - ISNULL([dbo].[Inv_Receipt_h].[PaidAmount],0)
		ELSE 
		[dbo].[GL_VoucherDetails].[Credit] - ISNULL([dbo].[Inv_Receipt_h].[PaidAmount],0) END 
		as Remaining

	  FROM 
	  [dbo].[GL_Vouchers]
	  JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  JOIN [dbo].[mstr_Currencies] on [dbo].[mstr_Currencies].[ID] = [dbo].[GL_Vouchers].[CurrencyID]
	  JOIN [dbo].[Inv_Receipt_h] on [dbo].[Inv_Receipt_h].[ID] = [dbo].[GL_Vouchers].[ReceiptID]
	  JOIN [dbo].[Inv_PaymentType] on [dbo].[Inv_PaymentType].[id] = [dbo].[Inv_Receipt_h].[Payment_Type]

	  Where 
      [dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID AND
	  [dbo].[GL_VoucherDetails].[AccountNoID] = @AccountID AND
	  [dbo].[GL_VoucherType].[Code] = '25' AND  -- Voucher Type Code for Purchase Invoices
	  [dbo].[Inv_PaymentType].[Code] = '2' --AND
	  --(ISNULL([dbo].[Inv_Receipt_h].[PaidAmount],0) <> CASE WHEN [dbo].[GL_VoucherDetails].[Debit] > 0 THEN [dbo].[GL_VoucherDetails].[Debit] ELSE [dbo].[GL_VoucherDetails].[Credit] END)
	  
	   )vouchers
GO
/****** Object:  StoredProcedure [dbo].[GetAllVendorTransactions]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetAllVendorTransactions]

@SubsidiaryID int ,
@AccountID int ,
@Language nvarchar(50),
@Skip    int	 = 0,
@Take    int	 = 200,
@CustomerPaymentID int = null
AS

if @CustomerPaymentID IS null 
  SELECT Distinct
        CONVERT(varchar(25),[dbo].[GL_Vouchers].[ID]) as DT_RowId -- Voucher ID of Receipt
	   ,Max([dbo].[GL_Vouchers].[Code]) as Code
	   ,0 as [VoucherId]
	   ,Sum([dbo].[GL_VoucherDetails].[Credit]) as Credit
	   ,Sum([dbo].[GL_VoucherDetails].[Debit]) as Debit
	   ,Sum([dbo].[GL_VoucherDetails].[CreditForeign]) as CreditForeign
	   ,Sum([dbo].[GL_VoucherDetails].[DebitForeign]) as DebitForeign
       ,MAX(CONVERT(varchar(23), ([dbo].[GL_Vouchers].[VouhcerDate]), 103)) as VouhcerDate
       ,MAX(CASE WHEN  @Language = 'en-Us' THEN 
	     ([dbo].[GL_VoucherType].[Name])
	    ELSE
         ([dbo].[GL_VoucherType].[Name_AR]) END)
	    as VoucherTypeName
	   ,MAX(CASE WHEN  @Language = 'en-Us' THEN 
	         CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN 'Debit' ELSE 'Credit' END 
			 ELSE 
			 CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN N'مدين' ELSE N'دائن' END  
		END) as AmountType
	   	--,MAX((ISNULL([dbo].[Inv_Receipt_h].[NetValue],0))) as Value
	   ,MAX(CASE WHEN  @Language = 'en-Us' THEN 
	       ([dbo].[mstr_Currencies].[Name]) 
	   ELSE 
	      ([dbo].[mstr_Currencies].[Name_Ar]) END )
       as CurrencyName 
	   ,MAX(ISNULL( ([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount]),0)) as TransPreviouslyPaidAmount
       ,0 as TransPaidAmount 
       ,
	   (CASE WHEN SUM([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN 
	   (SUm([dbo].[GL_VoucherDetails].[Debit]) - mAX(ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0)))
	   ELSE 
	   (SUm([dbo].[GL_VoucherDetails].[Credit]) - mAX(ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0)))
	   END )as TransRemaining,
	   MAX(CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 
	    THEN  CASE WHEN ( ([dbo].[GL_VoucherDetails].[Debit]) = ([dbo].[GL_VoucherPayments].[Amount]) ) THEN 1 ELSE 0 END
	    ELSE CASE WHEN ( ([dbo].[GL_VoucherDetails].[Credit]) = ([dbo].[GL_VoucherPayments].[Amount]) ) THEN 1 ELSE 0 END END) as IsSelected
	   , 0 as VoucherPaymentId

	  FROM 
	  [dbo].[GL_Vouchers]
	  JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  JOIN [dbo].[mstr_Currencies] on [dbo].[mstr_Currencies].[ID] = [dbo].[GL_Vouchers].[CurrencyID]
	  JOIN [dbo].[GL_VoucherPayments] on [dbo].[GL_VoucherPayments].[VoucherId] = [dbo].[GL_Vouchers].[ID]
	  LEFT JOIN [dbo].[Inv_Receipt_h] on [dbo].[Inv_Receipt_h].[ID] = [dbo].[GL_Vouchers].[ReceiptID]

	  Where 
      [dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID AND
      (ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0) != [dbo].[Inv_Receipt_h].[NetValue] OR [dbo].[Inv_Receipt_h].[NetValue] IS NULL )  AND
	  ([dbo].[GL_Vouchers].[Prepaid] = 0 OR [dbo].[GL_Vouchers].[Prepaid] Is NULL) AND
	  [dbo].[GL_VoucherDetails].[AccountNoID] = @AccountID  AND
	  [dbo].[GL_VoucherType].[Code] <> '25'   -- Voucher Type Code for Credit Sales Invoices
	  AND (([dbo].[GL_VoucherType].[Code] = '10' AND [dbo].[GL_Vouchers].[Prepaid] = 1) OR ([dbo].[GL_VoucherType].[Code] <> '10' )) --AND
	  --AND ([dbo].[GL_VoucherPayments].[Amount] = 0 or [dbo].[GL_VoucherPayments].[Amount] IS NULL)
	  --AND (GL_VoucherPayments.VoucherId = @CustomerPaymentID)
	  --AND ([GL_Vouchers].[ID] NOT IN (SELECT [VoucherId] from [dbo].[GL_VoucherPayments]  ))
	  GRoup By  [dbo].[GL_Vouchers].[ID]   ,([dbo].[GL_VoucherPayments].[VoucherId])  
	  --Order By VouhcerDate desc

	  Union ALL

		SELECT Distinct
				CONVERT(varchar(25),[dbo].[GL_Vouchers].[ID]) as DT_RowId -- Voucher ID of Receipt
				,Max([dbo].[GL_Vouchers].[Code]) as Code
				,([dbo].[GL_VoucherPayments].[VoucherId]) as [VoucherId]
				,Sum([dbo].[GL_VoucherDetails].[Credit]) as Credit
				,Sum([dbo].[GL_VoucherDetails].[Debit]) as Debit
				,Sum([dbo].[GL_VoucherDetails].[CreditForeign]) as CreditForeign
				,Sum([dbo].[GL_VoucherDetails].[DebitForeign]) as DebitForeign
				,MAX(CONVERT(varchar(23), ([dbo].[GL_Vouchers].[VouhcerDate]), 103)) as VouhcerDate
				,MAX(CASE WHEN  @Language = 'en-Us' THEN 
					([dbo].[GL_VoucherType].[Name])
				ELSE
					([dbo].[GL_VoucherType].[Name_AR]) END)
				as VoucherTypeName
				,MAX(CASE WHEN  @Language = 'en-Us' THEN 
						CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN 'Debit' ELSE 'Credit' END 
						ELSE 
						CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN N'مدين' ELSE N'دائن' END  
				END) as AmountType
	   			--,MAX((ISNULL([dbo].[Inv_Receipt_h].[NetValue],0))) as Value
				,MAX(CASE WHEN  @Language = 'en-Us' THEN 
					([dbo].[mstr_Currencies].[Name]) 
				ELSE 
					([dbo].[mstr_Currencies].[Name_Ar]) END )
				as CurrencyName 
				,MAX(ISNULL( ([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount]),0)) as TransPreviouslyPaidAmount
				,0.0 as TransPaidAmount 
				,
				(CASE WHEN SUM([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN 
				(SUm([dbo].[GL_VoucherDetails].[Debit]) - mAX(ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0)))
				ELSE 
				(SUm([dbo].[GL_VoucherDetails].[Credit]) - mAX(ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0)))
				END )as TransRemaining,
				MAX(CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 
				THEN  CASE WHEN ( ([dbo].[GL_VoucherDetails].[Debit]) = ([dbo].[GL_VoucherPayments].[Amount]) ) THEN 1 ELSE 0 END
				ELSE CASE WHEN ( ([dbo].[GL_VoucherDetails].[Credit]) = ([dbo].[GL_VoucherPayments].[Amount]) ) THEN 1 ELSE 0 END END) as IsSelected
				, ISNULL(MAX([dbo].[GL_VoucherPayments].[Id]),0) as VoucherPaymentId

				FROM 
				[dbo].[GL_Vouchers]
				JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
				JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
				JOIN [dbo].[mstr_Currencies] on [dbo].[mstr_Currencies].[ID] = [dbo].[GL_Vouchers].[CurrencyID]
				LEFT JOIN [dbo].[Inv_Receipt_h] on [dbo].[Inv_Receipt_h].[ID] = [dbo].[GL_Vouchers].[ReceiptID]
				Left JOIN [dbo].[GL_VoucherPayments] on [dbo].[GL_VoucherPayments].[VoucherId] = [dbo].[GL_Vouchers].[ID]
	 
				Where 
				[dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID AND
				(ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0) != [dbo].[Inv_Receipt_h].[NetValue] OR [dbo].[Inv_Receipt_h].[NetValue] IS NULL )  AND
				([dbo].[GL_Vouchers].[Prepaid] = 0 OR [dbo].[GL_Vouchers].[Prepaid] Is NULL) AND
				[dbo].[GL_VoucherDetails].[AccountNoID] = @AccountID  AND
				[dbo].[GL_VoucherType].[Code] <> '25'   -- Voucher Type Code for Credit Sales Invoices
			    AND (([dbo].[GL_VoucherType].[Code] = '10' AND [dbo].[GL_Vouchers].[Prepaid] = 1) OR ([dbo].[GL_VoucherType].[Code] <> '10' )) --AND
	            AND ([dbo].[GL_VoucherPayments].[Amount] = 0 or [dbo].[GL_VoucherPayments].[Amount] IS NULL)
				AND ([GL_Vouchers].[ID] NOT IN (SELECT [TransactionVoucherId]
				  FROM 
				  [dbo].[GL_Vouchers]
				  JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
				  JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
				  JOIN [dbo].[mstr_Currencies] on [dbo].[mstr_Currencies].[ID] = [dbo].[GL_Vouchers].[CurrencyID]
				  JOIN [dbo].[GL_VoucherPayments] on [dbo].[GL_VoucherPayments].[VoucherId] = [dbo].[GL_Vouchers].[ID]
	 
				  Where 
				  [dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID AND
				  ([dbo].[GL_Vouchers].[Prepaid] = 0 OR [dbo].[GL_Vouchers].[Prepaid] Is NULL) AND
				  [dbo].[GL_VoucherDetails].[AccountNoID] = @AccountID  AND
				  [dbo].[GL_VoucherType].[Code] <> '25'   -- Voucher Type Code for Credit Sales Invoices
				  AND (([dbo].[GL_VoucherType].[Code] = '10' AND [dbo].[GL_Vouchers].[Prepaid] = 1) OR ([dbo].[GL_VoucherType].[Code] <> '10' )) --AND
				     ))
				GRoup By  [dbo].[GL_Vouchers].[ID]   ,([dbo].[GL_VoucherPayments].[VoucherId])  
				Order By VouhcerDate desc


else if @CustomerPaymentID is not null 
   SELECT Distinct
        CONVERT(varchar(25),[dbo].[GL_Vouchers].[ID]) as DT_RowId -- Voucher ID of Receipt
	   ,Max([dbo].[GL_Vouchers].[Code]) as Code
	   ,([dbo].[GL_VoucherPayments].[VoucherId]) as [VoucherId]
	   ,Sum([dbo].[GL_VoucherDetails].[Credit]) as Credit
	   ,Sum([dbo].[GL_VoucherDetails].[Debit]) as Debit
	   ,Sum([dbo].[GL_VoucherDetails].[CreditForeign]) as CreditForeign
	   ,Sum([dbo].[GL_VoucherDetails].[DebitForeign]) as DebitForeign
       ,MAX(CONVERT(varchar(23), ([dbo].[GL_Vouchers].[VouhcerDate]), 103)) as VouhcerDate
       ,MAX(CASE WHEN  @Language = 'en-Us' THEN 
	     ([dbo].[GL_VoucherType].[Name])
	    ELSE
         ([dbo].[GL_VoucherType].[Name_AR]) END)
	    as VoucherTypeName
	   ,MAX(CASE WHEN  @Language = 'en-Us' THEN 
	         CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN 'Debit' ELSE 'Credit' END 
			 ELSE 
			 CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN N'مدين' ELSE N'دائن' END  
		END) as AmountType
	   	--,MAX((ISNULL([dbo].[Inv_Receipt_h].[NetValue],0))) as Value
	   ,MAX(CASE WHEN  @Language = 'en-Us' THEN 
	       ([dbo].[mstr_Currencies].[Name]) 
	   ELSE 
	      ([dbo].[mstr_Currencies].[Name_Ar]) END )
       as CurrencyName 
	   ,MAX(ISNULL( ([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount]),0)) as TransPreviouslyPaidAmount
       ,MAX(ISNULL([dbo].[GL_VoucherPayments].[Amount],0)) as TransPaidAmount 
       ,
	   (CASE WHEN SUM([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN 
	   (SUm([dbo].[GL_VoucherDetails].[Debit]) - mAX(ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0)))
	   ELSE 
	   (SUm([dbo].[GL_VoucherDetails].[Credit]) - mAX(ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0)))
	   END )as TransRemaining,
	   MAX(CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 
	    THEN  CASE WHEN ( ([dbo].[GL_VoucherDetails].[Debit]) = ([dbo].[GL_VoucherPayments].[Amount]) ) THEN 1 ELSE 0 END
	    ELSE CASE WHEN ( ([dbo].[GL_VoucherDetails].[Credit]) = ([dbo].[GL_VoucherPayments].[Amount]) ) THEN 1 ELSE 0 END END) as IsSelected
	   , ISNULL(MAX([dbo].[GL_VoucherPayments].[Id]),0) as VoucherPaymentId

	  FROM 
	  [dbo].[GL_Vouchers]
	  JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  JOIN [dbo].[mstr_Currencies] on [dbo].[mstr_Currencies].[ID] = [dbo].[GL_Vouchers].[CurrencyID]
	  JOIN [dbo].[GL_VoucherPayments] on [dbo].[GL_VoucherPayments].[TransactionVoucherId] = [dbo].[GL_Vouchers].[ID]
	  JOIN [GL_VoucherDetails] as paidVouchers on paidVouchers.VoucherId =  [dbo].[GL_VoucherPayments].VoucherID  and paidVouchers.AccountNoID = @AccountID
	  LEFT JOIN [dbo].[Inv_Receipt_h] on [dbo].[Inv_Receipt_h].[ID] = [dbo].[GL_Vouchers].[ReceiptID]

	  Where 
      [dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID AND
	  --ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0) != [dbo].[Inv_Receipt_h].[NetValue] AND
	  ([dbo].[GL_Vouchers].[Prepaid] = 0 OR [dbo].[GL_Vouchers].[Prepaid] Is NULL) AND
	  [dbo].[GL_VoucherDetails].[AccountNoID] = @AccountID  AND
	  [dbo].[GL_VoucherType].[Code] <> '25'   -- Voucher Type Code for Credit Sales Invoices
	  AND (GL_VoucherPayments.VoucherId = @CustomerPaymentID)
	  GRoup By  [dbo].[GL_Vouchers].[ID]   ,([dbo].[GL_VoucherPayments].[VoucherId])  
	  --Order By VouhcerDate desc

	  Union ALL

		SELECT Distinct
				CONVERT(varchar(25),[dbo].[GL_Vouchers].[ID]) as DT_RowId -- Voucher ID of Receipt
				,Max([dbo].[GL_Vouchers].[Code]) as Code
				,0 as [VoucherId]
				,Sum([dbo].[GL_VoucherDetails].[Credit]) as Credit
				,Sum([dbo].[GL_VoucherDetails].[Debit]) as Debit
				,Sum([dbo].[GL_VoucherDetails].[CreditForeign]) as CreditForeign
				,Sum([dbo].[GL_VoucherDetails].[DebitForeign]) as DebitForeign
				,MAX(CONVERT(varchar(23), ([dbo].[GL_Vouchers].[VouhcerDate]), 103)) as VouhcerDate
				,MAX(CASE WHEN  @Language = 'en-Us' THEN 
					([dbo].[GL_VoucherType].[Name])
				ELSE
					([dbo].[GL_VoucherType].[Name_AR]) END)
				as VoucherTypeName
				,MAX(CASE WHEN  @Language = 'en-Us' THEN 
						CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN 'Debit' ELSE 'Credit' END 
						ELSE 
						CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN N'مدين' ELSE N'دائن' END  
				END) as AmountType
	   			--,MAX((ISNULL([dbo].[Inv_Receipt_h].[NetValue],0))) as Value
				,MAX(CASE WHEN  @Language = 'en-Us' THEN 
					([dbo].[mstr_Currencies].[Name]) 
				ELSE 
					([dbo].[mstr_Currencies].[Name_Ar]) END )
				as CurrencyName 
				,MAX(ISNULL( ([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount]),0)) as TransPreviouslyPaidAmount
				,0.0 as TransPaidAmount 
				,
				(CASE WHEN SUM([dbo].[GL_VoucherDetails].[Debit]) > 0 THEN 
				(SUm([dbo].[GL_VoucherDetails].[Debit]) - mAX(ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0)))
				ELSE 
				(SUm([dbo].[GL_VoucherDetails].[Credit]) - mAX(ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0)))
				END )as TransRemaining,
				MAX(CASE WHEN ([dbo].[GL_VoucherDetails].[Debit]) > 0 
				THEN  CASE WHEN ( ([dbo].[GL_VoucherDetails].[Debit]) = ([dbo].[GL_VoucherPayments].[Amount]) ) THEN 1 ELSE 0 END
				ELSE CASE WHEN ( ([dbo].[GL_VoucherDetails].[Credit]) = ([dbo].[GL_VoucherPayments].[Amount]) ) THEN 1 ELSE 0 END END) as IsSelected
	            , 0 as VoucherPaymentId

				FROM 
				[dbo].[GL_Vouchers]
				JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
				LEFT JOIN [dbo].[Inv_Receipt_h] on [dbo].[Inv_Receipt_h].[ID] = [dbo].[GL_Vouchers].[ReceiptID]
				JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
				JOIN [dbo].[mstr_Currencies] on [dbo].[mstr_Currencies].[ID] = [dbo].[GL_Vouchers].[CurrencyID]
				Left JOIN [dbo].[GL_VoucherPayments] on [dbo].[GL_VoucherPayments].[TransactionVoucherId] = [dbo].[GL_Vouchers].[ID]
	 
				Where 
				[dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID AND
				(ISNULL([dbo].[GL_VoucherPayments].[PreviouslyPaidAmount],0) != [dbo].[Inv_Receipt_h].[NetValue] OR [dbo].[Inv_Receipt_h].[NetValue] IS NULL )  AND
				([dbo].[GL_Vouchers].[Prepaid] = 0 OR [dbo].[GL_Vouchers].[Prepaid] Is NULL) AND
				[dbo].[GL_VoucherDetails].[AccountNoID] = @AccountID  AND
				[dbo].[GL_VoucherType].[Code] <> '25'   -- Voucher Type Code for Credit Sales Invoices
			    AND (([dbo].[GL_VoucherType].[Code] = '10' AND [dbo].[GL_Vouchers].[Prepaid] = 1) OR ([dbo].[GL_VoucherType].[Code] <> '10' )) --AND
				AND ([GL_Vouchers].[ID] NOT IN (SELECT Distinct [dbo].[GL_Vouchers].[ID] FROM 
				  [dbo].[GL_Vouchers]
				  JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
				  JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
				  JOIN [dbo].[mstr_Currencies] on [dbo].[mstr_Currencies].[ID] = [dbo].[GL_Vouchers].[CurrencyID]
				  Left JOIN [dbo].[GL_VoucherPayments] on [dbo].[GL_VoucherPayments].[TransactionVoucherId] = [dbo].[GL_Vouchers].[ID] 
				  Where 
				  [dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID AND
				  ([dbo].[GL_Vouchers].[Prepaid] = 0 OR [dbo].[GL_Vouchers].[Prepaid] Is NULL) AND
				  [dbo].[GL_VoucherDetails].[AccountNoID] = @AccountID  AND
				  [dbo].[GL_VoucherType].[Code] <> '25'   -- Voucher Type Code for Credit Sales Invoices
				  AND (GL_VoucherPayments.VoucherId = @CustomerPaymentID)))
				GRoup By  [dbo].[GL_Vouchers].[ID]   ,([dbo].[GL_VoucherPayments].[VoucherId])  
				Order By VouhcerDate desc



		OFFSET     @Skip ROWS       
		FETCH NEXT @Take ROWS ONLY;
GO
/****** Object:  StoredProcedure [dbo].[GetAllVoucherByFilters]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create PROCEDURE [dbo].[GetAllVoucherByFilters]
	@branchId int = 0,
	@isposted bit ,
	@subId int ,
	@voucherTypeID int = 0,
	@dateFrom date ,
	@dateTo date ,
	@entryNum int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT Count(*) as Count from GL_Vouchers
	Where (BranchID = @branchId OR @branchId = 0)
	AND (Posted = @isposted OR @isposted IS NULL)
	AND (VoucherTypeID = @voucherTypeID OR @voucherTypeID = 0)
	AND (
	(VouhcerDate >= @dateFrom and VouhcerDate <= @dateTo)
	OR
	(@dateFrom IS NULL and @dateTo IS NULL )
	)
	AND (Code = @entryNum OR @entryNum IS NULL)
	AND (VoucherTypeID = @voucherTypeID OR @voucherTypeID  = 0)
END
GO
/****** Object:  StoredProcedure [dbo].[GetBatchOrderByCustomer]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetBatchOrderByCustomer] --0,84,63
  @Vendor_ID   INT      = Null
   , @Code  INT      = Null
   , @SubsidiaryID INT     = Null
   , @CashCustomerID INT = NULL
AS
BEGIN
if(@Vendor_ID = 0)
begin
set @Vendor_ID = null
end
if(@CashCustomerID = 0)
begin
set @CashCustomerID = null
end
--	Select Sum(isnull(bd.Qty,0)) bTotalQty,Sum(isnull(pd.Qty,0)) pTotalQty ,pd.Item_ID,p.ID as prodid,b.ID As batchid, b.Entry_No 

--             Into
--                  #t
--             From
--                  Inv_Receipt_h b 
-- join Inv_ReceiptReceipts r on b.id=r.ReceiptID 
-- join Inv_Receipt_h p on p.ID = r.ParentReceiptID
-- join Inv_Receipt_d bd on b.ID = bd.Parent_ID
-- join Inv_Receipt_d pd on p.ID = pd.Parent_ID
--where 
--(@Vendor_ID is Null or b.Vendor_ID =@Vendor_ID)
--and (@Code is Null or  b.Code = @Code)
--and (@SubsidiaryID is Null or b.SubsidiaryID = @SubsidiaryID)
--and pd.FinishedProductID is NULL 
--and bd.FinishedProductID is NULL
----and b.Vendor_ID is  Not Null
--and (@CashCustomerID is Null or b.CashCustomerID =@CashCustomerID)

--group by pd.Item_ID,p.ID,b.ID, b.Entry_No 

select distinct [Inv_Receipt_h].* from Inv_Receipt_h 
      Join Inv_Receipt_d on Inv_Receipt_h.ID = Inv_Receipt_d.Parent_ID
      where  
	  (Inv_Receipt_h.Code = 84)
      and (@SubsidiaryID is Null or Inv_Receipt_h.SubsidiaryID = @SubsidiaryID) 
	  and (Inv_Receipt_d.Qty > Inv_Receipt_d.IssueQty)
	  and (@CashCustomerID is Null or Inv_Receipt_h.CashCustomerID =@CashCustomerID)
	  and (@Vendor_ID is Null or Inv_Receipt_h.Vendor_ID  =@Vendor_ID)

END

--Select * from Inv_Receipt_d

GO
/****** Object:  StoredProcedure [dbo].[GetBatchOrderByEntryNo]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetBatchOrderByEntryNo] --3709,84,81
   @ItemID  INT      = Null 
   , @Code  INT      = Null
   , @Entry_No INT     = Null
AS
BEGIN
WITH batchqry(Qty,Item_ID,batchID)
as
(select d.Qty,Item_ID,h.id as batchID
from Inv_Receipt_h h join Inv_Receipt_d d
on h.ID = d.Parent_ID
where  (@Code is Null or  h.Code = @Code)
and (@ItemID is Null or d.Item_ID = @ItemID)
and (@Entry_No is Null or h.Entry_No = @Entry_No)
and d.FinishedProductID is NULL 
)--select * from batchqry
,
prodqry(Qty,Item_ID,prodID,batchID)
as
(select sum(d.Qty) Qty,Item_ID,h.id as prodID,r.ReceiptID batchID
from Inv_Receipt_h h join Inv_Receipt_d d
on h.ID = d.Parent_ID
join Inv_ReceiptReceipts r 
on r.ParentReceiptID = h.ID
where  (@ItemID is Null or d.Item_ID = @ItemID)
and d.FinishedProductID is NULL 
and r.ReceiptID = (select batchID from batchqry)
group by d.Item_ID, d.Qty,h.id,r.ReceiptID)
--select * from prodqry
,
Qtyqry(Qty,Item_ID,batchID)
as
(select (b.Qty-sum(p.Qty)),p.Item_ID,b.batchID from batchqry b 
join prodqry p on b.batchID = p.batchID
group by p.Item_ID,b.batchID,b.Qty
)
SELECT       distinct 

ID, Parent_ID, Store_ID, t.Item_ID, t.Qty, Price, Unit_ID, Conv, 
Discount_Value, Discount_Percent, 
Total, Transaction_move, Item_Type, H_Discount_Percentage, 
Recieved_Qty, Avr_Cost, Notes, 
FinishedProductID, FinishedReceipt_dID,WarrantyDate,
 H_Discount_Value, DepartmentID, SalesManId, KitchenStatus,
 DetailsHTML, CustomItemName, IsMembership, MembershipDetailId, 
 IsCustomOption, CustomOptionReceiptDetailParentId, updatefromproc, 
 DynamicId, IssueQty, IsReturn,Netsales,DefaultItemCost, 
 DefaultItemQty, Final_conv, IsDeleted
 , replenshDiff , AvailableQty , ReorderQty, GoldWeight , GoldClovesWeight 
      , [Service], LoyalityBalance , TotalLoyalityBalance , IsMemebership 
FROM        Inv_Receipt_d    
join Qtyqry t on t.batchID = Parent_ID and t.Item_ID = Inv_Receipt_d.Item_ID
 
END
GO
/****** Object:  StoredProcedure [dbo].[GetCashCustomerMembershipItems]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetCashCustomerMembershipItems]
@CashCustomerId INT,
@CompanyId INT
AS 
BEGIN

DECLARE @ERPDomainName NVARCHAR(250) = (SELECT TOP 1 ISNULL(A.Value, '') FROM mstr_ConfigurationParameter A
				WHERE SubsidaryId = @CompanyId AND Name = 'ErpDomainName')

SELECT 
	A.Id [MemberShipDetailId], 
	A.Qty [Qty],
	B.Id [MembershipId], 
	B.ExpirationDate [ExpirationDate],
	ISNULL(H.Deposite, H.NetValue) [MembershipDeposite],
	C.id [CashCustomerId],
	D.ID [ItemId],
	E.ID [UnitId],
	C.Name [CashCustomerName],
	D.Name [ItemName],
	D.Name_AR [ItemNameAr],
	E.Name [UnitName],
	E.Name_AR [UnitNameAr],
	CASE WHEN NULLIF(D.ImagePath, '') IS NULL THEN '/Content/img/item Orange Strap 2.png'
			ELSE @ERPDomainName + D.ImagePath END AS [ImagePath]
		FROM Inv_MembershipDetail A
			INNER JOIN Inv_Membership B ON A.MembershipId = B.Id 
			INNER JOIN Inv_receipt_h H ON B.ReceiptId = H.ID
			INNER JOIN Inv_CashCustomer C ON B.CashCustomerId = C. id
			INNER JOIN Inv_Items D ON A.ItemId = D.ID
			INNER JOIN Inv_Unit E ON A.UnitId = E.ID
		WHERE B.CashCustomerId = @CashCustomerId AND A.Qty > 0 AND B.IsActive = 1 AND (B.IsDeleted IS NULL OR B.IsDeleted = 0)
				AND B.ExpirationDate > GETDATE()

END
GO
/****** Object:  StoredProcedure [dbo].[GetChange]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[GetChange]
@IsDelete BIT = 0
AS
BEGIN
	/* 
	* Data Context : 
	*	mstr_Resources
	*	Inv_Transaction_Codes
	*	GL_VoucherType
	*/	
	SET QUOTED_IDENTIFIER ON;
	Set nocount ON ;
	
	CREATE TABLE #GenerateData (Id BIGINT IDENTITY(1,1) NOT NULL ,DATA NVARCHAR(MAX) NULL)
	
	DECLARE @Enter NVARCHAR(50) = Char(13)+Char(10) ;
	
-- mstr_Resources
	INSERT INTO #GenerateData
	SELECT 'delete from mstr_Resources ;'
	UNION 
	SELECT 'Go'
	UNION 
	SELECT 'SET IDENTITY_INSERT mstr_Resources ON ;'
	UNION 
	SELECT 'Go'
	
	INSERT INTO #GenerateData	
	SELECT 
	'Begin' + @Enter +

    'INSERT INTO mstr_Resources (Id,ResName, ResCulture, ResValue)'	+ @Enter +
	'Values ' + @Enter +
	'( '      + @Enter +
	      Cast(ID AS NVARCHAR(10))  + @Enter +
	',' + 'N'''+REPLACE(ResName,'''','''''')+''''  + @Enter +	      
	',' + 'N'''+ResCulture+''''  + @Enter +
	',' + 'N'''+REPLACE(ResValue,'''','''''')+''''  + @Enter +
	') '      + @Enter +
	'End ;'   + @Enter +
	'Go'      + @Enter 
	FROM mstr_Resources
	
	INSERT INTO #GenerateData
	SELECT 'SET IDENTITY_INSERT mstr_Resources Off ;'
	UNION 
	SELECT 'Go'
	
	Return
-- Inv_Transaction_Codes
IF (@IsDelete = 1 )
Begin	
	INSERT INTO #GenerateData
	SELECT 'delete from Inv_Transaction_Codes ;'
	UNION 
	SELECT 'Go'
END 	

	INSERT INTO #GenerateData	
	SELECT 
	'Begin' + @Enter +
    'if Not EXISTS ( SELECT 1 FROM Inv_Transaction_Codes WHERE Code = ' + Cast(Code as Nvarchar(max)) + ' )' +@Enter+
    'INSERT INTO Inv_Transaction_Codes (Code,Name,Items,Customers,Vendors,CreateGL,PostingVoucher,Name_AR)'	+ @Enter +
	'Values ' + @Enter +
	'( '      + @Enter +
	      Cast(Code AS NVARCHAR(10))  + @Enter +
	',' + 'N'''+IsNull(NAME,'NULL')+''''  + @Enter  +
	',' + IsNull(Cast(Items AS NVARCHAR(10)),'Null') + @Enter +
	',' + IsNull(Cast(Customers AS NVARCHAR(10)),'Null') + @Enter +
	',' + IsNull(Cast(Vendors AS NVARCHAR(10)),'Null') + @Enter +
	',' + IsNull(Cast(CreateGL AS NVARCHAR(10)),'Null') + @Enter +
	',' + IsNull(Cast(PostingVoucher AS NVARCHAR(10)),'Null') + @Enter +
	',' + 'N'''+IsNull(NAME_Ar,'NULL')+''''  + @Enter  +
	') '      + @Enter +
	'End ;'   + @Enter +
	'Go'      + @Enter 
	FROM Inv_Transaction_Codes
	
-- GL_VoucherType	
IF(@IsDelete = 1 )
Begin
	INSERT INTO #GenerateData
	SELECT 'delete from GL_VoucherType ;'
	UNION 
	SELECT 'Go'
End	


    INSERT INTO #GenerateData 
	SELECT 'SET IDENTITY_INSERT GL_VoucherType ON ;'
	UNION 
	SELECT 'Go'
	
	INSERT INTO #GenerateData	
	SELECT 
	'Begin' + @Enter +
    'if Not EXISTS ( SELECT 1 FROM GL_VoucherType WHERE Id = ' + Cast(Id as Nvarchar(max)) + ' )' +@Enter+
    'INSERT INTO GL_VoucherType (ID,Code,Name,IsActive,MasterVoucherID,PaymentType,Name_AR)'	+ @Enter +
	'Values ' + @Enter +
	'( '      + @Enter +
	      Cast(ID AS NVARCHAR(10))  + @Enter +
	',' +  Cast(Code AS NVARCHAR(10))  + @Enter +
	',' + 'N'''+IsNull(NAME,'NULL')+''''  + @Enter  +
	',' + IsNull(Cast(IsActive AS NVARCHAR(10)),'Null') + @Enter +
	',' + IsNull(Cast(MasterVoucherID AS NVARCHAR(10)),'Null') + @Enter +
	',' + IsNull(Cast(PaymentType AS NVARCHAR(10)),'Null') + @Enter +
	',' + 'N'''+IsNull(NAME,'NULL')+''''  + @Enter  +
 
	') '      + @Enter +
	'End ;'   + @Enter +
	'Go'      + @Enter 
	FROM GL_VoucherType	
 
SELECT DATA FROM #GenerateData
ORDER BY id
END
GO
/****** Object:  StoredProcedure [dbo].[GetClosingVoucherDetailsData]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [dbo].[GetClosingVoucherDetailsData] 
@Year int ,
@DateFrom date ,
@DateTo date,
@ClosingType nvarchar(50),
@SubsidaryId int

AS

IF @ClosingType = '1'

Select Max(GL_Accounts.Code) as Code , (AccountNoID) as AccountNoID , CostcenterID , Sum(Debit - Credit) as DiffDebitCredit ,
Case When Sum(Debit - Credit)  > 0 Then 0 Else Abs(Sum(Debit - Credit)) END as Debit ,
Case When Sum(Debit - Credit)  > 0 Then Abs(Sum(Debit - Credit)) Else 0 END as Credit

from GL_VoucherDetails
join GL_Vouchers on GL_Vouchers.ID = GL_VoucherDetails.VoucherID
join GL_Accounts on GL_VoucherDetails.AccountNoID = GL_Accounts.AccountID
Where (GL_Accounts.Code like '4%' or GL_Accounts.Code like '5%'  )and GL_Accounts.Type = 2
and Year(GL_Vouchers.VouhcerDate) = @Year and SubsidaryID = @SubsidaryId


Group by CostcenterID , AccountNoID

ELSE

Select Max(GL_Accounts.Code) as Code , (AccountNoID) as AccountNoID , CostcenterID , Sum(Debit - Credit) as DiffDebitCredit ,
Case When Sum(Debit - Credit)  > 0 Then 0 Else Abs(Sum(Debit - Credit)) END as Debit ,
Case When Sum(Debit - Credit)  > 0 Then Abs(Sum(Debit - Credit)) Else 0 END as Credit

from GL_VoucherDetails
join GL_Vouchers on GL_Vouchers.ID = GL_VoucherDetails.VoucherID
join GL_Accounts on GL_VoucherDetails.AccountNoID = GL_Accounts.AccountID
Where (GL_Accounts.Code like '4%' or GL_Accounts.Code like '5%'  )and Type = 2 and SubsidaryID = @SubsidaryId
and  (GL_Vouchers.VouhcerDate >= @DateFrom and GL_Vouchers.VouhcerDate <= @DateTo) 

Group by CostcenterID , AccountNoID
GO
/****** Object:  StoredProcedure [dbo].[GetCustomerCollections]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetCustomerCollections]

@SubsidiaryID int ,
@BranchID int,
@DateTo date,
@Skip    int	 = 0,
@Take    int	 = 200,
@SearchValue nvarchar(100) ,
@CustomerId int = NULL,
@CustomerCategoryId int = NULL,
@CustomerStatusId INT = NULL,
@Language nvarchar(50),
@AreaId int

AS

declare @format int = 103
  SET @format = ( select CASE WHEN Date_format = 'MM/dd/yyyy' THEN  101 ELSE 103 END from mstr_Subsidaries WHERE ID = @SubsidiaryID )
Select 
        SubsidiaryID ,
		CustomerID ,
		Max(CustomerCode) as CustomerCode,
		Max(CustomerName) as CustomerName ,
		Max(Phone) as Phone ,
		Sum(NumofRequiredInstallments) as NumofRequiredInstallments,
		Sum(CurrentBalance) as CurrentBalance ,
		Sum(AmountofRequiredInstallments) as AmountofRequiredInstallments ,
		Max(CollectionDate) as CollectionDate
	 from (
Select    Inv_Receipt_h.[SubsidiaryID],
          Vendor_ID as CustomerID 
		  ,Max([dbo].[GL_Accounts].[Code]) as CustomerCode
		  ,CASE WHEN  @Language = 'en-Us' THEN Max([dbo].[GL_Accounts].[Name]) ELSE Max([dbo].[GL_Accounts].[Name_AR]) END as CustomerName
		  ,Max([dbo].[GL_Accounts].[Phone]) as Phone
		  ,IsNULL((Select Count(ID) from Crm_Invoice_Installments_Details 
		   Where InvoiceInstallmentsID = crm_Invoice_Installments.ID
		         And (StatusID != 1)
				 AND (([InstallmentDate] <= @DateTo)OR(@DateTo IS NULL)
				 )),0) as NumofRequiredInstallments
		  ,SUM(Crm_Invoice_Installments.InvoiceValue) -
		  ISNULL((Select Sum(GL_VoucherDetails.Credit) from GL_VoucherDetails  
			 JOIN GL_Vouchers on GL_Vouchers.ID = GL_VoucherDetails.VoucherID
			 JOIN Crm_Invoice_Installments_Details on Crm_Invoice_Installments_Details.ID = GL_Vouchers.InvoiceInstallmentsDetailsId
			 Where GL_VoucherDetails.AccountNoID = Vendor_ID AND (Crm_Invoice_Installments_Details.StatusID != 1)
			 ),0) as CurrentBalance
		  ,ISNULL((Select Sum(InstallmentValue) from Crm_Invoice_Installments_Details 
		   Where InvoiceInstallmentsID = crm_Invoice_Installments.ID
		         And (StatusID != 1 )
				 AND (([InstallmentDate] <= @DateTo)OR(@DateTo IS NULL))
				 ),0) -
		  ISNULL((Select Sum(GL_VoucherDetails.Credit) from GL_VoucherDetails  
			 JOIN GL_Vouchers on GL_Vouchers.ID = GL_VoucherDetails.VoucherID
			 JOIN Crm_Invoice_Installments_Details on Crm_Invoice_Installments_Details.ID = GL_Vouchers.InvoiceInstallmentsDetailsId
			 Where GL_VoucherDetails.AccountNoID = Vendor_ID AND (Crm_Invoice_Installments_Details.StatusID != 1)
			 ),0) as AmountofRequiredInstallments
           ,convert(varchar(25),  (Select MAX(GL_Vouchers.VouhcerDate) from GL_VoucherDetails  
			 JOIN GL_Vouchers on GL_Vouchers.ID = GL_VoucherDetails.VoucherID
			 JOIN Crm_Invoice_Installments_Details on Crm_Invoice_Installments_Details.ID = GL_Vouchers.InvoiceInstallmentsDetailsId
			 Where GL_VoucherDetails.AccountNoID = Vendor_ID
			 ), @format) as CollectionDate
from GL_Accounts
Join Inv_Receipt_h on GL_Accounts.AccountId = Inv_Receipt_h.Vendor_ID
Join Crm_Invoice_Installments on crm_Invoice_Installments.InvoiceID = Inv_Receipt_h.ID
LEFT JOIN [dbo].[GL_VendorCategory] on [dbo].[GL_VendorCategory].[ID] = [dbo].[GL_Accounts].VendorCategoryID
Where 
 ([dbo].[Inv_Receipt_h].[SubsidiaryID] = @SubsidiaryID ) AND
 (Inv_Receipt_h.Vendor_ID = @CustomerId or @CustomerId IS NULL ) AND
 ([GL_Accounts].[AreaId] = @AreaId or @AreaId IS NULL ) AND
 ([GL_VendorCategory].[ID] = @CustomerCategoryId or @CustomerCategoryId IS NULL ) AND
 ([GL_Accounts].[CustomerStatusId] = @CustomerStatusId or @CustomerStatusId IS NULL ) AND
 ([dbo].[Inv_Receipt_h].[Branch_ID] = @BranchID OR @BranchID = 0) AND
 ((Cast([dbo].[GL_Accounts].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[GL_Accounts].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[GL_Accounts].[Phone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[Inv_Receipt_h].[Memo]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([Entry_No]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR (@SearchValue IS NULL) OR (@SearchValue  = ''))

Group By Vendor_ID ,SubsidiaryID , Crm_Invoice_Installments.ID
) CustomerCollections

Where CustomerCollections.CurrentBalance != 0

Group By CustomerCollections.CustomerID  , SubsidiaryID

ORDER BY CustomerCollections.CustomerID , SubsidiaryID

OFFSET     @Skip ROWS       
FETCH NEXT @Take ROWS ONLY; 

GO
/****** Object:  StoredProcedure [dbo].[GetCustomerCollectionsCreditLimit]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetCustomerCollectionsCreditLimit] --63,11131,'ar-KW'
@SubsidiaryID int,-- =63 ,
@CustomerId int ,--= 9265,
@Language nvarchar(50)--='ar-eg'
As
begin
 
Select  distinct  Inv_Receipt_h.[SubsidiaryID],
          Vendor_ID as CustomerID ,
		  Inv_Receipt_h.Entry_Date,
		  Inv_Receipt_h.ID Receipt_hID
		  ,Max([dbo].[GL_Accounts].[Code]) as CustomerCode
		  ,CASE WHEN  @Language = 'en-Us' THEN Max([dbo].[GL_Accounts].[Name]) 
		  ELSE Max([dbo].[GL_Accounts].[Name_AR]) END as CustomerName
		  ,Max([dbo].[GL_Accounts].[Phone]) as Phone
		  ,(isnull(Inv_Receipt_h.NetValue,0) - isnull(v.PaidAmount,0))as CurrentBalance
		
from GL_Accounts
Join Inv_Receipt_h on GL_Accounts.AccountId = Inv_Receipt_h.Vendor_ID
 Join GL_Vouchers v on v.ReceiptId = Inv_Receipt_h.ID

Where 
 ([dbo].[Inv_Receipt_h].[SubsidiaryID] = @SubsidiaryID ) AND
 (Inv_Receipt_h.Vendor_ID = @CustomerId ) 
 and (v.isTotalyPaid = 0 or v.isTotalyPaid = 2 or v.isTotalyPaid is null)
 and VoucherTypeID = 23
 
Group By Vendor_ID ,SubsidiaryID ,Inv_Receipt_h.Entry_Date, Inv_Receipt_h.ID, Inv_Receipt_h.NetValue,v.PaidAmount

End

GO
/****** Object:  StoredProcedure [dbo].[GetCustomerList]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetCustomerList]

@SubsidiaryID int ,
@Skip int = 0,
@Take int = 200,
@SearchValue nvarchar(Max),
@CustomerType int = 0 ,
@Lang nvarchar(50)

AS
if(@Lang = 'en-US') 

	IF(@CustomerType = 2)--RelatedCustomer
	BEGIN
		SELECT Distinct
       [dbo].[GL_AccountSubsidiary].[SubsidiaryID]
      ,[dbo].[GL_Accounts].[AccountID] as AccountID
	  ,[dbo].[GL_Accounts].[VendorCode] as Code 
	  ,CAST([dbo].[GL_Accounts].[VendorCode] AS BIGINT) as VCode
      ,[dbo].[GL_Accounts].[Name] as Name
      ,[dbo].[GL_Accounts].[Phone] 
      ,[dbo].[GL_Accounts].[AltPhone]
	  ,[dbo].[GL_Accounts].[IsActive]
	  ,[dbo].[GL_Accounts].[company_individual] as CustomerType
	  , Case When  [company_individual] = 0 Then 'Individual' ELSE 'Company' End as CustomerTypeName
	  ,[dbo].[GL_VendorCategory].[CatName] as CustomerCategory
	  ,[dbo].[mstr_Country].[CountryName] as [CountryName]
	  ,[dbo].[GL_Accounts].[ParentVendorID]
	  FROM [dbo].[GL_Accounts] 
	  JOIN [dbo].[GL_RelatedAccounts] as ra on gl_accounts.AccountID = ra.RelatedAccountID
	  JOIN [dbo].[GL_AccountSubsidiary] ON [dbo].[GL_AccountSubsidiary].[AccountID] = [dbo].[GL_Accounts].[AccountID]
	  LEFT JOIN [dbo].[GL_VendorCategory] ON  [dbo].[GL_VendorCategory].[ID] = [dbo].[GL_Accounts].[VendorCategoryID]
	  LEFT JOIN [dbo].[mstr_Country] ON [dbo].[mstr_Country].[ID] = [dbo].[GL_Accounts].[CounrtyID]

		 Where 
		 ([dbo].[GL_AccountSubsidiary].[SubsidiaryID] = @SubsidiaryID ) AND
		 ([dbo].[GL_Accounts].[IsVendor] = 0 ) AND
		 ([dbo].[GL_Accounts].[IsHidden] = 1 ) AND
		 ([dbo].[GL_Accounts].[LevelNo]  = 0 ) AND
		 ([dbo].[GL_Accounts].[Type]     = 2 ) AND
		 ((Cast([dbo].[GL_Accounts].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
		 (Cast([dbo].[GL_Accounts].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
		 (Cast([dbo].[GL_Accounts].[Phone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
		 (Cast([dbo].[GL_Accounts].[AltPhone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
		 (Cast([dbo].[GL_VendorCategory].[CatName]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
		 (Cast([dbo].[mstr_Country].[CountryName]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
		 (@SearchValue IS NULL) OR (@SearchValue  = ''))		 

		  ORDER BY [VCode]
		  OFFSET     @Skip ROWS       
		  FETCH NEXT @Take ROWS ONLY; 
	END
	ELSE IF(@CustomerType = 1) --Main customer
	BEGIN
	SELECT Distinct
       [dbo].[GL_AccountSubsidiary].[SubsidiaryID]
      ,[dbo].[GL_Accounts].[AccountID] as AccountID
	  ,[dbo].[GL_Accounts].[VendorCode] as Code 
	  ,CAST([dbo].[GL_Accounts].[VendorCode] AS BIGINT) as VCode
      ,[dbo].[GL_Accounts].[Name] as Name
      ,[dbo].[GL_Accounts].[Phone] 
      ,[dbo].[GL_Accounts].[AltPhone]
	  ,[dbo].[GL_Accounts].[IsActive]
	  ,[dbo].[GL_Accounts].[company_individual] as CustomerType
	  , Case When  [company_individual] = 0 Then 'Individual' ELSE 'Company' End as CustomerTypeName
	  ,[dbo].[GL_VendorCategory].[CatName] as CustomerCategory
	  ,[dbo].[mstr_Country].[CountryName] as [CountryName]
	  ,[dbo].[GL_Accounts].[ParentVendorID]
	  FROM [dbo].[GL_Accounts]
	  JOIN [dbo].[GL_AccountSubsidiary] ON [dbo].[GL_AccountSubsidiary].[AccountID] = [dbo].[GL_Accounts].[AccountID]
	  LEFT JOIN [dbo].[GL_VendorCategory] ON  [dbo].[GL_VendorCategory].[ID] = [dbo].[GL_Accounts].[VendorCategoryID]
	  LEFT JOIN [dbo].[mstr_Country] ON [dbo].[mstr_Country].[ID] = [dbo].[GL_Accounts].[CounrtyID]

		 Where 
		 ([dbo].[GL_AccountSubsidiary].[SubsidiaryID] = @SubsidiaryID ) AND
		 ([dbo].[GL_Accounts].[IsVendor] = 0 ) AND
		 ([dbo].[GL_Accounts].[IsHidden] = 1 ) AND
		 ([dbo].[GL_Accounts].[LevelNo]  = 0 ) AND
		 ([dbo].[GL_Accounts].[Type]     = 2 ) AND
		 ((Cast([dbo].[GL_Accounts].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
		 (Cast([dbo].[GL_Accounts].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
		 (Cast([dbo].[GL_Accounts].[Phone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
		 (Cast([dbo].[GL_Accounts].[AltPhone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
		 (Cast([dbo].[GL_VendorCategory].[CatName]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
		 (Cast([dbo].[mstr_Country].[CountryName]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
		 (@SearchValue IS NULL) OR (@SearchValue  = '')) AND
		 NOT EXISTS
		 (
			 SELECT ra.RelatedAccountID
			 FROM GL_RelatedAccounts as ra
			 WHERE GL_Accounts.AccountID = ra.RelatedAccountID
		 )
		  ORDER BY [VCode]
		  OFFSET     @Skip ROWS       
		  FETCH NEXT @Take ROWS ONLY; 
	END
	ELSE
	BEGIN
	   SELECT Distinct
		   [dbo].[GL_AccountSubsidiary].[SubsidiaryID]
		  ,[dbo].[GL_Accounts].[AccountID] as AccountID
		  ,[dbo].[GL_Accounts].[VendorCode] as Code 
		  ,CAST([dbo].[GL_Accounts].[VendorCode] AS BIGINT) as VCode
		  ,[dbo].[GL_Accounts].[Name] as Name
		  ,[dbo].[GL_Accounts].[Phone] 
		  ,[dbo].[GL_Accounts].[AltPhone]
		  ,[dbo].[GL_Accounts].[IsActive]
		  ,[dbo].[GL_Accounts].[company_individual] as CustomerType
	      , Case When  [company_individual] = 0 Then 'Individual' ELSE 'Company' End as CustomerTypeName
		  ,[dbo].[GL_VendorCategory].[CatName] as CustomerCategory
		  ,[dbo].[mstr_Country].[CountryName] as [CountryName]
		  ,[dbo].[GL_Accounts].[ParentVendorID]
		  FROM [dbo].[GL_Accounts]
		  JOIN [dbo].[GL_AccountSubsidiary] ON [dbo].[GL_AccountSubsidiary].[AccountID] = [dbo].[GL_Accounts].[AccountID]
		  LEFT JOIN [dbo].[GL_VendorCategory] ON  [dbo].[GL_VendorCategory].[ID] = [dbo].[GL_Accounts].[VendorCategoryID]
		  LEFT JOIN [dbo].[mstr_Country] ON [dbo].[mstr_Country].[ID] = [dbo].[GL_Accounts].[CounrtyID]

		 Where 
		 ([dbo].[GL_AccountSubsidiary].[SubsidiaryID] = @SubsidiaryID ) AND
		 ([dbo].[GL_Accounts].[IsVendor] = 0 ) AND
		 ([dbo].[GL_Accounts].[IsHidden] = 1 ) AND
		 ([dbo].[GL_Accounts].[LevelNo]  = 0 ) AND
		 ([dbo].[GL_Accounts].[Type]     = 2 ) AND
		 ((Cast([dbo].[GL_Accounts].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
		 (Cast([dbo].[GL_Accounts].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
		 (Cast([dbo].[GL_Accounts].[Phone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
		 (Cast([dbo].[GL_Accounts].[AltPhone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR  
		 (Cast([dbo].[GL_VendorCategory].[CatName]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
		 (Cast([dbo].[mstr_Country].[CountryName]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
		 (@SearchValue IS NULL) OR (@SearchValue  = ''))
		  ORDER BY [VCode]
		  OFFSET     @Skip ROWS       
		  FETCH NEXT @Take ROWS ONLY; 
	END
 
 Else
 	IF(@CustomerType = 2)--RelatedCustomer
	BEGIN
		SELECT Distinct
       [dbo].[GL_AccountSubsidiary].[SubsidiaryID]
      ,[dbo].[GL_Accounts].[AccountID] as AccountID
	  ,[dbo].[GL_Accounts].[VendorCode] as Code 
	  ,CAST([dbo].[GL_Accounts].[VendorCode] AS BIGINT) as VCode
	  ,[dbo].[GL_Accounts].[Name_AR] as Name
      ,[dbo].[GL_Accounts].[Phone] 
      ,[dbo].[GL_Accounts].[AltPhone]
	  ,[dbo].[GL_Accounts].[IsActive]
	  ,[dbo].[GL_Accounts].[company_individual] as CustomerType
	  , Case When  [company_individual] = 0 Then N'فرد' ELSE N'شركة' End as CustomerTypeName
	  ,[dbo].[GL_VendorCategory].[CatName_AR] as CustomerCategory
	  ,[dbo].[mstr_Country].[CountryName_AR] as [CountryName]
	  ,[dbo].[GL_Accounts].[ParentVendorID]
	  FROM [dbo].[GL_Accounts] 
	  JOIN [dbo].[GL_RelatedAccounts] as ra on gl_accounts.AccountID = ra.RelatedAccountID
	  JOIN [dbo].[GL_AccountSubsidiary] ON [dbo].[GL_AccountSubsidiary].[AccountID] = [dbo].[GL_Accounts].[AccountID]
	  LEFT JOIN [dbo].[GL_VendorCategory] ON  [dbo].[GL_VendorCategory].[ID] = [dbo].[GL_Accounts].[VendorCategoryID]
	  LEFT JOIN [dbo].[mstr_Country] ON [dbo].[mstr_Country].[ID] = [dbo].[GL_Accounts].[CounrtyID]

		 Where 
		 ([dbo].[GL_AccountSubsidiary].[SubsidiaryID] = @SubsidiaryID ) AND
		 ([dbo].[GL_Accounts].[IsVendor] = 0 ) AND
		 ([dbo].[GL_Accounts].[IsHidden] = 1 ) AND
		 ([dbo].[GL_Accounts].[LevelNo]  = 0 ) AND
		 ([dbo].[GL_Accounts].[Type]     = 2 ) AND
		 ((Cast([dbo].[GL_Accounts].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
		 (Cast([dbo].[GL_Accounts].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
		 (Cast([dbo].[GL_Accounts].[Phone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
		 (Cast([dbo].[GL_Accounts].[AltPhone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
		 (Cast([dbo].[GL_VendorCategory].[CatName_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
		 (Cast([dbo].[mstr_Country].[CountryName_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
		 (@SearchValue IS NULL) OR (@SearchValue  = ''))		 

		  ORDER BY [VCode]
		  OFFSET     @Skip ROWS       
		  FETCH NEXT @Take ROWS ONLY; 
	END
	ELSE IF(@CustomerType = 1) --Main customer
	BEGIN
	SELECT Distinct
       [dbo].[GL_AccountSubsidiary].[SubsidiaryID]
      ,[dbo].[GL_Accounts].[AccountID] as AccountID
	  ,[dbo].[GL_Accounts].[VendorCode] as Code 
	  ,CAST([dbo].[GL_Accounts].[VendorCode] AS BIGINT) as VCode
	  ,[dbo].[GL_Accounts].[Name_AR] as Name
      ,[dbo].[GL_Accounts].[Phone] 
      ,[dbo].[GL_Accounts].[AltPhone]
	  ,[dbo].[GL_Accounts].[IsActive]
	  ,[dbo].[GL_Accounts].[company_individual] as CustomerType
	  , Case When  [company_individual] = 0 Then N'فرد' ELSE N'شركة' End as CustomerTypeName
	  ,[dbo].[GL_VendorCategory].[CatName_AR] as CustomerCategory
	  ,[dbo].[mstr_Country].[CountryName_AR] as [CountryName]
	  ,[dbo].[GL_Accounts].[ParentVendorID]
	  FROM [dbo].[GL_Accounts]
	  JOIN [dbo].[GL_AccountSubsidiary] ON [dbo].[GL_AccountSubsidiary].[AccountID] = [dbo].[GL_Accounts].[AccountID]
	  LEFT JOIN [dbo].[GL_VendorCategory] ON  [dbo].[GL_VendorCategory].[ID] = [dbo].[GL_Accounts].[VendorCategoryID]
	  LEFT JOIN [dbo].[mstr_Country] ON [dbo].[mstr_Country].[ID] = [dbo].[GL_Accounts].[CounrtyID]

		 Where 
		 ([dbo].[GL_AccountSubsidiary].[SubsidiaryID] = @SubsidiaryID ) AND
		 ([dbo].[GL_Accounts].[IsVendor] = 0 ) AND
		 ([dbo].[GL_Accounts].[IsHidden] = 1 ) AND
		 ([dbo].[GL_Accounts].[LevelNo]  = 0 ) AND
		 ([dbo].[GL_Accounts].[Type]     = 2 ) AND
		 ((Cast([dbo].[GL_Accounts].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
		 (Cast([dbo].[GL_Accounts].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
		 (Cast([dbo].[GL_Accounts].[Phone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
		 (Cast([dbo].[GL_Accounts].[AltPhone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
		 (Cast([dbo].[GL_VendorCategory].[CatName_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
		 (Cast([dbo].[mstr_Country].[CountryName_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
		 (@SearchValue IS NULL) OR (@SearchValue  = '')) AND
		 NOT EXISTS
		 (
			 SELECT ra.RelatedAccountID
			 FROM GL_RelatedAccounts as ra
			 WHERE GL_Accounts.AccountID = ra.RelatedAccountID
		 )
		  ORDER BY [VCode]
		  OFFSET     @Skip ROWS       
		  FETCH NEXT @Take ROWS ONLY; 
	END
	ELSE
	BEGIN
	   SELECT Distinct
		   [dbo].[GL_AccountSubsidiary].[SubsidiaryID]
		  ,[dbo].[GL_Accounts].[AccountID] as AccountID
		  ,[dbo].[GL_Accounts].[VendorCode] as Code 
		  ,CAST([dbo].[GL_Accounts].[VendorCode] AS BIGINT) as VCode
		  ,[dbo].[GL_Accounts].[Name_AR] as Name
		  ,[dbo].[GL_Accounts].[Phone] 
		  ,[dbo].[GL_Accounts].[AltPhone]
		  ,[dbo].[GL_Accounts].[IsActive]
		  ,[dbo].[GL_Accounts].[company_individual] as CustomerType
	      , Case When  [company_individual] = 0 Then N'فرد' ELSE N'شركة' End as CustomerTypeName
		  ,[dbo].[GL_VendorCategory].[CatName_AR] as CustomerCategory
		  ,[dbo].[mstr_Country].[CountryName_AR] as [CountryName]
		  ,[dbo].[GL_Accounts].[ParentVendorID]
		  FROM [dbo].[GL_Accounts]
		  JOIN [dbo].[GL_AccountSubsidiary] ON [dbo].[GL_AccountSubsidiary].[AccountID] = [dbo].[GL_Accounts].[AccountID]
		  LEFT JOIN [dbo].[GL_VendorCategory] ON  [dbo].[GL_VendorCategory].[ID] = [dbo].[GL_Accounts].[VendorCategoryID]
		  LEFT JOIN [dbo].[mstr_Country] ON [dbo].[mstr_Country].[ID] = [dbo].[GL_Accounts].[CounrtyID]

		 Where 
		 ([dbo].[GL_AccountSubsidiary].[SubsidiaryID] = @SubsidiaryID ) AND
		 ([dbo].[GL_Accounts].[IsVendor] = 0 ) AND
		 ([dbo].[GL_Accounts].[IsHidden] = 1 ) AND
		 ([dbo].[GL_Accounts].[LevelNo]  = 0 ) AND
		 ([dbo].[GL_Accounts].[Type]     = 2 ) AND
		 ((Cast([dbo].[GL_Accounts].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
		 (Cast([dbo].[GL_Accounts].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
		 (Cast([dbo].[GL_Accounts].[Phone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
		 (Cast([dbo].[GL_Accounts].[AltPhone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR  
		 (Cast([dbo].[GL_VendorCategory].[CatName_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
		 (Cast([dbo].[mstr_Country].[CountryName_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
		 (@SearchValue IS NULL) OR (@SearchValue  = ''))
		  ORDER BY [VCode]
		  OFFSET     @Skip ROWS       
		  FETCH NEXT @Take ROWS ONLY; 
	END
 
GO
/****** Object:  StoredProcedure [dbo].[GetCustomerListCount]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetCustomerListCount]

@SubsidiaryID int ,
@SearchValue nvarchar(Max),
@CustomerType int = 0

AS
	IF(@CustomerType = 2)--RelatedCustomer
	BEGIN
		SELECT Distinct
       [dbo].[GL_AccountSubsidiary].[SubsidiaryID]
      ,[dbo].[GL_Accounts].[AccountID] as AccountID
	  ,[dbo].[GL_Accounts].[VendorCode] as Code 
      ,[dbo].[GL_Accounts].[Name] as NameEn
	  ,[dbo].[GL_Accounts].[Name_AR] as NameAr
      ,[dbo].[GL_Accounts].[Phone] 
      ,[dbo].[GL_Accounts].[AltPhone]
	  ,[dbo].[GL_Accounts].[IsActive]
	  ,[dbo].[GL_Accounts].[company_individual] as CustomerType
	  ,[dbo].[GL_VendorCategory].[CatName] as CustomerCategoryEn
	  ,[dbo].[GL_VendorCategory].[CatName_AR] as CustomerCategoryAr
	  ,[dbo].[mstr_Country].[CountryName] as [CountryNameEn]
	  ,[dbo].[mstr_Country].[CountryName_AR] as [CountryNameAr]
	  ,[dbo].[GL_Accounts].[ParentVendorID]
	  FROM [dbo].[GL_Accounts] 
	  JOIN [dbo].[GL_RelatedAccounts] as ra on gl_accounts.AccountID = ra.RelatedAccountID
	  JOIN [dbo].[GL_AccountSubsidiary] ON [dbo].[GL_AccountSubsidiary].[AccountID] = [dbo].[GL_Accounts].[AccountID]
	  LEFT JOIN [dbo].[GL_VendorCategory] ON  [dbo].[GL_VendorCategory].[ID] = [dbo].[GL_Accounts].[VendorCategoryID]
	  LEFT JOIN [dbo].[mstr_Country] ON [dbo].[mstr_Country].[ID] = [dbo].[GL_Accounts].[CounrtyID]

		 Where 
		 ([dbo].[GL_AccountSubsidiary].[SubsidiaryID] = @SubsidiaryID ) AND
		 ([dbo].[GL_Accounts].[IsVendor] = 0 ) AND
		 ([dbo].[GL_Accounts].[IsHidden] = 1 ) AND
		 ([dbo].[GL_Accounts].[LevelNo]  = 0 ) AND
		 ([dbo].[GL_Accounts].[Type]     = 2 ) AND
		 ((Cast([dbo].[GL_Accounts].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
		 (Cast([dbo].[GL_Accounts].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
		 (Cast([dbo].[GL_Accounts].[Phone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
		 (Cast([dbo].[GL_Accounts].[AltPhone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
		 (Cast([dbo].[GL_VendorCategory].[CatName]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
		 (Cast([dbo].[mstr_Country].[CountryName]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
		 (@SearchValue IS NULL) OR (@SearchValue  = ''))		 

		  ORDER BY [dbo].[GL_Accounts].[AccountID]

	END
	ELSE IF(@CustomerType = 1) --Main customer
	BEGIN
	SELECT Distinct
       [dbo].[GL_AccountSubsidiary].[SubsidiaryID]
      ,[dbo].[GL_Accounts].[AccountID] as AccountID
	  ,[dbo].[GL_Accounts].[VendorCode] as Code 
      ,[dbo].[GL_Accounts].[Name] as NameEn
	  ,[dbo].[GL_Accounts].[Name_AR] as NameAr
      ,[dbo].[GL_Accounts].[Phone] 
      ,[dbo].[GL_Accounts].[AltPhone]
	  ,[dbo].[GL_Accounts].[IsActive]
	  ,[dbo].[GL_Accounts].[company_individual] as CustomerType
	  ,[dbo].[GL_VendorCategory].[CatName] as CustomerCategoryEn
	  ,[dbo].[GL_VendorCategory].[CatName_AR] as CustomerCategoryAr
	  ,[dbo].[mstr_Country].[CountryName] as [CountryNameEn]
	  ,[dbo].[mstr_Country].[CountryName_AR] as [CountryNameAr]
	  ,[dbo].[GL_Accounts].[ParentVendorID]
	  FROM [dbo].[GL_Accounts]
	  JOIN [dbo].[GL_AccountSubsidiary] ON [dbo].[GL_AccountSubsidiary].[AccountID] = [dbo].[GL_Accounts].[AccountID]
	  LEFT JOIN [dbo].[GL_VendorCategory] ON  [dbo].[GL_VendorCategory].[ID] = [dbo].[GL_Accounts].[VendorCategoryID]
	  LEFT JOIN [dbo].[mstr_Country] ON [dbo].[mstr_Country].[ID] = [dbo].[GL_Accounts].[CounrtyID]

		 Where 
		 ([dbo].[GL_AccountSubsidiary].[SubsidiaryID] = @SubsidiaryID ) AND
		 ([dbo].[GL_Accounts].[IsVendor] = 0 ) AND
		 ([dbo].[GL_Accounts].[IsHidden] = 1 ) AND
		 ([dbo].[GL_Accounts].[LevelNo]  = 0 ) AND
		 ([dbo].[GL_Accounts].[Type]     = 2 ) AND
		 ((Cast([dbo].[GL_Accounts].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
		 (Cast([dbo].[GL_Accounts].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
		 (Cast([dbo].[GL_Accounts].[Phone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
		 (Cast([dbo].[GL_Accounts].[AltPhone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
		 (Cast([dbo].[GL_VendorCategory].[CatName]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
		 (Cast([dbo].[mstr_Country].[CountryName]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
		 (@SearchValue IS NULL) OR (@SearchValue  = '')) AND
		 NOT EXISTS
		 (
			 SELECT ra.RelatedAccountID
			 FROM GL_RelatedAccounts as ra
			 WHERE GL_Accounts.AccountID = ra.RelatedAccountID
		 )
		  ORDER BY [dbo].[GL_Accounts].[AccountID]
		   
	END
	ELSE
	BEGIN
	   SELECT Distinct
		   [dbo].[GL_AccountSubsidiary].[SubsidiaryID]
		  ,[dbo].[GL_Accounts].[AccountID] as AccountID
		  ,[dbo].[GL_Accounts].[VendorCode] as Code 
		  ,[dbo].[GL_Accounts].[Name] as NameEn
		  ,[dbo].[GL_Accounts].[Name_AR] as NameAr
		  ,[dbo].[GL_Accounts].[Phone] 
		  ,[dbo].[GL_Accounts].[AltPhone]
		  ,[dbo].[GL_Accounts].[IsActive]
		  ,[dbo].[GL_Accounts].[company_individual] as CustomerType
		  ,[dbo].[GL_VendorCategory].[CatName] as CustomerCategoryEn
		  ,[dbo].[GL_VendorCategory].[CatName_AR] as CustomerCategoryAr
		  ,[dbo].[mstr_Country].[CountryName] as [CountryNameEn]
		  ,[dbo].[mstr_Country].[CountryName_AR] as [CountryNameAr]
		  ,[dbo].[GL_Accounts].[ParentVendorID]
		  FROM [dbo].[GL_Accounts]
		  JOIN [dbo].[GL_AccountSubsidiary] ON [dbo].[GL_AccountSubsidiary].[AccountID] = [dbo].[GL_Accounts].[AccountID]
		  LEFT JOIN [dbo].[GL_VendorCategory] ON  [dbo].[GL_VendorCategory].[ID] = [dbo].[GL_Accounts].[VendorCategoryID]
		  LEFT JOIN [dbo].[mstr_Country] ON [dbo].[mstr_Country].[ID] = [dbo].[GL_Accounts].[CounrtyID]

		 Where 
		 ([dbo].[GL_AccountSubsidiary].[SubsidiaryID] = @SubsidiaryID ) AND
		 ([dbo].[GL_Accounts].[IsVendor] = 0 ) AND
		 ([dbo].[GL_Accounts].[IsHidden] = 1 ) AND
		 ([dbo].[GL_Accounts].[LevelNo]  = 0 ) AND
		 ([dbo].[GL_Accounts].[Type]     = 2 ) AND
		 ((Cast([dbo].[GL_Accounts].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
		 (Cast([dbo].[GL_Accounts].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
		 (Cast([dbo].[GL_Accounts].[Phone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
		 (Cast([dbo].[GL_Accounts].[AltPhone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR  
		 (Cast([dbo].[GL_VendorCategory].[CatName]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
		 (Cast([dbo].[mstr_Country].[CountryName]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
		 (@SearchValue IS NULL) OR (@SearchValue  = ''))
		  ORDER BY [dbo].[GL_Accounts].[AccountID]

	END
GO
/****** Object:  StoredProcedure [dbo].[GetCustomerPaymentVoucherList]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetCustomerPaymentVoucherList]

@SubsidiaryID int ,
@VoucherTypeID int ,
@OtherVoucher bit ,
@Language nvarchar(50),
@Skip int = 0,
@Take int = 200,
@SearchValue NVARCHAR(150),
@sortOrder   NVARCHAR(500),
@sortColumn  NVARCHAR(500),
@OpenListForFirstTime bit

AS
 if(@Language = 'en-US')
  if(@OpenListForFirstTime = 1)
  if @OtherVoucher = 1 
	SELECT  * from (
   SELECT Distinct 
      [dbo].[GL_Vouchers].[ID],
      [dbo].[GL_Vouchers].[SubsidaryID],
	  [dbo].[mstr_Branch].[Name]  as BranchName ,
      CAST([dbo].[GL_Vouchers].Code AS BIGINT) as Code,
	  [dbo].[GL_Vouchers].Memo ,
	  CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate, 103) as VouhcerDate,
	  [dbo].[GL_Vouchers].VouhcerDate as VouhcerDates,
	  ''as AccountName ,--[dbo].[GL_Accounts].[Name] ELSE [dbo].[GL_Accounts].[Name_AR] END) as AccountName ,	  
	  GL_Accounts.[Name] as CustomerName ,
	  GL_Accounts.VendorCode as CustomerCode ,
	  Security_Users.[Name] as CollectorName,
	  [dbo].[GL_Vouchers].Posted,
	  CONVERT(varchar(100), [dbo].[GL_Vouchers].Posted) as PostedOrder,
	  [dbo].[GL_Vouchers].VoucherTypeID,
	  [dbo].[GL_VoucherType].Code as VoucherTypeCode,
	  [dbo].[GL_VoucherType].Name as VoucherTypeName,
	  'Journal Voucher' as ReportName ,
	  --[dbo].[mstr_Branch].[Name]  as BranchName ,
	  	 Case When [dbo].[GL_VoucherType].Code = 11 Then
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] 
	    where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID] AND ([dbo].[GL_VoucherDetails].SetupAccountType IS NULL OR [dbo].[GL_VoucherDetails].SetupAccountType = 1)  ) 
	 	Else 
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) 
        End as Total ,	  
		  ( select CONVERT(decimal(18,3), SUM(Debit)) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as TotalValue


	  FROM [dbo].[GL_Vouchers]
	  LEFT JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  LEFT JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  --LEFT JOIN  [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[GL_VoucherDetails].AccountNoID
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[GL_Vouchers].[BranchID]
	  LEFT JOIN Security_Users on GL_Vouchers.CollecterId = Security_Users.Id
	  Join GL_Accounts on GL_Accounts.AccountID = GL_VoucherDetails.AccountNoID AND
	   Credit > 0 and SetupAccountType IS NULL 


   Where 
	 ([dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID ) AND
	 ([dbo].[GL_VoucherDetails].Credit > 0 OR [dbo].[GL_VoucherDetails] .ID is null) AND
	 ([dbo].[GL_Vouchers].VoucherTypeID = @VoucherTypeID OR [dbo].[GL_VoucherType].VoucherTypeSerialId = @VoucherTypeID ) AND
	 ((Cast([dbo].[GL_Vouchers].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Vouchers].[Memo]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
	 (Cast([dbo].[mstr_Branch].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Accounts].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Accounts].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[Security_Users].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate , 103) like '%'+@SearchValue+'%' ) OR  
	 (@SearchValue IS NULL) OR (@SearchValue  = ''))
	  ) as Vouchers
	  ORDER BY
        case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Code' then Code
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Memo' then Memo
        end ASC
,       case
        when @sortOrder <> 'ASC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then convert(date, VouhcerDates)
        end ASC
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Total' then TotalValue
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end ASC    
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end ASC 
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CustomerName' then CustomerName
        end ASC 
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'CustomerCode' then CustomerCode
        end ASC 
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CollectorName' then CollectorName
        end ASC 
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CollectorName' then CollectorName
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'CustomerCode' then CustomerCode
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CustomerName' then CustomerName
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Code' then Code
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Memo' then Memo
        end DESC
,       case
        when @sortOrder <> 'DESC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then convert(date, VouhcerDates)
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Total' then TotalValue
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end DESC     
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end DESC 
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end DESC,
		Code Desc 

	  OFFSET     @Skip ROWS       
	  FETCH NEXT @Take ROWS ONLY; 

	else
	SELECT  * from (
	SELECT Distinct 
		  [dbo].[GL_Vouchers].[ID],
		  [dbo].[GL_Vouchers].[SubsidaryID],
		  [dbo].[mstr_Branch].[Name]  as BranchName ,
		  CAST([dbo].[GL_Vouchers].Code AS BIGINT) as Code,
		  [dbo].[GL_Vouchers].Memo ,
		  CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate, 103) as VouhcerDate,
		  [dbo].[GL_Vouchers].VouhcerDate as VouhcerDates ,
		  '' as AccountName ,--[dbo].[GL_Accounts].[Name] ELSE [dbo].[GL_Accounts].[Name_AR] END) as AccountName ,	 
		  GL_Accounts.[Name]  as CustomerName ,
		  GL_Accounts.VendorCode as CustomerCode ,
		  Security_Users.[Name] as CollectorName,
		  [dbo].[GL_Vouchers].Posted,
		  CONVERT(varchar(100), [dbo].[GL_Vouchers].Posted) as PostedOrder,
		  [dbo].[GL_Vouchers].VoucherTypeID,
		  [dbo].[GL_VoucherType].Code as VoucherTypeCode,
		  [dbo].[GL_VoucherType].Name as VoucherTypeName,
		  'Journal Voucher' as ReportName ,
		  --[dbo].[mstr_Branch].[Name]  as BranchName ,
	  		 Case When [dbo].[GL_VoucherType].Code = 11 Then
		  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] 
			where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID] AND ([dbo].[GL_VoucherDetails].SetupAccountType IS NULL OR [dbo].[GL_VoucherDetails].SetupAccountType = 1) ) 
	 		Else 
		  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) 
			End as Total,	  
		  ( select CONVERT(decimal(18,3), SUM(Debit)) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as TotalValue

		  FROM [dbo].[GL_Vouchers]
		  LEFT JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
		  LEFT JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
		  --LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[GL_VoucherDetails].AccountNoID
		  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[GL_Vouchers].[BranchID]
		  LEFT JOIN Security_Users on GL_Vouchers.CollecterId = Security_Users.Id
		  Join GL_Accounts on GL_Accounts.AccountID = GL_VoucherDetails.AccountNoID AND
		   Credit > 0 and SetupAccountType IS NULL  
	   Where 
		 ([dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID ) AND
		 ([dbo].[GL_VoucherDetails].Credit > 0 OR [dbo].[GL_VoucherDetails] .ID is null) AND
		 ([dbo].[GL_Vouchers].VoucherTypeID = @VoucherTypeID ) AND
		 ((Cast([dbo].[GL_Vouchers].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
		 (Cast([dbo].[GL_Vouchers].[Memo]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
		 (Cast([dbo].[mstr_Branch].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
		 (Cast([dbo].[GL_Accounts].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
		 (Cast([dbo].[GL_Accounts].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
		 (Cast([dbo].[Security_Users].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
		 (CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate , 103) like '%'+@SearchValue+'%' ) OR  
		 (@SearchValue IS NULL) OR (@SearchValue  = ''))
		  ) as Vouchers
		  ORDER BY
			case
			when @sortOrder <> 'ASC' then 0
			when @sortColumn = 'Code' then Code
			end ASC
	,       case
			when @sortOrder <> 'ASC' then ''
			when @sortColumn = 'Memo' then Memo
			end ASC
	,       case
			when @sortOrder <> 'ASC' then cast(null as date)
			when @sortColumn = 'VouhcerDate' then convert(date, VouhcerDates)
			end ASC
	,       case
			when @sortOrder <> 'ASC' then 0
			when @sortColumn = 'Total' then TotalValue
			end ASC
	,       case
			when @sortOrder <> 'ASC' then ''
			when @sortColumn = 'AccountName' then AccountName
			end ASC
	,       case
			when @sortOrder <> 'ASC' then ''
			when @sortColumn = 'BranchName' then BranchName
			end ASC    
	,       case
			when @sortOrder <> 'ASC' then ''
			when @sortColumn = 'Posted' then PostedOrder
			end ASC 
	,       case
			when @sortOrder <> 'ASC' then ''
			when @sortColumn = 'CustomerName' then CustomerName
			end ASC 
	,       case
			when @sortOrder <> 'ASC' then 0
			when @sortColumn = 'CustomerCode' then CustomerCode
			end ASC 
	,       case
			when @sortOrder <> 'ASC' then ''
			when @sortColumn = 'CollectorName' then CollectorName
			end ASC 
	,       case
			when @sortOrder <> 'DESC' then ''
			when @sortColumn = 'CollectorName' then CollectorName
			end DESC
	,       case
			when @sortOrder <> 'DESC' then 0
			when @sortColumn = 'CustomerCode' then CustomerCode
			end DESC
	,       case
			when @sortOrder <> 'DESC' then ''
			when @sortColumn = 'CustomerName' then CustomerName
			end DESC
	,       case
			when @sortOrder <> 'DESC' then 0
			when @sortColumn = 'Code' then Code
			end DESC
	,       case
			when @sortOrder <> 'DESC' then ''
			when @sortColumn = 'Memo' then Memo
			end DESC
	,       case
			when @sortOrder <> 'DESC' then cast(null as date)
			when @sortColumn = 'VouhcerDate' then convert(date, VouhcerDates)
			end DESC
	,       case
			when @sortOrder <> 'DESC' then 0
			when @sortColumn = 'Total' then TotalValue
			end DESC
	,       case
			when @sortOrder <> 'DESC' then ''
			when @sortColumn = 'AccountName' then AccountName
			end DESC  
	,       case
			when @sortOrder <> 'DESC' then ''
			when @sortColumn = 'BranchName' then BranchName
			end DESC    
	,       case
			when @sortOrder <> 'DESC' then ''
			when @sortColumn = 'Posted' then PostedOrder
			end DESC,
			Code Desc
		  OFFSET     @Skip ROWS       
		  FETCH NEXT @Take ROWS ONLY; 
  else
    if @OtherVoucher = 1 
  SELECT  * from (
   SELECT Distinct 
      [dbo].[GL_Vouchers].[ID],
      [dbo].[GL_Vouchers].[SubsidaryID],
	  [dbo].[mstr_Branch].[Name]  as BranchName ,
      CAST([dbo].[GL_Vouchers].Code AS BIGINT) as Code,
	  [dbo].[GL_Vouchers].Memo ,
	  CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate, 103) as VouhcerDate,
	  [dbo].[GL_Vouchers].VouhcerDate as VouhcerDates,
	  ''as AccountName ,--[dbo].[GL_Accounts].[Name] ELSE [dbo].[GL_Accounts].[Name_AR] END) as AccountName ,
	  GL_Accounts.[Name]  as CustomerName ,
	  GL_Accounts.VendorCode as CustomerCode ,
	  Security_Users.[Name] as CollectorName,
	  [dbo].[GL_Vouchers].Posted,
	  CONVERT(varchar(100), [dbo].[GL_Vouchers].Posted) as PostedOrder,
	  [dbo].[GL_Vouchers].VoucherTypeID,
	  [dbo].[GL_VoucherType].Code as VoucherTypeCode,
	  [dbo].[GL_VoucherType].Name as VoucherTypeName,
	  'Journal Voucher' as ReportName ,
	  --[dbo].[mstr_Branch].[Name]  as BranchName ,
	  	 Case When [dbo].[GL_VoucherType].Code = 11 Then
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] 
	    where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID] AND ([dbo].[GL_VoucherDetails].SetupAccountType IS NULL OR [dbo].[GL_VoucherDetails].SetupAccountType = 1)) 
	 	Else 
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) 
        End as Total,	  
      ( select CONVERT(decimal(18,3), SUM(Debit)) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as TotalValue


	  FROM [dbo].[GL_Vouchers]
	  LEFT JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  LEFT JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  --LEFT JOIN  [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[GL_VoucherDetails].AccountNoID
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[GL_Vouchers].[BranchID]
	  LEFT JOIN Security_Users on GL_Vouchers.CollecterId = Security_Users.Id
	  Join GL_Accounts on GL_Accounts.AccountID = GL_VoucherDetails.AccountNoID AND
	   Credit > 0 and SetupAccountType IS NULL 

   Where 
	 ([dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID ) AND
	 ([dbo].[GL_VoucherDetails].Credit > 0 OR [dbo].[GL_VoucherDetails] .ID is null) AND
	 ([dbo].[GL_Vouchers].VoucherTypeID = @VoucherTypeID OR [dbo].[GL_VoucherType].VoucherTypeSerialId = @VoucherTypeID ) AND
	 ((Cast([dbo].[GL_Vouchers].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Vouchers].[Memo]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
	 (Cast([dbo].[mstr_Branch].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Accounts].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Accounts].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[Security_Users].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate , 103) like '%'+@SearchValue+'%' ) OR  
	 (@SearchValue IS NULL) OR (@SearchValue  = ''))
	  ) as Vouchers
	  ORDER BY
        case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Code' then Code
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Memo' then Memo
        end ASC
,       case
        when @sortOrder <> 'ASC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end ASC
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Total' then TotalValue
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end ASC    
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end ASC 
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CustomerName' then CustomerName
        end ASC 
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'CustomerCode' then CustomerCode
        end ASC 
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CollectorName' then CollectorName
        end ASC 
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CollectorName' then CollectorName
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'CustomerCode' then CustomerCode
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CustomerName' then CustomerName
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Code' then Code
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Memo' then Memo
        end DESC
,       case
        when @sortOrder <> 'DESC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Total' then TotalValue
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end DESC     
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end DESC 
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end DESC    

	  OFFSET     @Skip ROWS       
	  FETCH NEXT @Take ROWS ONLY; 

else
SELECT  * from (
SELECT Distinct 
      [dbo].[GL_Vouchers].[ID],
      [dbo].[GL_Vouchers].[SubsidaryID],
	  [dbo].[mstr_Branch].[Name]  as BranchName ,
      CAST([dbo].[GL_Vouchers].Code AS BIGINT) as Code,
	  [dbo].[GL_Vouchers].Memo ,
	  CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate, 103) as VouhcerDate,
	  [dbo].[GL_Vouchers].VouhcerDate as VouhcerDates ,
	  '' as AccountName ,--[dbo].[GL_Accounts].[Name] ELSE [dbo].[GL_Accounts].[Name_AR] END) as AccountName ,
	  GL_Accounts.[Name]  as CustomerName ,
	  GL_Accounts.VendorCode as CustomerCode ,
	  Security_Users.[Name] as CollectorName,
	  [dbo].[GL_Vouchers].Posted,
	  CONVERT(varchar(100), [dbo].[GL_Vouchers].Posted) as PostedOrder,
	  [dbo].[GL_Vouchers].VoucherTypeID,
	  [dbo].[GL_VoucherType].Code as VoucherTypeCode,
	  [dbo].[GL_VoucherType].Name as VoucherTypeName,
	  'Journal Voucher' as ReportName ,
	  --[dbo].[mstr_Branch].[Name]  as BranchName ,
	  	 Case When [dbo].[GL_VoucherType].Code = 11 Then
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] 
	    where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID] AND ([dbo].[GL_VoucherDetails].SetupAccountType IS NULL OR [dbo].[GL_VoucherDetails].SetupAccountType = 1)) 
	 	Else 
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) 
        End as Total,	  
	  ( select CONVERT(decimal(18,3), SUM(Debit)) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as TotalValue

	  FROM [dbo].[GL_Vouchers]
	  LEFT JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  LEFT JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  --LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[GL_VoucherDetails].AccountNoID
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[GL_Vouchers].[BranchID]
	  LEFT JOIN Security_Users on GL_Vouchers.CollecterId = Security_Users.Id
	  Join GL_Accounts on GL_Accounts.AccountID = GL_VoucherDetails.AccountNoID AND
	   Credit > 0 and SetupAccountType IS NULL 

   Where 
	 ([dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID ) AND
	 ([dbo].[GL_VoucherDetails].Credit > 0 OR [dbo].[GL_VoucherDetails] .ID is null) AND
	 ([dbo].[GL_Vouchers].VoucherTypeID = @VoucherTypeID ) AND
	 ((Cast([dbo].[GL_Vouchers].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Vouchers].[Memo]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
	 (Cast([dbo].[mstr_Branch].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Accounts].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Accounts].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[Security_Users].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate , 103) like '%'+@SearchValue+'%' ) OR  
	 (@SearchValue IS NULL) OR (@SearchValue  = ''))
	  ) as Vouchers
	  ORDER BY
        case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Code' then Code
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Memo' then Memo
        end ASC
,       case
        when @sortOrder <> 'ASC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end ASC
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Total' then TotalValue
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end ASC    
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CustomerName' then CustomerName
        end ASC 
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'CustomerCode' then CustomerCode
        end ASC 
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CollectorName' then CollectorName
        end ASC 
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CollectorName' then CollectorName
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'CustomerCode' then CustomerCode
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CustomerName' then CustomerName
        end DESC 
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Code' then Code
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Memo' then Memo
        end DESC
,       case
        when @sortOrder <> 'DESC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Total' then TotalValue
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end DESC  
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end DESC    
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end DESC 

	  OFFSET     @Skip ROWS       
	  FETCH NEXT @Take ROWS ONLY; 
 else
   if(@OpenListForFirstTime = 1)
  if @OtherVoucher = 1 
  SELECT  * from (
   SELECT Distinct 
      [dbo].[GL_Vouchers].[ID],
      [dbo].[GL_Vouchers].[SubsidaryID],
	  [dbo].[mstr_Branch].[Name_AR]  as BranchName ,
      CAST([dbo].[GL_Vouchers].Code AS BIGINT) as Code,
	  [dbo].[GL_Vouchers].Memo ,
	  CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate, 103) as VouhcerDate,
	  [dbo].[GL_Vouchers].VouhcerDate as VouhcerDates,
	  ''as AccountName ,--[dbo].[GL_Accounts].[Name] ELSE [dbo].[GL_Accounts].[Name_AR] END) as AccountName ,	  
	  GL_Accounts.[Name_AR]  as CustomerName ,
	  GL_Accounts.VendorCode as CustomerCode ,
	  Security_Users.[Name_AR] as CollectorName,
	  [dbo].[GL_Vouchers].Posted,
	  CONVERT(varchar(100), [dbo].[GL_Vouchers].Posted) as PostedOrder,
	  [dbo].[GL_Vouchers].VoucherTypeID,
	  [dbo].[GL_VoucherType].Code as VoucherTypeCode,
	  [dbo].[GL_VoucherType].Name as VoucherTypeName,
	  'Journal Voucher_Ar'  as ReportName ,
	  --[dbo].[mstr_Branch].[Name]  as BranchName ,
	  	 Case When [dbo].[GL_VoucherType].Code = 11 Then
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] 
	    where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID] AND ([dbo].[GL_VoucherDetails].SetupAccountType IS NULL OR [dbo].[GL_VoucherDetails].SetupAccountType = 1)  ) 
	 	Else 
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) 
        End as Total ,	  
		  ( select CONVERT(decimal(18,3), SUM(Debit)) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as TotalValue


	  FROM [dbo].[GL_Vouchers]
	  LEFT JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  LEFT JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  --LEFT JOIN  [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[GL_VoucherDetails].AccountNoID
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[GL_Vouchers].[BranchID]
	  LEFT JOIN Security_Users on GL_Vouchers.CollecterId = Security_Users.Id
	  Join GL_Accounts on GL_Accounts.AccountID = GL_VoucherDetails.AccountNoID AND
	   Credit > 0 and SetupAccountType IS NULL 


   Where 
	 ([dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID ) AND
	 ([dbo].[GL_VoucherDetails].Credit > 0 OR [dbo].[GL_VoucherDetails] .ID is null) AND
	 ([dbo].[GL_Vouchers].VoucherTypeID = @VoucherTypeID OR [dbo].[GL_VoucherType].VoucherTypeSerialId = @VoucherTypeID ) AND
	 ((Cast([dbo].[GL_Vouchers].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Vouchers].[Memo]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[mstr_Branch].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Accounts].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Accounts].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[Security_Users].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate , 103) like '%'+@SearchValue+'%' ) OR  
	 (@SearchValue IS NULL) OR (@SearchValue  = ''))
	  ) as Vouchers
	  ORDER BY
        case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Code' then Code
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Memo' then Memo
        end ASC
,       case
        when @sortOrder <> 'ASC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end ASC
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Total' then TotalValue
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end ASC    
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end ASC 
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CustomerName' then CustomerName
        end ASC 
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'CustomerCode' then CustomerCode
        end ASC 
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CollectorName' then CollectorName
        end ASC 
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CollectorName' then CollectorName
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'CustomerCode' then CustomerCode
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CustomerName' then CustomerName
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Code' then Code
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Memo' then Memo
        end DESC
,       case
        when @sortOrder <> 'DESC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Total' then TotalValue
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end DESC     
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end DESC 
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end DESC    

	  OFFSET     @Skip ROWS       
	  FETCH NEXT @Take ROWS ONLY; 

else
SELECT  * from (
SELECT Distinct 
      [dbo].[GL_Vouchers].[ID],
      [dbo].[GL_Vouchers].[SubsidaryID],
	  [dbo].[mstr_Branch].[Name_AR] as BranchName ,
      CAST([dbo].[GL_Vouchers].Code AS BIGINT) as Code,
	  [dbo].[GL_Vouchers].Memo ,
	  CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate, 103) as VouhcerDate,
	  [dbo].[GL_Vouchers].VouhcerDate as VouhcerDates ,
	  '' as AccountName ,--[dbo].[GL_Accounts].[Name] ELSE [dbo].[GL_Accounts].[Name_AR] END) as AccountName ,	 
	  GL_Accounts.[Name_AR]  as CustomerName ,
	  GL_Accounts.VendorCode as CustomerCode ,
	  Security_Users.[Name_AR] as CollectorName,
	  [dbo].[GL_Vouchers].Posted,
	  CONVERT(varchar(100), [dbo].[GL_Vouchers].Posted) as PostedOrder,
	  [dbo].[GL_Vouchers].VoucherTypeID,
	  [dbo].[GL_VoucherType].Code as VoucherTypeCode,
	  [dbo].[GL_VoucherType].Name as VoucherTypeName,
	  'Journal Voucher_Ar'  as ReportName ,
	  --[dbo].[mstr_Branch].[Name]  as BranchName ,
	  	 Case When [dbo].[GL_VoucherType].Code = 11 Then
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] 
	    where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID] AND ([dbo].[GL_VoucherDetails].SetupAccountType IS NULL OR [dbo].[GL_VoucherDetails].SetupAccountType = 1) ) 
	 	Else 
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) 
        End as Total,	  
	  ( select CONVERT(decimal(18,3), SUM(Debit)) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as TotalValue

	  FROM [dbo].[GL_Vouchers]
	  LEFT JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  LEFT JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  --LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[GL_VoucherDetails].AccountNoID
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[GL_Vouchers].[BranchID]
	  LEFT JOIN Security_Users on GL_Vouchers.CollecterId = Security_Users.Id
	  Join GL_Accounts on GL_Accounts.AccountID = GL_VoucherDetails.AccountNoID AND
	   Credit > 0 and SetupAccountType IS NULL  
   Where 
	 ([dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID ) AND
	 ([dbo].[GL_VoucherDetails].Credit > 0 OR [dbo].[GL_VoucherDetails] .ID is null) AND
	 ([dbo].[GL_Vouchers].VoucherTypeID = @VoucherTypeID ) AND
	 ((Cast([dbo].[GL_Vouchers].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Vouchers].[Memo]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
	 (Cast([dbo].[mstr_Branch].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Accounts].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Accounts].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[Security_Users].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate , 103) like '%'+@SearchValue+'%' ) OR  
	 (@SearchValue IS NULL) OR (@SearchValue  = ''))
	  ) as Vouchers
	  ORDER BY
        case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Code' then Code
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Memo' then Memo
        end ASC
,       case
        when @sortOrder <> 'ASC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end ASC
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Total' then TotalValue
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end ASC    
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end ASC 
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CustomerName' then CustomerName
        end ASC 
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'CustomerCode' then CustomerCode
        end ASC 
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CollectorName' then CollectorName
        end ASC 
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CollectorName' then CollectorName
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'CustomerCode' then CustomerCode
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CustomerName' then CustomerName
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Code' then Code
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Memo' then Memo
        end DESC
,       case
        when @sortOrder <> 'DESC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Total' then TotalValue
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end DESC  
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end DESC    
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end DESC 

	  OFFSET     @Skip ROWS       
	  FETCH NEXT @Take ROWS ONLY; 
  else
    if @OtherVoucher = 1 
  SELECT  * from (
   SELECT Distinct 
      [dbo].[GL_Vouchers].[ID],
      [dbo].[GL_Vouchers].[SubsidaryID],
	  [dbo].[mstr_Branch].[Name_AR]  as BranchName ,
      CAST([dbo].[GL_Vouchers].Code AS BIGINT) as Code,
	  [dbo].[GL_Vouchers].Memo ,
	  CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate, 103) as VouhcerDate,
	  [dbo].[GL_Vouchers].VouhcerDate as VouhcerDates,
	  ''as AccountName ,--[dbo].[GL_Accounts].[Name] ELSE [dbo].[GL_Accounts].[Name_AR] END) as AccountName ,
	  GL_Accounts.[Name_AR] as CustomerName ,
	  GL_Accounts.VendorCode as CustomerCode ,
	  Security_Users.[Name_AR] as CollectorName,
	  [dbo].[GL_Vouchers].Posted,
	  CONVERT(varchar(100), [dbo].[GL_Vouchers].Posted) as PostedOrder,
	  [dbo].[GL_Vouchers].VoucherTypeID,
	  [dbo].[GL_VoucherType].Code as VoucherTypeCode,
	  [dbo].[GL_VoucherType].Name as VoucherTypeName,
	  'Journal Voucher_Ar'  as ReportName ,
	  --[dbo].[mstr_Branch].[Name]  as BranchName ,
	  	 Case When [dbo].[GL_VoucherType].Code = 11 Then
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] 
	    where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID] AND ([dbo].[GL_VoucherDetails].SetupAccountType IS NULL OR [dbo].[GL_VoucherDetails].SetupAccountType = 1)) 
	 	Else 
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) 
        End as Total,	  
      ( select CONVERT(decimal(18,3), SUM(Debit)) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as TotalValue


	  FROM [dbo].[GL_Vouchers]
	  LEFT JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  LEFT JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  --LEFT JOIN  [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[GL_VoucherDetails].AccountNoID
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[GL_Vouchers].[BranchID]
	  LEFT JOIN Security_Users on GL_Vouchers.CollecterId = Security_Users.Id
	  Join GL_Accounts on GL_Accounts.AccountID = GL_VoucherDetails.AccountNoID AND
	   Credit > 0 and SetupAccountType IS NULL 

   Where 
	 ([dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID ) AND
	 ([dbo].[GL_VoucherDetails].Credit > 0 OR [dbo].[GL_VoucherDetails] .ID is null) AND
	 ([dbo].[GL_Vouchers].VoucherTypeID = @VoucherTypeID OR [dbo].[GL_VoucherType].VoucherTypeSerialId = @VoucherTypeID ) AND
	 ((Cast([dbo].[GL_Vouchers].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Vouchers].[Memo]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
	 (Cast([dbo].[mstr_Branch].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Accounts].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Accounts].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[Security_Users].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate , 103) like '%'+@SearchValue+'%' ) OR  
	 (@SearchValue IS NULL) OR (@SearchValue  = ''))
	  ) as Vouchers
	  ORDER BY
        case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Code' then Code
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Memo' then Memo
        end ASC
,       case
        when @sortOrder <> 'ASC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end ASC
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Total' then TotalValue
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end ASC    
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end ASC 
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CustomerName' then CustomerName
        end ASC 
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'CustomerCode' then CustomerCode
        end ASC 
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CollectorName' then CollectorName
        end ASC 
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CollectorName' then CollectorName
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'CustomerCode' then CustomerCode
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CustomerName' then CustomerName
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Code' then Code
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Memo' then Memo
        end DESC
,       case
        when @sortOrder <> 'DESC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Total' then TotalValue
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end DESC     
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end DESC 
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end DESC    

	  OFFSET     @Skip ROWS       
	  FETCH NEXT @Take ROWS ONLY; 

else
SELECT  * from (
SELECT Distinct 
      [dbo].[GL_Vouchers].[ID],
      [dbo].[GL_Vouchers].[SubsidaryID],
	  [dbo].[mstr_Branch].[Name_AR] as BranchName ,
      CAST([dbo].[GL_Vouchers].Code AS BIGINT) as Code,
	  [dbo].[GL_Vouchers].Memo ,
	  CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate, 103) as VouhcerDate,
	  [dbo].[GL_Vouchers].VouhcerDate as VouhcerDates ,
	  '' as AccountName ,--[dbo].[GL_Accounts].[Name] ELSE [dbo].[GL_Accounts].[Name_AR] END) as AccountName ,
	  GL_Accounts.[Name_AR]  as CustomerName ,
	  GL_Accounts.VendorCode as CustomerCode ,
	  Security_Users.[Name_AR] as CollectorName,
	  [dbo].[GL_Vouchers].Posted,
	  CONVERT(varchar(100), [dbo].[GL_Vouchers].Posted) as PostedOrder,
	  [dbo].[GL_Vouchers].VoucherTypeID,
	  [dbo].[GL_VoucherType].Code as VoucherTypeCode,
	  [dbo].[GL_VoucherType].Name as VoucherTypeName,
	  'Journal Voucher_Ar'  as ReportName ,
	  --[dbo].[mstr_Branch].[Name]  as BranchName ,
	  	 Case When [dbo].[GL_VoucherType].Code = 11 Then
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] 
	    where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID] AND ([dbo].[GL_VoucherDetails].SetupAccountType IS NULL OR [dbo].[GL_VoucherDetails].SetupAccountType = 1)) 
	 	Else 
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) 
        End as Total,	  
	  ( select CONVERT(decimal(18,3), SUM(Debit)) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as TotalValue

	  FROM [dbo].[GL_Vouchers]
	  LEFT JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  LEFT JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  --LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[GL_VoucherDetails].AccountNoID
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[GL_Vouchers].[BranchID]
	  LEFT JOIN Security_Users on GL_Vouchers.CollecterId = Security_Users.Id
	  Join GL_Accounts on GL_Accounts.AccountID = GL_VoucherDetails.AccountNoID AND
	   Credit > 0 and SetupAccountType IS NULL 

   Where 
	 ([dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID ) AND
	 ([dbo].[GL_VoucherDetails].Credit > 0 OR [dbo].[GL_VoucherDetails] .ID is null) AND
	 ([dbo].[GL_Vouchers].VoucherTypeID = @VoucherTypeID ) AND
	 ((Cast([dbo].[GL_Vouchers].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Vouchers].[Memo]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
	 (Cast([dbo].[mstr_Branch].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Accounts].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Accounts].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[Security_Users].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate , 103) like '%'+@SearchValue+'%' ) OR  
	 (@SearchValue IS NULL) OR (@SearchValue  = ''))
	  ) as Vouchers
	  ORDER BY
        case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Code' then Code
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Memo' then Memo
        end ASC
,       case
        when @sortOrder <> 'ASC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end ASC
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Total' then TotalValue
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end ASC    
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CustomerName' then CustomerName
        end ASC 
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'CustomerCode' then CustomerCode
        end ASC 
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CollectorName' then CollectorName
        end ASC 
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CollectorName' then CollectorName
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'CustomerCode' then CustomerCode
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CustomerName' then CustomerName
        end DESC 
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Code' then Code
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Memo' then Memo
        end DESC
,       case
        when @sortOrder <> 'DESC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Total' then TotalValue
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end DESC  
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end DESC    
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end DESC 

	  OFFSET     @Skip ROWS       
	  FETCH NEXT @Take ROWS ONLY; 
GO
/****** Object:  StoredProcedure [dbo].[GetCustomerPaymentVoucherListCount]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create PROCEDURE [dbo].[GetCustomerPaymentVoucherListCount]

@SubsidiaryID int ,
@VoucherTypeID int ,
@OtherVoucher bit ,
@SearchValue NVARCHAR(150)

AS
  if @OtherVoucher = 1 

       	SELECT  COUNT(Vouchers.ID) as Count
	from
  (
   SELECT Distinct 
      [dbo].[GL_Vouchers].[ID],
      [dbo].[GL_Vouchers].[SubsidaryID],
	  --(Case When @Language = 'en-US' THEN [dbo].[mstr_Branch].[Name] ELSE [dbo].[mstr_Branch].[Name_AR] END) as BranchName ,
      CAST([dbo].[GL_Vouchers].Code AS BIGINT) as Code,
	  [dbo].[GL_Vouchers].Memo ,
	  CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate, 103) as VouhcerDate,
	  [dbo].[GL_Vouchers].VouhcerDate as VouhcerDates,
	  ''as AccountName ,--(Case When @Language = 'en-US' THEN [dbo].[GL_Accounts].[Name] ELSE [dbo].[GL_Accounts].[Name_AR] END) as AccountName ,	  
	  --(Case When @Language = 'en-US' THEN GL_Accounts.[Name] ELSE GL_Accounts.[Name_AR] END) as CustomerName ,
	  GL_Accounts.VendorCode as CustomerCode ,
	  --(Case When @Language = 'en-US' THEN Security_Users.[Name] ELSE Security_Users.[Name_AR] END)as CollectorName,
	  [dbo].[GL_Vouchers].Posted,
	  CONVERT(varchar(100), [dbo].[GL_Vouchers].Posted) as PostedOrder,
	  [dbo].[GL_Vouchers].VoucherTypeID,
	  [dbo].[GL_VoucherType].Code as VoucherTypeCode,
	  [dbo].[GL_VoucherType].Name as VoucherTypeName,
	  --(Case When @Language = 'en-US' THEN 'Journal Voucher' ELSE 'Journal Voucher_Ar' END) as ReportName ,
	  --(Case When @Language = 'en-US' THEN [dbo].[mstr_Branch].[Name] ELSE [dbo].[mstr_Branch].[Name_AR] END) as BranchName ,
	  	 Case When [dbo].[GL_VoucherType].Code = 11 Then
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] 
	    where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID] AND [dbo].[GL_VoucherDetails].SetupAccountType IS NULL  ) 
	 	Else 
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) 
        End as Total ,	  
		  ( select CONVERT(decimal(18,3), SUM(Debit)) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as TotalValue


	  FROM [dbo].[GL_Vouchers]
	  LEFT JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  LEFT JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  --LEFT JOIN  [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[GL_VoucherDetails].AccountNoID
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[GL_Vouchers].[BranchID]
	  LEFT JOIN Security_Users on GL_Vouchers.CollecterId = Security_Users.Id
	  Join GL_Accounts on GL_Accounts.AccountID = GL_VoucherDetails.AccountNoID AND
	   Credit > 0 and SetupAccountType IS NULL 


   Where 
	 ([dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID ) AND
	 ([dbo].[GL_VoucherDetails].Credit > 0 OR [dbo].[GL_VoucherDetails] .ID is null) AND
	 ([dbo].[GL_Vouchers].VoucherTypeID = @VoucherTypeID OR [dbo].[GL_VoucherType].VoucherTypeSerialId = @VoucherTypeID ) AND
	 ((Cast([dbo].[GL_Vouchers].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Vouchers].[Memo]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate , 103) like '%'+@SearchValue+'%' ) OR  
	 (@SearchValue IS NULL) OR (@SearchValue  = ''))
	  ) as Vouchers
	     
else
       	SELECT  COUNT(Vouchers.ID) as Count
	from
  (
SELECT Distinct 
      [dbo].[GL_Vouchers].[ID],
      [dbo].[GL_Vouchers].[SubsidaryID],
	  --(Case When @Language = 'en-US' THEN [dbo].[mstr_Branch].[Name] ELSE [dbo].[mstr_Branch].[Name_AR] END) as BranchName ,
      CAST([dbo].[GL_Vouchers].Code AS BIGINT) as Code,
	  [dbo].[GL_Vouchers].Memo ,
	  CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate, 103) as VouhcerDate,
	  [dbo].[GL_Vouchers].VouhcerDate as VouhcerDates ,
	  '' as AccountName ,--(Case When @Language = 'en-US' THEN [dbo].[GL_Accounts].[Name] ELSE [dbo].[GL_Accounts].[Name_AR] END) as AccountName ,	 
	  --(Case When @Language = 'en-US' THEN GL_Accounts.[Name] ELSE GL_Accounts.[Name_AR] END) as CustomerName ,
	  GL_Accounts.VendorCode as CustomerCode ,
	  --(Case When @Language = 'en-US' THEN Security_Users.[Name] ELSE Security_Users.[Name_AR] END)as CollectorName,
	  [dbo].[GL_Vouchers].Posted,
	  CONVERT(varchar(100), [dbo].[GL_Vouchers].Posted) as PostedOrder,
	  [dbo].[GL_Vouchers].VoucherTypeID,
	  [dbo].[GL_VoucherType].Code as VoucherTypeCode,
	  [dbo].[GL_VoucherType].Name as VoucherTypeName,
	  --(Case When @Language = 'en-US' THEN 'Journal Voucher' ELSE 'Journal Voucher_Ar' END) as ReportName ,
	  --(Case When @Language = 'en-US' THEN [dbo].[mstr_Branch].[Name] ELSE [dbo].[mstr_Branch].[Name_AR] END) as BranchName ,
	  	 Case When [dbo].[GL_VoucherType].Code = 11 Then
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] 
	    where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID] AND [dbo].[GL_VoucherDetails].SetupAccountType IS NULL ) 
	 	Else 
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) 
        End as Total,	  
	  ( select CONVERT(decimal(18,3), SUM(Debit)) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as TotalValue

	  FROM [dbo].[GL_Vouchers]
	  LEFT JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  LEFT JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  --LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[GL_VoucherDetails].AccountNoID
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[GL_Vouchers].[BranchID]
	  LEFT JOIN Security_Users on GL_Vouchers.CollecterId = Security_Users.Id
	  Join GL_Accounts on GL_Accounts.AccountID = GL_VoucherDetails.AccountNoID AND
	   Credit > 0 and SetupAccountType IS NULL  
   Where 
	 ([dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID ) AND
	 ([dbo].[GL_VoucherDetails].Credit > 0 OR [dbo].[GL_VoucherDetails] .ID is null) AND
	 ([dbo].[GL_Vouchers].VoucherTypeID = @VoucherTypeID ) AND
	 ((Cast([dbo].[GL_Vouchers].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Vouchers].[Memo]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate , 103) like '%'+@SearchValue+'%' ) OR  
	 (@SearchValue IS NULL) OR (@SearchValue  = ''))
	  ) as Vouchers
	
GO
/****** Object:  StoredProcedure [dbo].[GetCustomerPreviousPaid]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetCustomerPreviousPaid]
	@InvoiceId int , 
	@SubId int  
AS
BEGIN

	SET NOCOUNT ON;

	DEclare @VendorID int = (SElect Vendor_ID from Inv_Receipt_h where ID = @InvoiceId )

	 Select GL_VoucherDetails.VoucherID , SUM(GL_VoucherDetails.Credit) from GL_Vouchers 
	 JOIN GL_VoucherDetails ON GL_Vouchers.ID = GL_VoucherDetails.VoucherID

	 WHERE GL_VoucherDetails.SetupAccountType IS NULL AND GL_Vouchers.Prepaid = 1 AND 
	       GL_Vouchers.Posted = 1 AND GL_VoucherDetails.AccountNoID = @VendorID
		   AND GL_Vouchers.SubsidaryID = @SubId

	GROUP BY GL_VoucherDetails.VoucherID
END
GO
/****** Object:  StoredProcedure [dbo].[GetDealList]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetDealList]

@SubsidiaryID int ,
@SourceId int ,
@StatusId int,
@RatingId int,
@AreaId int ,
@NationalityID int,
@StageID int ,
@ProbabilityID int,
@Skip int = 0,
@Take int = 200,
@SearchValue NVARCHAR(150)
--@SortBy NVARCHAR(150),
--@SortDir NVARCHAR(150)

AS
   Declare @ProbabilityFrom int   
   Declare @ProbabilityTo int 

  IF @ProbabilityID = 1    
    BEGIN
        SET @ProbabilityFrom = 0
        SET @ProbabilityTo = 25
    END
  ELSE IF @ProbabilityID = 2  
    BEGIN
        SET @ProbabilityFrom = 25
        SET @ProbabilityTo = 50
    END
  ELSE IF @ProbabilityID = 3  
    BEGIN
        SET @ProbabilityFrom = 50
        SET @ProbabilityTo = 75
    END
  ELSE IF @ProbabilityID = 4  
    BEGIN
        SET @ProbabilityFrom = 75
        SET @ProbabilityTo = 100
    END

   SELECT Distinct
       [dbo].[Crm_Lead].[ID] as ID
      ,[dbo].[Crm_Lead].[Name] as LeadName
	  ,[dbo].[Crm_Lead].[Name_AR] as LeadNameAR
	  ,[dbo].[Crm_Lead].[Probability]
      ,[dbo].[Crm_Lead].[Phone] 
      ,[dbo].[Crm_Lead].[Mobile]
	  ,[dbo].[Crm_Lead_Source].[Name] as LeadSource
	  ,[dbo].[Crm_Lead_Status].[Name] as LeadStatus
	  ,[dbo].[Security_Users].[Name] as LeadOwner
	  , CONVERT(varchar(23), [dbo].[Crm_Lead].[CreatedDate] , 101) as CreatedDate
	  ,activites.ActivityName --, '' as ActivityName 
	  ,activites.LeadActivityID as LeadActivityID --, 0 as LeadActivityID
	  ,activites.DueDate
	  ,activites.StartTime
	  ,activites.ActivityName2

	  FROM [dbo].[Crm_Lead]
	  LEFT JOIN [dbo].[Crm_Lead_Rating] on [dbo].[Crm_Lead_Rating].[ID] = [dbo].[Crm_Lead].[RatingId]
	  LEFT JOIN [dbo].[Crm_Lead_Source] on [dbo].[Crm_Lead_Source].[ID] = [dbo].[Crm_Lead].[SourceId]
	  LEFT JOIN [dbo].[Crm_Lead_Status] on [dbo].[Crm_Lead_Status].[ID] = [dbo].[Crm_Lead].[StatusId]
	  LEFT JOIN [dbo].[Crm_Lead_Users]  on [dbo].[Crm_Lead_Users].[LeadID] = [dbo].[Crm_Lead].[ID]
	  JOIN [dbo].[Security_Users] on [dbo].[Security_Users].[Id] = [dbo].[Crm_Lead].[LeadOwnerId]
	  LEFT JOIN (
	  SELECT LeadID , 
       Min(DueDate) as DueDate,
	   Min(StartTime) as StartTime,
	   Min(ActivityName) as ActivityName,
	   Min(ActivityName2) as ActivityName2,
	   Min(aa.ID) as LeadActivityID
		 FROM (
				Select  [dbo].[Crm_Lead_Activities].[ID] as ID,
				[dbo].[Crm_Lead_Activities].[LeadID] as LeadID ,
				[dbo].[Crm_Lead_Activities].[StartDate] as DueDate ,
				[dbo].[Crm_Lead_Activities].[StartTime] as StartTime ,
				(IsNULL(CONVERT(varchar(23),[dbo].[Crm_Lead_Activities].[StartDate]),101) + '-' + 
					   case when [dbo].[Crm_Lead_Activities].[ActivityTypeID] = 1 then 'Call' Else 
					   Case when [dbo].[Crm_Lead_Activities].[ActivityTypeID] = 2 then 'Meeting' Else
					   Case when [dbo].[Crm_Lead_Activities].[ActivityTypeID] > 20 then 'Task'  END END END) + '/' + CONVERT(varchar(100),[dbo].[Crm_Lead_Activities].[ID])
			     as ActivityName ,
				 (IsNULL(CONVERT(varchar(23),[dbo].[Crm_Lead_Activities].[StartDate]),101) + '-' + 
					   case when [dbo].[Crm_Lead_Activities].[ActivityTypeID] = 1 then 'Call' Else 
					   Case when [dbo].[Crm_Lead_Activities].[ActivityTypeID] = 2 then 'Meeting' Else
					   Case when [dbo].[Crm_Lead_Activities].[ActivityTypeID] > 20 then 'Task'  END END END) 
			     as ActivityName2
				 from [dbo].[Crm_Lead_Activities]
				) aa
				Group by aa.LeadID
	  ) activites on activites.[LeadID] = [dbo].[Crm_Lead].[ID]

 Where 
 ([dbo].[Crm_Lead].[SubsidiaryID] = @SubsidiaryID ) AND
 ([dbo].[Crm_Lead].[SourceId] = @SourceId OR @SourceId = 0) AND
 ([dbo].[Crm_Lead].[StatusId] = @StatusId OR @StatusId = 0) AND
 ([dbo].[Crm_Lead].[RatingId] = @RatingId OR @RatingId = 0) AND
 ([dbo].[Crm_Lead].[AreaId] = @AreaId OR @AreaId = 0) AND
 ([dbo].[Crm_Lead].[NationalityID] = @NationalityID OR @NationalityID = 0) AND
 (([dbo].[Crm_Lead].[Probability] >= @ProbabilityFrom AND [dbo].[Crm_Lead].[Probability] <= @ProbabilityTo ) OR @ProbabilityID = 0) AND
 ([dbo].[Crm_Lead].[CustomerType] = 2 )AND
 ((Cast([dbo].[Crm_Lead].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[Security_Users].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[Crm_Lead_Source].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR  
 (Cast(activites.ActivityName2  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (CONVERT(varchar(23), [dbo].[Crm_Lead].[CreatedDate] , 101) like '%'+@SearchValue+'%' ) OR  
  (@SearchValue IS NULL) OR (@SearchValue  = ''))


   ORDER BY activites.DueDate ,activites.StartTime
  OFFSET     @Skip ROWS       
  FETCH NEXT @Take ROWS ONLY; 
GO
/****** Object:  StoredProcedure [dbo].[GetDriversReport]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[GetDriversReport]
	@BranchId INT
AS
BEGIN
		SELECT 
				A.DriverId, 
				B.Name, 
				SUM(A.NetValue) AS Balance,
				D.Code AS [CurrencyCode], 
				MAX(A.Entry_Date) MaxDate, 
				MIN(A.Entry_Date) MinDate 
		FROM Inv_Receipt_h A
				INNER JOIN Security_Users B ON A.DriverId = B.Id
				INNER JOIN Inv_CashDrawerHistory C ON A.ID = C.ReceiptId
				INNER JOIN mstr_Currencies D ON A.Currency_ID = D.ID
		WHERE C.IsClosed = 0 
			  AND A.Branch_ID = @BranchId
		GROUP BY   A.DriverId, B.Name, D.Code
END

GO
/****** Object:  StoredProcedure [dbo].[GetDueInstallments]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetDueInstallments]

@SubsidiaryID int ,
@BranchID int,
@DateFrom date,
@DateTo date,
@Skip    int	 = 0,
@Take    int	 = 200,
@SearchValue nvarchar(100) ,
@InstallmentStatusPaidId int = NULL,
@CustomerId int = NULL,
@CustomerCategoryId int = NULL,
@CustomerStatusId INT = NULL,
@Language nvarchar(50),
@AreaId int

--@SortBy nvarchar(100),
--@SortDir nvarchar(100)

AS
--IF @SortDir='asc'
declare @format int = 103
  SET @format = ( select CASE WHEN Date_format = 'MM/dd/yyyy' THEN  101 ELSE 103 END from mstr_Subsidaries WHERE ID = @SubsidiaryID )
SELECT     ROW_NUMBER() OVER (ORDER BY [dbo].[Crm_Invoice_Installments_Details].[ID]) as RowNum
          ,[SubsidiaryID]
          ,[dbo].[Crm_Invoice_Installments_Details].[ID] as InstallmentsDetailID
		  ,[dbo].[Crm_Invoice_Installments_Details].[Comment] as Comment
          ,[dbo].[Inv_Receipt_h].[ID] as InvoiceID
		  ,[Entry_No] as InvoiceNumber	 
		  ,[dbo].[Inv_Receipt_h].[Memo] as Memo
		  ,[Branch_ID]
		  ,[Crm_Invoice_Installments_Details].[StatusID] as InstallmentsDetailsStatusID
		  ,[dbo].[GL_Accounts].[AccountID] as CustomerID 
		  ,CASE WHEN  @Language = 'en-Us' THEN [dbo].[GL_Accounts].[Name] ELSE [dbo].[GL_Accounts].[Name_AR] END as CustomerName
		  ,[dbo].[GL_Accounts].[Phone] as Phone
		  ,[dbo].[mstr_Branch].Code as BranchCode
		  ,convert(varchar(25),  [InstallmentDate], @format) as DueDate
		  ,[InstallmentValue] as Amount
		  ,(CASE  [Crm_Invoice_Installments_Details].[StatusID]
            WHEN 1 THEN  (Cast([dbo].[Crm_Invoice_Installments_Details].[InstallmentValue]  as nVarchar(100)))
            WHEN 2 THEN '0.000'  
			WHEN 3 THEN (Cast((select  ISNULL(Sum(Debit), '0.000') as Debit
				 From GL_VoucherDetails 
				 join GL_Vouchers on GL_VoucherDetails.VoucherID = GL_Vouchers.ID 
				 where 
				 GL_Vouchers.InvoiceInstallmentsDetailsId  = [dbo].[Crm_Invoice_Installments_Details].ID  AND
				 Header = 1 AND (GL_VoucherDetails.SetupAccountType  Is NULL))  as nVarchar(100)))
            END  ) as Paid
		  --, (CASE  [Crm_Invoice_Installments_Details].[StatusID]
    --        WHEN 1 THEN '0.000'
    --        WHEN 2 THEN [InstallmentValue]   
    --        END  ) as Unpaid
		  ,(Select Top 1 GL_Vouchers.[ID] From GL_Vouchers where GL_Vouchers.InvoiceInstallmentsDetailsId =[dbo].[Crm_Invoice_Installments_Details].ID ) as VoucherID
 
  FROM [dbo].[Inv_Receipt_h] 
  Join [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[Inv_Receipt_h].[Vendor_ID]
  Join [dbo].[Crm_Invoice_Installments] on [dbo].[Inv_Receipt_h].[ID] = [dbo].[Crm_Invoice_Installments].[InvoiceID] 
  Join [dbo].[Crm_Invoice_Installments_Details] on [dbo].[Crm_Invoice_Installments_Details].[InvoiceInstallmentsID] = [dbo].[Crm_Invoice_Installments].[ID]  
  --LEFT JOIN [dbo].[GL_Vouchers] as Vouchers on Vouchers.[InvoiceInstallmentsDetailsId] = [dbo].[Crm_Invoice_Installments_Details].[ID]
  Left JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].ID = [dbo].[Inv_Receipt_h].Branch_ID 
  LEFT JOIN [dbo].[GL_VendorCategory] on [dbo].[GL_VendorCategory].[ID] = [dbo].[GL_Accounts].VendorCategoryID

 Where 
 ([dbo].[Inv_Receipt_h].[SubsidiaryID] = @SubsidiaryID ) AND
 ([dbo].[Inv_Receipt_h].Code != 1 ) AND
 ([Crm_Invoice_Installments_Details].[StatusID] = @InstallmentStatusPaidId or @InstallmentStatusPaidId IS NULL ) AND
 ([GL_Accounts].[AccountID] = @CustomerId or @CustomerId IS NULL ) AND
 ([GL_Accounts].[AreaId] = @AreaId or @AreaId IS NULL ) AND
 ([GL_VendorCategory].[ID] = @CustomerCategoryId or @CustomerCategoryId IS NULL ) AND
 ([GL_Accounts].[CustomerStatusId] = @CustomerStatusId or @CustomerStatusId IS NULL ) AND
 ([dbo].[Inv_Receipt_h].[Branch_ID] = @BranchID OR @BranchID = 0) AND
 (([InstallmentDate] >= @DateFrom And [InstallmentDate] <= @DateTo)OR( @DateFrom IS NULL and @DateTo IS NULL) OR (@DateFrom Is NULL And [InstallmentDate] <= @DateTo)) And
 ((Cast([dbo].[GL_Accounts].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[GL_Accounts].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[GL_Accounts].[Phone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
  (Cast([dbo].[Inv_Receipt_h].[Memo]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([Entry_No]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR (@SearchValue IS NULL) OR (@SearchValue  = ''))

 ORDER BY [dbo].[Crm_Invoice_Installments].[ID]

 OFFSET     @Skip ROWS       
 FETCH NEXT @Take ROWS ONLY; 
GO
/****** Object:  StoredProcedure [dbo].[GetDueInstallmentsCount]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetDueInstallmentsCount]

@SubsidiaryID int ,
@BranchID int,
@DateFrom date,
@DateTo date,
@SearchValue nvarchar(100) ,
@InstallmentStatusPaidId int = NULL,
@CustomerId int = NULL,
@CustomerCategoryId int = NULL,
@CustomerStatusId INT = NULL,
@Language nvarchar(50),
@AreaId int



AS

SELECT     ROW_NUMBER() OVER (ORDER BY [dbo].[Crm_Invoice_Installments_Details].[ID]) as RowNum
          ,[SubsidiaryID]
          ,[dbo].[Crm_Invoice_Installments_Details].[ID] as InstallmentsDetailID
          ,[dbo].[Inv_Receipt_h].[ID] as InvoiceID
		  ,[Entry_No] as InvoiceNumber	  
		  ,[dbo].[Inv_Receipt_h].[Memo] as Memo
		  ,[Branch_ID]
		  ,[Crm_Invoice_Installments_Details].[StatusID] as InstallmentsDetailsStatusID
		  ,[dbo].[GL_Accounts].[AccountID] as CustomerID 
		  ,CASE WHEN  @Language = 'en-Us' THEN [dbo].[GL_Accounts].[Name] ELSE [dbo].[GL_Accounts].[Name_AR] END as CustomerName
		  ,[dbo].[GL_Accounts].[Phone] as Phone
		  ,[dbo].[mstr_Branch].Code as BranchCode
		  ,convert(varchar(25),  [InstallmentDate], 120) as DueDate
		  ,[InstallmentValue] as Amount
		  ,(CASE  [Crm_Invoice_Installments_Details].[StatusID]
            WHEN 1 THEN  (Cast([dbo].[Crm_Invoice_Installments_Details].[InstallmentValue]  as nVarchar(100)))
            WHEN 2 THEN '0.000'  
			WHEN 3 THEN (Cast((select  ISNULL(Sum(Debit), '0.000') as Debit
				 From GL_VoucherDetails 
				 join GL_Vouchers on GL_VoucherDetails.VoucherID = GL_Vouchers.ID 
				 where GL_VoucherDetails.VoucherID = GL_Vouchers.ID AND 
				  Header = 1 AND GL_Vouchers.InvoiceInstallmentsDetailsId  = [dbo].[Crm_Invoice_Installments_Details].ID)  as nVarchar(100)))
            END  ) as Paid
		  --, (CASE  [Crm_Invoice_Installments_Details].[StatusID]
    --        WHEN 1 THEN '0.000'
    --        WHEN 2 THEN [InstallmentValue]   
    --        END  ) as Unpaid
		  ,(Select Top 1 GL_Vouchers.[ID] From GL_Vouchers where GL_Vouchers.InvoiceInstallmentsDetailsId =[dbo].[Crm_Invoice_Installments_Details].ID ) as VoucherID
 
  FROM [dbo].[Inv_Receipt_h] 
  Join [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[Inv_Receipt_h].[Vendor_ID]
  Join [dbo].[Crm_Invoice_Installments] on [dbo].[Inv_Receipt_h].[ID] = [dbo].[Crm_Invoice_Installments].[InvoiceID] 
  Join [dbo].[Crm_Invoice_Installments_Details] on [dbo].[Crm_Invoice_Installments_Details].[InvoiceInstallmentsID] = [dbo].[Crm_Invoice_Installments].[ID]  
  --LEFT JOIN [dbo].[GL_Vouchers] as Vouchers on Vouchers.[InvoiceInstallmentsDetailsId] = [dbo].[Crm_Invoice_Installments_Details].[ID]
  Left JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].ID = [dbo].[Inv_Receipt_h].Branch_ID 
  LEFT JOIN [dbo].[GL_VendorCategory] on [dbo].[GL_VendorCategory].[ID] = [dbo].[GL_Accounts].VendorCategoryID

 Where 
 ([dbo].[Inv_Receipt_h].[SubsidiaryID] = @SubsidiaryID ) AND
  ([dbo].[Inv_Receipt_h].Code != 1 ) AND
 ([Crm_Invoice_Installments_Details].[StatusID] = @InstallmentStatusPaidId or @InstallmentStatusPaidId IS NULL ) AND
 ([GL_Accounts].[AccountID] = @CustomerId or @CustomerId IS NULL ) AND
 ([GL_Accounts].[AreaId] = @AreaId or @AreaId IS NULL ) AND
 ([GL_VendorCategory].[ID] = @CustomerCategoryId or @CustomerCategoryId IS NULL ) AND
 ([GL_Accounts].[CustomerStatusId] = @CustomerStatusId or @CustomerStatusId IS NULL ) AND
 ([dbo].[Inv_Receipt_h].[Branch_ID] = @BranchID OR @BranchID = 0) AND
 (([InstallmentDate] >= @DateFrom And [InstallmentDate] <= @DateTo)OR( @DateFrom IS NULL and @DateTo IS NULL) OR (@DateFrom Is NULL And [InstallmentDate] <= @DateTo)) And
 ((Cast([dbo].[GL_Accounts].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[GL_Accounts].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[GL_Accounts].[Phone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[Inv_Receipt_h].[Memo]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([Entry_No]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR (@SearchValue IS NULL) OR (@SearchValue  = ''))

 ORDER BY [dbo].[Crm_Invoice_Installments].[ID]
GO
/****** Object:  StoredProcedure [dbo].[GetGroupbyItemsDataReport]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[GetGroupbyItemsDataReport]
 
@Subsidiary_ID int ,
@ItemTypeID int,
@VendorID int,
@StocksID nvarchar(100),
@UnitID int ,
@Qty Decimal(18,3),
@ItemCategoriesIDs nvarchar(500)

AS
   SELECT MAX([dbo].[Inv_Items].[Subsidiary_ID]) as Subsidiary_ID
      ,[dbo].[Inv_Items].[ID] as ItemID
      ,MAX([dbo].[Inv_Items].[Code]) as ItemCode
      ,MAX([dbo].[Inv_Items].[Name]) as ItemName
      ,MAX([Description]) as ItemDescription
      ,MAX([Item_Type]) as Item_Type
	  ,SUM((ISNull([dbo].[Inv_Items_Store].Qty,0) * ISNull([dbo].[Inv_Items_Store].Cost_conv,0)))as Cost
	  ,SUM(ISNull([dbo].[Inv_Items_Store].Qty,0))as Balance
	  ,MAX(ISNull([dbo].[Inv_Items_Units].Sale_price1,0))as SalesPrice1
	  ,MAX(ISNull([dbo].[Inv_Items_Units].Sale_price2,0))as SalesPrice2
	  , ISNull( Case when SUM([dbo].[Inv_Items_Store].Qty)= 0 then 0
        Else ( SUM((ISNull([dbo].[Inv_Items_Store].Qty,0) * ISNull([dbo].[Inv_Items_Store].Cost_conv,0)))/SUM([dbo].[Inv_Items_Store].Qty) )
        End,0) as AvgCost 
      ,SUM(ISNull([dbo].[Inv_Items_Store].[Last_sales_Qty],0)) as SoldQty

  FROM [dbo].[Inv_Items]
  LEFT JOIN [dbo].[Inv_Unit] on  [dbo].[Inv_Unit].ID = [dbo].[Inv_Items].Inventory_UnitId 
  LEFT JOIN [dbo].[Inv_Items_Units] on [dbo].[Inv_Items_Units].[Item_ID] = [dbo].[Inv_Items].[ID] and [dbo].[Inv_Items_Units].[Unit_id] = [dbo].[Inv_Items].Inventory_UnitId 
  LEFT JOIN [dbo].[Inv_Items_Vendors] on [dbo].[Inv_Items_Vendors].[ItemID] = [dbo].[Inv_Items].[ID] and [dbo].[Inv_Items_Vendors].[IsMainVendor] = 1
  LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[Inv_Items_Vendors].[VendorID]
  JOIN [dbo].[Inv_Items_Store] on [dbo].[Inv_Items_Store].[Item_ID] = [dbo].[Inv_Items].[ID]
  LEFT JOIN [dbo].[Inv_Items_Categories] on [dbo].[Inv_Items_Categories].[Item_ID] = [dbo].[Inv_Items].[ID]
  LEFT JOIN [dbo].[Inv_Store] on [dbo].[Inv_Store].[ID] = [dbo].[Inv_Items_Store].[Store_ID]

 Where 
 ([dbo].[Inv_Items].[Subsidiary_ID] = @Subsidiary_ID ) AND
 ([dbo].[Inv_Items].Item_Type = @ItemTypeID) AND
 ([Inv_Items_Units].Unit_id = @UnitID OR @UnitID = 0) AND
 ([dbo].[GL_Accounts].[AccountID] = @VendorID OR @VendorID = 0) AND
 ([dbo].[Inv_Items_Store].Store_ID  IN (select * from ParseCommaDelimitedString(@StocksID)) OR @StocksID='0') AND
 ([dbo].[Inv_Items_Categories].ItemCategory_ID  IN (select * from ParseCommaDelimitedString(@ItemCategoriesIDs)) OR @ItemCategoriesIDs='0')
  AND ([dbo].[Inv_Items].[IsActive] = 1)

 Group by [dbo].[Inv_Items].[ID]




GO
/****** Object:  StoredProcedure [dbo].[GetGroupbyStoreDataReport]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[GetGroupbyStoreDataReport]
 
@Subsidiary_ID int ,
@ItemTypeID int,
@VendorID int,
@StocksID nvarchar(100),
@UnitID int ,
@Qty Decimal(18,3),
@ItemCategoriesIDs nvarchar(500)

AS
   SELECT MAX([dbo].[Inv_Items].[Subsidiary_ID]) as Subsidiary_ID 
	  ,Max(CONVERT(varchar(50),[dbo].[Inv_Store].Name)) as StoreName
	  ,SUM((ISNull([dbo].[Inv_Items_Store].Qty,0) * ISNull([dbo].[Inv_Items_Store].Cost_conv,0)))as Cost
	  ,SUM(ISNull([dbo].[Inv_Items_Store].Qty,0))as Qty
	  , Case when SUM([dbo].[Inv_Items_Store].Qty)=0 then null
        Else (SUM((ISNull([dbo].[Inv_Items_Store].Qty,0) * ISNull([dbo].[Inv_Items_Store].Cost_conv,0))))
        End as TotalCost
      , (SUM(ISNull([dbo].[Inv_Items_Store].Qty,0)) - SUM(ISNull([dbo].[Inv_Items_Store].[Reserved_Qty],0)) ) as Avaliable

  FROM [dbo].[Inv_Items]
  LEFT JOIN [dbo].[Inv_Unit] on  [dbo].[Inv_Unit].ID = [dbo].[Inv_Items].Inventory_UnitId 
  LEFT JOIN [dbo].[Inv_Items_Units] on [dbo].[Inv_Items_Units].[Item_ID] = [dbo].[Inv_Items].[ID] and [dbo].[Inv_Items_Units].[Unit_id] = [dbo].[Inv_Items].Inventory_UnitId 
  LEFT JOIN [dbo].[Inv_Items_Vendors] on [dbo].[Inv_Items_Vendors].[ItemID] = [dbo].[Inv_Items].[ID] and [dbo].[Inv_Items_Vendors].[IsMainVendor] = 1
  LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[Inv_Items_Vendors].[VendorID]
  JOIN [dbo].[Inv_Items_Store] on [dbo].[Inv_Items_Store].[Item_ID] = [dbo].[Inv_Items].[ID]
  LEFT JOIN [dbo].[Inv_Items_Categories] on [dbo].[Inv_Items_Categories].[Item_ID] = [dbo].[Inv_Items].[ID]
  LEFT JOIN [dbo].[Inv_Store] on [dbo].[Inv_Store].[ID] = [dbo].[Inv_Items_Store].[Store_ID]

 Where 
 ([dbo].[Inv_Items].[Subsidiary_ID] = @Subsidiary_ID ) AND
 ([dbo].[Inv_Items].Item_Type = @ItemTypeID) AND
 ([Inv_Items_Units].Unit_id = @UnitID OR @UnitID = 0) AND
 ([dbo].[GL_Accounts].[AccountID] = @VendorID OR @VendorID = 0) AND
 ([dbo].[Inv_Items_Store].Store_ID  IN (select * from ParseCommaDelimitedString(@StocksID)) OR @StocksID='0') AND
 ([dbo].[Inv_Items_Categories].ItemCategory_ID  IN (select * from ParseCommaDelimitedString(@ItemCategoriesIDs)) OR @ItemCategoriesIDs='0')
 AND ([dbo].[Inv_Items].[IsActive] = 1)


 Group by [dbo].[Inv_Store].[ID]




GO
/****** Object:  StoredProcedure [dbo].[GetItemAvgCost]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [dbo].[GetItemAvgCost] 
@ItemID int ,
@SubsidiaryID int

AS

Select top 1 AV_Inv_items_Last_AVgCost.maxDate , AvgCost =AvgCost 
from AV_Inv_items_Last_AVgCost
		 Where AV_Inv_items_Last_AVgCost.Item_ID = @ItemID 

--Select top 1  maxDate = Entry_Date , AvgCost =AvgCost 
--from Inv_Receipt_h 
--         Join Inv_Receipt_d on Inv_Receipt_h.ID = Inv_Receipt_d.Parent_ID
--		 Where Inv_Receipt_d.Item_ID = @ItemID and Inv_Receipt_h.SubsidiaryID = @SubsidiaryID

--Union ALL 

--Select maxDate = '2000-01-01' , AvgCost = First_Cost/FinalConv  from Inv_Items_Store
--      Where Item_ID Not in(Select Item_ID from Inv_Receipt_d) and Item_ID = @ItemID
GO
/****** Object:  StoredProcedure [dbo].[GetItemCostAtDateStore]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 CREATE proc [dbo].[GetItemCostAtDateStore] --8412,60,59,'2020-01-13 00:17:00.000'
@item_id int
,@Unit_id int
,@store_id int
,@Entry_Date datetime
AS

--select top 1 AvgCost * isnull((Select top 1 isnull(FinalConv,1) FROM [Inv_Items_Units]  where Item_ID =  @item_id and Unit_id = @Unit_id),1)  as AvgCost , Entry_Date 
--from AV_Inv_items_storeDate
--where item_id =  @item_id 
--and store_id = @store_id
--and CONVERT(datetime,Entry_Date) <= @Entry_Date
--order by Entry_Date desc
with qry(AvgCost,Entry_Date)
as(

Select Top 1 d.avgcost * isnull((Select top 1 isnull(FinalConv,1) FROM [Inv_Items_Units]  where Item_ID =  @item_id and Unit_id = @Unit_id),1)  
,h.entry_date
from Inv_Receipt_d d,Inv_Receipt_H h where d.PARENT_ID = h.ID and h.Entry_Date = (
sELECT Top 1 MAX(Inv_Receipt_H.Entry_Date) FROM Inv_Receipt_d,Inv_Receipt_H WHERE  Inv_Receipt_d.PARENT_ID = Inv_Receipt_H.ID 
AND CAST(Inv_Receipt_H.Entry_Date AS DATETIME) < CAST(@Entry_Date AS DATETIME) AND Item_ID =@item_id AND Store_ID = @store_id and Inv_Receipt_d.Transaction_move <> 0    )
and  d.Item_ID =@item_id AND d.Store_ID = @store_id and d.Transaction_move <> 0 
order by d.id  desc
/*
select top 1 (case when totalQTy > 0 then
AvgCost * isnull((Select top 1 isnull(FinalConv,1) FROM [Inv_Items_Units]  where Item_ID =  @item_id and Unit_id = @Unit_id),1) Else 0 end)
 as AvgCost , Entry_Date 
from AV_Inv_items_storeDate
where item_id =  @item_id 
and AvgCost is not null
and store_id = @store_id
--and CONVERT(datetime,Entry_Date) <=  @Entry_Date
and Entry_Date <=  @Entry_Date
order by Entry_Date desc
*/
union
SELECT DISTINCT First_Cost / FinalConv as AvgCost ,Entry_Date = CAST('2000/01/01' AS DATETIME)
FROM  [dbo].[Inv_Items_Store]
--, [dbo].[Inv_Items]
WHERE  item_id =  @item_id 
and store_id = @store_id
--[Inv_Items].Item_Type <> 3 AND 
--[dbo].[Inv_Items_Store].ITEM_ID = [dbo].[Inv_Items].ID 
--AND 1 NOT IN
--                             (SELECT        1
--                                FROM            [Inv_Receipt_d] a
--                                WHERE        a.[item_id] = [dbo].[Inv_Items_Store].[item_id] AND a.[store_id] = [dbo].[Inv_Items_Store].[store_id])
 
)
select Top 1 * from qry order by Entry_Date desc


--DECLARE @UnitFinalConv decimal,@Item_Type int,@InvUnit int
--SELECT @UnitFinalConv = isnull(FinalConv,1) FROM [Inv_Items_Units]  where Item_ID =  @item_id and Unit_id = @Unit_id;
--select @Item_Type = Item_Type, @InvUnit = Inventory_UnitId from Inv_Items where ID=@item_id;
--if @Item_Type = 3
--begin
--if (@InvUnit <> @Unit_id)
--begin
--select ((select  [dbo].[Fun_aa_calcKitAvgCost](@item_id,@store_id,@Entry_Date) )  * @UnitFinalConv)  as AvgCost,@Entry_Date as Entry_Date
--end
--else
--begin
--select ((select  [dbo].[Fun_aa_calcKitAvgCost](@item_id,@store_id,@Entry_Date) ) )  as AvgCost,@Entry_Date as Entry_Date
--end

--end
--else
--begin
--with qry(AvgCost,Entry_Date)
--as(
--SELECT top 1  case when Inv_Receipt_d_Avgcost.TotalQTy >= 0 then
--(Inv_Receipt_d_Avgcost.AvgCost * @UnitFinalConv) 
--else
--0
--end  as AvgCost,Inv_Receipt_h.Entry_Date
--FROM Inv_Receipt_d_Avgcost INNER JOIN
--Inv_Receipt_d   ON Inv_Receipt_d.ID = Inv_Receipt_d_Avgcost.ID INNER JOIN
--Inv_Receipt_h ON Inv_Receipt_d.Parent_ID = Inv_Receipt_h.ID
--inner join Inv_Items it on it.ID = Inv_Receipt_d.Item_ID
--where Inv_Receipt_d.Item_ID = @item_id 
--and Inv_Receipt_d.Store_ID = @store_id
--and CONVERT(datetime, Inv_Receipt_h.Entry_Date) <= @Entry_Date
--order by Entry_Date desc
--union
--SELECT DISTINCT AvrCost,Entry_Date = CAST('2000/01/01' AS DATETIME)
--FROM            [dbo].[Inv_Items_Store], [dbo].[Inv_Items]
--WHERE        [Inv_Items].Item_Type <> 3 AND [dbo].[Inv_Items_Store].ITEM_ID = [dbo].[Inv_Items].ID AND 1 NOT IN
--                             (SELECT        1
--                                FROM            [AV_INV_TransactionDetails] a
--                                WHERE        a.[item_id] = [dbo].[Inv_Items_Store].[item_id] AND a.[store_id] = [dbo].[Inv_Items_Store].[store_id])
--And Item_ID = @item_id and [Inv_Items_Store].[store_id] = @store_id
--)
--select Top 1 * from qry order by Entry_Date desc
--end
----------------------------------------

/****** Object:  UserDefinedFunction [dbo].[Fun_aa_calcKitAvgCost]    Script Date: 2019-10-03 05:59:14 ? ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[GetItemCostPrice]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[GetItemCostPrice]-- 2760,48,'2018-12-19'
@item_id int
,@store_id int
,@Entry_Date datetime
AS
select * from AV_INV_TransactionDetails where 
item_id = @item_id
and store_id = @store_id
and CONVERT(date, Entry_Date) <= @Entry_Date
GO
/****** Object:  StoredProcedure [dbo].[GetItemCurrentBalance]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [dbo].[GetItemCurrentBalance] -- 1057,61
@ItemId INT, --1
@BranchId INT --16
AS
begin
	declare @SubsidaryID int = 0,@ToDate DATEtime = convert(date, GETDATE()),	 @StoreId INT =0
	
	SELECT @StoreId = StoreID ,@SubsidaryID= Subsidaryid FROM mstr_Branch WHERE ID = @BranchId

	Set @ToDate = @ToDate + '23:59:59'
    CREATE TABLE #AV_Inv_items_storeT
    (  
		  maxDate DATETIME 
          ,TransID INT              
          ,item_id INT
          ,store_id  INT
          ,AvgCost DECIMAL(38, 20)
          ,Balance DECIMAL(38, 20)
          ,TotalReservedQTy DECIMAL(38, 20)
    );
	




	 INSERT INTO #AV_Inv_items_storeT
            
		 SELECT    maxDate
			  ,TransID
			  ,item_id
			  ,store_id
			  ,AvgCost
			  ,Balance
			  ,TotalReservedQTy
	From

(SELECT  
             row_number() over(partition by  Inv_Receipt_d.item_id, Inv_Receipt_d.store_id
			 order by Entry_Date desc,Inv_Receipt_d.id desc) as rn
				  ,  Inv_Receipt_d.item_id
                  , Inv_Receipt_d.store_id
                  , Inv_Receipt_h.Entry_Date maxDate
                  , Inv_Receipt_d.ID  TransID 
                  , Inv_Receipt_d.totalQTy     Balance                               
                  , Inv_Receipt_d.TotalReservedQTy  TotalReservedQTy
                 , AvgCost = Cast((SELECT  top 1  invD.AvgCost FROM     dbo.Inv_Receipt_d as invD INNER JOIN dbo.Inv_Receipt_h as invH ON invD.Parent_ID = invH.ID WHERE (ISNULL(invH.Is_Canceled, 0) <> 1) AND (ISNULL(invH.IsHolded, 0) <> 1) and invD.Transaction_move <> 0  and   invD.Item_ID=Inv_Receipt_d.item_id order by Entry_Date desc ) as float)

FROM   Inv_Receipt_h ,Inv_Receipt_d        
 WHERE(ISNULL(Inv_Receipt_h.Is_Canceled , 0) <> 1)
      AND (ISNULL(Inv_Receipt_h.IsHolded , 0) <> 1) 
	  and Inv_Receipt_d.Parent_ID = Inv_Receipt_h.ID  
	  and Entry_Date <=  @ToDate and Transaction_move <> 0
	  ) as T

	  Where rn = 1


UNION
SELECT DISTINCT 
       maxDate = CAST('2000/01/01' AS DATETIME)
     , TransID = 0
     , [item_id]
     , [store_id]
     ,   cast( cast(First_Cost as float) / cast(FinalConv as float)   as float)  
     , Balance = ISNULL([First_Qty] , 0) * ISNULL(FinalConv , 1)
	 ,0
FROM [dbo].[Inv_Items_Store] , [dbo].[Inv_Items] 
WHERE [Inv_Items].Item_Type <> 3 and  [dbo].[Inv_Items_Store] .ITEM_ID =  [dbo].[Inv_Items].ID  AND 1 NOT IN
(
 SELECT 1
 FROM inv_receipt_d a
 WHERE a.[item_id] = [dbo].[Inv_Items_Store].[item_id]
       AND a.[store_id] = [dbo].[Inv_Items_Store].[store_id])
	    




	    
    select ISNULL( ( SELECT  CAST(ISNULL(AV_Inv_items_storeT.Balance, 0) AS DECIMAL(38, 20))      CurrentBalance
        
	FROM Inv_Items
             LEFT JOIN #AV_Inv_items_storeT AV_Inv_items_storeT
                       ON Inv_Items.ID = AV_Inv_items_storeT.item_id
             LEFT JOIN Inv_Store
                       ON Inv_Store.ID = AV_Inv_items_storeT.Store_ID
             LEFT JOIN Inv_Unit
                       ON Inv_Unit.ID = Inv_Items.Inventory_UnitId
             LEFT JOIN Inv_Unit Purchasing_Unit
                       ON Purchasing_Unit.ID = Inv_Items.Purchasing_UnitId
             LEFT JOIN Inv_Unit Selling_Unit
                       ON Selling_Unit.ID = Inv_Items.Selling_UnitId
             LEFT JOIN Inv_Items_Units Inventory_Unit_Conv
                       ON Inventory_Unit_Conv.Item_ID = Inv_Items.ID
                           AND Inventory_Unit_Conv.Unit_id = Inv_Items.Inventory_UnitId
             LEFT JOIN Inv_Items_Units Purchasing_Unit_Conv
                       ON Purchasing_Unit_Conv.Item_ID = Inv_Items.ID
                           AND Purchasing_Unit_Conv.Unit_id = Inv_Items.Purchasing_UnitId
             LEFT JOIN Inv_Items_Units Selling_Unit_Conv
                       ON Selling_Unit_Conv.Item_ID = Inv_Items.ID
                           AND Selling_Unit_Conv.Unit_id = Inv_Items.Selling_UnitId
             LEFT JOIN Inv_items_store
                       ON Inv_items_store.Item_ID = Inv_Items.ID
                           AND Inv_items_store.Store_ID = Inv_Store.ID
    WHERE (@SubsidaryID IS NULL  OR Inv_Items.Subsidiary_ID = @SubsidaryID)
      AND ( Inv_Items.Item_Type  = 1 or  Inv_Items.Item_Type =  4) 
      AND (@StoreID IS NULL   OR AV_Inv_items_storeT.Store_ID = @StoreID) 

  
     
	   
     
      AND (@ItemId IS NULL  OR Inv_Items.ID = @ItemId)
     
      AND ((@ToDate IS NULL  OR CAST(AV_Inv_items_storeT.maxDate AS DATE) <= @ToDate))
      ), 0) AS CurrentBalance


		   IF OBJECT_ID('tempdb..#AV_Inv_items_storeT') IS NOT NULL DROP TABLE #AV_Inv_items_storeT

END
GO
/****** Object:  StoredProcedure [dbo].[GetItemLastAvgCost]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[GetItemLastAvgCost]-- 3329
	@ItemId int
	--,	@StoreId int

AS
BEGIN
	SET NOCOUNT ON;


 select * from AV_Inv_items_store t
 where t.item_id = @ItemId
 order by t.maxDate desc
  

	
END
GO
/****** Object:  StoredProcedure [dbo].[GetItemReceiptsUnits]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create proc [dbo].[GetItemReceiptsUnits] -- 2993
@ItemId int 
AS

SELECT distinct Inv_Unit.ID
FROM   Inv_Receipt_d INNER JOIN
             Inv_Unit ON Inv_Receipt_d.Unit_ID = Inv_Unit.ID
			 where Inv_Receipt_d.Item_ID = @ItemId

GO
/****** Object:  StoredProcedure [dbo].[GetItemsDataReport]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[GetItemsDataReport]

@Subsidiary_ID int ,
@ItemTypeID int,
@VendorID int,
@ItemCategoriesIDs nvarchar(500)

AS
   
SELECT DISTINCT [Subsidiary_ID]
      ,[dbo].[Inv_Items].[ID] as ItemID
      ,[dbo].[Inv_Items].[Code] as ItemCode
      ,[dbo].[Inv_Items].[Name] as ItemName
	  ,[dbo].[Inv_Items].[Name_AR] as ItemNameAr
      ,[Description] as ItemDescription
      ,[Inventory_UnitId] 
      ,[Item_Type]
	  ,[dbo].[Inv_Unit].Name as InventoryUnitName
	  ,ISNULL([dbo].[Inv_Items_Units].[Sale_price1],0) as SalesPrice
	  ,[dbo].[GL_Accounts].[AccountID] as VendorID
	  ,[dbo].[GL_Accounts].[Name] as VendorName
	  ,[dbo].[Inv_Items].[IsActive]


  FROM [dbo].[Inv_Items]
  LEFT JOIN [dbo].[Inv_Unit] on  [dbo].[Inv_Unit].ID = [dbo].[Inv_Items].Inventory_UnitId 
  LEFT JOIN [dbo].[Inv_Items_Units] on [dbo].[Inv_Items_Units].[Item_ID] = [dbo].[Inv_Items].[ID] and [dbo].[Inv_Items_Units].[Unit_id] = [dbo].[Inv_Items].Inventory_UnitId 
  LEFT JOIN [dbo].[Inv_Items_Vendors] on [dbo].[Inv_Items_Vendors].[ItemID] = [dbo].[Inv_Items].[ID] -- and [dbo].[Inv_Items_Vendors].[IsMainVendor] = 1
  LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[Inv_Items_Vendors].[VendorID]
  LEFT JOIN [dbo].[Inv_Items_Categories] on [dbo].[Inv_Items_Categories].[Item_ID] = [dbo].[Inv_Items].[ID]

 Where 
 ([dbo].[Inv_Items].[Subsidiary_ID] = @Subsidiary_ID ) AND
 ([dbo].[Inv_Items].[Item_Type] = @ItemTypeID ) AND
 ([dbo].[GL_Accounts].[AccountID] = @VendorID OR @VendorID = 0 ) AND
 ([dbo].[Inv_Items_Categories].[ItemCategory_ID]  IN (select * from ParseCommaDelimitedString(@ItemCategoriesIDs)) OR @ItemCategoriesIDs='0' )
  AND ([dbo].[Inv_Items].[IsActive] = 1)

GO
/****** Object:  StoredProcedure [dbo].[GetItemsList]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetItemsList]
@SubsidiaryID int ,
@Skip int = 0,
@Take int = 200
AS
SELECT DISTINCT 
      dbo.Inv_Items.Subsidiary_ID, 
	  dbo.Inv_Items.ID, 
	  dbo.Inv_Items.Code,
	  dbo.Inv_Items.Name,
	  dbo.Inv_Items.Name_AR, 
      dbo.Inv_Items.Description, 
	  dbo.Inv_Items.Inventory_UnitId, 
	  dbo.Inv_Items.Item_Type, 
      dbo.Inv_Unit.Name AS UnitName, 
	  ISNULL(Inv_Items_Units.Sale_price1, 0) AS SalesPrice, 
	  InvItemsVendors.Name, 
	  dbo.Inv_Items.IsActive, 
	  ISNULL(itemStores.ActualQty, 0) AS ActualQty
FROM  dbo.Inv_Items 
      LEFT OUTER JOIN dbo.Inv_Unit ON dbo.Inv_Unit.ID = dbo.Inv_Items.Inventory_UnitId 
	  LEFT OUTER JOIN
          (SELECT        ID, Item_ID, Unit_id, SubUnit_id, Conv, BarCode, Sale_price1, Sale_price2, Sale_price3, Sale_price4
            FROM            dbo.Inv_Items_Units AS Inv_Items_Units_1) AS Inv_Items_Units ON Inv_Items_Units.Item_ID = dbo.Inv_Items.ID AND Inv_Items_Units.Unit_id = dbo.Inv_Items.Inventory_UnitId 
      LEFT OUTER JOIN
           (	select Max(Name) as Name , ItemID from dbo.GL_Accounts join dbo.Inv_Items_Vendors on dbo.Inv_Items_Vendors.VendorID = (
    select VendorID from dbo.Inv_Items_Vendors
    where dbo.Inv_Items_Vendors.VendorID = dbo.GL_Accounts.AccountID and dbo.Inv_Items_Vendors.IsMainVendor = 1
	order by  dbo.Inv_Items_Vendors.ID
    offset 0 rows
fetch next 1 rows only
) 
Group BY ItemID
) AS InvItemsVendors ON InvItemsVendors.ItemID = dbo.Inv_Items.ID 

	  LEFT OUTER JOIN (Select Top 1 * From dbo.Inv_Items_Store)itemStores  ON itemStores.Item_ID = dbo.Inv_Items.ID

  order by Id 
  OFFSET     @Skip ROWS       
  FETCH NEXT @Take ROWS ONLY; 
GO
/****** Object:  StoredProcedure [dbo].[GetItemsOpeningBalances]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetItemsOpeningBalances] --1,'53','0','2020-10-07',''

@Subsidiary_ID int ,
@StocksID nvarchar(100),
@ItemCategoriesIDs nvarchar(500),
@StockTakenDate datetime,
@SearchValue NVARCHAR(150)

AS
SET ANSI_NULLS ON


Select Distinct INv_Items.[Subsidiary_ID]
	  ,Inv_Items_Store.Store_ID as StoreID  
	  ,Inv_Store.Code as StoreName
      ,INv_Items.[ID] as ItemID
      ,INv_Items.[Code] as ItemCode
      ,INv_Items.[Name] as ItemName
	  ,INv_Items.[Name_AR] as ItemNameAr
      ,INv_Items.[Description] as ItemDescription
      ,ISNull(Inv_Items_Store.First_Unit,0) as Inventory_UnitId
	  ,Inv_Unit.Name as InventoryUnitName
	  ,ISNull(Inv_Items_Units.Conv,0) as Conv
	  ,ISNull(Inv_Items_Units.FinalConv,1) as FinalConv 
	  ,Inv_Items_Store.ActualQty as ActualQty
      ,cast( (ISNULL(Inv_Items_Store.First_Qty, 0) / ISNULL(Inv_Items_Units.FinalConv, 1))as float) as Qty
	  --,ISNULL(ms.AvgCost, 0) as Cost
	  ,( (ISNULL(Inv_Items_Store.First_Cost, 0) * ISNULL(Inv_Items_Units.FinalConv, 1))) as Cost
	  ,Inv_Items_Store.ArchiveQty as ArchiveQty 
      ,[Item_Type]
	  ,ISNULL(Inv_Items_Units.[Sale_price1],0) as SalesPrice
	  ,ISNULL(Inv_Items_Units.[Sale_price2],0) as SalesPrice2
	  ,ISNULL(Inv_Items_Units.[Sale_price3],0) as SalesPrice3
	  ,ISNULL(Inv_Items_Units.[Sale_price4],0) as SalesPrice4 
	  ,Inv_Items.[IsActive]	 
	  ,@StockTakenDate
           -- ,ISNULL(Barcode.ItemBarCode,'') AS ItemBarCode
	  ,ISNULL(Inv_Items_Units.BarCode,0) as ItemBarCode 
	  from  Inv_Items_Store 
	  Join INv_Items on Inv_Items_Store.Item_ID = Inv_Items.ID
	  Join Inv_Store on Inv_Store.ID = Inv_Items_Store.Store_ID
	  Join Inv_Items_Units on Inv_Items_Units.Unit_id = Inv_Items_Store.First_Unit
	  JOin Inv_Unit on Inv_Unit.ID = Inv_Items_Store.First_Unit
	  LEFT JOIN (SELECT DISTINCT A.Item_ID, ItemBarCode = 
		STUFF((SELECT ', ' + ItemBarCode
			   FROM Inv_Items_Barcode b 
			   WHERE b.Item_ID = a.Item_ID
			  FOR XML PATH('')), 1, 2, '')
	FROM Inv_Items_Barcode a
	WHERE A.IsActiveBarCode = 1
	GROUP BY A.Item_ID,a.ID ) Barcode
	ON Barcode.Item_ID = INv_Items.Id
	LEFT JOIN [Inv_Items_Categories] AS ic on ic.[Item_ID] = Inv_Items.[ID] 
 Where 
 --Inv_Items.ID <> 248
 Inv_Store.[ID] = Inv_Items_Store.[Store_ID]  and 
 Inv_Items_Store.[Item_ID] = Inv_Items.[ID] and 
 Inv_Items_Units.[Item_ID] = Inv_Items.[ID] and
 Inv_Items_Units.[Unit_id] = Inv_Items_Store.First_Unit  and
 Inv_Unit.ID = Inv_Items_Store.First_Unit and
 (Inv_Items.[Subsidiary_ID] = @Subsidiary_ID ) AND
 (Inv_Items_Store.Store_ID  IN (select * from ParseCommaDelimitedString(@StocksID)) OR @StocksID='0') AND
 (ic.[ItemCategory_ID]  IN (select * from ParseCommaDelimitedString(@ItemCategoriesIDs)) OR @ItemCategoriesIDs='0' )
  AND (Inv_Items.[IsActive] = 1)  
  And Inv_Items.Item_Type in (4,5,1)--الاصناف المخزنية و الاصناف المنتجة (التام) والاصناف الافتراضية فقط
  and ( (@SearchValue IS NULL) OR (@SearchValue  = '') or (Inv_Items.[Name] like '%'+@SearchValue+'%' ) 
  or (Inv_Items.[Name_AR] like '%'+@SearchValue+'%' ) or (Inv_Items.Code like '%'+@SearchValue+'%' ))
  order by Inv_Items.Code
GO
/****** Object:  StoredProcedure [dbo].[GetItemsStoresDataReport]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[GetItemsStoresDataReport]
 
@Subsidiary_ID int ,
@ItemTypeID int,
@VendorID int,
@StocksID nvarchar(100),
@UnitID int ,
@Qty Decimal(18,3),
@ItemCategoriesIDs nvarchar(500)

AS

 DECLARE @colsUnpivot AS NVARCHAR(MAX),
    @query  AS NVARCHAR(MAX),
    @colsPivot as  NVARCHAR(MAX),
    @Subsidiary_IDValue NVARCHAR(100) = cast(@Subsidiary_ID as NVARCHAR(100) ),
	@ItemTypeIDValue NVARCHAR(100)= cast(@ItemTypeID as NVARCHAR(100) ),
	@VendorIDValue NVARCHAR(100)= cast(@VendorID as NVARCHAR(100) ),
	--@StocksIDValue NVARCHAR(100)= cast(@StocksID as NVARCHAR(100) ),
	@UnitIDValue NVARCHAR(100)= cast(@UnitID as NVARCHAR(100) ),
	@QtyValue NVARCHAR(100)= cast(@Qty as NVARCHAR(100) )--,
	--@ItemCategoriesIDsValue NVARCHAR(500)= cast(@ItemCategoriesIDs as NVARCHAR(100) )

select @colsPivot = STUFF((SELECT  ',' + quotename(c.name 
                                          + cast(v.rn as varchar(10))) +',' +
										  quotename('Cost' 
                                          + cast(v.rn as varchar(10)))
                    from
                    (					  
                       select row_number() over(partition by [dbo].[Inv_Items_Store].[Item_ID] order by [dbo].[Inv_Items_Store].[Store_ID]) rn
                       from [dbo].[Inv_Items_Store]
                    ) v
                    cross apply sys.columns as C
                   where C.object_id = object_id('[dbo].[Inv_Items_Store]') and
                    C.name  in ('Qty')
                   group by c.name, v.rn
                   order by v.rn
            FOR XML PATH(''), TYPE
            ).value('.', 'NVARCHAR(MAX)') 
        ,1,1,'')


set @query 
= 'SELECT *
from
(
SELECT ItemCode, ItemName, col + cast(rownum as varchar(10)) new_col, value
FROM
(
SELECT [Subsidiary_ID]
      ,[dbo].[Inv_Items].[ID] as ItemID
      ,[dbo].[Inv_Items].[Code] as ItemCode
      ,[dbo].[Inv_Items].[Name] as ItemName
	  ,ISNull([dbo].[Inv_Items_Store].Store_ID,0) as StoreID  
	  ,CONVERT(varchar(50),[dbo].[Inv_Store].Name) as StoreName
	  ,cast((ISNULL([dbo].[Inv_Items_Store].[Qty],0)) as nvarchar(100)) as Qty
	  ,cast((ISNULL([dbo].[Inv_Items_Store].[Qty],0) * ISNULL([dbo].[Inv_Items_Store].[Cost_conv],0)) as nvarchar(100)) as Cost
	  ,row_number() over(partition by [dbo].[Inv_Items_Store].[Item_ID] order by [dbo].[Inv_Items_Store].[Store_ID]) as rownum



  FROM [dbo].[Inv_Items]
  LEFT JOIN [dbo].[Inv_Unit] on  [dbo].[Inv_Unit].ID = [dbo].[Inv_Items].Inventory_UnitId 
  LEFT JOIN [dbo].[Inv_Items_Units] on [dbo].[Inv_Items_Units].[Item_ID] = [dbo].[Inv_Items].[ID] and [dbo].[Inv_Items_Units].[Unit_id] = [dbo].[Inv_Items].Inventory_UnitId 
  LEFT JOIN [dbo].[Inv_Items_Vendors] on [dbo].[Inv_Items_Vendors].[ItemID] = [dbo].[Inv_Items].[ID] and [dbo].[Inv_Items_Vendors].[IsMainVendor] = 1
  LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[Inv_Items_Vendors].[VendorID]
  JOIN [dbo].[Inv_Items_Store] on [dbo].[Inv_Items_Store].[Item_ID] = [dbo].[Inv_Items].[ID]
  LEFT JOIN [dbo].[Inv_Items_Categories] on [dbo].[Inv_Items_Categories].[Item_ID] = [dbo].[Inv_Items].[ID]
  LEFT JOIN [dbo].[Inv_Store] on [dbo].[Inv_Store].[ID] = [dbo].[Inv_Items_Store].[Store_ID]

 Where 
 ((cast([dbo].[Inv_Items].[Subsidiary_ID] as nvarchar(100)) = '+ @Subsidiary_IDValue + ')) AND
 ([dbo].[Inv_Items].Item_Type = '+ @ItemTypeIDValue +') AND
 ([Inv_Items_Units].Unit_id = '+ @UnitIDValue +' OR '+ @UnitIDValue +' = 0) AND
 ([dbo].[GL_Accounts].[AccountID] = '+ @VendorIDValue +' OR '+ @VendorIDValue +' = 0) AND
 ([dbo].[Inv_Items_Store].Store_ID  IN (select * from ParseCommaDelimitedString(N'''+ @StocksID  + ''')) OR N'''+ @StocksID  +'''= ''0'') AND
 ([dbo].[Inv_Items_Categories].ItemCategory_ID  IN (select * from ParseCommaDelimitedString(N'''+@ItemCategoriesIDs+''')) OR N'''+@ItemCategoriesIDs+'''=''0'')
  AND ([dbo].[Inv_Items].[IsActive] = 1)
   ) x
  UNPIVOT
	(
	  value
	  for col in (Qty, Cost)
	) u
	)x1

pivot
(
  max(value)
  for new_col in ('+ @colspivot +')
) p'


exec(@query)





GO
/****** Object:  StoredProcedure [dbo].[GetItemStoreQty]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[GetItemStoreQty] --2964
@ItemID int
AS
--select TD.Balance as totalQTy, ST.Code as StoreCode,ST.Name AS StoreName,ST.Name_AR AS StoreNameAr  from AV_Inv_items_store TD
--inner join Inv_Store ST on TD.store_id = ST.ID
--where  TD.item_id = @ItemID 
---------------------------------
select * from 
(
SELECT        Inv_Receipt_d.ID AS TransactionID, ST.ID AS StoreID,Convert(Decimal(28,20), Inv_Receipt_d.TotalQTy / ISNULL(Inv_Items_Units.FinalConv,1)) as TotalQTy, ST.Code AS StoreCode, ST.Name AS StoreName,
 ST.Name_AR AS StoreNameAr,Inv_Receipt_h.Entry_Date,ISNULL(Inv_Receipt_d.TotalReservedQTy,0) TotalReservedQTy
FROM            Inv_Receipt_d INNER JOIN
                         Inv_Receipt_h ON Inv_Receipt_d.Parent_ID = Inv_Receipt_h.ID INNER JOIN
                         Inv_Store AS ST ON Inv_Receipt_d.Store_ID = ST.ID INNER JOIN
                         Inv_Items ON Inv_Receipt_d.Item_ID = Inv_Items.ID  INNER JOIN
                         Inv_Items_Units ON Inv_Items.ID = Inv_Items_Units.Item_ID and Inv_Items_Units.Unit_id = Inv_Items.Inventory_UnitId
WHERE        (Inv_Receipt_d.Item_ID = @ItemID)
GROUP BY Inv_Receipt_d.ID, ST.ID, Inv_Receipt_d.TotalQTy, ST.Code, ST.Name, ST.Name_AR, Inv_Receipt_h.Entry_Date, Inv_Items_Units.FinalConv,Inv_Receipt_d.TotalReservedQTy
) Table1

WHERE Table1.Entry_Date=
(SELECT Max(Table2.Entry_Date) From 
(
SELECT        Inv_Receipt_d.ID AS TransactionID, ST.ID AS StoreID, Inv_Receipt_d.TotalQTy / ISNULL(Inv_Items_Units.FinalConv,1) as TotalQTy, ST.Code AS StoreCode, ST.Name AS StoreName,
 ST.Name_AR AS StoreNameAr,Inv_Receipt_h.Entry_Date,Inv_Receipt_d.TotalReservedQTy
FROM            Inv_Receipt_d INNER JOIN
                         Inv_Receipt_h ON Inv_Receipt_d.Parent_ID = Inv_Receipt_h.ID INNER JOIN
                         Inv_Store AS ST ON Inv_Receipt_d.Store_ID = ST.ID INNER JOIN
                         Inv_Items ON Inv_Receipt_d.Item_ID = Inv_Items.ID  INNER JOIN
                         Inv_Items_Units ON Inv_Items.ID = Inv_Items_Units.Item_ID and Inv_Items_Units.Unit_id = Inv_Items.Inventory_UnitId
WHERE        (Inv_Receipt_d.Item_ID = @ItemID)
GROUP BY Inv_Receipt_d.ID, ST.ID, Inv_Receipt_d.TotalQTy, ST.Code, ST.Name, ST.Name_AR, Inv_Receipt_h.Entry_Date, Inv_Items_Units.FinalConv,Inv_Receipt_d.TotalReservedQTy
) Table2
WHERE Table1.StoreCode = Table2.StoreCode Group by Table2.StoreCode)


union
-- Opening balance
SELECT        0 AS TransactionID, Inv_Items_Store.Store_ID AS StoreID, Inv_Items_Store.First_Qty as TotalQTy, ST.Code AS StoreCode, ST.Name AS StoreName, ST.Name_AR AS StoreNameAr, CAST('2000/01/01' AS datetime) 
                         AS Entry_Date , 0 as TotalReservedQTy
FROM            Inv_Items_Store INNER JOIN
                         Inv_Store AS ST ON Inv_Items_Store.Store_ID = ST.ID INNER JOIN
                         Inv_Items ON Inv_Items_Store.Item_ID = Inv_Items.ID INNER JOIN
                         Inv_Items_Units ON Inv_Items.ID = Inv_Items_Units.Item_ID and Inv_Items_Units.Unit_id = Inv_Items.Inventory_UnitId
WHERE        (Inv_Items_Store.Item_ID = @ItemID)

order by TransactionID
GO
/****** Object:  StoredProcedure [dbo].[GetItemStoreQtyByStoreID]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[GetItemStoreQtyByStoreID] --2964,49
@ItemID int,
@StoreID int
AS
--select TD.Balance as totalQTy, ST.Code as StoreCode,ST.Name AS StoreName,ST.Name_AR AS StoreNameAr  from AV_Inv_items_store TD
--inner join Inv_Store ST on TD.store_id = ST.ID
--where  TD.item_id = @ItemID 
---------------------------------
select * from 
(
SELECT        Inv_Receipt_d.ID AS TransactionID, ST.ID AS StoreID, Inv_Receipt_d.TotalQTy / ISNULL(Inv_Items_Units.FinalConv,1) as TotalQTy, ST.Code AS StoreCode, ST.Name AS StoreName,
 ST.Name_AR AS StoreNameAr,Inv_Receipt_h.Entry_Date,Inv_Receipt_d.TotalReservedQTy
FROM            Inv_Receipt_d INNER JOIN
                         Inv_Receipt_h ON Inv_Receipt_d.Parent_ID = Inv_Receipt_h.ID INNER JOIN
                         Inv_Store AS ST ON Inv_Receipt_d.Store_ID = ST.ID INNER JOIN
                         Inv_Items ON Inv_Receipt_d.Item_ID = Inv_Items.ID  INNER JOIN
                         Inv_Items_Units ON Inv_Items.ID = Inv_Items_Units.Item_ID and Inv_Items_Units.Unit_id = Inv_Items.Inventory_UnitId
where Inv_Receipt_d.Item_ID = @ItemID  and  ST.ID = @StoreID
GROUP BY Inv_Receipt_d.ID, ST.ID, Inv_Receipt_d.TotalQTy, ST.Code, ST.Name, ST.Name_AR, Inv_Receipt_h.Entry_Date, Inv_Items_Units.FinalConv,Inv_Receipt_d.TotalReservedQTy
) Table1

WHERE Table1.Entry_Date=
(SELECT Max(Table2.Entry_Date) From 
(
SELECT        Inv_Receipt_d.ID AS TransactionID, ST.ID AS StoreID, Inv_Receipt_d.TotalQTy / ISNULL(Inv_Items_Units.FinalConv,1) as TotalQTy, ST.Code AS StoreCode, ST.Name AS StoreName,
 ST.Name_AR AS StoreNameAr,Inv_Receipt_h.Entry_Date,Inv_Receipt_d.TotalReservedQTy
FROM            Inv_Receipt_d INNER JOIN
                         Inv_Receipt_h ON Inv_Receipt_d.Parent_ID = Inv_Receipt_h.ID INNER JOIN
                         Inv_Store AS ST ON Inv_Receipt_d.Store_ID = ST.ID INNER JOIN
                         Inv_Items ON Inv_Receipt_d.Item_ID = Inv_Items.ID  INNER JOIN
                         Inv_Items_Units ON Inv_Items.ID = Inv_Items_Units.Item_ID and Inv_Items_Units.Unit_id = Inv_Items.Inventory_UnitId
where Inv_Receipt_d.Item_ID = @ItemID  and  ST.ID = @StoreID
GROUP BY Inv_Receipt_d.ID, ST.ID, Inv_Receipt_d.TotalQTy, ST.Code, ST.Name, ST.Name_AR, Inv_Receipt_h.Entry_Date, Inv_Items_Units.FinalConv,Inv_Receipt_d.TotalReservedQTy
) Table2
WHERE Table1.StoreCode = Table2.StoreCode Group by Table2.StoreCode)

union

SELECT        0 AS TransactionID, Inv_Items_Store.Store_ID AS StoreID, Inv_Items_Store.First_Qty as TotalQTy, ST.Code AS StoreCode, ST.Name AS StoreName, ST.Name_AR AS StoreNameAr, CAST('2000/01/01' AS datetime) 
                         AS Entry_Date, 0 as TotalReservedQTy
FROM            Inv_Items_Store INNER JOIN
                         Inv_Store AS ST ON Inv_Items_Store.Store_ID = ST.ID INNER JOIN
                         Inv_Items ON Inv_Items_Store.Item_ID = Inv_Items.ID INNER JOIN
                         Inv_Items_Units ON Inv_Items.ID = Inv_Items_Units.Item_ID and Inv_Items_Units.Unit_id = Inv_Items.Inventory_UnitId
WHERE        (Inv_Items_Store.Item_ID = @ItemID) and ST.ID = @StoreID

order by TransactionID
GO
/****** Object:  StoredProcedure [dbo].[GetKitItemcomponantCostAtDateStore]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[GetKitItemcomponantCostAtDateStore]
 @item_id int =8366--3009--
--,@Unit_id int
,@store_id int =59
,@Entry_Date datetime ='2020-01-14 01:32'--'2020-01-14 20:59'
as
with 
qry (ItemComponentID,ItemComponentUnitID,ItemComponentConv)
as(
select ItemComponentID,ItemComponentUnitID,ItemComponentConv from Inv_Items_Components where Item_ID = @item_id
)
,qry1(item_id,AvgCost,Entry_Date )
as(
/*select v.item_id, (case when totalQTy > 0 then
AvgCost * isnull((Select top 1 isnull(FinalConv,1) FROM [Inv_Items_Units]  where Item_ID =  q.ItemComponentID and Unit_id = q.ItemComponentUnitID),1) 
else 0 end)
 as AvgCost , Entry_Date 
from AV_Inv_items_storeDate v join qry q on v.item_id = q.ItemComponentID
where  
store_id = @store_id 
and  AvgCost is not null
and Entry_Date <= @Entry_Date*/
--and CONVERT(datetime,Entry_Date,103) < CONVERT(datetime,@Entry_Date,103)
/****************/
select  item_id,AvgCost,Entry_Date from (Select  d.Item_ID,d.avgcost * isnull(q.ItemComponentConv,1) avgcost 
,h.entry_date ,ROW_NUMBER() OVER (PARTITION BY Item_ID ORDER BY h.Entry_Date DESC) AS rn
from Inv_Receipt_d d
join Inv_Receipt_H h on d.PARENT_ID = h.ID 
join  qry q on q.ItemComponentID=d.Item_ID 
where CONVERT(datetime,h.Entry_Date ) < CONVERT(datetime,@Entry_Date) and d.Item_ID =q.ItemComponentID AND d.Store_ID = @store_id and d.Transaction_move <> 0 
) d
where rn=1
/*h.Entry_Date = (
sELECT Top 1 MAX(Inv_Receipt_H.Entry_Date) FROM Inv_Receipt_d,Inv_Receipt_H 
WHERE  Inv_Receipt_d.PARENT_ID = Inv_Receipt_H.ID  and q.ItemComponentID = Inv_Receipt_d.Item_ID
AND CAST(Inv_Receipt_H.Entry_Date AS DATETIME) < CAST(@Entry_Date AS DATETIME)  AND Store_ID = @store_id and Inv_Receipt_d.Transaction_move <> 0    )
and  d.Item_ID =q.ItemComponentID AND d.Store_ID = @store_id and d.Transaction_move <> 0 
*//*********************/


union
SELECT DISTINCT Item_ID,
 First_Cost / isnull((Select top 1 isnull(FinalConv,1) FROM [Inv_Items_Units]  where Item_ID =  @item_id and Unit_id = q.ItemComponentUnitID),1)   AvgCost
,Entry_Date = CAST('2000/01/01' AS DATETIME)
FROM            [dbo].[Inv_Items_Store], qry q
WHERE        [dbo].[Inv_Items_Store].Item_ID = q.ItemComponentID 
And  [Inv_Items_Store].[store_id] = @store_id

)
select  * from qry1 q
where Entry_Date = (select max(q2.Entry_Date) from qry1 q2 
					  where q.item_id = q2.item_id  )
GO
/****** Object:  StoredProcedure [dbo].[GetLastThreeMonthsItemSales]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[GetLastThreeMonthsItemSales] --9392
@ItemId int
AS

SELECT 
			 -------------- CASH AND CREDIT SALES ----------------------
(select cast(IsNull(SUM(D.Qty),0) as decimal(10,2))
FROM   Inv_Receipt_d D INNER JOIN
             Inv_Receipt_h H ON D.Parent_ID = H.ID
			 where H.Code in (51,52) and D.Item_ID = @ItemId and MONTH(H.Entry_Date) = (MONTH(GETDATE()) - 3) and YEAR(H.Entry_Date) = (YEAR(GETDATE()))
			 ) as Month1SalesQty ,
			 (select cast(IsNull(SUM(D.Total),0) as decimal(10,2))
FROM   Inv_Receipt_d D INNER JOIN
             Inv_Receipt_h H ON D.Parent_ID = H.ID
			 where H.Code in (51,52) and D.Item_ID = @ItemId  and MONTH(H.Entry_Date) = (MONTH(GETDATE()) - 3) and YEAR(H.Entry_Date) = (YEAR(GETDATE()))
			 ) as Month1SalesTotal,
			 --------------------------
			 (select cast(IsNull(SUM(D.Qty),0) as decimal(10,2)) 
FROM   Inv_Receipt_d D INNER JOIN
             Inv_Receipt_h H ON D.Parent_ID = H.ID
			 where H.Code in (51,52) and D.Item_ID = @ItemId and MONTH(H.Entry_Date) = (MONTH(GETDATE()) - 2) and YEAR(H.Entry_Date) = (YEAR(GETDATE()))
			 ) as Month2SalesQty ,
			 (select cast(IsNull(SUM(D.Total),0) as decimal(10,2)) 
FROM   Inv_Receipt_d D INNER JOIN
             Inv_Receipt_h H ON D.Parent_ID = H.ID
			 where H.Code in (51,52) and D.Item_ID = @ItemId and MONTH(H.Entry_Date) = (MONTH(GETDATE()) - 2) and YEAR(H.Entry_Date) = (YEAR(GETDATE()))
			 ) as Month2SalesTotal,
			 --------------------------
			 (select cast(IsNull(SUM(D.Qty),0) as decimal(10,2))
FROM   Inv_Receipt_d D INNER JOIN
             Inv_Receipt_h H ON D.Parent_ID = H.ID
			 where H.Code in (51,52) and D.Item_ID = @ItemId and MONTH(H.Entry_Date) = (MONTH(GETDATE()) - 1) and YEAR(H.Entry_Date) = (YEAR(GETDATE()))
			 ) as Month3SalesQty ,
			 (select cast(IsNull(SUM(D.Total),0) as decimal(10,2))
FROM   Inv_Receipt_d D INNER JOIN
             Inv_Receipt_h H ON D.Parent_ID = H.ID
			 where H.Code in (51,52) and D.Item_ID = @ItemId and MONTH(H.Entry_Date) = (MONTH(GETDATE()) - 1) and YEAR(H.Entry_Date) = (YEAR(GETDATE()))
			 ) as Month3SalesTotal,

			 -------------- CASH AND CREDIT RETURNS ----------------------
			  (select cast(IsNull(SUM(D.Qty),0) as decimal(10,2)) 
FROM   Inv_Receipt_d D INNER JOIN
             Inv_Receipt_h H ON D.Parent_ID = H.ID
			 where H.Code in (53,54) and D.Item_ID = @ItemId and MONTH(H.Entry_Date) = (MONTH(GETDATE()) - 3) and YEAR(H.Entry_Date) = (YEAR(GETDATE()))
			 ) as Month1ReturnQty ,
			 (select cast(IsNull(SUM(D.Total),0) as decimal(10,2)) 
FROM   Inv_Receipt_d D INNER JOIN
             Inv_Receipt_h H ON D.Parent_ID = H.ID
			 where H.Code in (53,54) and D.Item_ID = @ItemId and MONTH(H.Entry_Date) = (MONTH(GETDATE()) - 3) and YEAR(H.Entry_Date) = (YEAR(GETDATE()))
			 ) as Month1ReturnTotal,
			 --------------------------
			 (select cast(IsNull(SUM(D.Qty),0) as decimal(10,2)) 
FROM   Inv_Receipt_d D INNER JOIN
             Inv_Receipt_h H ON D.Parent_ID = H.ID
			 where H.Code in (53,54) and D.Item_ID = @ItemId and MONTH(H.Entry_Date) = (MONTH(GETDATE()) - 2) and YEAR(H.Entry_Date) = (YEAR(GETDATE()))
			 ) as Month2ReturnQty ,
			 (select cast(IsNull(SUM(D.Total),0) as decimal(10,2)) 
FROM   Inv_Receipt_d D INNER JOIN
             Inv_Receipt_h H ON D.Parent_ID = H.ID
			 where H.Code in (53,54) and D.Item_ID = @ItemId and MONTH(H.Entry_Date) = (MONTH(GETDATE()) - 2) and YEAR(H.Entry_Date) = (YEAR(GETDATE()))
			 ) as Month2ReturnTotal,
			 --------------------------
			 (select cast(IsNull(SUM(D.Qty),0) as decimal(10,2))
FROM   Inv_Receipt_d D INNER JOIN
             Inv_Receipt_h H ON D.Parent_ID = H.ID
			 where H.Code in (53,54) and D.Item_ID = @ItemId and MONTH(H.Entry_Date) = (MONTH(GETDATE()) - 1) and YEAR(H.Entry_Date) = (YEAR(GETDATE()))
			 ) as Month3ReturnQty ,
			 (select cast(IsNull(SUM(D.Total),0) as decimal(10,2)) 
FROM   Inv_Receipt_d D INNER JOIN
             Inv_Receipt_h H ON D.Parent_ID = H.ID
			 where H.Code in (53,54) and D.Item_ID = @ItemId and MONTH(H.Entry_Date) = (MONTH(GETDATE()) - 1) and YEAR(H.Entry_Date) = (YEAR(GETDATE()))
			 ) as Month3ReturnTotal,

			 
			 --- =================================== Last 4 weeks ======================================================
			 (select cast(IsNull(SUM(D.Qty),0) as decimal(10,2))
FROM   Inv_Receipt_d D INNER JOIN
             Inv_Receipt_h H ON D.Parent_ID = H.ID
			 where H.Code in (51,52) and D.Item_ID = @ItemId and (H.Entry_Date >= DATEADD(DAY, -28, GETDATE()) and H.Entry_Date <= DATEADD(DAY, -21, GETDATE()))
			 ) as Week1SalesQty ,
			 (select cast(IsNull(SUM(D.Total),0) as decimal(10,2))
FROM   Inv_Receipt_d D INNER JOIN
             Inv_Receipt_h H ON D.Parent_ID = H.ID
			 where H.Code in (51,52) and D.Item_ID = @ItemId and (H.Entry_Date >= DATEADD(DAY, -28, GETDATE()) and H.Entry_Date <= DATEADD(DAY, -21, GETDATE()))
			 ) as Week1SalesTotal,
			 --------------------------
			 (select cast(IsNull(SUM(D.Qty),0) as decimal(10,2)) 
FROM   Inv_Receipt_d D INNER JOIN
             Inv_Receipt_h H ON D.Parent_ID = H.ID
			 where H.Code in (51,52) and D.Item_ID = @ItemId  and (H.Entry_Date >= DATEADD(DAY, -21, GETDATE()) and H.Entry_Date <= DATEADD(DAY, -14, GETDATE()))
			 ) as Week2SalesQty ,
			 (select cast(IsNull(SUM(D.Total),0) as decimal(10,2)) 
FROM   Inv_Receipt_d D INNER JOIN
             Inv_Receipt_h H ON D.Parent_ID = H.ID
			 where H.Code in (51,52) and D.Item_ID = @ItemId  and (H.Entry_Date >= DATEADD(DAY, -21, GETDATE()) and H.Entry_Date <= DATEADD(DAY, -14, GETDATE()))
			 ) as Week2SalesTotal,
			 --------------------------
			 (select cast(IsNull(SUM(D.Qty),0) as decimal(10,2))
FROM   Inv_Receipt_d D INNER JOIN
             Inv_Receipt_h H ON D.Parent_ID = H.ID
			 where H.Code in (51,52) and D.Item_ID = @ItemId  and (H.Entry_Date >= DATEADD(DAY, -14, GETDATE()) and H.Entry_Date <= DATEADD(DAY, -7, GETDATE()))
			 ) as Week3SalesQty ,
			 (select cast(IsNull(SUM(D.Total),0) as decimal(10,2))
FROM   Inv_Receipt_d D INNER JOIN
             Inv_Receipt_h H ON D.Parent_ID = H.ID
			 where H.Code in (51,52) and D.Item_ID = @ItemId  and (H.Entry_Date >= DATEADD(DAY, -14, GETDATE()) and H.Entry_Date <= DATEADD(DAY, -7, GETDATE()))
			 ) as Week3SalesTotal,
			 --------------------------
			 (select cast(IsNull(SUM(D.Qty),0) as decimal(10,2))
FROM   Inv_Receipt_d D INNER JOIN
             Inv_Receipt_h H ON D.Parent_ID = H.ID
			 where H.Code in (51,52) and D.Item_ID = @ItemId and (H.Entry_Date >= DATEADD(DAY, -7, GETDATE()) and H.Entry_Date <= DATEADD(DAY, -0, GETDATE()))
			 ) as Week4SalesQty ,
			 (select cast(IsNull(SUM(D.Total),0) as decimal(10,2))
FROM   Inv_Receipt_d D INNER JOIN
             Inv_Receipt_h H ON D.Parent_ID = H.ID
			 where H.Code in (51,52) and D.Item_ID = @ItemId and (H.Entry_Date >= DATEADD(DAY, -7, GETDATE()) and H.Entry_Date <= DATEADD(DAY, -0, GETDATE()))
			 ) as Week4SalesTotal,

			 --------------- Returns -----------------------------

			 			 (select cast(IsNull(SUM(D.Qty),0) as decimal(10,2))
FROM   Inv_Receipt_d D INNER JOIN
             Inv_Receipt_h H ON D.Parent_ID = H.ID
			 where H.Code in (53,54) and D.Item_ID = @ItemId and (H.Entry_Date >= DATEADD(DAY, -28, GETDATE()) and H.Entry_Date <= DATEADD(DAY, -21, GETDATE()))
			 ) as Week1ReturnQty ,
			 (select cast(IsNull(SUM(D.Total),0) as decimal(10,2))
FROM   Inv_Receipt_d D INNER JOIN
             Inv_Receipt_h H ON D.Parent_ID = H.ID
			 where H.Code in (53,54) and D.Item_ID = @ItemId and (H.Entry_Date >= DATEADD(DAY, -28, GETDATE()) and H.Entry_Date <= DATEADD(DAY, -21, GETDATE()))
			 ) as Week1ReturnTotal,
			 --------------------------
			 (select cast(IsNull(SUM(D.Qty),0) as decimal(10,2)) 
FROM   Inv_Receipt_d D INNER JOIN
             Inv_Receipt_h H ON D.Parent_ID = H.ID
			 where H.Code in (53,54) and D.Item_ID = @ItemId  and (H.Entry_Date >= DATEADD(DAY, -21, GETDATE()) and H.Entry_Date <= DATEADD(DAY, -14, GETDATE()))
			 ) as Week2ReturnQty ,
			 (select cast(IsNull(SUM(D.Total),0) as decimal(10,2)) 
FROM   Inv_Receipt_d D INNER JOIN
             Inv_Receipt_h H ON D.Parent_ID = H.ID
			 where H.Code in (53,54) and D.Item_ID = @ItemId  and (H.Entry_Date >= DATEADD(DAY, -21, GETDATE()) and H.Entry_Date <= DATEADD(DAY, -14, GETDATE()))
			 ) as Week2ReturnTotal,
			 --------------------------
			 (select cast(IsNull(SUM(D.Qty),0) as decimal(10,2))
FROM   Inv_Receipt_d D INNER JOIN
             Inv_Receipt_h H ON D.Parent_ID = H.ID
			 where H.Code in (53,54) and D.Item_ID = @ItemId  and (H.Entry_Date >= DATEADD(DAY, -14, GETDATE()) and H.Entry_Date <= DATEADD(DAY, -7, GETDATE()))
			 ) as Week3ReturnQty ,
			 (select cast(IsNull(SUM(D.Total),0) as decimal(10,2))
FROM   Inv_Receipt_d D INNER JOIN
             Inv_Receipt_h H ON D.Parent_ID = H.ID
			 where H.Code in (53,54) and D.Item_ID = @ItemId  and (H.Entry_Date >= DATEADD(DAY, -14, GETDATE()) and H.Entry_Date <= DATEADD(DAY, -7, GETDATE()))
			 ) as Week3ReturnTotal,
			 --------------------------
			 (select cast(IsNull(SUM(D.Qty),0) as decimal(10,2))
FROM   Inv_Receipt_d D INNER JOIN
             Inv_Receipt_h H ON D.Parent_ID = H.ID
			 where H.Code in (53,54) and D.Item_ID = @ItemId and (H.Entry_Date >= DATEADD(DAY, -7, GETDATE()) and H.Entry_Date <= DATEADD(DAY, -0, GETDATE()))
			 ) as Week4ReturnQty ,
			 (select cast(IsNull(SUM(D.Total),0) as decimal(10,2))
FROM   Inv_Receipt_d D INNER JOIN
             Inv_Receipt_h H ON D.Parent_ID = H.ID
			 where H.Code in (53,54) and D.Item_ID = @ItemId and (H.Entry_Date >= DATEADD(DAY, -7, GETDATE()) and H.Entry_Date <= DATEADD(DAY, -0, GETDATE()))
			 ) as Week4ReturnTotal

 		 --- =================================== [END] Last 4 weeks ======================================================
GO
/****** Object:  StoredProcedure [dbo].[GetLeadList]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetLeadList]

@SubsidiaryID int ,
@SourceId int ,
@StatusId int,
@RatingId int,
@AreaId int ,
@NationalityID int,
@LeadOwnerId int,
@AssignedUserID int,
@LeadCategoryId int,
@Skip int = 0,
@Take int = 200,
@SearchValue NVARCHAR(150)
--@SortBy NVARCHAR(150),
--@SortDir NVARCHAR(150)

AS
   
   SELECT Distinct
       [dbo].[Crm_Lead].[ID] as ID
      ,[dbo].[Crm_Lead].[Name] as LeadName
	  ,[dbo].[Crm_Lead].[Name_AR] as LeadNameAR
	  ,[dbo].[Crm_Lead].[DoNotCallAgain]
      ,[dbo].[Crm_Lead].[Phone] 
      ,[dbo].[Crm_Lead].[Mobile]
	  ,[dbo].[Crm_Lead_Source].[Name] as LeadSource
	  ,[dbo].[Crm_Lead_Source].[Name_AR] as LeadSourceAR
	  ,[dbo].[Crm_LeadCategory].[Name] as LeadCategory
	  ,[dbo].[Crm_LeadCategory].[Name_AR] as LeadCategoryAR
	  --,(CASE WHEN [dbo].[Crm_Lead].[StatusId] = 1  THEN  N'جديد' ELSE
	  --  CASE WHEN [dbo].[Crm_Lead].[StatusId] = 2  THEN  N'متابعة' ELSE
	  --  CASE WHEN [dbo].[Crm_Lead].[StatusId] = 3  THEN  N'تعاقد' ELSE
	  --  CASE WHEN [dbo].[Crm_Lead].[StatusId] = 4  THEN  N'مؤجل' ELSE
	  --  CASE WHEN [dbo].[Crm_Lead].[StatusId] = 5  THEN  N'منتهي' ELSE '' END END END END END  ) as LeadStatus
	  ,[dbo].[Crm_Lead_Status].[Name]  as LeadStatus
	  ,[dbo].[Crm_Lead_Status].Name_AR as LeadStatusAR
	  ,[dbo].[Security_Users].[Name] as LeadOwner
	  ,[dbo].[Security_Users].[Name_AR] as LeadOwnerAR
	  , CONVERT(varchar(23), [dbo].[Crm_Lead].[CreatedDate] , 101) as CreatedDate
	  ,activites.ActivityName
	  ,activites.ActivityNameAr 
	  ,activites.DueDate
	  ,activites.StartTime
	  ,activites.ActivityName2 
	  ,activites.ActivityName2Ar 
	  FROM [dbo].[Crm_Lead]
	  LEFT JOIN [dbo].[Crm_Lead_Rating] on [dbo].[Crm_Lead_Rating].[ID] = [dbo].[Crm_Lead].[RatingId]
	  LEFT JOIN [dbo].[Crm_LeadCategory] on [dbo].[Crm_LeadCategory].[ID] = [dbo].[Crm_Lead].[LeadCategoryId]
	  LEFT JOIN [dbo].[Crm_Lead_Source] on [dbo].[Crm_Lead_Source].[ID] = [dbo].[Crm_Lead].[SourceId]
	  LEFT JOIN [dbo].[Crm_Lead_Status] on [dbo].[Crm_Lead_Status].[ID] = [dbo].[Crm_Lead].[StatusId]
	  LEFT JOIN [dbo].[Crm_Lead_Users]  on [dbo].[Crm_Lead_Users].[LeadID] = [dbo].[Crm_Lead].[ID]
	  JOIN [dbo].[Security_Users] on [dbo].[Security_Users].[Id] = [dbo].[Crm_Lead].[LeadOwnerId]
	  LEFT JOIN [dbo].[Inv_Receipt_h] on [dbo].[Inv_Receipt_h].[LeadID] = [dbo].[Crm_Lead].[ID]
	  LEFT JOIN (
	  SELECT LeadID , 
       Max(DueDate) as DueDate,
	   Max(StartTime) as StartTime,
	   Max(ActivityName) as ActivityName,
	   Max(ActivityNameAr) as ActivityNameAr,
	   Max(ActivityName2) as ActivityName2,
	   Max(ActivityName2Ar) as ActivityName2Ar,
	   SuM(aa.ID) as LeadActivityID
		 FROM (
				Select  [dbo].[Crm_Lead_Activities].[ID] as ID,
				[dbo].[Crm_Lead_Activities].[LeadID] as LeadID ,
				[dbo].[Crm_Lead_Activities].[StartDate] as DueDate ,
				[dbo].[Crm_Lead_Activities].[StartTime] as StartTime ,
				(IsNULL(CONVERT(varchar(23),[dbo].[Crm_Lead_Activities].[StartDate]),101) + '-' + 
					   case when [dbo].[Crm_Lead_Activities].[ActivityTypeID] = 1 then 'Call' Else 
					   Case when [dbo].[Crm_Lead_Activities].[ActivityTypeID] = 2 then 'Meeting' Else
					   Case when [dbo].[Crm_Lead_Activities].[ActivityTypeID] > 20 then 'Task'  END END END) + '/' + CONVERT(varchar(100),[dbo].[Crm_Lead_Activities].[ID]) 
					   as ActivityName,
					   (IsNULL(CONVERT(varchar(23),[dbo].[Crm_Lead_Activities].[StartDate]),101) + '-' + 
					   case when [dbo].[Crm_Lead_Activities].[ActivityTypeID] = 1 then N'مكالمة' Else 
					   Case when [dbo].[Crm_Lead_Activities].[ActivityTypeID] = 2 then N'موعد' Else
					   Case when [dbo].[Crm_Lead_Activities].[ActivityTypeID] > 20 then N'مهمة'  END END END) + '/' + CONVERT(varchar(100),[dbo].[Crm_Lead_Activities].[ID]) 
					   as ActivityNameAr,
					   (IsNULL(CONVERT(varchar(23),[dbo].[Crm_Lead_Activities].[StartDate]),101) + '-' + 
					   case when [dbo].[Crm_Lead_Activities].[ActivityTypeID] = 1 then 'Call' Else 
					   Case when [dbo].[Crm_Lead_Activities].[ActivityTypeID] = 2 then 'Meeting' Else
					   Case when [dbo].[Crm_Lead_Activities].[ActivityTypeID] > 20 then 'Task'  END END END) 
			     as ActivityName2,
				  (IsNULL(CONVERT(varchar(23),[dbo].[Crm_Lead_Activities].[StartDate]),101) + '-' + 
					   case when [dbo].[Crm_Lead_Activities].[ActivityTypeID] = 1 then N'مكالمة' Else 
					   Case when [dbo].[Crm_Lead_Activities].[ActivityTypeID] = 2 then N'موعد' Else
					   Case when [dbo].[Crm_Lead_Activities].[ActivityTypeID] > 20 then N'مهمة'  END END END) 
			     as ActivityName2Ar
				       from [dbo].[Crm_Lead_Activities]
				) aa
				Group by aa.LeadID
	  ) activites on activites.[LeadID] = [dbo].[Crm_Lead].[ID]

 Where 
 ([dbo].[Crm_Lead].[SubsidiaryID] = @SubsidiaryID ) AND
 ([dbo].[Crm_Lead].[SourceId] = @SourceId OR @SourceId = 0) AND
 ([dbo].[Crm_Lead].[StatusId] = @StatusId OR @StatusId = 0) AND
 ([dbo].[Crm_Lead].[RatingId] = @RatingId OR @RatingId = 0) AND
 ([dbo].[Crm_Lead].[LeadCategoryId] = @LeadCategoryId OR @LeadCategoryId = 0) AND
 ([dbo].[Crm_Lead].[AreaId] = @AreaId OR @AreaId = 0) AND
 ([dbo].[Crm_Lead].[NationalityID] = @NationalityID OR @NationalityID = 0) AND
 ([dbo].[Crm_Lead].[LeadOwnerId] = @LeadOwnerId OR @LeadOwnerId = 0) AND
 ([dbo].[Crm_Lead_Users].[UserID] = @AssignedUserID OR @AssignedUserID = 0) AND
 ([dbo].[Crm_Lead].[CustomerType] = 1 ) AND
 ([dbo].[Inv_Receipt_h].[LeadID] IS NULL) AND
 ((Cast([dbo].[Crm_Lead].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[Crm_Lead].[Phone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[Crm_Lead].[Mobile]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[Crm_Lead_Status].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[Security_Users].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[Crm_Lead_Source].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR  
 (Cast(activites.ActivityName2  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (CONVERT(varchar(23), [dbo].[Crm_Lead].[CreatedDate] , 101) like '%'+@SearchValue+'%' ) OR  
 (@SearchValue IS NULL) OR (@SearchValue  = ''))

 --Order by activites.DueDate,activites.StartTime 

  ORDER BY activites.DueDate ,activites.StartTime
  OFFSET     @Skip ROWS       
  FETCH NEXT @Take ROWS ONLY; 
GO
/****** Object:  StoredProcedure [dbo].[GetLeadOwnerItemsList]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetLeadOwnerItemsList]

@SubsidiaryID int ,
@UserID int,
@Term nvarchar(500),
@language nvarchar(50)

AS
 
   IF @language = 'en-US' 
	 BEGIN 

	 SELECT Top 10 * FROM [dbo].[Inv_Items]
	 JOIN [dbo].[Inv_Items_Categories] ON [dbo].[Inv_Items_Categories].[Item_ID] = [dbo].[Inv_Items].[ID]
	 JOIN [dbo].[Crm_LeadOwnerItemCategories] ON [dbo].[Crm_LeadOwnerItemCategories].[ItemCategoryId] = [dbo].[Inv_Items_Categories].[ItemCategory_ID]
	 WHERE      
		[dbo].[Crm_LeadOwnerItemCategories].[UserId] = @UserID
		AND  [dbo].[Crm_LeadOwnerItemCategories].[IsLeadOwner] = 1
		AND  ([Name] like @Term+'%' OR [Inv_Items].[Code] like @Term+'%' OR (@Term IS NULL) OR (@Term  = ''))

      END
   ELSE
	BEGIN 

	 SELECT Top 10 * FROM [dbo].[Inv_Items]
	 JOIN [dbo].[Inv_Items_Categories] ON [dbo].[Inv_Items_Categories].[Item_ID] = [dbo].[Inv_Items].[ID]
	 JOIN [dbo].[Crm_LeadOwnerItemCategories] ON [dbo].[Crm_LeadOwnerItemCategories].[ItemCategoryId] = [dbo].[Inv_Items_Categories].[ItemCategory_ID]
	 WHERE      
		[dbo].[Crm_LeadOwnerItemCategories].[UserId] = @UserID
		AND  [dbo].[Crm_LeadOwnerItemCategories].[IsLeadOwner] = 1
		AND  ([Name_AR] like @Term+'%' OR [Inv_Items].[Code] like @Term+'%' OR (@Term IS NULL) OR (@Term  = ''))

      END
     
GO
/****** Object:  StoredProcedure [dbo].[GetLeadSalesManItemsList]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetLeadSalesManItemsList]

@SubsidiaryID int ,
@UserID int,
@Term nvarchar(500),
@language nvarchar(50)

AS
 
    IF @language = 'en-US' 
	 BEGIN 

		 SELECT Top 10 * FROM [dbo].[Inv_Items]
		 JOIN [dbo].[Inv_Items_Categories] ON [dbo].[Inv_Items_Categories].[Item_ID] = [dbo].[Inv_Items].[ID]
		 JOIN [dbo].[Crm_LeadOwnerItemCategories] ON [dbo].[Crm_LeadOwnerItemCategories].[ItemCategoryId] = [dbo].[Inv_Items_Categories].[ItemCategory_ID]

		 WHERE 
      
			  [dbo].[Crm_LeadOwnerItemCategories].[UserId] = @UserID
			  AND [dbo].[Crm_LeadOwnerItemCategories].[IsLeadOwner] = 0
     		  AND  [Name] like @Term+'%' OR  (@Term IS NULL) OR (@Term  = '')

	 END
	ELSE
	     SELECT Top 10 * FROM [dbo].[Inv_Items]
		 JOIN [dbo].[Inv_Items_Categories] ON [dbo].[Inv_Items_Categories].[Item_ID] = [dbo].[Inv_Items].[ID]
		 JOIN [dbo].[Crm_LeadOwnerItemCategories] ON [dbo].[Crm_LeadOwnerItemCategories].[ItemCategoryId] = [dbo].[Inv_Items_Categories].[ItemCategory_ID]

		 WHERE 
      
			  [dbo].[Crm_LeadOwnerItemCategories].[UserId] = @UserID
			  AND [dbo].[Crm_LeadOwnerItemCategories].[IsLeadOwner] = 0
     		  AND  [Name_AR] like @Term+'%' OR  (@Term IS NULL) OR (@Term  = '')
GO
/****** Object:  StoredProcedure [dbo].[GetMaintenanceList]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetMaintenanceList] --@SubsidiaryID = 63,@SearchValue = NULL,@DateFrom = '2018-11-25',@DateTo = '2018-11-25'

@SubsidiaryID int ,
@Skip int = 0,
@Take int = 200,
@SearchValue nvarchar(Max),
@CustomerCategoryId INT = NULL,
@CustomerStatusId INT = NULL,
@DateFrom date,
@DateTo date,
@ActivityDateFrom date,
@ActivityDateTo date,
@ContractStartFrom date,
@ContractStartTo date,
@ContractEndFrom date,
@ContractEndTo date,
@AreaId int,
@Lang nvarchar(50)


AS


if @DateFrom = @DateTo
begin
set @DateTo = DATEADD(day, 1, @DateFrom)
end

if @ActivityDateFrom = @ActivityDateTo
begin
set @ActivityDateTo = DATEADD(day, 1, @ActivityDateFrom)
end
declare @format int = 103
  SET @format = ( select CASE WHEN Date_format = 'MM/dd/yyyy' THEN  101 ELSE 103 END from mstr_Subsidaries WHERE ID = @SubsidiaryID )


  if(@Lang = 'en-US') 
   SELECT Distinct
       [dbo].[GL_AccountSubsidiary].[SubsidiaryID]
      ,[dbo].[GL_Accounts].[AccountID] as AccountID
	  ,[dbo].[GL_Accounts].[Code] 
	  ,[dbo].[GL_Accounts].[Address] 
	  ,[dbo].[GL_Accounts].[CivilId] 
      ,[dbo].[GL_Accounts].[Name] as Name
      ,[dbo].[GL_Accounts].[Phone] 
      ,[dbo].[GL_Accounts].[AltPhone]
	  ,[dbo].[GL_Accounts].[Fax]
	  ,convert(varchar(25),[ContractDateFrom], @format)  as ContractDateFrom
	  ,convert(varchar(25),[ContractDateTo], @format) as ContractDateTo
	  , Case When  [company_individual] = 1 Then 'Individual' ELSE 'Company' End as CustomerTypeName
	  ,[dbo].[GL_Accounts].[IsActive]
	  ,[dbo].[GL_Accounts].[company_individual] as CustomerType
	  ,[dbo].[GL_VendorCategory].[CatName] as CustomerCategory
	  ,[dbo].[GL_CustomerStatuses].[Name] as CustomerStatus
	  ,[dbo].[mstr_Country].[CountryName] as CountryName
	  ,[dbo].[GL_Area].[Name] as AreaName
	  ,(select  top 1 Notes from [dbo].[Inv_Receipt_d] where
	   [dbo].[Inv_Receipt_d].Parent_ID = [dbo].[Inv_Receipt_h].ID AND
	   [dbo].[Inv_Receipt_h].Vendor_ID = [dbo].[GL_Accounts].[AccountID]  AND	    
	   (([Entry_Date] >= @DateFrom And [Entry_Date] <= @DateTo)OR( @DateFrom IS NULL and @DateTo IS NULL))
	   ) as ItemSerial --This Field specially for rahet el khalig
	  ,	convert(varchar(25),(Select Top 1 StartDate From Crm_Lead_Activities 
	      where Crm_Lead_Activities.CustomerId = GL_Accounts.AccountID 
		   Order By StartDate  Desc), 103)  as LastActivityDate
	  ,	(Select Top 1 Description From Crm_Lead_Activities 
	      where Crm_Lead_Activities.CustomerId = GL_Accounts.AccountID 
		   Order By StartDate Desc)  as LastActivityDescription
	  ,convert(varchar(25),(Select Top 1 [dbo].[Inv_Receipt_h].[Entry_Date] 
	  From [dbo].[Inv_Receipt_h]
	  where 
	  ([dbo].[Inv_Receipt_h].Vendor_ID = [dbo].[GL_Accounts].[AccountID] AND 
	   (([Entry_Date] >= @DateFrom And [Entry_Date] <= @DateTo)OR( @DateFrom IS NULL and @DateTo IS NULL)) )), 103) as EntryDate

	  FROM [dbo].[GL_Accounts]
	  JOIN [dbo].[GL_AccountSubsidiary] ON [dbo].[GL_AccountSubsidiary].[AccountID] = [dbo].[GL_Accounts].[AccountID]
	  LEFT JOIN [dbo].[GL_VendorCategory] ON  [dbo].[GL_VendorCategory].[ID] = [dbo].[GL_Accounts].[VendorCategoryID]
	  LEFT JOIN [dbo].[GL_CustomerStatuses] ON  [dbo].[GL_CustomerStatuses].[ID] = [dbo].[GL_Accounts].[CustomerStatusId]
	  LEFT JOIN [dbo].[mstr_Country] ON [dbo].[mstr_Country].[ID] = [dbo].[GL_Accounts].[CounrtyID]
	  LEFT JOIN [dbo].[GL_Area] ON [dbo].[GL_Area].[ID] = [dbo].[GL_Accounts].[AreaId]
	  LEFT JOIN [dbo].[Inv_Receipt_h] on [dbo].[Inv_Receipt_h].Vendor_ID = [dbo].[GL_Accounts].AccountID
	  LEFT JOIN [dbo].[Inv_Receipt_d] on [dbo].[Inv_Receipt_h].ID = [dbo].[Inv_Receipt_d].Parent_ID

	  outer apply
	   (SELECT Top 1 CustomerId,StartDate FROM [Crm_Lead_Activities] 
	   WHERE CustomerId = GL_Accounts.AccountID
	    Order by ID desc)activities


 Where 
 ([dbo].[GL_AccountSubsidiary].[SubsidiaryID] = @SubsidiaryID ) AND
 ([dbo].[GL_Accounts].[IsVendor] = 0 ) AND
 ([dbo].[GL_Accounts].[IsActive] = 1 ) AND
 ([dbo].[GL_Accounts].[IsHidden] = 1 ) AND
 ([dbo].[GL_Accounts].[LevelNo]  = 0 ) AND
 ([dbo].[GL_Accounts].[Type]     = 2 ) AND
 ((@CustomerCategoryId IS NULL) OR ( [dbo].[GL_Accounts].[VendorCategoryID]  = @CustomerCategoryId)) AND
 ((@CustomerStatusId IS NULL) OR ( [dbo].[GL_Accounts].[CustomerStatusId]  = @CustomerStatusId)) AND
 ([GL_Accounts].[AreaId] = @AreaId or @AreaId IS NULL ) AND
 (([Entry_Date] >= @DateFrom And [Entry_Date] <= @DateTo)OR( @DateFrom IS NULL and @DateTo IS NULL)) AND
 
 (([StartDate] >= @ActivityDateFrom And [StartDate] <= @ActivityDateTo)
 OR( @ActivityDateFrom IS NULL and @ActivityDateTo IS NULL) 
 OR([StartDate] >= @ActivityDateFrom And @ActivityDateTo Is NULL)
 OR(@ActivityDateFrom IS NULL And [StartDate] <= @ActivityDateTo)) AND
 
 (([ContractDateFrom] >= @ContractStartFrom And [ContractDateFrom] <= @ContractStartTo)
 OR( @ContractStartFrom IS NULL and @ContractStartTo IS NULL) 
 OR([ContractDateFrom] >= @ContractStartFrom And @ContractStartTo Is NULL)
 OR(@ContractStartFrom IS NULL And [ContractDateFrom] <= @ContractStartTo)) AND
  
(([ContractDateTo] >= @ContractEndFrom And [ContractDateTo] <= @ContractEndTo)
 OR( @ContractEndFrom IS NULL and @ContractEndTo IS NULL) 
 OR([ContractDateTo] >= @ContractEndFrom And @ContractEndTo Is NULL)
 OR(@ContractEndFrom IS NULL And [ContractDateTo] <= @ContractEndTo)) AND

 ((Cast([dbo].[GL_Accounts].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[GL_Accounts].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[Inv_Receipt_d].[Notes]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[GL_Accounts].[CivilId]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[GL_Accounts].[Phone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[GL_Accounts].[AltPhone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[GL_VendorCategory].[CatName]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[mstr_Country].[CountryName]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[GL_Area].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (@SearchValue IS NULL) OR (@SearchValue  = '')) 


  ORDER BY [dbo].[GL_Accounts].[AccountID]
  OFFSET     @Skip ROWS       
  FETCH NEXT @Take ROWS ONLY; 
  ELSE
   SELECT Distinct
       [dbo].[GL_AccountSubsidiary].[SubsidiaryID]
      ,[dbo].[GL_Accounts].[AccountID] as AccountID
	  ,[dbo].[GL_Accounts].[Code] 
	  ,[dbo].[GL_Accounts].[Address] 
	  ,[dbo].[GL_Accounts].[CivilId] 
	  ,[dbo].[GL_Accounts].[Name_AR] as Name
      ,[dbo].[GL_Accounts].[Phone] 
      ,[dbo].[GL_Accounts].[AltPhone]
	  ,[dbo].[GL_Accounts].[Fax]
	  ,convert(varchar(25),[ContractDateFrom], @format)  as ContractDateFrom
	  ,convert(varchar(25),[ContractDateTo], @format) as ContractDateTo
	  ,[dbo].[GL_Accounts].[IsActive]
	  , Case When  [company_individual] = 1 Then N'فرد' ELSE N'شركة' End as CustomerTypeName
	  ,[dbo].[GL_Accounts].[company_individual] as CustomerType
	  ,[dbo].[GL_VendorCategory].[CatName_AR] as CustomerCategory
	  ,[dbo].[GL_CustomerStatuses].[Name_AR] as CustomerStatus
	  ,[dbo].[mstr_Country].[CountryName_AR] as CountryName
	  ,[dbo].[GL_Area].[Name_AR] as AreaName
	  ,(select  top 1 Notes from [dbo].[Inv_Receipt_d] where
	   [dbo].[Inv_Receipt_d].Parent_ID = [dbo].[Inv_Receipt_h].ID AND
	   [dbo].[Inv_Receipt_h].Vendor_ID = [dbo].[GL_Accounts].[AccountID]  AND	    
	   (([Entry_Date] >= @DateFrom And [Entry_Date] <= @DateTo)OR( @DateFrom IS NULL and @DateTo IS NULL))
	   ) as ItemSerial --This Field specially for rahet el khalig
	   	  ,	convert(varchar(25),(Select Top 1 StartDate From Crm_Lead_Activities 
	      where Crm_Lead_Activities.CustomerId = GL_Accounts.AccountID 
		   Order By StartDate  Desc), 103)  as LastActivityDate
	  ,	(Select Top 1 Description From Crm_Lead_Activities 
	      where Crm_Lead_Activities.CustomerId = GL_Accounts.AccountID 
		   Order By StartDate Desc)  as LastActivityDescription
	  ,convert(varchar(25),(Select Top 1 [dbo].[Inv_Receipt_h].[Entry_Date] 
	  From [dbo].[Inv_Receipt_h]
	  where 
	  ([dbo].[Inv_Receipt_h].Vendor_ID = [dbo].[GL_Accounts].[AccountID] AND 
	   (([Entry_Date] >= @DateFrom And [Entry_Date] <= @DateTo)OR( @DateFrom IS NULL and @DateTo IS NULL)) )), 103) as EntryDate

	  FROM [dbo].[GL_Accounts]
	  JOIN [dbo].[GL_AccountSubsidiary] ON [dbo].[GL_AccountSubsidiary].[AccountID] = [dbo].[GL_Accounts].[AccountID]
	  LEFT JOIN [dbo].[GL_VendorCategory] ON  [dbo].[GL_VendorCategory].[ID] = [dbo].[GL_Accounts].[VendorCategoryID]
	  LEFT JOIN [dbo].[GL_CustomerStatuses] ON  [dbo].[GL_CustomerStatuses].[ID] = [dbo].[GL_Accounts].[CustomerStatusId]
	  LEFT JOIN [dbo].[mstr_Country] ON [dbo].[mstr_Country].[ID] = [dbo].[GL_Accounts].[CounrtyID]
	  LEFT JOIN [dbo].[GL_Area] ON [dbo].[GL_Area].[ID] = [dbo].[GL_Accounts].[AreaId]
	  LEFT JOIN [dbo].[Inv_Receipt_h] on [dbo].[Inv_Receipt_h].Vendor_ID = [dbo].[GL_Accounts].AccountID
	  LEFT JOIN [dbo].[Inv_Receipt_d] on [dbo].[Inv_Receipt_h].ID = [dbo].[Inv_Receipt_d].Parent_ID

	  outer apply
	   (SELECT Top 1 CustomerId,StartDate FROM [Crm_Lead_Activities] 
	   WHERE CustomerId = GL_Accounts.AccountID
	    Order by ID desc)activities


 Where 
 ([dbo].[GL_AccountSubsidiary].[SubsidiaryID] = @SubsidiaryID ) AND
 ([dbo].[GL_Accounts].[IsVendor] = 0 ) AND
 ([dbo].[GL_Accounts].[IsActive] = 1 ) AND
 ([dbo].[GL_Accounts].[IsHidden] = 1 ) AND
 ([dbo].[GL_Accounts].[LevelNo]  = 0 ) AND
 ([dbo].[GL_Accounts].[Type]     = 2 ) AND
 ((@CustomerCategoryId IS NULL) OR ( [dbo].[GL_Accounts].[VendorCategoryID]  = @CustomerCategoryId)) AND
 ((@CustomerStatusId IS NULL) OR ( [dbo].[GL_Accounts].[CustomerStatusId]  = @CustomerStatusId)) AND
 ([GL_Accounts].[AreaId] = @AreaId or @AreaId IS NULL ) AND
 (([Entry_Date] >= @DateFrom And [Entry_Date] <= @DateTo)OR( @DateFrom IS NULL and @DateTo IS NULL)) AND
 
 (([StartDate] >= @ActivityDateFrom And [StartDate] <= @ActivityDateTo)
 OR( @ActivityDateFrom IS NULL and @ActivityDateTo IS NULL) 
 OR([StartDate] >= @ActivityDateFrom And @ActivityDateTo Is NULL)
 OR(@ActivityDateFrom IS NULL And [StartDate] <= @ActivityDateTo)) AND
 
 (([ContractDateFrom] >= @ContractStartFrom And [ContractDateFrom] <= @ContractStartTo)
 OR( @ContractStartFrom IS NULL and @ContractStartTo IS NULL) 
 OR([ContractDateFrom] >= @ContractStartFrom And @ContractStartTo Is NULL)
 OR(@ContractStartFrom IS NULL And [ContractDateFrom] <= @ContractStartTo)) AND
  
(([ContractDateTo] >= @ContractEndFrom And [ContractDateTo] <= @ContractEndTo)
 OR( @ContractEndFrom IS NULL and @ContractEndTo IS NULL) 
 OR([ContractDateTo] >= @ContractEndFrom And @ContractEndTo Is NULL)
 OR(@ContractEndFrom IS NULL And [ContractDateTo] <= @ContractEndTo)) AND
 ((Cast([dbo].[GL_Accounts].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[GL_Accounts].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[Inv_Receipt_d].[Notes]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[GL_Accounts].[CivilId]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[GL_Accounts].[Phone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[GL_Accounts].[AltPhone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[GL_VendorCategory].[CatName_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[mstr_Country].[CountryName_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[GL_Area].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (@SearchValue IS NULL) OR (@SearchValue  = '')) 


  ORDER BY [dbo].[GL_Accounts].[AccountID]
  OFFSET     @Skip ROWS       
  FETCH NEXT @Take ROWS ONLY; 
GO
/****** Object:  StoredProcedure [dbo].[GetMaintenanceListCount]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetMaintenanceListCount]

@SubsidiaryID int ,
@SearchValue nvarchar(Max),
@CustomerCategoryId INT = NULL,
@CustomerStatusId INT = NULL,
@DateFrom date,
@DateTo date,
@ActivityDateFrom date,
@ActivityDateTo date,
@ContractStartFrom date,
@ContractStartTo date,
@ContractEndFrom date,
@ContractEndTo date,
@AreaId int


AS
    if @DateFrom = @DateTo
begin
set @DateTo = DATEADD(day, 1, @DateFrom)
end

if @ActivityDateFrom = @ActivityDateTo
begin
set @ActivityDateTo = DATEADD(day, 1, @ActivityDateFrom)
end

   	SELECT  COUNT(aa.AccountID) as Count
	from
  (
  
SELECT Distinct
       [dbo].[GL_AccountSubsidiary].[SubsidiaryID]
      ,[dbo].[GL_Accounts].[AccountID] as AccountID
	  ,[dbo].[GL_Accounts].[Code] 
      ,[dbo].[GL_Accounts].[Name] as NameEn
	  ,[dbo].[GL_Accounts].[Name_AR] as NameAr
      ,[dbo].[GL_Accounts].[Phone] 
      ,[dbo].[GL_Accounts].[AltPhone]
	  ,[dbo].[GL_Accounts].[IsActive]
	  ,[dbo].[GL_Accounts].[company_individual] as CustomerType
	  ,[dbo].[GL_VendorCategory].[CatName] as CustomerCategoryEn
	  ,[dbo].[GL_VendorCategory].[CatName_AR] as CustomerCategoryAr
	  ,[dbo].[mstr_Country].[CountryName] as [CountryNameEn]
	  ,[dbo].[mstr_Country].[CountryName_AR] as [CountryNameAr]
	  ,[dbo].[GL_Area].[Name] as [AreaNameEn]
	  ,[dbo].[GL_Area].[Name_AR] as [AreaNameAr]
	  ,	convert(varchar(25),(Select Top 1 StartDate From Crm_Lead_Activities 
	      where Crm_Lead_Activities.CustomerId = GL_Accounts.AccountID 
		   Order By Id Desc), 103)  as LastActivityDate
	  ,convert(varchar(25),(Select Top 1 [dbo].[Inv_Receipt_h].[Entry_Date] 
	  From [dbo].[Inv_Receipt_h]
	  where 
	  ([dbo].[Inv_Receipt_h].Vendor_ID = [dbo].[GL_Accounts].[AccountID] AND 
	   (([Entry_Date] >= @DateFrom And [Entry_Date] <= @DateTo)OR( @DateFrom IS NULL and @DateTo IS NULL)) )), 103) as EntryDate

	  FROM [dbo].[GL_Accounts]
	  JOIN [dbo].[GL_AccountSubsidiary] ON [dbo].[GL_AccountSubsidiary].[AccountID] = [dbo].[GL_Accounts].[AccountID]
	  LEFT JOIN [dbo].[GL_VendorCategory] ON  [dbo].[GL_VendorCategory].[ID] = [dbo].[GL_Accounts].[VendorCategoryID]
	  LEFT JOIN [dbo].[mstr_Country] ON [dbo].[mstr_Country].[ID] = [dbo].[GL_Accounts].[CounrtyID]
	  LEFT JOIN [dbo].[GL_Area] ON [dbo].[GL_Area].[ID] = [dbo].[GL_Accounts].[AreaId]
	  LEFT JOIN [dbo].[Inv_Receipt_h] on [dbo].[Inv_Receipt_h].Vendor_ID = [dbo].[GL_Accounts].AccountID
	  outer apply
	   (SELECT Top 1 CustomerId,StartDate FROM [Crm_Lead_Activities] 
	   WHERE CustomerId = GL_Accounts.AccountID
	    Order by ID desc)activities


 Where 
 ([dbo].[GL_AccountSubsidiary].[SubsidiaryID] = @SubsidiaryID ) AND
 ([dbo].[GL_Accounts].[IsVendor] = 0 ) AND
 ([dbo].[GL_Accounts].[IsActive] = 1 ) AND
 ([dbo].[GL_Accounts].[IsHidden] = 1 ) AND
 ([dbo].[GL_Accounts].[LevelNo]  = 0 ) AND
 ([dbo].[GL_Accounts].[Type]     = 2 ) AND
 ((@CustomerCategoryId IS NULL) OR ( [dbo].[GL_Accounts].[VendorCategoryID]  = @CustomerCategoryId)) AND
 ((@CustomerStatusId IS NULL) OR ( [dbo].[GL_Accounts].[CustomerStatusId]  = @CustomerStatusId)) AND
 ([GL_Accounts].[AreaId] = @AreaId or @AreaId IS NULL ) AND
 (([Entry_Date] >= @DateFrom And [Entry_Date] <= @DateTo)OR( @DateFrom IS NULL and @DateTo IS NULL)) AND
 
(([StartDate] >= @ActivityDateFrom And [StartDate] <= @ActivityDateTo)
 OR( @ActivityDateFrom IS NULL and @ActivityDateTo IS NULL) 
 OR([StartDate] >= @ActivityDateFrom And @ActivityDateTo Is NULL)
 OR(@ActivityDateFrom IS NULL And [StartDate] <= @ActivityDateTo)) AND
 
 (([ContractDateFrom] >= @ContractStartFrom And [ContractDateFrom] <= @ContractStartFrom)
 OR( @ContractStartFrom IS NULL and @ContractStartFrom IS NULL) 
 OR([ContractDateFrom] >= @ContractStartFrom And @ContractStartFrom Is NULL)
 OR(@ContractStartFrom IS NULL And [ContractDateFrom] <= @ContractStartFrom)) AND
  
(([ContractDateTo] >= @ContractEndFrom And [ContractDateTo] <= @ContractEndTo)
 OR( @ContractEndFrom IS NULL and @ContractEndTo IS NULL) 
 OR([ContractDateTo] >= @ContractEndFrom And @ContractEndTo Is NULL)
 OR(@ContractEndFrom IS NULL And [ContractDateTo] <= @ContractEndTo)) AND

 
 ((Cast([dbo].[GL_Accounts].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[GL_Accounts].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[GL_Accounts].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[GL_Accounts].[Phone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[GL_Accounts].[AltPhone]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[GL_VendorCategory].[CatName]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[mstr_Country].[CountryName]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
  (Cast([dbo].[GL_VendorCategory].[CatName_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
 (Cast([dbo].[mstr_Country].[CountryName_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[GL_Area].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (Cast([dbo].[GL_Area].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR 
 (@SearchValue IS NULL) OR (@SearchValue  = '')) 
  )aa
GO
/****** Object:  StoredProcedure [dbo].[GetMaxReceiptEntryBySubsAndCode]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[GetMaxReceiptEntryBySubsAndCode] --1,62,51

@SubsidiaryID int ,
@ReceiptCode int

AS

SELECT *
FROM Inv_Receipt_h
WHERE Entry_No = (SELECT MAX(Entry_No) FROM Inv_Receipt_h where SubsidiaryID = @SubsidiaryID and Code = @ReceiptCode)
and SubsidiaryID = @SubsidiaryID and Code = @ReceiptCode
GO
/****** Object:  StoredProcedure [dbo].[GetMaxReceiptEntryBySubsBranchAndCode]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetMaxReceiptEntryBySubsBranchAndCode]-- 1,62,1

@SubsidiaryID int ,
@ReceiptCode int,
@BranchID int 

AS

SELECT *
FROM Inv_Receipt_h
WHERE Entry_No = (SELECT MAX(Entry_No) FROM Inv_Receipt_h where SubsidiaryID = @SubsidiaryID and Branch_ID = @BranchID and Code = @ReceiptCode)
and SubsidiaryID = @SubsidiaryID and Branch_ID = @BranchID and Code = @ReceiptCode
GO
/****** Object:  StoredProcedure [dbo].[GetNoOfColumn]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



Create PROCEDURE [dbo].[GetNoOfColumn]
AS
DECLARE @colsUnpivot AS NVARCHAR(MAX),
    @query  AS NVARCHAR(MAX),
    @colsPivot as  NVARCHAR(MAX);
set @colsPivot = STUFF((SELECT  ',' + quotename(c.name 
                                          + cast(v.rn as varchar(10))) +',' +
										  quotename('Cost' 
                                          + cast(v.rn as varchar(10)))
                    from
                    (					  
                       select row_number() over(partition by [dbo].[Inv_Items_Store].[Item_ID] order by [dbo].[Inv_Items_Store].[Store_ID]) rn
                       from [dbo].[Inv_Items_Store]
                    ) v
                    cross apply sys.columns as C
                   where C.object_id = object_id('[dbo].[Inv_Items_Store]') and
                    C.name  in ('Qty')
                   group by c.name, v.rn
                   order by v.rn
            FOR XML PATH('AAAA'), TYPE
            ).value('.', 'NVARCHAR(MAX)') 
        ,1,1,'')

Declare @Var nvarchar(MAX)

Set @Var =  @colsPivot

DECLARE @XML AS XML

DECLARE @Delimiter AS CHAR(1) =','

SET @XML = CAST(('<X>'+REPLACE(@Var,@Delimiter ,'</X><X>')+'</X>') AS XML)

DECLARE @temp TABLE (ID nvarchar(100))

INSERT INTO @temp

SELECT N.value('.', 'nvarchar(100)') AS ID FROM @XML.nodes('X') AS T(N)

SELECT * FROM @temp
GO
/****** Object:  StoredProcedure [dbo].[GetNoOfColumnforOBDetailsAllStores]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



Create PROCEDURE [dbo].[GetNoOfColumnforOBDetailsAllStores]
AS
DECLARE @colsUnpivot AS NVARCHAR(MAX),
    @query  AS NVARCHAR(MAX),
    @colsPivot as  NVARCHAR(MAX);
set @colsPivot = STUFF((SELECT  ',' + 
										  quotename('StoreID' 
                                          + cast(v.rn as varchar(10))) + ',' +
										  quotename('StoreName' 
                                          + cast(v.rn as varchar(10))) +',' +
										  quotename(c.name 
                                          + cast(v.rn as varchar(10))) 
                    from
                    (					  
                       select [dbo].[Inv_Items_Store].Store_ID rn
                       from [dbo].[Inv_Items_Store]
					   WHERE [dbo].[Inv_Items_Store].[First_Qty] > 0
                    ) v
                    cross apply sys.columns as C
                   where C.object_id = object_id('[dbo].[Inv_Items_Store]') and
                    C.name  in ('First_Qty')
                   group by c.name, v.rn
                   order by v.rn
            FOR XML PATH(''), TYPE
            ).value('.', 'NVARCHAR(MAX)') 
        ,1,1,'')

Declare @Var nvarchar(MAX)

Set @Var =  @colsPivot

DECLARE @XML AS XML

DECLARE @Delimiter AS CHAR(1) =','

SET @XML = CAST(('<X>'+REPLACE(@Var,@Delimiter ,'</X><X>')+'</X>') AS XML)

DECLARE @temp TABLE (ID nvarchar(100))

INSERT INTO @temp

SELECT N.value('.', 'nvarchar(100)') AS ID FROM @XML.nodes('X') AS T(N)

SELECT * FROM @temp
GO
/****** Object:  StoredProcedure [dbo].[GetOBDetailsForAllStoresDataReport]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[GetOBDetailsForAllStoresDataReport]
 
@Subsidiary_ID int ,
@VendorID int,
@ItemCategoriesIDs nvarchar(500)

AS

  DECLARE @colsUnpivot AS NVARCHAR(MAX),
    @query  AS NVARCHAR(MAX),
    @colsPivot as  NVARCHAR(MAX),
    @Subsidiary_IDValue NVARCHAR(100) = cast(@Subsidiary_ID as NVARCHAR(100) ),
	@VendorIDValue NVARCHAR(100)= cast(@VendorID as NVARCHAR(100) )

select @colsPivot = STUFF((SELECT  ',' + 
										  quotename('StoreID' 
                                          + cast(v.rn as varchar(10))) + ',' +
										  quotename('StoreName' 
                                          + cast(v.rn as varchar(10))) +',' +
										  quotename(c.name 
                                          + cast(v.rn as varchar(10))) 
                    from
                    (					  
                       select [dbo].[Inv_Items_Store].Store_ID rn
                       from [dbo].[Inv_Items_Store]
					   WHERE [dbo].[Inv_Items_Store].[First_Qty] > 0
                    ) v
                    cross apply sys.columns as C
                   where C.object_id = object_id('[dbo].[Inv_Items_Store]') and
                    C.name  in ('First_Qty')
                   group by c.name, v.rn
                   order by v.rn
            FOR XML PATH(''), TYPE
            ).value('.', 'NVARCHAR(MAX)') 
        ,1,1,'')


set @query 
= 'SELECT *
from
(
SELECT ItemCode, ItemName, col + cast(rownum as varchar(10)) new_col, value
FROM
(
SELECT [Subsidiary_ID]
      ,[dbo].[Inv_Items].[ID] as ItemID
      ,[dbo].[Inv_Items].[Code] as ItemCode
      ,[dbo].[Inv_Items].[Name] as ItemName
	  ,cast([dbo].[Inv_Items_Store].Store_ID as nvarchar(500)) as StoreID  
	  ,cast([dbo].[Inv_Store].Name as nvarchar(500)) as StoreName
	  ,cast((ISNULL([dbo].[Inv_Items_Store].[First_Qty],0)) as nvarchar(500)) as First_Qty
	  --,row_number() over(partition by [dbo].[Inv_Items_Store].[Item_ID] order by [dbo].[Inv_Items_Store].[Store_ID]) as rownum
	  ,[dbo].[Inv_Items_Store].Store_ID  as rownum
	  --,row_number() over(partition by [dbo].[Inv_Items_Store].[Item_ID] order by [dbo].[Inv_Items_Store].[Store_ID]) as rn


  FROM [dbo].[Inv_Items]
  LEFT JOIN [dbo].[Inv_Unit] on  [dbo].[Inv_Unit].ID = [dbo].[Inv_Items].Inventory_UnitId 
  LEFT JOIN [dbo].[Inv_Items_Units] on [dbo].[Inv_Items_Units].[Item_ID] = [dbo].[Inv_Items].[ID] and [dbo].[Inv_Items_Units].[Unit_id] = [dbo].[Inv_Items].Inventory_UnitId 
  LEFT JOIN [dbo].[Inv_Items_Vendors] on [dbo].[Inv_Items_Vendors].[ItemID] = [dbo].[Inv_Items].[ID] and [dbo].[Inv_Items_Vendors].[IsMainVendor] = 1
  LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[Inv_Items_Vendors].[VendorID]
  JOIN [dbo].[Inv_Items_Store] on [dbo].[Inv_Items_Store].[Item_ID] = [dbo].[Inv_Items].[ID]
  LEFT JOIN [dbo].[Inv_Items_Categories] on [dbo].[Inv_Items_Categories].[Item_ID] = [dbo].[Inv_Items].[ID]
  LEFT JOIN [dbo].[Inv_Store] on [dbo].[Inv_Store].[ID] = [dbo].[Inv_Items_Store].[Store_ID]

 Where 
 ((cast([dbo].[Inv_Items].[Subsidiary_ID] as nvarchar(100)) = '+ @Subsidiary_IDValue + ')) AND
 ([dbo].[Inv_Items].Item_Type != 2) AND
 ([dbo].[GL_Accounts].[AccountID] = '+ @VendorIDValue +' OR '+ @VendorIDValue +' = 0) AND
 ([dbo].[Inv_Items_Categories].ItemCategory_ID  IN (select * from ParseCommaDelimitedString(N'''+@ItemCategoriesIDs+''')) OR N'''+@ItemCategoriesIDs+'''=''0'')
  AND ([dbo].[Inv_Items].[IsActive] = 1)
  AND ([dbo].[Inv_Items_Store].[First_Qty] > 0)
   ) x
  UNPIVOT
	(
	  value
	  for col in (StoreID,StoreName,First_Qty)
	) u
	)x1

pivot
(
  max(value)
  for new_col in ('+ @colspivot +')
) p'


exec(@query)
GO
/****** Object:  StoredProcedure [dbo].[GetOBDetailsForOneStoreDataReport]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[GetOBDetailsForOneStoreDataReport]
 
@Subsidiary_ID int ,
@VendorID int,
@StockIDs int,
@ItemCategoriesIDs nvarchar(500)

AS
 SELECT [Subsidiary_ID]
      ,[dbo].[Inv_Items].[ID] as ItemID
      ,[dbo].[Inv_Items].[Code] as ItemCode
      ,[dbo].[Inv_Items].[Name] as ItemName
      ,[Description] as ItemDescription
	  ,[dbo].[Inv_Items_Store].[First_Conv] as Conv
	  ,[dbo].[Inv_Items_Store].[First_Qty] as Qty
      ,[dbo].[Inv_Items_Store].[First_Cost] as Cost
      , ([dbo].[Inv_Items_Store].[First_Qty] * [dbo].[Inv_Items_Store].[First_Cost] )as TotalCost



  FROM [dbo].[Inv_Items]
  LEFT JOIN [dbo].[Inv_Items_Vendors] on [dbo].[Inv_Items_Vendors].[ItemID] = [dbo].[Inv_Items].[ID] and [dbo].[Inv_Items_Vendors].[IsMainVendor] = 1
  LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[Inv_Items_Vendors].[VendorID]
  JOIN [dbo].[Inv_Items_Store] on [dbo].[Inv_Items_Store].[Item_ID] = [dbo].[Inv_Items].[ID]
  LEFT JOIN [dbo].[Inv_Items_Categories] on [dbo].[Inv_Items_Categories].[Item_ID] = [dbo].[Inv_Items].[ID]
  LEFT JOIN [dbo].[Inv_Store] on [dbo].[Inv_Store].[ID] = [dbo].[Inv_Items_Store].[Store_ID]

 Where 
 ([dbo].[Inv_Items].[Subsidiary_ID] = @Subsidiary_ID ) AND
 ([dbo].[GL_Accounts].[AccountID] = @VendorID OR @VendorID = 0) AND
 ([dbo].[Inv_Items_Store].Store_ID = @StockIDs) AND
  ([dbo].[Inv_Items_Store].[First_Qty] > 0 ) AND
 ([dbo].[Inv_Items_Categories].ItemCategory_ID  IN (select * from ParseCommaDelimitedString(@ItemCategoriesIDs)) OR @ItemCategoriesIDs='0')
  AND ([dbo].[Inv_Items].[IsActive] = 1)
  




GO
/****** Object:  StoredProcedure [dbo].[GetOBSummaryForAllStoresDataReport]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


Create PROCEDURE [dbo].[GetOBSummaryForAllStoresDataReport]
 
@Subsidiary_ID int ,
@VendorID int,
@ItemCategoriesIDs nvarchar(500)

AS
 SELECT --[Subsidiary_ID]
       Max([dbo].[Inv_Store].[Name]) as StoreName
      ,Sum( ([dbo].[Inv_Items_Store].[First_Qty] * [dbo].[Inv_Items_Store].[First_Cost] ))as Cost



  FROM [dbo].[Inv_Items]
  LEFT JOIN [dbo].[Inv_Items_Vendors] on [dbo].[Inv_Items_Vendors].[ItemID] = [dbo].[Inv_Items].[ID] and [dbo].[Inv_Items_Vendors].[IsMainVendor] = 1
  LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[Inv_Items_Vendors].[VendorID]
  JOIN [dbo].[Inv_Items_Store] on [dbo].[Inv_Items_Store].[Item_ID] = [dbo].[Inv_Items].[ID]
  LEFT JOIN [dbo].[Inv_Items_Categories] on [dbo].[Inv_Items_Categories].[Item_ID] = [dbo].[Inv_Items].[ID]
  LEFT JOIN [dbo].[Inv_Store] on [dbo].[Inv_Store].[ID] = [dbo].[Inv_Items_Store].[Store_ID]

 Where 
 ([dbo].[Inv_Items].[Subsidiary_ID] = @Subsidiary_ID ) AND
 ([dbo].[GL_Accounts].[AccountID] = @VendorID OR @VendorID = 0) AND
  ([dbo].[Inv_Items_Store].[First_Qty] > 0 ) AND
 ([dbo].[Inv_Items_Categories].ItemCategory_ID  IN (select * from ParseCommaDelimitedString(@ItemCategoriesIDs)) OR @ItemCategoriesIDs='0')
  AND ([dbo].[Inv_Items].[IsActive] = 1)
  
  Group By [dbo].[Inv_Store].[ID]



GO
/****** Object:  StoredProcedure [dbo].[GetOpenCashDrawerDetails]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE
PROCEDURE [dbo].[GetOpenCashDrawerDetails] 
	-- Add the parameters for the stored procedure here
	 @CashDrawerId INT,
	 @BranchId INT
AS
BEGIN
SELECT 
       B.Entry_No,
	   '#' + CONVERT(NVARCHAR, B.Entry_No)  [ReceiptNo],
	   CASE WHEN B.Code = 53 AND ( A.MultiPaymentId = 0 OR A.MultiPaymentId IS null ) THEN  B.NetValue * -1 
	   WHEN B.Code = 53 AND A.MultiPaymentId > 0 THEN  A.Amount * -1
	   WHEN A.Notes LIKE 'Added From Sales Order' AND B.Code = 51 THEN B.NetValue - ISNULL(B.Deposite, 0) 
	   ELSE A.Amount END [Amount],
	   CASE WHEN B.Code = 53 THEN  B.Discount_Value * -1 ELSE   B.Discount_Value END [Discount],
	   C.Code [Currency],
	   A.CreationDate [Date],
	   LTRIM(RTRIM(E.Name)) COLLATE Arabic_CI_AI_KS_WS  [PaymentType],
	   CASE B.OrderType WHEN 1 THEN 'Take Away'
						WHEN 2 THEN 'Delivery'
						WHEN 3 THEN 'Dine In'
						WHEN 4 THEN 'Pick Up'
						WHEN 5 THEN 'Membership'
						ELSE NULL END [OrderType],
	   D.[NAME] COLLATE Arabic_CI_AI_KS_WS [DriverName],
	   F.Name [DeliveryStatus],
	   E.IsCoverFlags [IsCoverFlags],
	   B.DeliveryFees
FROM Inv_CashDrawerHistory A
INNER JOIN mstr_CashDrawer Y ON A.CashDrawerId = Y.Id
INNER JOIN [CashDrawerActionType_Vw] E ON A.CashDrawerTypeId = E.Id
LEFT JOIN Inv_Receipt_h B ON A.ReceiptId = B.ID AND
		(B.Is_Canceled = 0 OR B.Is_Canceled IS null) AND
		(B.Code = 51 or B.Code = 53)
LEFT JOIN [dbo].[mstr_DeliveryStatus] F ON B.DeliveryStatusId = F.Id
LEFT JOIN mstr_Currencies C ON A.CurrencyID = C.ID
LEFT JOIN Inv_PaymentType X ON B.Payment_Type = X.id
LEFT JOIN Security_Users D ON B.DriverId = D.Id
WHERE 
		 
		A.CashDrawerId = COALESCE(@CashDrawerId, A.CashDrawerId) AND
		(B.Branch_ID IS NULL OR B.Branch_ID = COALESCE(@BranchId, B.Branch_ID)) AND
		A.IsClosed = 0; 
END
GO
/****** Object:  StoredProcedure [dbo].[GetPaymentVoucherList]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetPaymentVoucherList] --1,4,0,'en-US',0,10,'','','',1

@SubsidiaryID int ,
@VoucherTypeID int ,
@OtherVoucher bit ,
@Language nvarchar(50),
@Skip int = 0,
@Take int = 200,
@SearchValue NVARCHAR(150),
@sortOrder   NVARCHAR(500),
@sortColumn  NVARCHAR(500),
@OpenListForFirstTime bit,
@BranchID int  = null

AS
    if(@OpenListForFirstTime = 1)
  if @OtherVoucher = 1 

   SELECT  * from (SELECT Distinct 
      [dbo].[GL_Vouchers].[ID],
      [dbo].[GL_Vouchers].[SubsidaryID],
      ISNULL(CAST([dbo].[GL_Vouchers].Code AS BIGINT),0) as Code,
	  [dbo].[GL_Vouchers].Memo ,
	  CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate, 103) as VouhcerDate,
	  [dbo].[GL_Vouchers].VouhcerDate as VouhcerDates,
	     (Case When @Language = 'en-US' THEN [dbo].[GL_Accounts].[Name] ELSE [dbo].[GL_Accounts].[Name_AR] END) as AccountName ,
	  [dbo].[GL_Vouchers].Posted,
	  CONVERT(varchar(100), [dbo].[GL_Vouchers].Posted) as PostedOrder,
	  (Case When @Language = 'en-US' THEN [dbo].[mstr_Branch].[Name] ELSE [dbo].[mstr_Branch].[Name_AR] END) as BranchName ,
	  [dbo].[GL_Vouchers].VoucherTypeID,
	  [dbo].[GL_VoucherType].Code as VoucherTypeCode,
	  [dbo].[GL_VoucherType].Name as VoucherTypeName,
	  (Case When @Language = 'en-US' THEN 'Payment Voucher' ELSE 'Payment Voucher' END) as ReportName ,
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as Total
	 	  ,	  ( select CONVERT(decimal(18,3), SUM(Debit)) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as TotalValue

	  FROM [dbo].[GL_Vouchers]
	  LEFT JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  LEFT JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[GL_VoucherDetails].AccountNoID
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[GL_Vouchers].[BranchID]


   Where 
	 ([dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID ) AND
	 (@BranchID IS NULL OR  [dbo].[mstr_Branch].[ID] = @BranchID) AND
	 ([dbo].[GL_VoucherDetails].Header = 1 )AND
	 --(Cast(( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID])  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 ([dbo].[GL_Vouchers].VoucherTypeID = @VoucherTypeID OR [dbo].[GL_VoucherType].VoucherTypeSerialId = @VoucherTypeID ) AND
	 ((Cast([dbo].[GL_Vouchers].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Vouchers].[Memo]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate , 103) like '%'+@SearchValue+'%' ) OR  
	 (@SearchValue IS NULL) OR (@SearchValue  = ''))
	 ) as Vouchers
	  ORDER BY BranchName ,
        case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Code' then Code
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Memo' then Memo
        end ASC
,       case
        when @sortOrder <> 'ASC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end ASC
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Total' then TotalValue
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end ASC 
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end ASC 
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Code' then Code
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Memo' then Memo
        end DESC
,       case
        when @sortOrder <> 'DESC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Total' then TotalValue
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end DESC 
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end DESC 
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end DESC     

	  OFFSET     @Skip ROWS       
	  FETCH NEXT @Take ROWS ONLY; 

else

 SELECT * from ( SELECT Distinct 
      [dbo].[GL_Vouchers].[ID],
      [dbo].[GL_Vouchers].[SubsidaryID],
      ISNULL(CAST([dbo].[GL_Vouchers].Code AS BIGINT),0) as Code,
	  [dbo].[GL_Vouchers].Memo ,
	  CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate, 103) as VouhcerDate,
	  [dbo].[GL_Vouchers].VouhcerDate as VouhcerDates ,
	     (Case When @Language = 'en-US' THEN [dbo].[GL_Accounts].[Name] ELSE [dbo].[GL_Accounts].[Name_AR] END) as AccountName ,
	  [dbo].[GL_Vouchers].Posted,
	  CONVERT(varchar(100), [dbo].[GL_Vouchers].Posted) as PostedOrder,
	  (Case When @Language = 'en-US' THEN [dbo].[mstr_Branch].[Name] ELSE [dbo].[mstr_Branch].[Name_AR] END) as BranchName ,
	  [dbo].[GL_Vouchers].VoucherTypeID,
	  [dbo].[GL_VoucherType].Code as VoucherTypeCode,
	  [dbo].[GL_VoucherType].Name as VoucherTypeName,
	  (Case When @Language = 'en-US' THEN 'Payment Voucher' ELSE 'Payment Voucher' END) as ReportName ,
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as Total
	  ,	  ( select CONVERT(decimal(18,3), SUM(Debit)) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as TotalValue

	  FROM [dbo].[GL_Vouchers]
	  LEFT JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  LEFT JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[GL_VoucherDetails].AccountNoID
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[GL_Vouchers].[BranchID]

   Where 
	 ([dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID ) AND
	 (@BranchID IS NULL OR  [dbo].[mstr_Branch].[ID] = @BranchID) AND
	   ([dbo].[GL_VoucherDetails].Header = 1 )AND
	 ([dbo].[GL_Vouchers].VoucherTypeID = @VoucherTypeID ) AND
	 --(Cast(( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID])  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 ((Cast([dbo].[GL_Vouchers].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Vouchers].[Memo]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate , 103) like '%'+@SearchValue+'%' ) OR  
	 (@SearchValue IS NULL) OR (@SearchValue  = ''))
	 )as Vouchers
	  ORDER BY BranchName ,
        case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Code' then Code
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Memo' then Memo
        end ASC
,       case
        when @sortOrder <> 'ASC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end ASC
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Total' then TotalValue
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end ASC 
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end ASC 
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Code' then Code
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Memo' then Memo
        end DESC
,       case
        when @sortOrder <> 'DESC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Total' then TotalValue
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end DESC 
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end DESC 
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end DESC  
		    
	  OFFSET     @Skip ROWS       
	  FETCH NEXT @Take ROWS ONLY; 
	  else
	  
  if @OtherVoucher = 1 

   SELECT  * from (SELECT Distinct 
      [dbo].[GL_Vouchers].[ID],
      [dbo].[GL_Vouchers].[SubsidaryID],
      ISNULL(CAST([dbo].[GL_Vouchers].Code AS BIGINT),0) as Code,
	  [dbo].[GL_Vouchers].Memo ,
	  CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate, 103) as VouhcerDate,
	  [dbo].[GL_Vouchers].VouhcerDate as VouhcerDates,
	     (Case When @Language = 'en-US' THEN [dbo].[GL_Accounts].[Name] ELSE [dbo].[GL_Accounts].[Name_AR] END) as AccountName ,
	  [dbo].[GL_Vouchers].Posted,
	  CONVERT(varchar(100), [dbo].[GL_Vouchers].Posted) as PostedOrder,
	  (Case When @Language = 'en-US' THEN [dbo].[mstr_Branch].[Name] ELSE [dbo].[mstr_Branch].[Name_AR] END) as BranchName ,
	  [dbo].[GL_Vouchers].VoucherTypeID,
	  [dbo].[GL_VoucherType].Code as VoucherTypeCode,
	  [dbo].[GL_VoucherType].Name as VoucherTypeName,
	  (Case When @Language = 'en-US' THEN 'Payment Voucher' ELSE 'Payment Voucher' END) as ReportName ,
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as Total
	 	  ,	  ( select CONVERT(decimal(18,3), SUM(Debit)) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as TotalValue

	  FROM [dbo].[GL_Vouchers]
	  LEFT JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  LEFT JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[GL_VoucherDetails].AccountNoID
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[GL_Vouchers].[BranchID]


   Where 
	 ([dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID ) AND
	 (@BranchID IS NULL OR  [dbo].[mstr_Branch].[ID] = @BranchID) AND
	 ([dbo].[GL_VoucherDetails].Header = 1 )AND
	 --(Cast(( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID])  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 ([dbo].[GL_Vouchers].VoucherTypeID = @VoucherTypeID OR [dbo].[GL_VoucherType].VoucherTypeSerialId = @VoucherTypeID ) AND
	 ((Cast([dbo].[GL_Vouchers].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Vouchers].[Memo]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate , 103) like '%'+@SearchValue+'%' ) OR  
	 (@SearchValue IS NULL) OR (@SearchValue  = ''))
	 ) as Vouchers
	  ORDER BY
        case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Code' then Code
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Memo' then Memo
        end ASC
,       case
        when @sortOrder <> 'ASC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end ASC
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Total' then TotalValue
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end ASC 
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end ASC 
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Code' then Code
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Memo' then Memo
        end DESC
,       case
        when @sortOrder <> 'DESC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Total' then TotalValue
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end DESC 
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end DESC 
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end DESC     

	  OFFSET     @Skip ROWS       
	  FETCH NEXT @Take ROWS ONLY; 

else

 SELECT * from ( SELECT Distinct 
      [dbo].[GL_Vouchers].[ID],
      [dbo].[GL_Vouchers].[SubsidaryID],
      ISNULL(CAST([dbo].[GL_Vouchers].Code AS BIGINT),0) as Code,
	  [dbo].[GL_Vouchers].Memo ,
	  CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate, 103) as VouhcerDate,
	  [dbo].[GL_Vouchers].VouhcerDate as VouhcerDates ,
	     (Case When @Language = 'en-US' THEN [dbo].[GL_Accounts].[Name] ELSE [dbo].[GL_Accounts].[Name_AR] END) as AccountName ,
	  [dbo].[GL_Vouchers].Posted,
	  CONVERT(varchar(100), [dbo].[GL_Vouchers].Posted) as PostedOrder,
	  (Case When @Language = 'en-US' THEN [dbo].[mstr_Branch].[Name] ELSE [dbo].[mstr_Branch].[Name_AR] END) as BranchName ,
	  [dbo].[GL_Vouchers].VoucherTypeID,
	  [dbo].[GL_VoucherType].Code as VoucherTypeCode,
	  [dbo].[GL_VoucherType].Name as VoucherTypeName,
	  (Case When @Language = 'en-US' THEN 'Payment Voucher' ELSE 'Payment Voucher' END) as ReportName ,
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as Total
	  ,	  ( select CONVERT(decimal(18,3), SUM(Debit)) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as TotalValue

	  FROM [dbo].[GL_Vouchers]
	  LEFT JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[GL_VoucherDetails].AccountNoID
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[GL_Vouchers].[BranchID]

   Where 
	 ([dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID ) AND
	 (@BranchID IS NULL OR  [dbo].[mstr_Branch].[ID] = @BranchID) AND
	   ([dbo].[GL_VoucherDetails].Header = 1 )AND
	 ([dbo].[GL_Vouchers].VoucherTypeID = @VoucherTypeID ) AND
	 --(Cast(( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID])  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 ((Cast([dbo].[GL_Vouchers].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Vouchers].[Memo]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate , 103) like '%'+@SearchValue+'%' ) OR  
	 (@SearchValue IS NULL) OR (@SearchValue  = ''))
	 )as Vouchers
	  ORDER BY
        case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Code' then Code
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Memo' then Memo
        end ASC
,       case
        when @sortOrder <> 'ASC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end ASC
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Total' then TotalValue
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end ASC 
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end ASC 
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Code' then Code
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Memo' then Memo
        end DESC
,       case
        when @sortOrder <> 'DESC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Total' then TotalValue
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end DESC 
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end DESC 
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end DESC  
		    
	  OFFSET     @Skip ROWS       
	  FETCH NEXT @Take ROWS ONLY; 
GO
/****** Object:  StoredProcedure [dbo].[GetPaymentVoucherListCount]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetPaymentVoucherListCount] --1,4,0,'en-US',''

@SubsidiaryID int ,
@VoucherTypeID int ,
@OtherVoucher bit ,
@Language nvarchar(50),
@SearchValue NVARCHAR(150)

AS
  
  if @OtherVoucher = 1 
  Begin
   SELECT  COUNT(aa.ID) as Count
   from
   (SELECT Distinct 
      [dbo].[GL_Vouchers].[ID],
      [dbo].[GL_Vouchers].[SubsidaryID],
      [dbo].[GL_Vouchers].Code,
	  [dbo].[GL_Vouchers].Memo ,
	  CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate, 103) as VouhcerDate,
	  [dbo].[GL_Vouchers].VouhcerDate as VouhcerDates,
	     (Case When @Language = 'en-US' THEN [dbo].[GL_Accounts].[Name] ELSE [dbo].[GL_Accounts].[Name_AR] END) as AccountName ,
	  [dbo].[GL_Vouchers].Posted,
	  [dbo].[GL_Vouchers].VoucherTypeID,
	  [dbo].[GL_VoucherType].Code as VoucherTypeCode,
	  [dbo].[GL_VoucherType].Name as VoucherTypeName,
	  (Case When @Language = 'en-US' THEN 'Payment Voucher' ELSE 'Payment Voucher' END) as ReportName ,
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as Total
	 
	  FROM [dbo].[GL_Vouchers]
	  LEFT JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  LEFT JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[GL_VoucherDetails].AccountNoID

   Where 
	 ([dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID ) AND
	 ([dbo].[GL_VoucherDetails].Header = 1 )AND
	 --(Cast(( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID])  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 ([dbo].[GL_Vouchers].VoucherTypeID = @VoucherTypeID OR [dbo].[GL_VoucherType].VoucherTypeSerialId = @VoucherTypeID ) AND
	 ((Cast([dbo].[GL_Vouchers].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Vouchers].[Memo]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate , 103) like '%'+@SearchValue+'%' ) OR  
	 (@SearchValue IS NULL) OR (@SearchValue  = ''))

    )aa
END
else
Begin
   SELECT  COUNT(aa.ID) as Count
   from
   ( SELECT Distinct 
      [dbo].[GL_Vouchers].[ID],
      [dbo].[GL_Vouchers].[SubsidaryID],
      [dbo].[GL_Vouchers].Code,
	  [dbo].[GL_Vouchers].Memo ,
	  CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate, 103) as VouhcerDate,
	  [dbo].[GL_Vouchers].VouhcerDate as VouhcerDates ,
	     (Case When @Language = 'en-US' THEN [dbo].[GL_Accounts].[Name] ELSE [dbo].[GL_Accounts].[Name_AR] END) as AccountName ,
	  [dbo].[GL_Vouchers].Posted,
	  [dbo].[GL_Vouchers].VoucherTypeID,
	  [dbo].[GL_VoucherType].Code as VoucherTypeCode,
	  [dbo].[GL_VoucherType].Name as VoucherTypeName,
	  (Case When @Language = 'en-US' THEN 'Payment Voucher' ELSE 'Payment Voucher' END) as ReportName ,
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as Total
	  
	  FROM [dbo].[GL_Vouchers]
	  LEFT JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  LEFT JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[GL_VoucherDetails].AccountNoID

   Where 
	 ([dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID ) AND
	 ([dbo].[GL_VoucherDetails].Header = 1 )AND
	 ([dbo].[GL_Vouchers].VoucherTypeID = @VoucherTypeID ) AND
	 --(Cast(( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID])  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 ((Cast([dbo].[GL_Vouchers].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Vouchers].[Memo]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate , 103) like '%'+@SearchValue+'%' ) OR  
	 (@SearchValue IS NULL) OR (@SearchValue  = ''))
	 )as aa
	 END
GO
/****** Object:  StoredProcedure [dbo].[GetReceiptVoucherList]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetReceiptVoucherList]

@SubsidiaryID int ,
@VoucherTypeID int ,
@OtherVoucher bit ,
@Language nvarchar(50),
@Skip int = 0,
@Take int = 200,
@SearchValue NVARCHAR(150),
@sortOrder   NVARCHAR(500),
@sortColumn  NVARCHAR(500),
@OpenListForFirstTime bit,
@BranchID int  = null

AS
  if(@OpenListForFirstTime = 1)  
  if @OtherVoucher = 1 
    SELECT  * from (
   SELECT Distinct 
      [dbo].[GL_Vouchers].[ID],
      [dbo].[GL_Vouchers].[SubsidaryID],
      CAST([dbo].[GL_Vouchers].Code AS BIGINT) as Code,
	  [dbo].[GL_Vouchers].Memo ,
	  CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate, 103) as VouhcerDate,
	  [dbo].[GL_Vouchers].VouhcerDate as VouhcerDates,
      [GL_Vouchers].Beneficiary as AccountName ,
	  [dbo].[GL_Vouchers].Posted,
	  CONVERT(varchar(100), [dbo].[GL_Vouchers].Posted) as PostedOrder,
	  (Case When @Language = 'en-US' THEN [dbo].[mstr_Branch].[Name] ELSE [dbo].[mstr_Branch].[Name_AR] END) as BranchName ,
	  [dbo].[GL_Vouchers].VoucherTypeID,
	  [dbo].[GL_VoucherType].Code as VoucherTypeCode,
	  [dbo].[GL_VoucherType].Name as VoucherTypeName,
	  (Case When @Language = 'en-US' THEN 'Receipt Voucher' ELSE 'Receipt Voucher' END) as ReportName ,
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as Total
	 ,	  ( select CONVERT(decimal(18,3), SUM(Debit)) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as TotalValue

	  FROM [dbo].[GL_Vouchers]
	  LEFT JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  LEFT JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[GL_VoucherDetails].AccountNoID
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[GL_Vouchers].[BranchID]

   Where 
	 ([dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID ) AND
	 (@BranchID IS NULL OR  [dbo].[mstr_Branch].[ID] = @BranchID) AND
	 ([dbo].[GL_VoucherDetails].Header = 1 or [dbo].[GL_VoucherDetails].ID is NULL ) AND
	 ([dbo].[GL_Vouchers].VoucherTypeID = @VoucherTypeID OR [dbo].[GL_VoucherType].VoucherTypeSerialId = @VoucherTypeID ) AND
	 --(Cast(( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID])  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 ((Cast([dbo].[GL_Vouchers].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Vouchers].[Memo]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate , 103) like '%'+@SearchValue+'%' ) OR  
	 (@SearchValue IS NULL) OR (@SearchValue  = ''))

	  ) as Vouchers
	  ORDER BY
        case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Code' then Code
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Memo' then Memo
        end ASC
,       case
        when @sortOrder <> 'ASC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then convert(date, VouhcerDates)
        end ASC
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Total' then TotalValue
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end ASC 
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end ASC 
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Code' then Code
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Memo' then Memo
        end DESC
,       case
        when @sortOrder <> 'DESC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then convert(date, VouhcerDates)
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Total' then TotalValue
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end DESC   
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end DESC 
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end DESC,
		Code desc

	  OFFSET     @Skip ROWS       
	  FETCH NEXT @Take ROWS ONLY; 

else
   SELECT  * from (
SELECT Distinct 
      [dbo].[GL_Vouchers].[ID],
      [dbo].[GL_Vouchers].[SubsidaryID],
      CAST([dbo].[GL_Vouchers].Code AS BIGINT) as Code,
	  [dbo].[GL_Vouchers].Memo ,
	  CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate, 103) as VouhcerDate,
	  [dbo].[GL_Vouchers].VouhcerDate as VouhcerDates ,
      [GL_Vouchers].Beneficiary as AccountName ,
	  [dbo].[GL_Vouchers].Posted,
	  CONVERT(varchar(100), [dbo].[GL_Vouchers].Posted) as PostedOrder,
	 (Case When @Language = 'en-US' THEN [dbo].[mstr_Branch].[Name] ELSE [dbo].[mstr_Branch].[Name_AR] END) as BranchName ,
	  [dbo].[GL_Vouchers].VoucherTypeID,
	  [dbo].[GL_VoucherType].Code as VoucherTypeCode,
	  [dbo].[GL_VoucherType].Name as VoucherTypeName,
	  (Case When @Language = 'en-US' THEN 'Receipt Voucher' ELSE 'Receipt Voucher' END) as ReportName ,
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as Total
	  	 	  ,	  ( select CONVERT(decimal(18,3), SUM(Debit)) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as TotalValue

	  FROM [dbo].[GL_Vouchers]
	  LEFT JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  LEFT JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[GL_VoucherDetails].AccountNoID
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[GL_Vouchers].[BranchID]

   Where 
	 ([dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID ) AND
	 (@BranchID IS NULL OR  [dbo].[mstr_Branch].[ID] = @BranchID) AND
	 ([dbo].[GL_VoucherDetails].Header = 1 or [dbo].[GL_VoucherDetails].ID is NULL ) AND
	 ([dbo].[GL_Vouchers].VoucherTypeID = @VoucherTypeID ) AND
	 --(Cast(( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID])  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 ((Cast([dbo].[GL_Vouchers].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Vouchers].[Memo]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate , 103) like '%'+@SearchValue+'%' ) OR  
	 (@SearchValue IS NULL) OR (@SearchValue  = ''))
) as Vouchers
	 ORDER BY
        case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Code' then Code
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Memo' then Memo
        end ASC
,       case
        when @sortOrder <> 'ASC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then convert(date, VouhcerDates)
        end ASC
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Total' then TotalValue
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end ASC 
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end ASC 
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Code' then Code
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Memo' then Memo
        end DESC
,       case
        when @sortOrder <> 'DESC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then convert(date, VouhcerDates)
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Total' then TotalValue
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end DESC  
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end DESC  
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end DESC,
		Code desc

	  OFFSET     @Skip ROWS       
	  FETCH NEXT @Take ROWS ONLY; 
  else
  if @OtherVoucher = 1 
  SELECT  * from (
   SELECT Distinct 
      [dbo].[GL_Vouchers].[ID],
      [dbo].[GL_Vouchers].[SubsidaryID],
      CAST([dbo].[GL_Vouchers].Code AS BIGINT) as Code,
	  [dbo].[GL_Vouchers].Memo ,
	  CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate, 103) as VouhcerDate,
	  [dbo].[GL_Vouchers].VouhcerDate as VouhcerDates,
      [GL_Vouchers].Beneficiary as AccountName ,
	  [dbo].[GL_Vouchers].Posted,
	  CONVERT(varchar(100), [dbo].[GL_Vouchers].Posted) as PostedOrder,
	  (Case When @Language = 'en-US' THEN [dbo].[mstr_Branch].[Name] ELSE [dbo].[mstr_Branch].[Name_AR] END) as BranchName ,
	  [dbo].[GL_Vouchers].VoucherTypeID,
	  [dbo].[GL_VoucherType].Code as VoucherTypeCode,
	  [dbo].[GL_VoucherType].Name as VoucherTypeName,
	  (Case When @Language = 'en-US' THEN 'Receipt Voucher' ELSE 'Receipt Voucher' END) as ReportName ,
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as Total
	 ,	  ( select CONVERT(decimal(18,3), SUM(Debit)) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as TotalValue

	  FROM [dbo].[GL_Vouchers]
	  LEFT JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  LEFT JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[GL_VoucherDetails].AccountNoID
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[GL_Vouchers].[BranchID]

   Where 
	 ([dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID ) AND
	 (@BranchID IS NULL OR  [dbo].[mstr_Branch].[ID] = @BranchID) AND
	 ([dbo].[GL_VoucherDetails].Header = 1 or [dbo].[GL_VoucherDetails].ID is NULL ) AND
	 ([dbo].[GL_Vouchers].VoucherTypeID = @VoucherTypeID OR [dbo].[GL_VoucherType].VoucherTypeSerialId = @VoucherTypeID ) AND
	 --(Cast(( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID])  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 ((Cast([dbo].[GL_Vouchers].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Vouchers].[Memo]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate , 103) like '%'+@SearchValue+'%' ) OR  
	 (@SearchValue IS NULL) OR (@SearchValue  = ''))

	  ) as Vouchers
	  ORDER BY
        case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Code' then Code
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Memo' then Memo
        end ASC
,       case
        when @sortOrder <> 'ASC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end ASC
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Total' then TotalValue
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end ASC 
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end ASC 
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Code' then Code
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Memo' then Memo
        end DESC
,       case
        when @sortOrder <> 'DESC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Total' then TotalValue
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end DESC   
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end DESC 
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end DESC  

	  OFFSET     @Skip ROWS       
	  FETCH NEXT @Take ROWS ONLY; 

else
   SELECT  * from (
SELECT Distinct 
      [dbo].[GL_Vouchers].[ID],
      [dbo].[GL_Vouchers].[SubsidaryID],
      CAST([dbo].[GL_Vouchers].Code AS BIGINT) as Code,
	  [dbo].[GL_Vouchers].Memo ,
	  CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate, 103) as VouhcerDate,
	  [dbo].[GL_Vouchers].VouhcerDate as VouhcerDates ,
      [GL_Vouchers].Beneficiary as AccountName ,
	  [dbo].[GL_Vouchers].Posted,
	  CONVERT(varchar(100), [dbo].[GL_Vouchers].Posted) as PostedOrder,
	 (Case When @Language = 'en-US' THEN [dbo].[mstr_Branch].[Name] ELSE [dbo].[mstr_Branch].[Name_AR] END) as BranchName ,
	  [dbo].[GL_Vouchers].VoucherTypeID,
	  [dbo].[GL_VoucherType].Code as VoucherTypeCode,
	  [dbo].[GL_VoucherType].Name as VoucherTypeName,
	  (Case When @Language = 'en-US' THEN 'Receipt Voucher' ELSE 'Receipt Voucher' END) as ReportName ,
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as Total
	  	 	  ,	  ( select CONVERT(decimal(18,3), SUM(Debit)) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as TotalValue

	  FROM [dbo].[GL_Vouchers]
	  LEFT JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  LEFT JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[GL_VoucherDetails].AccountNoID
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[GL_Vouchers].[BranchID]

   Where 
	 ([dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID ) AND
	 (@BranchID IS NULL OR  [dbo].[mstr_Branch].[ID] = @BranchID) AND
	 ([dbo].[GL_VoucherDetails].Header = 1 or [dbo].[GL_VoucherDetails].ID is NULL ) AND
	 ([dbo].[GL_Vouchers].VoucherTypeID = @VoucherTypeID ) AND
	 --(Cast(( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID])  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 ((Cast([dbo].[GL_Vouchers].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Vouchers].[Memo]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate , 103) like '%'+@SearchValue+'%' ) OR  
	 (@SearchValue IS NULL) OR (@SearchValue  = ''))
) as Vouchers
	  ORDER BY
        case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Code' then Code
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Memo' then Memo
        end ASC
,       case
        when @sortOrder <> 'ASC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end ASC
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Total' then TotalValue
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end ASC 
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end ASC 
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Code' then Code
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Memo' then Memo
        end DESC
,       case
        when @sortOrder <> 'DESC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Total' then TotalValue
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end DESC  
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end DESC  
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end DESC  

	  OFFSET     @Skip ROWS       
	  FETCH NEXT @Take ROWS ONLY; 
GO
/****** Object:  StoredProcedure [dbo].[GetReceiptVoucherListCount]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetReceiptVoucherListCount]

@SubsidiaryID int ,
@VoucherTypeID int ,
@OtherVoucher bit ,
@Language nvarchar(50),
@SearchValue NVARCHAR(150)

AS
  
  if @OtherVoucher = 1 
   SELECT  COUNT(aa.ID) as Count
   from
   (SELECT Distinct 
      [dbo].[GL_Vouchers].[ID],
      [dbo].[GL_Vouchers].[SubsidaryID],
      [dbo].[GL_Vouchers].Code,
	  [dbo].[GL_Vouchers].Memo ,
	  CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate, 103) as VouhcerDate,
	  [dbo].[GL_Vouchers].VouhcerDate as VouhcerDates,
      [GL_Vouchers].Beneficiary as AccountName ,
	  [dbo].[GL_Vouchers].Posted,
	  [dbo].[GL_Vouchers].VoucherTypeID,
	  [dbo].[GL_VoucherType].Code as VoucherTypeCode,
	  [dbo].[GL_VoucherType].Name as VoucherTypeName,
	  (Case When @Language = 'en-US' THEN 'Receipt Voucher' ELSE 'Receipt Voucher' END) as ReportName ,
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as Total
	 	 	  ,	  ( select CONVERT(decimal(18,3), SUM(Debit)) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as TotalValue

	  FROM [dbo].[GL_Vouchers]
	  LEFT JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  LEFT JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[GL_VoucherDetails].AccountNoID

   Where 
	 ([dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID ) AND
	 ([dbo].[GL_VoucherDetails].Header = 1 or [dbo].[GL_VoucherDetails].ID is NULL ) AND
	 ([dbo].[GL_Vouchers].VoucherTypeID = @VoucherTypeID OR [dbo].[GL_VoucherType].VoucherTypeSerialId = @VoucherTypeID ) AND
	 --(Cast(( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID])  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 ((Cast([dbo].[GL_Vouchers].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Vouchers].[Memo]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate , 103) like '%'+@SearchValue+'%' ) OR  
	 (@SearchValue IS NULL) OR (@SearchValue  = ''))

	  ) as aa
	 
else
    SELECT  COUNT(aa.ID) as Count
	from
(SELECT Distinct 
      [dbo].[GL_Vouchers].[ID],
      [dbo].[GL_Vouchers].[SubsidaryID],
      [dbo].[GL_Vouchers].Code,
	  [dbo].[GL_Vouchers].Memo ,
	  CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate, 103) as VouhcerDate,
	  [dbo].[GL_Vouchers].VouhcerDate as VouhcerDates ,
      [GL_Vouchers].Beneficiary as AccountName ,
	  [dbo].[GL_Vouchers].Posted,
	  [dbo].[GL_Vouchers].VoucherTypeID,
	  [dbo].[GL_VoucherType].Code as VoucherTypeCode,
	  [dbo].[GL_VoucherType].Name as VoucherTypeName,
	  (Case When @Language = 'en-US' THEN 'Receipt Voucher' ELSE 'Receipt Voucher' END) as ReportName ,
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as Total
	  	 	  ,	  ( select CONVERT(decimal(18,3), SUM(Debit)) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as TotalValue

	  FROM [dbo].[GL_Vouchers]
	  LEFT JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  LEFT JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[GL_VoucherDetails].AccountNoID

   Where 
	 ([dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID ) AND
	 ([dbo].[GL_VoucherDetails].Header = 1 or [dbo].[GL_VoucherDetails].ID is NULL ) AND
	 ([dbo].[GL_Vouchers].VoucherTypeID = @VoucherTypeID ) AND
	 --(Cast(( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID])  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 ((Cast([dbo].[GL_Vouchers].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Vouchers].[Memo]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate , 103) like '%'+@SearchValue+'%' ) OR  
	 (@SearchValue IS NULL) OR (@SearchValue  = ''))
) as aa
GO
/****** Object:  StoredProcedure [dbo].[GetStockItemsDataReport]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[GetStockItemsDataReport]
 
@Subsidiary_ID int ,
@ItemTypeID int,
@VendorID int,
@StocksID nvarchar(100),
@UnitID int ,
@Qty Decimal(18,3),
@ItemCategoriesIDs nvarchar(500)

AS
 SELECT [Subsidiary_ID]
      ,[dbo].[Inv_Items].[ID]
      ,[dbo].[Inv_Items].[Code] as ItemCode
      ,[dbo].[Inv_Items].[Name] as ItemName
      ,[Description] as ItemDescription
      ,[Inventory_UnitId]
      ,[Item_Type]
	  ,[dbo].[Inv_Unit].Name as InventoryUnitName
	  ,[dbo].[GL_Accounts].[Name] as VendorName
	  ,[dbo].[Inv_Items].[IsActive]
	  ,ISNull([dbo].[Inv_Items_Store].Store_ID,0) as StoreID  
	  ,CONVERT(varchar(50),[dbo].[Inv_Store].Name) as StoreName
	  ,ISNull([dbo].[Inv_Items_Units].Conv,0) as Conv
	  ,ISNull([dbo].[Inv_Items_Store].Cost_conv,0)as Cost_conv
	  ,ISNull([dbo].[Inv_Items_Store].Qty,0)as Qty
	  ,ISNull(Reserved_Qty,0)as Reserved_Qty
	  ,ISNull([dbo].[Inv_Items_Store].Orderd_Qty,0)as Orderd_Qty
	  ,ISNull([dbo].[Inv_Items_Units].Sale_price1,0)as SalesPrice1
	  ,ISNull([dbo].[Inv_Items_Units].Sale_price2,0)as SalesPrice2
	  ,ISNull([dbo].[Inv_Items_Units].Sale_price3,0)as SalesPrice3
	  ,ISNull([dbo].[Inv_Items_Units].Sale_price4,0)as SalesPrice4
	  ,ISNull([dbo].[Inv_Items_Store].Max_Qty,0)as MaximumQty
	  ,ISNull([dbo].[Inv_Items_Store].Min_Qty,0)as MinimumQty
	  ,(ISNull([dbo].[Inv_Items_Store].Qty,0) * ISNull([dbo].[Inv_Items_Store].Cost_conv,0))as TotalCost



  FROM [dbo].[Inv_Items]
  LEFT JOIN [dbo].[Inv_Unit] on  [dbo].[Inv_Unit].ID = [dbo].[Inv_Items].Inventory_UnitId 
  LEFT JOIN [dbo].[Inv_Items_Units] on [dbo].[Inv_Items_Units].[Item_ID] = [dbo].[Inv_Items].[ID] and [dbo].[Inv_Items_Units].[Unit_id] = [dbo].[Inv_Items].Inventory_UnitId 
  LEFT JOIN [dbo].[Inv_Items_Vendors] on [dbo].[Inv_Items_Vendors].[ItemID] = [dbo].[Inv_Items].[ID] and [dbo].[Inv_Items_Vendors].[IsMainVendor] = 1
  LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[Inv_Items_Vendors].[VendorID]
  JOIN [dbo].[Inv_Items_Store] on [dbo].[Inv_Items_Store].[Item_ID] = [dbo].[Inv_Items].[ID]
  LEFT JOIN [dbo].[Inv_Items_Categories] on [dbo].[Inv_Items_Categories].[Item_ID] = [dbo].[Inv_Items].[ID]
  LEFT JOIN [dbo].[Inv_Store] on [dbo].[Inv_Store].[ID] = [dbo].[Inv_Items_Store].[Store_ID]

 Where 
 ([dbo].[Inv_Items].[Subsidiary_ID] = @Subsidiary_ID ) AND
 ([dbo].[Inv_Items].Item_Type = @ItemTypeID AND [dbo].[Inv_Items].Item_Type != 2) AND
 ([Inv_Items_Units].Unit_id = @UnitID OR @UnitID = 0) AND
 ([dbo].[GL_Accounts].[AccountID] = @VendorID OR @VendorID = 0) AND
 ([dbo].[Inv_Items_Store].Store_ID  IN (select * from ParseCommaDelimitedString(@StocksID)) OR @StocksID='0') AND
 ([dbo].[Inv_Items_Categories].ItemCategory_ID  IN (select * from ParseCommaDelimitedString(@ItemCategoriesIDs)) OR @ItemCategoriesIDs='0')
  AND ([dbo].[Inv_Items].[IsActive] = 1)
  




GO
/****** Object:  StoredProcedure [dbo].[GetSubsidaryConfigurationParameters]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetSubsidaryConfigurationParameters] --63
@SubsidaryId INT
AS 
BEGIN
	SELECT [Name], [Value] FROM mstr_ConfigurationParameter WHERE SubsidaryId = @SubsidaryId
	union Select 'PhysicalNegativeInventoryID' as Name
	,ISNULL((select  CONVERT(varchar(10), PhysicalNegativeInventoryID) from mstr_InventroySettings where SubsidiaryID = @SubsidaryId),'2') as Value
END

GO
/****** Object:  StoredProcedure [dbo].[GetTest]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


 
 CREATE proc [dbo].[GetTest] (@UserID int)
 AS
 SELECT Security_lkp_Permissions.*
 FROM Sec_Users INNER JOIN
 Security_UserRoles ON Sec_Users.UserID = Security_UserRoles.UserID INNER JOIN
 Security_Roles ON Security_UserRoles.RoleID = Security_Roles.RoleID AND Security_UserRoles.RoleID = Security_Roles.RoleID INNER JOIN
 Sec_RolePermissions ON Security_Roles.RoleID = Sec_RolePermissions.RoleID INNER JOIN
 Security_lkp_Permissions ON Sec_RolePermissions.PermissionID = Security_lkp_Permissions.PermissionID 
 
 Where Sec_Users.UserID = @UserID And Security_Roles.IsActive = 1
 
 
GO
/****** Object:  StoredProcedure [dbo].[GetTotalQtyForIteminStore]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[GetTotalQtyForIteminStore] --4062,63,'11-19-2019 12:00'
	@item int,	@Store int,
	  @date datetime
AS
BEGIN
 with qry(ID,AvgCost,TotalQTy,TotalReservedQTy,Entry_Date)
  AS  
  (
	Select [Inv_Receipt_d].ID,[Inv_Receipt_d].AvgCost,[Inv_Receipt_d].TotalQTy,[Inv_Receipt_d].TotalReservedQTy,Entry_Date 
from [dbo].[Inv_Receipt_d],[dbo].[Inv_Receipt_h]
where 
[dbo].[Inv_Receipt_h].id = [dbo].[Inv_Receipt_d].Parent_ID and
 [dbo].[Inv_Receipt_d].Item_ID = @item and 
  [dbo].[Inv_Receipt_d].Store_ID = @Store and
  [dbo].[Inv_Receipt_h].Entry_Date < @date
  and [Inv_Receipt_d].Transaction_move <> 0
 
   )
  select Top 1 ID,AvgCost,TotalQTy,TotalReservedQTy from qry 
  where Entry_Date = (select  Max(Entry_Date) from qry )
   order by ID desc
END
GO
/****** Object:  StoredProcedure [dbo].[GetUnBalancedVouchersList]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetUnBalancedVouchersList]

@SubsidiaryID int ,
@Language nvarchar(50),
@Skip int = 0,
@Take int = 200,
@SearchValue NVARCHAR(150),
@sortOrder   NVARCHAR(500),
@sortColumn  NVARCHAR(500)

AS
 if @Language = 'en-Us'
  SELECT  * from (
   SELECT Distinct 
      [dbo].[GL_Vouchers].[ID],
      [dbo].[GL_Vouchers].[SubsidaryID],
	  [dbo].[mstr_Branch].[Name]  as BranchName ,
      CAST([dbo].[GL_Vouchers].Code AS BIGINT) as Code,
	  [dbo].[GL_Vouchers].Memo ,
	  CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate, 103) as VouhcerDate,
	  [dbo].[GL_Vouchers].VouhcerDate as VouhcerDates,
	  [dbo].[GL_Vouchers].Posted,
	  CONVERT(varchar(100), [dbo].[GL_Vouchers].Posted) as PostedOrder,
	  [dbo].[GL_Vouchers].VoucherTypeID,
	  [dbo].[GL_VoucherType].Code as VoucherTypeCode,
	  [dbo].[GL_VoucherType].Name as TypeName,
	  [dbo].[GL_VoucherType].Name as VoucherTypeName,
	  ( select 
	   CASE WHEN SUM(Debit) - SUM (Credit) != 0 THEN 
	  CASE WHEN SUM(Debit) - SUM (Credit) > 0 THEN CONVERT(varchar(100),CONVERT(decimal(18,3),SUM(Debit) - SUM (Credit)))
	  ELSE CONVERT(varchar(100),CONVERT(decimal(18,3),SUM(Credit) - SUM (Debit)))END
	  ELSE '0' End
	  from [dbo].[GL_VoucherDetails] 
	 where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID] 
	 AND (SetupAccountType != 1  or SetupAccountType is null)
	 --AND SUM(Debit) != SUM(Credit)
	 ) 
	 	 as Total ,	  
		  ( select 
	   CASE WHEN SUM(Debit) - SUM (Credit) != 0 THEN 
	  CASE WHEN SUM(Debit) - SUM (Credit) > 0 THEN CONVERT(decimal(18,3),SUM(Debit) - SUM (Credit))
	  ELSE CONVERT(decimal(18,3),SUM(Credit) - SUM (Debit))END
	  ELSE 0 End
	  from [dbo].[GL_VoucherDetails] 
	 where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID] 
	 AND (SetupAccountType != 1  or SetupAccountType is null)
	 --AND SUM(Debit) != SUM(Credit)
	 )  as TotalValue


	  FROM [dbo].[GL_Vouchers]
	  LEFT JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[GL_Vouchers].[BranchID]

   Where 
	 ([dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID ) AND
	 ((Cast([dbo].[GL_Vouchers].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_VoucherType].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate , 103) like '%'+@SearchValue+'%' ) OR  
	 (@SearchValue IS NULL) OR (@SearchValue  = ''))
	  ) as Vouchers
	  Where TotalValue != 0 and Total != 0
	  ORDER BY
        case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Code' then Code
        end ASC
,       case
        when @sortOrder <> 'ASC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then convert(date, VouhcerDates)
        end ASC
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Total' then TotalValue
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end ASC    
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Code' then Code
        end DESC
,       case
        when @sortOrder <> 'DESC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then convert(date, VouhcerDates)
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Total' then TotalValue
        end DESC    
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end DESC,
		Code DESC

	  OFFSET     @Skip ROWS       
	  FETCH NEXT @Take ROWS ONLY; 
else
    SELECT  * from (
   SELECT Distinct 
      [dbo].[GL_Vouchers].[ID],
      [dbo].[GL_Vouchers].[SubsidaryID],
	  [dbo].[mstr_Branch].[Name_AR] as BranchName ,
      CAST([dbo].[GL_Vouchers].Code AS BIGINT) as Code,
	  [dbo].[GL_Vouchers].Memo ,
	  CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate, 103) as VouhcerDate,
	  [dbo].[GL_Vouchers].VouhcerDate as VouhcerDates,
	  [dbo].[GL_Vouchers].Posted,
	  CONVERT(varchar(100), [dbo].[GL_Vouchers].Posted) as PostedOrder,
	  [dbo].[GL_Vouchers].VoucherTypeID,
	  [dbo].[GL_VoucherType].Code as VoucherTypeCode,
	  [dbo].[GL_VoucherType].Name_AR as TypeName,
	  [dbo].[GL_VoucherType].Name as VoucherTypeName,
	  ( select 
	   CASE WHEN SUM(Debit) - SUM (Credit) != 0 THEN 
	  CASE WHEN SUM(Debit) - SUM (Credit) > 0 THEN CONVERT(varchar(100),CONVERT(decimal(18,3),SUM(Debit) - SUM (Credit)))
	  ELSE CONVERT(varchar(100),CONVERT(decimal(18,3),SUM(Credit) - SUM (Debit)))END
	  ELSE '0' End
	  from [dbo].[GL_VoucherDetails] 
	 where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID] 
	 AND (SetupAccountType != 1  or SetupAccountType is null)
	 --AND SUM(Debit) != SUM(Credit)
	 ) 
	 	 as Total
		  ,	  
		  ( select 
	   CASE WHEN SUM(Debit) - SUM (Credit) != 0 THEN 
	  CASE WHEN SUM(Debit) - SUM (Credit) > 0 THEN CONVERT(decimal(18,3),SUM(Debit) - SUM (Credit))
	  ELSE CONVERT(decimal(18,3),SUM(Credit) - SUM (Debit))END
	  ELSE 0 End
	  from [dbo].[GL_VoucherDetails] 
	 where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID] 
	 AND (SetupAccountType != 1  or SetupAccountType is null)
	 --AND SUM(Debit) != SUM(Credit)
	 )  as TotalValue


	  FROM [dbo].[GL_Vouchers]
	  LEFT JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[GL_Vouchers].[BranchID]

   Where 
	 ([dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID ) AND
	 ((Cast([dbo].[GL_Vouchers].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_VoucherType].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate , 103) like '%'+@SearchValue+'%' ) OR  
	 (@SearchValue IS NULL) OR (@SearchValue  = ''))
	  ) as Vouchers
	  Where TotalValue != 0 and Total != 0
	  ORDER BY
        case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Code' then Code
        end ASC
,       case
        when @sortOrder <> 'ASC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then convert(date, VouhcerDates)
        end ASC
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Total' then TotalValue
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end ASC    
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Code' then Code
        end DESC
,       case
        when @sortOrder <> 'DESC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then convert(date, VouhcerDates)
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Total' then TotalValue
        end DESC  
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end DESC ,
		Code DESC  

	  OFFSET     @Skip ROWS       
	  FETCH NEXT @Take ROWS ONLY; 
GO
/****** Object:  StoredProcedure [dbo].[GetUserRolePermission]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [dbo].[GetUserRolePermission] --5
(@UserID int)
AS
SELECT     Security_lkp_Permissions.*
FROM       Sec_Users INNER JOIN
           Security_UserRoles ON Sec_Users.UserID = Security_UserRoles.UserID INNER JOIN
           Security_Roles ON Security_UserRoles.RoleID = Security_Roles.RoleID AND Security_UserRoles.RoleID = Security_Roles.RoleID INNER JOIN
           Sec_RolePermissions ON Security_Roles.RoleID = Sec_RolePermissions.RoleID INNER JOIN
           Security_lkp_Permissions ON Sec_RolePermissions.PermissionID = Security_lkp_Permissions.PermissionID     
            
Where      Sec_Users.UserID = @UserID And Security_Roles.IsActive = 1

GO
/****** Object:  StoredProcedure [dbo].[GetVendorPaymentVoucherList]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetVendorPaymentVoucherList]

@SubsidiaryID int ,
@VoucherTypeID int ,
@OtherVoucher bit ,
@Language nvarchar(50),
@Skip int = 0,
@Take int = 200,
@SearchValue NVARCHAR(150),
@sortOrder   NVARCHAR(500),
@sortColumn  NVARCHAR(500),
@OpenListForFirstTime bit

AS
 if(@Language = 'en-US')
  if(@OpenListForFirstTime = 1)
  if @OtherVoucher = 1 
  SELECT  * from (
   SELECT Distinct 
      [dbo].[GL_Vouchers].[ID],
      [dbo].[GL_Vouchers].[SubsidaryID],
	  [dbo].[mstr_Branch].[Name]  as BranchName ,
      CAST([dbo].[GL_Vouchers].Code AS BIGINT) as Code,
	  [dbo].[GL_Vouchers].Memo ,
	  CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate, 103) as VouhcerDate,
	  [dbo].[GL_Vouchers].VouhcerDate as VouhcerDates,
	  ''as AccountName ,--[dbo].[GL_Accounts].[Name] ELSE [dbo].[GL_Accounts].[Name_AR] END) as AccountName ,
	  GL_Accounts.[AccountID] as [AccountID] ,	  
	  GL_Accounts.[Name] as CustomerName ,
	  GL_Accounts.VendorCode as CustomerCode ,
	  Security_Users.[Name] as CollectorName,
	  [dbo].[GL_Vouchers].Posted,
	  CONVERT(varchar(100), [dbo].[GL_Vouchers].Posted) as PostedOrder,
	  [dbo].[GL_Vouchers].VoucherTypeID,
	  [dbo].[GL_VoucherType].Code as VoucherTypeCode,
	  [dbo].[GL_VoucherType].Name as VoucherTypeName,
	  'Journal Voucher' as ReportName ,
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Credit))) from [dbo].[GL_VoucherDetails] 
	    where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID] AND [dbo].[GL_VoucherDetails].SetupAccountType IS NULL  ) 
	 	 as Total
		,( select CONVERT(decimal(18,3), SUM(Debit)) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as TotalValue


	  FROM [dbo].[GL_Vouchers]
	  LEFT JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  LEFT JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  --LEFT JOIN  [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[GL_VoucherDetails].AccountNoID
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[GL_Vouchers].[BranchID]
	  LEFT JOIN Security_Users on GL_Vouchers.CollecterId = Security_Users.Id
	  Join GL_Accounts on GL_Accounts.AccountID = GL_VoucherDetails.AccountNoID AND
	   Debit > 0 and SetupAccountType IS NULL 


   Where 
	 ([dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID ) AND
	 ([dbo].[GL_VoucherDetails].Debit > 0 OR [dbo].[GL_VoucherDetails] .ID is null) AND
	 ([dbo].[GL_Vouchers].VoucherTypeID = @VoucherTypeID OR [dbo].[GL_VoucherType].VoucherTypeSerialId = @VoucherTypeID ) AND
	 ((Cast([dbo].[GL_Vouchers].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Vouchers].[Memo]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
	 (Cast([dbo].[mstr_Branch].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Accounts].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Accounts].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[Security_Users].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate , 103) like '%'+@SearchValue+'%' ) OR  
	 (@SearchValue IS NULL) OR (@SearchValue  = ''))
	  ) as Vouchers
	  ORDER BY BranchName ,
        case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Code' then Code
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Memo' then Memo
        end ASC
,       case
        when @sortOrder <> 'ASC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end ASC
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'TotalValue' then Total
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end ASC    
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end ASC 
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CustomerName' then CustomerName
        end ASC 
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'CustomerCode' then CustomerCode
        end ASC 
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CollectorName' then CollectorName
        end ASC 
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CollectorName' then CollectorName
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'CustomerCode' then CustomerCode
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CustomerName' then CustomerName
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Code' then Code
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Memo' then Memo
        end DESC
,       case
        when @sortOrder <> 'DESC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'TotalValue' then Total
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end DESC     
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end DESC 
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end DESC    

	  OFFSET     @Skip ROWS       
	  FETCH NEXT @Take ROWS ONLY; 

else
SELECT  * from (
SELECT Distinct 
      [dbo].[GL_Vouchers].[ID],
      [dbo].[GL_Vouchers].[SubsidaryID],
	  [dbo].[mstr_Branch].[Name]  as BranchName ,
      CAST([dbo].[GL_Vouchers].Code AS BIGINT) as Code,
	  [dbo].[GL_Vouchers].Memo ,
	  CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate, 103) as VouhcerDate,
	  [dbo].[GL_Vouchers].VouhcerDate as VouhcerDates ,
	  '' as AccountName ,--[dbo].[GL_Accounts].[Name] ELSE [dbo].[GL_Accounts].[Name_AR] END) as AccountName ,	 
	  	  GL_Accounts.[AccountID] as [AccountID] ,	  

	  GL_Accounts.[Name]  as CustomerName ,
	  GL_Accounts.VendorCode as CustomerCode ,
	  Security_Users.[Name] as CollectorName,
	  [dbo].[GL_Vouchers].Posted,
	  CONVERT(varchar(100), [dbo].[GL_Vouchers].Posted) as PostedOrder,
	  [dbo].[GL_Vouchers].VoucherTypeID,
	  [dbo].[GL_VoucherType].Code as VoucherTypeCode,
	  [dbo].[GL_VoucherType].Name as VoucherTypeName,
	  'Journal Voucher' as ReportName ,
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Credit))) from [dbo].[GL_VoucherDetails] 
	    where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID] AND [dbo].[GL_VoucherDetails].SetupAccountType IS NULL  ) 
	 	 as Total
		 		,( select CONVERT(decimal(18,3), SUM(Debit)) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as TotalValue

	  FROM [dbo].[GL_Vouchers]
	  LEFT JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  LEFT JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  --LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[GL_VoucherDetails].AccountNoID
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[GL_Vouchers].[BranchID]
	  LEFT JOIN Security_Users on GL_Vouchers.CollecterId = Security_Users.Id
	  Join GL_Accounts on GL_Accounts.AccountID = GL_VoucherDetails.AccountNoID AND
	   Debit > 0 and SetupAccountType IS NULL  
   Where 
	 ([dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID ) AND
	 ([dbo].[GL_VoucherDetails].Debit > 0 OR [dbo].[GL_VoucherDetails] .ID is null) AND
	 ([dbo].[GL_Vouchers].VoucherTypeID = @VoucherTypeID ) AND
	 ((Cast([dbo].[GL_Vouchers].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Vouchers].[Memo]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
	 (Cast([dbo].[mstr_Branch].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Accounts].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Accounts].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[Security_Users].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate , 103) like '%'+@SearchValue+'%' ) OR  
	 (@SearchValue IS NULL) OR (@SearchValue  = ''))
	  ) as Vouchers
	  ORDER BY  BranchName ,
        case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Code' then Code
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Memo' then Memo
        end ASC
,       case
        when @sortOrder <> 'ASC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end ASC
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'TotalValue' then Total
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end ASC    
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end ASC 
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CustomerName' then CustomerName
        end ASC 
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'CustomerCode' then CustomerCode
        end ASC 
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CollectorName' then CollectorName
        end ASC 
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CollectorName' then CollectorName
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'CustomerCode' then CustomerCode
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CustomerName' then CustomerName
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Code' then Code
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Memo' then Memo
        end DESC
,       case
        when @sortOrder <> 'DESC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'TotalValue' then Total
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end DESC  
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end DESC    
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end DESC 

	  OFFSET     @Skip ROWS       
	  FETCH NEXT @Take ROWS ONLY; 
  else
    if @OtherVoucher = 1 
  SELECT  * from (
   SELECT Distinct 
      [dbo].[GL_Vouchers].[ID],
      [dbo].[GL_Vouchers].[SubsidaryID],
	  [dbo].[mstr_Branch].[Name]  as BranchName ,
      CAST([dbo].[GL_Vouchers].Code AS BIGINT) as Code,
	  [dbo].[GL_Vouchers].Memo ,
	  CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate, 103) as VouhcerDate,
	  [dbo].[GL_Vouchers].VouhcerDate as VouhcerDates,
	  ''as AccountName ,--[dbo].[GL_Accounts].[Name] ELSE [dbo].[GL_Accounts].[Name_AR] END) as AccountName ,
	  	  GL_Accounts.[AccountID] as [AccountID] ,	  

	  GL_Accounts.[Name]  as CustomerName ,
	  GL_Accounts.VendorCode as CustomerCode ,
	  Security_Users.[Name] as CollectorName,
	  [dbo].[GL_Vouchers].Posted,
	  CONVERT(varchar(100), [dbo].[GL_Vouchers].Posted) as PostedOrder,
	  [dbo].[GL_Vouchers].VoucherTypeID,
	  [dbo].[GL_VoucherType].Code as VoucherTypeCode,
	  [dbo].[GL_VoucherType].Name as VoucherTypeName,
	  'Journal Voucher' as ReportName ,
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Credit))) from [dbo].[GL_VoucherDetails] 
	    where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID] AND [dbo].[GL_VoucherDetails].SetupAccountType IS NULL  ) 
	 	 as Total
		 		,( select CONVERT(decimal(18,3), SUM(Debit)) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as TotalValue


	  FROM [dbo].[GL_Vouchers]
	  LEFT JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  LEFT JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  --LEFT JOIN  [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[GL_VoucherDetails].AccountNoID
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[GL_Vouchers].[BranchID]
	  LEFT JOIN Security_Users on GL_Vouchers.CollecterId = Security_Users.Id
	  Join GL_Accounts on GL_Accounts.AccountID = GL_VoucherDetails.AccountNoID AND
	   Debit > 0 and SetupAccountType IS NULL 

   Where 
	 ([dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID ) AND
	 ([dbo].[GL_VoucherDetails].Debit > 0 OR [dbo].[GL_VoucherDetails] .ID is null) AND
	 ([dbo].[GL_Vouchers].VoucherTypeID = @VoucherTypeID OR [dbo].[GL_VoucherType].VoucherTypeSerialId = @VoucherTypeID ) AND
	 ((Cast([dbo].[GL_Vouchers].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Vouchers].[Memo]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
	 (Cast([dbo].[mstr_Branch].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Accounts].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Accounts].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[Security_Users].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate , 103) like '%'+@SearchValue+'%' ) OR  
	 (@SearchValue IS NULL) OR (@SearchValue  = ''))
	  ) as Vouchers
	  ORDER BY 
        case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Code' then Code
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Memo' then Memo
        end ASC
,       case
        when @sortOrder <> 'ASC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end ASC
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'TotalValue' then Total
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end ASC    
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end ASC 
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CustomerName' then CustomerName
        end ASC 
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'CustomerCode' then CustomerCode
        end ASC 
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CollectorName' then CollectorName
        end ASC 
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CollectorName' then CollectorName
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'CustomerCode' then CustomerCode
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CustomerName' then CustomerName
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Code' then Code
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Memo' then Memo
        end DESC
,       case
        when @sortOrder <> 'DESC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'TotalValue' then Total
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end DESC     
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end DESC 
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end DESC    

	  OFFSET     @Skip ROWS       
	  FETCH NEXT @Take ROWS ONLY; 

else
SELECT  * from (
SELECT Distinct 
      [dbo].[GL_Vouchers].[ID],
      [dbo].[GL_Vouchers].[SubsidaryID],
	  [dbo].[mstr_Branch].[Name]  as BranchName ,
      CAST([dbo].[GL_Vouchers].Code AS BIGINT) as Code,
	  [dbo].[GL_Vouchers].Memo ,
	  CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate, 103) as VouhcerDate,
	  [dbo].[GL_Vouchers].VouhcerDate as VouhcerDates ,
	  '' as AccountName ,--[dbo].[GL_Accounts].[Name] ELSE [dbo].[GL_Accounts].[Name_AR] END) as AccountName ,
	  	  GL_Accounts.[AccountID] as [AccountID] ,	  

	  GL_Accounts.[Name]  as CustomerName ,
	  GL_Accounts.VendorCode as CustomerCode ,
	  Security_Users.[Name] as CollectorName,
	  [dbo].[GL_Vouchers].Posted,
	  CONVERT(varchar(100), [dbo].[GL_Vouchers].Posted) as PostedOrder,
	  [dbo].[GL_Vouchers].VoucherTypeID,
	  [dbo].[GL_VoucherType].Code as VoucherTypeCode,
	  [dbo].[GL_VoucherType].Name as VoucherTypeName,
	  'Journal Voucher' as ReportName ,
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Credit))) from [dbo].[GL_VoucherDetails] 
	    where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID] AND [dbo].[GL_VoucherDetails].SetupAccountType IS NULL  ) 
	 	 as Total
		 		,( select CONVERT(decimal(18,3), SUM(Debit)) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as TotalValue


	  FROM [dbo].[GL_Vouchers]
	  LEFT JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  LEFT JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  --LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[GL_VoucherDetails].AccountNoID
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[GL_Vouchers].[BranchID]
	  LEFT JOIN Security_Users on GL_Vouchers.CollecterId = Security_Users.Id
	  Join GL_Accounts on GL_Accounts.AccountID = GL_VoucherDetails.AccountNoID AND
	   Debit > 0 and SetupAccountType IS NULL 

   Where 
	 ([dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID ) AND
	 ([dbo].[GL_VoucherDetails].Debit > 0 OR [dbo].[GL_VoucherDetails] .ID is null) AND
	 ([dbo].[GL_Vouchers].VoucherTypeID = @VoucherTypeID ) AND
	 ((Cast([dbo].[GL_Vouchers].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Vouchers].[Memo]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
	 (Cast([dbo].[mstr_Branch].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Accounts].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Accounts].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[Security_Users].[Name]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate , 103) like '%'+@SearchValue+'%' ) OR  
	 (@SearchValue IS NULL) OR (@SearchValue  = ''))
	  ) as Vouchers
	  ORDER BY
        case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Code' then Code
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Memo' then Memo
        end ASC
,       case
        when @sortOrder <> 'ASC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end ASC
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'TotalValue' then Total
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end ASC    
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CustomerName' then CustomerName
        end ASC 
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'CustomerCode' then CustomerCode
        end ASC 
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CollectorName' then CollectorName
        end ASC 
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CollectorName' then CollectorName
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'CustomerCode' then CustomerCode
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CustomerName' then CustomerName
        end DESC 
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Code' then Code
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Memo' then Memo
        end DESC
,       case
        when @sortOrder <> 'DESC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'TotalValue' then Total
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end DESC  
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end DESC    
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end DESC 

	  OFFSET     @Skip ROWS       
	  FETCH NEXT @Take ROWS ONLY; 
 else
   if(@OpenListForFirstTime = 1)
  if @OtherVoucher = 1 
  SELECT  * from (
   SELECT Distinct 
      [dbo].[GL_Vouchers].[ID],
      [dbo].[GL_Vouchers].[SubsidaryID],
	  [dbo].[mstr_Branch].[Name_AR]  as BranchName ,
      CAST([dbo].[GL_Vouchers].Code AS BIGINT) as Code,
	  [dbo].[GL_Vouchers].Memo ,
	  CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate, 103) as VouhcerDate,
	  [dbo].[GL_Vouchers].VouhcerDate as VouhcerDates,
	  ''as AccountName ,--[dbo].[GL_Accounts].[Name] ELSE [dbo].[GL_Accounts].[Name_AR] END) as AccountName ,
	  	  GL_Accounts.[AccountID] as [AccountID] ,	  
	  
	  GL_Accounts.[Name_AR]  as CustomerName ,
	  GL_Accounts.VendorCode as CustomerCode ,
	  Security_Users.[Name_AR] as CollectorName,
	  [dbo].[GL_Vouchers].Posted,
	  CONVERT(varchar(100), [dbo].[GL_Vouchers].Posted) as PostedOrder,
	  [dbo].[GL_Vouchers].VoucherTypeID,
	  [dbo].[GL_VoucherType].Code as VoucherTypeCode,
	  [dbo].[GL_VoucherType].Name as VoucherTypeName,
	  'Journal Voucher_Ar'  as ReportName ,
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Credit))) from [dbo].[GL_VoucherDetails] 
	    where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID] AND [dbo].[GL_VoucherDetails].SetupAccountType IS NULL  ) 
	 	 as Total
		 		,( select CONVERT(decimal(18,3), SUM(Debit)) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as TotalValue


	  FROM [dbo].[GL_Vouchers]
	  LEFT JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  LEFT JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  --LEFT JOIN  [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[GL_VoucherDetails].AccountNoID
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[GL_Vouchers].[BranchID]
	  LEFT JOIN Security_Users on GL_Vouchers.CollecterId = Security_Users.Id
	  Join GL_Accounts on GL_Accounts.AccountID = GL_VoucherDetails.AccountNoID AND
	   Debit > 0 and SetupAccountType IS NULL 


   Where 
	 ([dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID ) AND
	 ([dbo].[GL_VoucherDetails].Debit > 0 OR [dbo].[GL_VoucherDetails] .ID is null) AND
	 ([dbo].[GL_Vouchers].VoucherTypeID = @VoucherTypeID OR [dbo].[GL_VoucherType].VoucherTypeSerialId = @VoucherTypeID ) AND
	 ((Cast([dbo].[GL_Vouchers].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Vouchers].[Memo]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[mstr_Branch].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Accounts].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Accounts].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[Security_Users].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate , 103) like '%'+@SearchValue+'%' ) OR  
	 (@SearchValue IS NULL) OR (@SearchValue  = ''))
	  ) as Vouchers
	  ORDER BY BranchName ,
        case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Code' then Code
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Memo' then Memo
        end ASC
,       case
        when @sortOrder <> 'ASC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end ASC
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'TotalValue' then Total
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end ASC    
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end ASC 
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CustomerName' then CustomerName
        end ASC 
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'CustomerCode' then CustomerCode
        end ASC 
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CollectorName' then CollectorName
        end ASC 
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CollectorName' then CollectorName
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'CustomerCode' then CustomerCode
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CustomerName' then CustomerName
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Code' then Code
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Memo' then Memo
        end DESC
,       case
        when @sortOrder <> 'DESC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'TotalValue' then Total
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end DESC     
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end DESC 
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end DESC    

	  OFFSET     @Skip ROWS       
	  FETCH NEXT @Take ROWS ONLY; 

else
SELECT  * from (
SELECT Distinct 
      [dbo].[GL_Vouchers].[ID],
      [dbo].[GL_Vouchers].[SubsidaryID],
	  [dbo].[mstr_Branch].[Name_AR] as BranchName ,
      CAST([dbo].[GL_Vouchers].Code AS BIGINT) as Code,
	  [dbo].[GL_Vouchers].Memo ,
	  CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate, 103) as VouhcerDate,
	  [dbo].[GL_Vouchers].VouhcerDate as VouhcerDates ,
	  '' as AccountName ,--[dbo].[GL_Accounts].[Name] ELSE [dbo].[GL_Accounts].[Name_AR] END) as AccountName ,	
	  	  GL_Accounts.[AccountID] as [AccountID] ,	  
 
	  GL_Accounts.[Name_AR]  as CustomerName ,
	  GL_Accounts.VendorCode as CustomerCode ,
	  Security_Users.[Name_AR] as CollectorName,
	  [dbo].[GL_Vouchers].Posted,
	  CONVERT(varchar(100), [dbo].[GL_Vouchers].Posted) as PostedOrder,
	  [dbo].[GL_Vouchers].VoucherTypeID,
	  [dbo].[GL_VoucherType].Code as VoucherTypeCode,
	  [dbo].[GL_VoucherType].Name as VoucherTypeName,
	  'Journal Voucher_Ar'  as ReportName ,
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Credit))) from [dbo].[GL_VoucherDetails] 
	    where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID] AND [dbo].[GL_VoucherDetails].SetupAccountType IS NULL  ) 
	 	 as Total
		 		,( select CONVERT(decimal(18,3), SUM(Debit)) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as TotalValue


	  FROM [dbo].[GL_Vouchers]
	  LEFT JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  LEFT JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  --LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[GL_VoucherDetails].AccountNoID
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[GL_Vouchers].[BranchID]
	  LEFT JOIN Security_Users on GL_Vouchers.CollecterId = Security_Users.Id
	  Join GL_Accounts on GL_Accounts.AccountID = GL_VoucherDetails.AccountNoID AND
	   Debit > 0 and SetupAccountType IS NULL  
   Where 
	 ([dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID ) AND
	 ([dbo].[GL_VoucherDetails].Debit > 0 OR [dbo].[GL_VoucherDetails] .ID is null) AND
	 ([dbo].[GL_Vouchers].VoucherTypeID = @VoucherTypeID ) AND
	 ((Cast([dbo].[GL_Vouchers].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Vouchers].[Memo]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
	 (Cast([dbo].[mstr_Branch].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Accounts].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Accounts].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[Security_Users].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate , 103) like '%'+@SearchValue+'%' ) OR  
	 (@SearchValue IS NULL) OR (@SearchValue  = ''))
	  ) as Vouchers
	  ORDER BY  BranchName ,
        case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Code' then Code
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Memo' then Memo
        end ASC
,       case
        when @sortOrder <> 'ASC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end ASC
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'TotalValue' then Total
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end ASC    
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end ASC 
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CustomerName' then CustomerName
        end ASC 
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'CustomerCode' then CustomerCode
        end ASC 
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CollectorName' then CollectorName
        end ASC 
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CollectorName' then CollectorName
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'CustomerCode' then CustomerCode
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CustomerName' then CustomerName
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Code' then Code
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Memo' then Memo
        end DESC
,       case
        when @sortOrder <> 'DESC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'TotalValue' then Total
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end DESC  
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end DESC    
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end DESC 

	  OFFSET     @Skip ROWS       
	  FETCH NEXT @Take ROWS ONLY; 
  else
    if @OtherVoucher = 1 
  SELECT  * from (
   SELECT Distinct 
      [dbo].[GL_Vouchers].[ID],
      [dbo].[GL_Vouchers].[SubsidaryID],
	  [dbo].[mstr_Branch].[Name_AR]  as BranchName ,
      CAST([dbo].[GL_Vouchers].Code AS BIGINT) as Code,
	  [dbo].[GL_Vouchers].Memo ,
	  CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate, 103) as VouhcerDate,
	  [dbo].[GL_Vouchers].VouhcerDate as VouhcerDates,
	  ''as AccountName ,--[dbo].[GL_Accounts].[Name] ELSE [dbo].[GL_Accounts].[Name_AR] END) as AccountName ,
	  	  GL_Accounts.[AccountID] as [AccountID] ,	  

	  GL_Accounts.[Name_AR] as CustomerName ,
	  GL_Accounts.VendorCode as CustomerCode ,
	  Security_Users.[Name_AR] as CollectorName,
	  [dbo].[GL_Vouchers].Posted,
	  CONVERT(varchar(100), [dbo].[GL_Vouchers].Posted) as PostedOrder,
	  [dbo].[GL_Vouchers].VoucherTypeID,
	  [dbo].[GL_VoucherType].Code as VoucherTypeCode,
	  [dbo].[GL_VoucherType].Name as VoucherTypeName,
	  'Journal Voucher_Ar'  as ReportName ,
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Credit))) from [dbo].[GL_VoucherDetails] 
	    where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID] AND [dbo].[GL_VoucherDetails].SetupAccountType IS NULL  ) 
	 	 as Total
		 		,( select CONVERT(decimal(18,3), SUM(Debit)) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as TotalValue


	  FROM [dbo].[GL_Vouchers]
	  LEFT JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  LEFT JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  --LEFT JOIN  [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[GL_VoucherDetails].AccountNoID
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[GL_Vouchers].[BranchID]
	  LEFT JOIN Security_Users on GL_Vouchers.CollecterId = Security_Users.Id
	  Join GL_Accounts on GL_Accounts.AccountID = GL_VoucherDetails.AccountNoID AND
	   Debit > 0 and SetupAccountType IS NULL 

   Where 
	 ([dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID ) AND
	 ([dbo].[GL_VoucherDetails].Debit > 0 OR [dbo].[GL_VoucherDetails] .ID is null) AND
	 ([dbo].[GL_Vouchers].VoucherTypeID = @VoucherTypeID OR [dbo].[GL_VoucherType].VoucherTypeSerialId = @VoucherTypeID ) AND
	 ((Cast([dbo].[GL_Vouchers].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Vouchers].[Memo]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
	 (Cast([dbo].[mstr_Branch].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Accounts].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Accounts].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[Security_Users].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate , 103) like '%'+@SearchValue+'%' ) OR  
	 (@SearchValue IS NULL) OR (@SearchValue  = ''))
	  ) as Vouchers
	  ORDER BY 
        case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Code' then Code
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Memo' then Memo
        end ASC
,       case
        when @sortOrder <> 'ASC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end ASC
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'TotalValue' then Total
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end ASC    
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end ASC 
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CustomerName' then CustomerName
        end ASC 
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'CustomerCode' then CustomerCode
        end ASC 
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CollectorName' then CollectorName
        end ASC 
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CollectorName' then CollectorName
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'CustomerCode' then CustomerCode
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CustomerName' then CustomerName
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Code' then Code
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Memo' then Memo
        end DESC
,       case
        when @sortOrder <> 'DESC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'TotalValue' then Total
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end DESC     
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end DESC 
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end DESC    

	  OFFSET     @Skip ROWS       
	  FETCH NEXT @Take ROWS ONLY; 

else
SELECT  * from (
SELECT Distinct 
      [dbo].[GL_Vouchers].[ID],
      [dbo].[GL_Vouchers].[SubsidaryID],
	  [dbo].[mstr_Branch].[Name_AR] as BranchName ,
      CAST([dbo].[GL_Vouchers].Code AS BIGINT) as Code,
	  [dbo].[GL_Vouchers].Memo ,
	  CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate, 103) as VouhcerDate,
	  [dbo].[GL_Vouchers].VouhcerDate as VouhcerDates ,
	  '' as AccountName ,--[dbo].[GL_Accounts].[Name] ELSE [dbo].[GL_Accounts].[Name_AR] END) as AccountName ,
	  	  GL_Accounts.[AccountID] as [AccountID] ,	  

	  GL_Accounts.[Name_AR]  as CustomerName ,
	  GL_Accounts.VendorCode as CustomerCode ,
	  Security_Users.[Name_AR] as CollectorName,
	  [dbo].[GL_Vouchers].Posted,
	  CONVERT(varchar(100), [dbo].[GL_Vouchers].Posted) as PostedOrder,
	  [dbo].[GL_Vouchers].VoucherTypeID,
	  [dbo].[GL_VoucherType].Code as VoucherTypeCode,
	  [dbo].[GL_VoucherType].Name as VoucherTypeName,
	  'Journal Voucher_Ar'  as ReportName ,
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Credit))) from [dbo].[GL_VoucherDetails] 
	    where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID] AND [dbo].[GL_VoucherDetails].SetupAccountType IS NULL  ) 
	 	 as Total
		 		,( select CONVERT(decimal(18,3), SUM(Debit)) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as TotalValue

	  FROM [dbo].[GL_Vouchers]
	  LEFT JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  LEFT JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  --LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[GL_VoucherDetails].AccountNoID
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[GL_Vouchers].[BranchID]
	  LEFT JOIN Security_Users on GL_Vouchers.CollecterId = Security_Users.Id
	  Join GL_Accounts on GL_Accounts.AccountID = GL_VoucherDetails.AccountNoID AND
	   Debit > 0 and SetupAccountType IS NULL 

   Where 
	 ([dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID ) AND
	 ([dbo].[GL_VoucherDetails].Debit > 0 OR [dbo].[GL_VoucherDetails] .ID is null) AND
	 ([dbo].[GL_Vouchers].VoucherTypeID = @VoucherTypeID ) AND
	 ((Cast([dbo].[GL_Vouchers].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Vouchers].[Memo]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR   
	 (Cast([dbo].[mstr_Branch].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Accounts].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Accounts].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[Security_Users].[Name_AR]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate , 103) like '%'+@SearchValue+'%' ) OR  
	 (@SearchValue IS NULL) OR (@SearchValue  = ''))
	  ) as Vouchers
	  ORDER BY
        case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Code' then Code
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Memo' then Memo
        end ASC
,       case
        when @sortOrder <> 'ASC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end ASC
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'TotalValue' then Total
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end ASC    
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CustomerName' then CustomerName
        end ASC 
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'CustomerCode' then CustomerCode
        end ASC 
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'CollectorName' then CollectorName
        end ASC 
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CollectorName' then CollectorName
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'CustomerCode' then CustomerCode
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'CustomerName' then CustomerName
        end DESC 
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Code' then Code
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Memo' then Memo
        end DESC
,       case
        when @sortOrder <> 'DESC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'TotalValue' then Total
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end DESC  
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end DESC    
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end DESC 

	  OFFSET     @Skip ROWS       
	  FETCH NEXT @Take ROWS ONLY; 
GO
/****** Object:  StoredProcedure [dbo].[GetVoucherList]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetVoucherList]

@SubsidiaryID int ,
@VoucherTypeID int ,
@OtherVoucher bit ,
@Language nvarchar(50),
@Skip int = 0,
@Take int = 200,
@SearchValue NVARCHAR(150),
@sortOrder   NVARCHAR(500),
@sortColumn  NVARCHAR(500),
@OpenListForFirstTime bit,
@BranchID int  = null


AS
  declare @format int = 103
  SET @format = ( select CASE WHEN Date_format = 'MM/dd/yyyy' THEN  101 ELSE 103 END from mstr_Subsidaries WHERE ID = @SubsidiaryID )
  if(@OpenListForFirstTime = 1)
  if @OtherVoucher = 1 
  SELECT  * from (
   SELECT Distinct 
      [dbo].[GL_Vouchers].[ID],
      [dbo].[GL_Vouchers].[SubsidaryID],
	  IsNULL([dbo].[GL_Vouchers].ExpensesDistributionId,0) as ExpensesDistributionId,
	  (Case When @Language = 'en-US' THEN [dbo].[mstr_Branch].[Name] ELSE [dbo].[mstr_Branch].[Name_AR] END) as BranchName ,
      CAST(ISNULL([dbo].[GL_Vouchers].Code,0) AS BIGINT) as Code,
	  [dbo].[GL_Vouchers].Memo ,
	  CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate, @format) as VouhcerDate,
	  [dbo].[GL_Vouchers].VouhcerDate as VouhcerDates,
	  ''as AccountName ,--(Case When @Language = 'en-US' THEN [dbo].[GL_Accounts].[Name] ELSE [dbo].[GL_Accounts].[Name_AR] END) as AccountName ,
	  [dbo].[GL_Vouchers].Posted,
	  CONVERT(varchar(100), [dbo].[GL_Vouchers].Posted) as PostedOrder,
	  [dbo].[GL_Vouchers].VoucherTypeID,
	  [dbo].[GL_VoucherType].Code as VoucherTypeCode,
	  [dbo].[GL_VoucherType].Name as VoucherTypeName,
	  (Case When @Language = 'en-US' THEN 'Journal Voucher' ELSE 'Journal Voucher_Ar' END) as ReportName ,
	  --(Case When @Language = 'en-US' THEN [dbo].[mstr_Branch].[Name] ELSE [dbo].[mstr_Branch].[Name_AR] END) as BranchName ,
	  	 Case When [dbo].[GL_VoucherType].Code = 11 Then
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] 
	    where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID] AND [dbo].[GL_VoucherDetails].SetupAccountType IS NULL) 
	 	Else 
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) 
        End as Total ,	  
		  ( select CONVERT(decimal(18,3), SUM(Debit)) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as TotalValue


	  FROM [dbo].[GL_Vouchers]
	  --LEFT JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  LEFT JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  --LEFT JOIN  [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[GL_VoucherDetails].AccountNoID
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[GL_Vouchers].[BranchID]

   Where 
	 ([dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID ) AND
	 (@BranchID IS NULL OR  [dbo].[mstr_Branch].[ID] = @BranchID) AND
	 --([dbo].[GL_VoucherDetails].Credit > 0 OR [dbo].[GL_VoucherDetails] .ID is null) AND
	 ([dbo].[GL_Vouchers].VoucherTypeID = @VoucherTypeID OR [dbo].[GL_VoucherType].VoucherTypeSerialId = @VoucherTypeID ) AND
	 ((Cast([dbo].[GL_Vouchers].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Vouchers].[Memo]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate , 103) like '%'+@SearchValue+'%' ) OR  
	 (@SearchValue IS NULL) OR (@SearchValue  = ''))
	  ) as Vouchers
	  ORDER BY
        case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Code' then Code
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Memo' then Memo
        end ASC
,       case
        when @sortOrder <> 'ASC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then convert(date, VouhcerDates)
        end ASC
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Total' then TotalValue
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end ASC    
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end ASC 
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Code' then Code
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Memo' then Memo
        end DESC
,       case
        when @sortOrder <> 'DESC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then convert(date, VouhcerDates)
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Total' then TotalValue
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end DESC     
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end DESC 
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end DESC,
		code desc

	  OFFSET     @Skip ROWS       
	  FETCH NEXT @Take ROWS ONLY; 

else
SELECT  * from (
SELECT Distinct 
      [dbo].[GL_Vouchers].[ID],
      [dbo].[GL_Vouchers].[SubsidaryID],
	  IsNULL([dbo].[GL_Vouchers].ExpensesDistributionId,0) as ExpensesDistributionId,
	  (Case When @Language = 'en-US' THEN [dbo].[mstr_Branch].[Name] ELSE [dbo].[mstr_Branch].[Name_AR] END) as BranchName ,
      CAST(ISNULL([dbo].[GL_Vouchers].Code,0) AS BIGINT) as Code,
	  [dbo].[GL_Vouchers].Memo ,
	  CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate, @format) as VouhcerDate,
	  [dbo].[GL_Vouchers].VouhcerDate as VouhcerDates ,
	  '' as AccountName ,--(Case When @Language = 'en-US' THEN [dbo].[GL_Accounts].[Name] ELSE [dbo].[GL_Accounts].[Name_AR] END) as AccountName ,
	  [dbo].[GL_Vouchers].Posted,
	  CONVERT(varchar(100), [dbo].[GL_Vouchers].Posted) as PostedOrder,
	  [dbo].[GL_Vouchers].VoucherTypeID,
	  [dbo].[GL_VoucherType].Code as VoucherTypeCode,
	  [dbo].[GL_VoucherType].Name as VoucherTypeName,
	  (Case When @Language = 'en-US' THEN 'Journal Voucher' ELSE 'Journal Voucher_Ar' END) as ReportName ,
	  --(Case When @Language = 'en-US' THEN [dbo].[mstr_Branch].[Name] ELSE [dbo].[mstr_Branch].[Name_AR] END) as BranchName ,
	  	 Case When [dbo].[GL_VoucherType].Code = 11 Then
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] 
	    where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID] AND [dbo].[GL_VoucherDetails].SetupAccountType IS NULL) 
	 	Else 
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) 
        End as Total,	  
	  ( select CONVERT(decimal(18,3), SUM(Debit)) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as TotalValue

	  FROM [dbo].[GL_Vouchers]
	  --LEFT JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  LEFT JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  --LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[GL_VoucherDetails].AccountNoID
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[GL_Vouchers].[BranchID]

   Where 
	 ([dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID ) AND
	 (@BranchID IS NULL OR  [dbo].[mstr_Branch].[ID] = @BranchID) AND
	 --([dbo].[GL_VoucherDetails].Credit > 0 OR [dbo].[GL_VoucherDetails] .ID is null) AND
	 ([dbo].[GL_Vouchers].VoucherTypeID = @VoucherTypeID ) AND
	 ((Cast([dbo].[GL_Vouchers].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Vouchers].[Memo]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate , 103) like '%'+@SearchValue+'%' ) OR  
	 (@SearchValue IS NULL) OR (@SearchValue  = ''))
	  ) as Vouchers
	  ORDER BY
        case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Code' then Code
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Memo' then Memo
        end ASC
,       case
        when @sortOrder <> 'ASC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then convert(date, VouhcerDates)
        end ASC
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Total' then TotalValue
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end ASC    
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end ASC 
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Code' then Code
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Memo' then Memo
        end DESC
,       case
        when @sortOrder <> 'DESC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then convert(date, VouhcerDates)
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Total' then TotalValue
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end DESC  
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end DESC    
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end DESC,
		code desc

	  OFFSET     @Skip ROWS       
	  FETCH NEXT @Take ROWS ONLY; 
  else
    if @OtherVoucher = 1 
  SELECT  * from (
   SELECT Distinct 
      [dbo].[GL_Vouchers].[ID],
      [dbo].[GL_Vouchers].[SubsidaryID],
	  IsNULL([dbo].[GL_Vouchers].ExpensesDistributionId,0) as ExpensesDistributionId,
	  (Case When @Language = 'en-US' THEN [dbo].[mstr_Branch].[Name] ELSE [dbo].[mstr_Branch].[Name_AR] END) as BranchName ,
      CAST(ISNULL([dbo].[GL_Vouchers].Code,0) AS BIGINT) as Code,
	  [dbo].[GL_Vouchers].Memo ,
	  CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate, @format) as VouhcerDate,
	  [dbo].[GL_Vouchers].VouhcerDate as VouhcerDates,
	  ''as AccountName ,--(Case When @Language = 'en-US' THEN [dbo].[GL_Accounts].[Name] ELSE [dbo].[GL_Accounts].[Name_AR] END) as AccountName ,
	  [dbo].[GL_Vouchers].Posted,
	  CONVERT(varchar(100), [dbo].[GL_Vouchers].Posted) as PostedOrder,
	  [dbo].[GL_Vouchers].VoucherTypeID,
	  [dbo].[GL_VoucherType].Code as VoucherTypeCode,
	  [dbo].[GL_VoucherType].Name as VoucherTypeName,
	  (Case When @Language = 'en-US' THEN 'Journal Voucher' ELSE 'Journal Voucher_Ar' END) as ReportName ,
	  --(Case When @Language = 'en-US' THEN [dbo].[mstr_Branch].[Name] ELSE [dbo].[mstr_Branch].[Name_AR] END) as BranchName ,
	  	 Case When [dbo].[GL_VoucherType].Code = 11 Then
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] 
	    where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID] AND [dbo].[GL_VoucherDetails].SetupAccountType IS NULL) 
	 	Else 
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) 
        End as Total,	  
      ( select CONVERT(decimal(18,3), SUM(Debit)) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as TotalValue


	  FROM [dbo].[GL_Vouchers]
	  --LEFT JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  LEFT JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  --LEFT JOIN  [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[GL_VoucherDetails].AccountNoID
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[GL_Vouchers].[BranchID]

   Where 
	 ([dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID ) AND
	 (@BranchID IS NULL OR  [dbo].[mstr_Branch].[ID] = @BranchID) AND
	 --([dbo].[GL_VoucherDetails].Credit > 0 OR [dbo].[GL_VoucherDetails] .ID is null) AND
	 ([dbo].[GL_Vouchers].VoucherTypeID = @VoucherTypeID OR [dbo].[GL_VoucherType].VoucherTypeSerialId = @VoucherTypeID ) AND
	 ((Cast([dbo].[GL_Vouchers].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Vouchers].[Memo]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate , 103) like '%'+@SearchValue+'%' ) OR  
	 (@SearchValue IS NULL) OR (@SearchValue  = ''))
	  ) as Vouchers
	  ORDER BY
        case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Code' then Code
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Memo' then Memo
        end ASC
,       case
        when @sortOrder <> 'ASC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end ASC
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Total' then TotalValue
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end ASC    
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end ASC 
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Code' then Code
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Memo' then Memo
        end DESC
,       case
        when @sortOrder <> 'DESC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Total' then TotalValue
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end DESC     
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end DESC 
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end DESC    

	  OFFSET     @Skip ROWS       
	  FETCH NEXT @Take ROWS ONLY; 

else
SELECT  * from (
SELECT Distinct 
      [dbo].[GL_Vouchers].[ID],
      [dbo].[GL_Vouchers].[SubsidaryID],
	  IsNULL([dbo].[GL_Vouchers].ExpensesDistributionId,0) as ExpensesDistributionId,
	  (Case When @Language = 'en-US' THEN [dbo].[mstr_Branch].[Name] ELSE [dbo].[mstr_Branch].[Name_AR] END) as BranchName ,
      CAST(ISNULL([dbo].[GL_Vouchers].Code,0) AS BIGINT) as Code,
	  [dbo].[GL_Vouchers].Memo ,
	  CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate, @format) as VouhcerDate,
	  [dbo].[GL_Vouchers].VouhcerDate as VouhcerDates ,
	  '' as AccountName ,--(Case When @Language = 'en-US' THEN [dbo].[GL_Accounts].[Name] ELSE [dbo].[GL_Accounts].[Name_AR] END) as AccountName ,
	  [dbo].[GL_Vouchers].Posted,
	  CONVERT(varchar(100), [dbo].[GL_Vouchers].Posted) as PostedOrder,
	  [dbo].[GL_Vouchers].VoucherTypeID,
	  [dbo].[GL_VoucherType].Code as VoucherTypeCode,
	  [dbo].[GL_VoucherType].Name as VoucherTypeName,
	  (Case When @Language = 'en-US' THEN 'Journal Voucher' ELSE 'Journal Voucher_Ar' END) as ReportName ,
	  --(Case When @Language = 'en-US' THEN [dbo].[mstr_Branch].[Name] ELSE [dbo].[mstr_Branch].[Name_AR] END) as BranchName ,
	  	 Case When [dbo].[GL_VoucherType].Code = 11 Then
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] 
	    where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID] AND [dbo].[GL_VoucherDetails].SetupAccountType IS NULL) 
	 	Else 
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) 
        End as Total,	  
	  ( select CONVERT(decimal(18,3), SUM(Debit)) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as TotalValue

	  FROM [dbo].[GL_Vouchers]
	  --LEFT JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  LEFT JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  --LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[GL_VoucherDetails].AccountNoID
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[GL_Vouchers].[BranchID]

   Where 
	 ([dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID ) AND
	 (@BranchID IS NULL OR  [dbo].[mstr_Branch].[ID] = @BranchID) AND
	 --([dbo].[GL_VoucherDetails].Credit > 0 OR [dbo].[GL_VoucherDetails] .ID is null) AND
	 ([dbo].[GL_Vouchers].VoucherTypeID = @VoucherTypeID ) AND
	 ((Cast([dbo].[GL_Vouchers].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Vouchers].[Memo]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate , 103) like '%'+@SearchValue+'%' ) OR  
	 (@SearchValue IS NULL) OR (@SearchValue  = ''))
	  ) as Vouchers
	  ORDER BY
        case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Code' then Code
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Memo' then Memo
        end ASC
,       case
        when @sortOrder <> 'ASC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end ASC
,       case
        when @sortOrder <> 'ASC' then 0
        when @sortColumn = 'Total' then TotalValue
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end ASC
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end ASC    
,       case
        when @sortOrder <> 'ASC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end ASC 
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Code' then Code
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Memo' then Memo
        end DESC
,       case
        when @sortOrder <> 'DESC' then cast(null as date)
        when @sortColumn = 'VouhcerDate' then VouhcerDates
        end DESC
,       case
        when @sortOrder <> 'DESC' then 0
        when @sortColumn = 'Total' then TotalValue
        end DESC
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'AccountName' then AccountName
        end DESC  
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'BranchName' then BranchName
        end DESC    
,       case
        when @sortOrder <> 'DESC' then ''
        when @sortColumn = 'Posted' then PostedOrder
        end DESC 

	  OFFSET     @Skip ROWS       
	  FETCH NEXT @Take ROWS ONLY; 




GO
/****** Object:  StoredProcedure [dbo].[GetVoucherListCount]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetVoucherListCount]

@SubsidiaryID int ,
@VoucherTypeID int ,
@OtherVoucher bit ,
@SearchValue NVARCHAR(150)

AS
  

  if @OtherVoucher = 1 
  Begin 
       	SELECT  COUNT(aa.ID) as Count
	from
  (
  SELECT Distinct 
[dbo].[GL_Vouchers].[ID],
      [dbo].[GL_Vouchers].[SubsidaryID],
      [dbo].[GL_Vouchers].Code,
	  [dbo].[GL_Vouchers].Memo ,
	  CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate, 103) as VouhcerDate,
	  [dbo].[GL_Vouchers].VouhcerDate as VouhcerDates,
	  ''as AccountName ,--(Case When @Language = 'en-US' THEN [dbo].[GL_Accounts].[Name] ELSE [dbo].[GL_Accounts].[Name_AR] END) as AccountName ,
	  [dbo].[GL_Vouchers].Posted,
	  [dbo].[GL_Vouchers].VoucherTypeID,
	  [dbo].[GL_VoucherType].Code as VoucherTypeCode,
	  [dbo].[GL_VoucherType].Name as VoucherTypeName,
	  --(Case When @Language = 'en-US' THEN 'Journal Voucher' ELSE 'Journal Voucher_Ar' END) as ReportName ,
	  --(Case When @Language = 'en-US' THEN [dbo].[mstr_Branch].[Name] ELSE [dbo].[mstr_Branch].[Name_AR] END) as BranchName ,
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as Total
	 	  ,	  ( select CONVERT(decimal(18,3), SUM(Debit)) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as TotalValue


	  FROM [dbo].[GL_Vouchers]
	  LEFT JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  LEFT JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  --LEFT JOIN  [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[GL_VoucherDetails].AccountNoID
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[GL_Vouchers].[BranchID]

   Where 
	 ([dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID ) AND
	 ([dbo].[GL_VoucherDetails].Credit > 0 OR [dbo].[GL_VoucherDetails] .ID is null) AND
	 ([dbo].[GL_Vouchers].VoucherTypeID = @VoucherTypeID OR [dbo].[GL_VoucherType].VoucherTypeSerialId = @VoucherTypeID ) AND
	 ((Cast([dbo].[GL_Vouchers].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Vouchers].[Memo]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate , 103) like '%'+@SearchValue+'%' ) OR  
	 (@SearchValue IS NULL) OR (@SearchValue  = ''))

	 )aa
	 End
else
Begin
     	SELECT  COUNT(bb.ID) as Count
	from
  (
SELECT Distinct 
[dbo].[GL_Vouchers].[ID],
      [dbo].[GL_Vouchers].[SubsidaryID],
      [dbo].[GL_Vouchers].Code,
	  [dbo].[GL_Vouchers].Memo ,
	  CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate, 103) as VouhcerDate,
	  [dbo].[GL_Vouchers].VouhcerDate as VouhcerDates ,
	  '' as AccountName ,--(Case When @Language = 'en-US' THEN [dbo].[GL_Accounts].[Name] ELSE [dbo].[GL_Accounts].[Name_AR] END) as AccountName ,
	  [dbo].[GL_Vouchers].Posted,
	  [dbo].[GL_Vouchers].VoucherTypeID,
	  [dbo].[GL_VoucherType].Code as VoucherTypeCode,
	  [dbo].[GL_VoucherType].Name as VoucherTypeName,
	  --(Case When @Language = 'en-US' THEN 'Journal Voucher' ELSE 'Journal Voucher_Ar' END) as ReportName ,
	  --(Case When @Language = 'en-US' THEN [dbo].[mstr_Branch].[Name] ELSE [dbo].[mstr_Branch].[Name_AR] END) as BranchName ,
	  ( select CONVERT(varchar(100),CONVERT(decimal(18,3), SUM(Debit))) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as Total
	  	 	  ,	  ( select CONVERT(decimal(18,3), SUM(Debit)) from [dbo].[GL_VoucherDetails] where [dbo].[GL_VoucherDetails].VoucherID = [dbo].[GL_Vouchers].[ID]) as TotalValue

	  FROM [dbo].[GL_Vouchers]
	  LEFT JOIN [dbo].[GL_VoucherDetails] on [dbo].[GL_VoucherDetails].[VoucherID] = [dbo].[GL_Vouchers].[ID]
	  LEFT JOIN [dbo].[GL_VoucherType] on [dbo].[GL_VoucherType].[ID] = [dbo].[GL_Vouchers].[VoucherTypeID]
	  --LEFT JOIN [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[GL_VoucherDetails].AccountNoID
	  LEFT JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].[ID] = [dbo].[GL_Vouchers].[BranchID]

   Where 
	 ([dbo].[GL_Vouchers].[SubsidaryID] = @SubsidiaryID ) AND
	 ([dbo].[GL_VoucherDetails].Credit > 0 OR [dbo].[GL_VoucherDetails] .ID is null) AND
	 ([dbo].[GL_Vouchers].VoucherTypeID = @VoucherTypeID ) AND
	 ((Cast([dbo].[GL_Vouchers].[Code]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (Cast([dbo].[GL_Vouchers].[Memo]  as nVarchar(100)) like '%'+@SearchValue+'%' ) OR
	 (CONVERT(varchar(23), [dbo].[GL_Vouchers].VouhcerDate , 103) like '%'+@SearchValue+'%' ) OR  
	 (@SearchValue IS NULL) OR (@SearchValue  = ''))
  )bb
  End
GO
/****** Object:  StoredProcedure [dbo].[GetYearsList]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetYearsList]

@SubsidiaryID int 

AS
 Select 
ROW_NUMBER() OVER (Order by Year) AS YearId ,
Years.Year as YearName

From
(
SELECT Distinct Year 
  FROM [dbo].[GL_FinancialPeriod] 
  WHERE SubsidaryID = @SubsidiaryID) Years
GO
/****** Object:  StoredProcedure [dbo].[InsertCashDrawerHistory]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[InsertCashDrawerHistory] 
	@HistoryType NVARCHAR(50),
	@Amount DECIMAL(18,3),
	@CurrencyCode NVARCHAR(50),
	@Notes NVARCHAR(500),
	@CashDrawerId INT,
	@EmployeeId INT,
	@ReceiptId INT = NULL
AS
BEGIN
	DECLARE @CashDrawerTypeValue VARCHAR(50) = (SELECT TOP 1 ('2' + CONVERT(VARCHAR, Id)) FROM mstr_CashDrawerType WHERE Name LIKE  '%' + @HistoryType + '%')
    DECLARE @TypeId INT = CONVERT(INT, @CashDrawerTypeValue);
	DECLARE @CurrencyId INT = (SELECT TOP 1 ID from mstr_Currencies WHERE Code LIKE @CurrencyCode);
	INSERT INTO Inv_CashDrawerHistory([CashDrawerId], [IsClosed], [ReceiptId], [ClosedDateTime], 
	[CashDrawerTypeId], [Notes], [Amount], [CurrencyId], [EmployeeId], [CreationDate])
	VALUES
		(@CashDrawerId, 
		0, 
		@ReceiptId, 
		NULL, 
		@TypeId,
		@Notes, 
		@Amount, 
		@CurrencyId,
		@EmployeeId,
		GETDATE())
	 
END



GO
/****** Object:  StoredProcedure [dbo].[InsertReceiptDetailComponentItems]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[InsertReceiptDetailComponentItems]
	@ReceiptHeaderId INT
AS
BEGIN
  

	INSERT INTO Inv_Receipt_d ([Parent_ID], [Store_ID], [Item_ID], [Qty], [Price], [Unit_ID], [Conv], 
	[Final_conv], [Discount_Value], [Discount_Percent], [Total], [Transaction_move], [Item_Type], 
	[H_Discount_Percentage], [Recieved_Qty], [Avr_Cost], [Notes], [FinishedProductID], [H_Discount_Value], 
	[DepartmentID], [SalesManId], [KitchenStatus], [DetailsHTML], [CustomItemName], [IsMembership], 
	[MembershipDetailId], FinishedReceipt_dID)
	SELECT  H.ID Parent_ID,
		D.Store_ID Store_ID,
		A.ID Item_ID,
		ISNULL(C.ItemComponentQty, 1) * D.Qty Qty,
		ISNULL(C.ComponentPrice, 0) Price,
		C.ItemComponentUnitID Unit_ID,
		C.ItemComponentConv Conv,
		C.ItemComponentConv Final_conv,
		0 Discount_Value,
		0 Discount_Percent,
		ISNULL(C.ComponentPrice, 0) * ISNULL(C.ItemComponentQty, 1) * D.Qty Total,
		D.Transaction_move Transaction_move,
		NULL Item_Type,
		NULL H_Discount_Percentage,
		NULL Recieved_Qty,
		C.AverageCost Avr_Cost,
		NULL Notes,
		D.Item_ID FinishedProductID,
		NULL H_Discount_Value,
		NULL DepartmentID,
		D.SalesManId SalesManId,
		NULL KitchenStatus,
		NULL DetailsHTML,
		NULL CustomItemName,
		D.IsMembership,
		NULL MembershipDetailId,
		D.ID FinishedReceipt_dID
FROM Inv_Items A
INNER JOIN Inv_Items_Components C ON A.ID = C.ItemComponentID
INNER JOIN Inv_Receipt_d D ON C.Item_ID = D.Item_ID --AND C.ItemComponentUnitID = D.Unit_ID
INNER JOIN Inv_Receipt_h H ON D.Parent_ID = H.ID
INNER JOIN Inv_Items X ON D.Item_ID = X.ID
WHERE H.ID = @ReceiptHeaderId AND X.Item_Type = 3 AND
D.Item_ID NOT IN (SELECT Distinct ISNULL(FinishedProductID, 0) FROM Inv_Receipt_d WHERE Parent_ID = @ReceiptHeaderId and IsCustomOption is null)

	INSERT INTO Inv_Receipt_d ([Parent_ID], [Store_ID], [Item_ID], [Qty], [Price], [Unit_ID], [Conv], 
	[Final_conv], [Discount_Value], [Discount_Percent], [Total], [Transaction_move], [Item_Type], 
	[H_Discount_Percentage], [Recieved_Qty], [Avr_Cost], [Notes], [FinishedProductID], [H_Discount_Value], 
	[DepartmentID], [SalesManId], [KitchenStatus], [DetailsHTML], [CustomItemName], [IsMembership], 
	[MembershipDetailId], FinishedReceipt_dID)
	SELECT  H.ID Parent_ID,
		D.Store_ID Store_ID,
		A.ID Item_ID,
		ISNULL(C.ItemComponentQty, 1) * D.Qty Qty,
		ISNULL(C.ComponentPrice, 0) Price,
		C.ItemComponentUnitID Unit_ID,
		C.ItemComponentConv Conv,
		C.ItemComponentConv Final_conv,
		0 Discount_Value,
		0 Discount_Percent,
		ISNULL(C.ComponentPrice, 0) * ISNULL(C.ItemComponentQty, 1) * D.Qty Total,
		D.Transaction_move Transaction_move,
		NULL Item_Type,
		NULL H_Discount_Percentage,
		NULL Recieved_Qty,
		C.AverageCost Avr_Cost,
		NULL Notes,
		D.Item_ID FinishedProductID,
		NULL H_Discount_Value,
		NULL DepartmentID,
		D.SalesManId SalesManId,
		NULL KitchenStatus,
		NULL DetailsHTML,
		NULL CustomItemName,
		D.IsMembership,
		NULL MembershipDetailId,
		D.ID FinishedReceipt_dID
FROM Inv_Items A
INNER JOIN Inv_Items_Components C ON A.ID = C.ItemComponentID
INNER JOIN Inv_Receipt_d D ON C.Item_ID = D.Item_ID --AND C.ItemComponentUnitID = D.Unit_ID
INNER JOIN Inv_Receipt_h H ON D.Parent_ID = H.ID
INNER JOIN Inv_Items X ON D.Item_ID = X.ID
WHERE H.ID = @ReceiptHeaderId AND  X.Item_Type = 3 AND
D.Item_ID NOT IN (SELECT Distinct ISNULL(FinishedProductID, 0) FROM Inv_Receipt_d WHERE Parent_ID = @ReceiptHeaderId and IsCustomOption is null)


-- [Waleed]  El molok modification

		--update Inv_Receipt_d set Qty = Qty + (select Qty from Inv_Receipt_d where IsCustomOption = 1 and Parent_ID = @ReceiptHeaderId )
		--where Parent_ID = @ReceiptHeaderId and FinishedReceipt_dID is not null

		--	update Inv_Receipt_d set Total =price * Qty
		--where Parent_ID = @ReceiptHeaderId and FinishedReceipt_dID is not null

		
		SELECT ROW_NUMBER() OVER ( ORDER BY Id )  RowNumber, CustomOptionReceiptDetailParentId
		INTO #HT_tempReceeiptDetails
		from Inv_Receipt_d where Parent_ID = @ReceiptHeaderId
		and IsCustomOption = 1 AND CustomOptionReceiptDetailParentId IS NOT NULL

		Declare @count int = 0;
		select  @count = COUNT(1) from #HT_tempReceeiptDetails
		PRINT (@count)
		WHILE (@count > 0 )
		BEGIN
			DECLARE @CustomOptionReceiptDetailParentId INT
			SELECT @CustomOptionReceiptDetailParentId =  CustomOptionReceiptDetailParentId from #HT_tempReceeiptDetails where RowNumber = @count
			
			IF @CustomOptionReceiptDetailParentId IS NOT NULL
			BEGIN

				DECLARE @CustomAttrDetailId INT,@DeductionQty float,@receiptDetailsId int 
				SELECT @CustomAttrDetailId =  CustomAttributeDetailId,@DeductionQty = qty,@receiptDetailsId = ReceiptDetailId from Inv_ReceiptDetailCustomAttribute where Id = @CustomOptionReceiptDetailParentId

				IF @CustomAttrDetailId IS NOT NULL
				BEGIN

					DECLARE @DeductionItemId INT
					SELECT @DeductionItemId =  DeductionItemId from Inv_ItemCustomAttributeDetail where Id = @CustomAttrDetailId

					update Inv_Receipt_d set Qty = Qty - @DeductionQty where Parent_ID = @ReceiptHeaderId and Item_ID = @DeductionItemId and (id = @receiptDetailsId or FinishedReceipt_dID = @receiptDetailsId )
					update Inv_Receipt_d set Total =price * Qty where Parent_ID = @ReceiptHeaderId and Item_ID = @DeductionItemId and (id = @receiptDetailsId or FinishedReceipt_dID = @receiptDetailsId )

					IF( ( select Qty from Inv_Receipt_d WHERE Parent_ID = @ReceiptHeaderId and (id = @receiptDetailsId or FinishedReceipt_dID = @receiptDetailsId ) and Item_ID = @DeductionItemId ) <= 0 )
					BEGIN

						Delete from Inv_Receipt_d WHERE Parent_ID = @ReceiptHeaderId and Item_ID = @DeductionItemId and (id = @receiptDetailsId or FinishedReceipt_dID = @receiptDetailsId )

					END

				END
			END
			SET @count = @count - 1
		 END

END



GO
/****** Object:  StoredProcedure [dbo].[InsertUpdaterResource]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[InsertUpdaterResource] 
	@ResourceValue_En NVARCHAR(250),
	@ResourceValue_Ar NVARCHAR(250)
AS
BEGIN

DECLARE @ResourceName NVARCHAR(100) =  REPLACE(@ResourceValue_En, ' ', '');

IF(SELECT TOP 1 ID FROM [dbo].[mstr_Resources] WHERE [ResName] = @ResourceName AND ResCulture = 'en') IS NULL
BEGIN
	INSERT INTO [dbo].[mstr_Resources]
	   (
       [ResName],
       [ResCulture],
       [ResValue]
	   )
	  VALUES
	  (
	  @ResourceName,
	  'en',
	  @ResourceValue_En
	  );

	 
END
ELSE
	BEGIN
		UPDATE [dbo].[mstr_Resources] SET [ResValue] = @ResourceValue_En WHERE [ResName] = @ResourceName AND ResCulture = 'en';
	END
	  

IF(SELECT TOP 1 ID FROM [dbo].[mstr_Resources] WHERE [ResName] = @ResourceName AND ResCulture = 'ar') IS NULL
BEGIN
	INSERT INTO [dbo].[mstr_Resources]
	(
       [ResName],
       [ResCulture],
       [ResValue]
	   )
	  VALUES
	  (
	  @ResourceName,
	  'ar',
	  @ResourceValue_Ar
	  )

END
ELSE
	BEGIN
		UPDATE [dbo].[mstr_Resources] SET [ResValue] = @ResourceValue_Ar WHERE [ResName] = @ResourceName AND ResCulture = 'ar';
END
END

GO
/****** Object:  StoredProcedure [dbo].[IsItemHasPostedTransactions]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[IsItemHasPostedTransactions]
	@ItemId INT
	AS
BEGIN 
   
   SELECT  COUNT(Inv_Receipt_d.id)
	FROM   Inv_Items INNER JOIN
		   Inv_Receipt_d ON Inv_Items.ID = Inv_Receipt_d.Item_ID  INNER JOIN
		   Inv_Receipt_h ON Inv_Receipt_d.Parent_ID = Inv_Receipt_h.ID INNER JOIN
		   GL_Vouchers ON Inv_Receipt_h.Code = GL_Vouchers.ReceiptID INNER JOIN
		   GL_VoucherType ON GL_VoucherType.ID = GL_Vouchers.VoucherTypeId 
		   where 
		   Item_ID = @ItemId 
		   AND( GL_VoucherType.Code = 27 OR GL_VoucherType.Code = 28 OR GL_VoucherType.Code = 29 OR 
		      GL_VoucherType.Code = 30 OR GL_VoucherType.Code = 31 OR GL_VoucherType.Code = 32 OR 
			  GL_VoucherType.Code = 33
		   )
		   AND GL_Vouchers.Posted = 1
END
GO
/****** Object:  StoredProcedure [dbo].[IsItemTransactionsHasNoWarrantyDate]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[IsItemTransactionsHasNoWarrantyDate]
	@ItemId INT
	AS
BEGIN 
   SELECT Count(*) from Inv_Receipt_d WHERE Item_ID = @ItemId  and WarrantyDate != null
END
GO
/****** Object:  StoredProcedure [dbo].[LogInPOSUser]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE
PROCEDURE [dbo].[LogInPOSUser]
	@Password NVARCHAR(250),
	@BranchId INT
AS
BEGIN
		SELECT H.Id [EmployeeId], 
			   H.Name COLLATE Arabic_CI_AI_KS_WS [EmployeeName], 
			   D.PermissionNameEn [PermissionName], 
			   K.ID [CompanyId], 
			   K.Name COLLATE Arabic_CI_AI_KS_WS [CompanyName], 
			   K.Name_AR COLLATE Arabic_CI_AI_KS_WS [CompanyName_Ar], 
			   J.ID [BranchId], 
			   J.Name COLLATE Arabic_CI_AI_KS_WS [BranchName],
			   J.Name_AR COLLATE Arabic_CI_AI_KS_WS [BranchName_ar],
			   M.ID [CurrencyId],
			   M.Code [CurrencyCode],
			   M.CurrencyPrecision [CurrencyPrecision],
			   H.CashDrawerId [CashDrawerId],
			   J.LogoPath [CompanyLogo],
			   K.RecieptFooterHtml [CompanyReceiptFooter],
			   H.IsTablet [IsUserTablet],
			   H.IsCallCenter [IsCallCenter],
			   VB.PrinterGoogleId [GooglePrinterId],
			   ISNULL(H.MaxReceiptDiscountPerc, 0) [MaxReceiptDiscountPerc],
			   J.StoreID [StoreId]
		FROM  Security_Users H 
		INNER JOIN SecurityUserPermissions A ON H.ID = A.UserId
		INNER JOIN Security_lkp_Permissions D ON A.PermissionId = D.PermissionID
		INNER JOIN Security_Services X ON D.ServiceID = X.ServiceID
		INNER JOIN Security_Components R ON X.ComponentID = R.ComponentID
		INNER JOIN Security_Modules U ON R.ModuleID = U.ModuleID
		INNER JOIN UserBranch W ON H.Id = W.UserID
		INNER JOIN mstr_Branch J ON W.BranchId = J.ID
		INNER JOIN mstr_Subsidaries K ON J.Subsidaryid = K.ID
		INNER JOIN mstr_Subsidary_currency L ON K.ID = L.SubsidaryID AND L.BaseCurrency = 1
		INNER JOIN mstr_Currencies M ON L.CurrencyID = M.ID
		LEFT JOIN mstr_Printers VB ON H.PrinterId = VB.ID
		WHERE 
			  H.PasswordPhrase = @Password AND
			  J.ID = @BranchId AND
			  H.IsActivated = 1 AND
			  K.IsActive = 1 AND 
			  J.IsActive = 1 AND
			  M.IsActive = 1 AND
			  U.ModuleID = 5;
		END

GO
/****** Object:  StoredProcedure [dbo].[LogInPOSUserByPassword]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[LogInPOSUserByPassword]
	@Password NVARCHAR(250)
AS
BEGIN

SELECT  H.ID userID, W.BranchID BranchId
FROM Security_Users H 
INNER JOIN UserBranch W ON H.Id = W.UserID
WHERE H.PasswordPhrase = @Password AND
	H.IsActivated = 1
END
GO
/****** Object:  StoredProcedure [dbo].[mstr_Resources_CRUD]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create Proc [dbo].[mstr_Resources_CRUD] 
@TransType nvarchar(50)
,@ResName Nvarchar(50) ,@ResCulture nvarchar(50)  
,@ResValue_En nvarchar(50)
,@ResValue_Ar nvarchar(50)

as
begin
if @TransType = 'insert'
begin

insert mstr_Resources (ResName,ResCulture,ResValue)
select @ResName,@ResCulture,@ResValue_En
union
select @ResName,@ResCulture,@ResValue_Ar
 

end

end
GO
/****** Object:  StoredProcedure [dbo].[POS_CancelOrder]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[POS_CancelOrder]
@ReceiptId INT,
@CancelReasonId INT,
@note nvarchar(Max),
@itemIds varchar(max)

AS
BEGIN

UPDATE Inv_Receipt_h SET Is_Canceled = 1, CancelReasonId = @CancelReasonId ,Memo = (case when @note = '' THEN Memo ELSE @note END)   WHERE ID = @ReceiptId;
if(@itemIds != '')
BEGIN 

	declare @sql nvarchar(MAX) = ''
	set @sql = 'Update Inv_Receipt_d SET Transaction_move = -1  where Parent_ID = '+CONVERT(varchar(18),@ReceiptId)+' AND Item_ID IN ( '+@itemIds+' )'
	EXEC (@sql)
	

	SET @sql  = 'update Inv_Receipt_d SET Transaction_move = 0  where Parent_ID = '+ CONVERT(varchar(18),@ReceiptId)+' AND  Item_ID  Not IN ( '+ @itemIds +' ) '
	EXEC (@sql)

	UPDATE B SET B.Transaction_move = A.Transaction_move
	from Inv_Receipt_d A
	INNER JOIN Inv_Receipt_d B
	ON B.FinishedReceipt_dID = A.ID 
	WHERE A.Parent_ID = @ReceiptId

END
ELSE
BEGIN

	UPDATE A SET A.Transaction_move = ( CASE WHEN B.RestockOnReturn = 0 THEN -1 ELSE 0 END )
	FROM Inv_Receipt_d A
	INNER JOIN Inv_Items B
	ON A.Item_ID = B.ID
	WHERE Parent_ID = @ReceiptId


	UPDATE B SET B.Transaction_move = A.Transaction_move
	from Inv_Receipt_d A
	INNER JOIN Inv_Receipt_d B
	ON B.FinishedReceipt_dID = A.ID 
	WHERE A.Parent_ID = @ReceiptId

	
END
END
GO
/****** Object:  StoredProcedure [dbo].[POS_DeleteReceipt]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[POS_DeleteReceipt]
@ReceiptId INT
AS
BEGIN
DELETE FROM Inv_CashDrawerHistory WHERE ReceiptId = @ReceiptID;
DELETE FROM dbo.Inv_ReceiptDetailCustomAttribute WHERE ReceiptDetailId IN (SELECT ID FROM Inv_Receipt_d WHERE Parent_ID = @ReceiptId);
DELETE FROM Inv_MembershipDetail WHERE MembershipId IN (SELECT Id FROM Inv_Membership WHERE ReceiptId = @ReceiptId);
DELETE FROM Inv_ReceiptMultiPayment WHERE ReceiptId = @ReceiptId;
DELETE FROM Inv_Membership WHERE ReceiptId = @ReceiptId;
DELETE FROM Inv_Receipt_d WHERE Parent_ID = @ReceiptID;
DELETE FROM GL_CloudPrintingTransactions WHERE ReceiptId = @ReceiptID;
DELETE FROM Inv_ReceiptTables WHERE ReceiptId = @ReceiptID;
DELETE FROM dbo.GL_Vouchers WHERE InvoiceInstallmentsDetailsId IN (SELECT ID FROM Crm_Invoice_Installments_Details WHERE InvoiceInstallmentsID IN (SELECT ID FROM Crm_Invoice_Installments WHERE InvoiceID = @ReceiptID));
DELETE FROM dbo.Inv_DeliveryStatusHistory WHERE RecieptId = @ReceiptId;
DELETE FROM Crm_Invoice_Installments_Details WHERE InvoiceInstallmentsID IN (SELECT ID FROM Crm_Invoice_Installments WHERE InvoiceID = @ReceiptID);
DELETE FROM Crm_Invoice_Installments WHERE InvoiceID = @ReceiptID;
DELETE FROM Inv_ReceiptReceipts WHERE ReceiptID = @ReceiptID;
DELETE FROM Inv_Receipt_h WHERE ID = @ReceiptID; 
END
GO
/****** Object:  StoredProcedure [dbo].[POS_DeleteReceiptDetails]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 CREATE
PROCEDURE [dbo].[POS_DeleteReceiptDetails]
 @ReceiptDetailIds NVARCHAR(MAX)
AS
BEGIN

IF LEN(@ReceiptDetailIds) > 0
BEGIN
		DECLARE @sqlCommand NVARCHAR(MAX) = N'DELETE FROM Inv_Receipt_d WHERE CustomOptionReceiptDetailParentId 
				IN (SELECT Id FROM Inv_ReceiptDetailCustomAttribute WHERE ReceiptDetailId IN ('+@ReceiptDetailIds+'))';
		EXEC (@sqlCommand);
		SET @sqlCommand = 'DELETE FROM Inv_ReceiptDetailCustomAttribute WHERE ReceiptDetailId IN ('+@ReceiptDetailIds+')';
		EXEC (@sqlCommand);
		SET @sqlCommand = 'DELETE FROM Inv_Receipt_d WHERE ID IN ('+@ReceiptDetailIds+')';
		EXEC (@sqlCommand);
END
END
GO
/****** Object:  StoredProcedure [dbo].[POS_DineInJoinReceipts]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[POS_DineInJoinReceipts]
@ReceiptId INT
AS
BEGIN
DECLARE @RowsToProcess  int
DECLARE @CurrentRow     int
DECLARE @SelectReceiptId  int, @SelectValue DECIMAL(18, 6), @SelectNetValue DECIMAL(18, 6), @SelectDiscountValue DECIMAL(18, 6);
DECLARE @PermenanentReceipts Table (RowID int not null primary key identity(1,1), ReceiptId Int, [Value] DECIMAL(18, 6), NetValue DECIMAL(18, 6), Discount_Value DECIMAL(18, 6));

INSERT INTO @PermenanentReceipts
SELECT B.ReceiptId, A.Value, A.NetValue, A.Discount_Value [Discount_Value] FROM Inv_Receipt_h A
INNER JOIN Inv_ReceiptTables B ON A.ID = B.ReceiptId WHERE 
A.IsHolded = 1 AND
B.BranchTableId IN (SELECT BranchTableId FROM Inv_ReceiptTables WHERE ReceiptId = @ReceiptId) AND 
B.ReceiptId != @ReceiptId
SET @RowsToProcess=@@ROWCOUNT

SET @CurrentRow=0
WHILE @CurrentRow<@RowsToProcess
BEGIN
    SET @CurrentRow=@CurrentRow+1
    SELECT 
        @SelectReceiptId =ReceiptId,
		@SelectValue = Value,
		@SelectNetValue = NetValue,
		@SelectDiscountValue = Discount_Value
        FROM @PermenanentReceipts
        WHERE RowID=@CurrentRow;
		UPDATE Inv_Receipt_h SET Value = Value + @SelectValue, 
								 NetValue = NetValue + @SelectNetValue, 
								 Discount_Value = Discount_Value + @SelectDiscountValue,
								 Discount_ForeignValue = Discount_ForeignValue + @SelectDiscountValue, 
								 Discount_Percent = ((Discount_Value + @SelectDiscountValue) / (Value + @SelectValue)) / 100,
								 Discount_ForeignPercent = ((Discount_Value + @SelectDiscountValue) / (Value + @SelectValue)) / 100
		WHERE ID = @ReceiptId;
        UPDATE Inv_Receipt_d SET Parent_ID = @ReceiptId WHERE Parent_ID = @SelectReceiptId;
		UPDATE Inv_Receipt_h SET Is_Canceled = 1 WHERE ID = @SelectReceiptId;
END
END
GO
/****** Object:  StoredProcedure [dbo].[POS_EmployeeAndDriversOrdersReport]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[POS_EmployeeAndDriversOrdersReport]
@CashDrawerId INT,
@SwitchName NVARCHAR(50),
@lang NVARCHAR(5)
AS
BEGIN
IF @SwitchName = 'Employee'
BEGIN
SELECT 
		Employee.Name [Label], 
		A.PaymentName,
		SUM(A.NetValue) Amount,
		COUNT(A.ID) Qty
	FROM ReceiptsWithPaymentCompination_VW A
		INNER JOIN Inv_CashDrawerHistory B ON   B.ReceiptId = A.ID
		INNER JOIN Security_Users Employee on A.Empoyee_ID = Employee.Id
	WHERE	(A.IsHolded = 0 OR A.IsHolded IS NULL) AND
			(A.Is_Canceled = 0 OR A.Is_Canceled IS NULL) AND
			A.Code = 51 AND
			B.IsClosed = 0 AND 
			A.CashDrawerId = @CashDrawerId
	GROUP BY Employee.Name, A.PaymentName
	ORDER BY Employee.Name, A.PaymentName;
END
ELSE
BEGIN
SELECT 
	    CASE WHEN @lang = 'ar' THEN  ISNULL(Driver.Name_AR, 'NaN') ELSE ISNULL(Driver.Name, 'NaN') END [Label], 
		CASE WHEN @lang = 'ar' THEN A.PaymentName_Ar ELSE A.PaymentName END AS PaymentName,
		SUM(A.NetValue) Amount,
		COUNT(A.ID) Qty
	FROM ReceiptsWithPaymentCompination_VW A
		INNER JOIN Inv_CashDrawerHistory B ON   B.ReceiptId = A.ID
		INNER JOIN Security_Users Driver ON A.DriverId = Driver.Id
	WHERE	(A.IsHolded = 0 OR A.IsHolded IS NULL) AND
			(A.Is_Canceled = 0 OR A.Is_Canceled IS NULL) AND
			A.Code = 51 AND
			B.IsClosed = 0 AND 
			A.CashDrawerId = @CashDrawerId 

	GROUP BY ISNULL(Driver.Name, 'NaN'),  A.PaymentName,ISNULL(Driver.Name_AR, 'NaN'),A.PaymentName_Ar
	ORDER BY ISNULL(Driver.Name, 'NaN'),  A.PaymentName;
END
END
GO
/****** Object:  StoredProcedure [dbo].[POS_FullLastCashReportSummary]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[POS_FullLastCashReportSummary]
@BranchId INT
AS
BEGIN

DECLARE @CashDrawerId INT = (SELECT TOP 1 Id FROM mstr_CashDrawer WHERE BranchId = @BranchId);
DECLARE @LastClosingDate DATETIME = (
		SELECT TOP 1 CreationDate FROM Inv_CashDrawerHistory A
			INNER JOIN CashDrawerActionType_Vw B ON A.CashDrawerTypeId = B.Id
			WHERE A.CashDrawerId = @CashDrawerId AND B.Name LIKE '%Cash Counted%'
			ORDER BY A.CreationDate DESC)
SELECT 
	   '#' + CONVERT(NVARCHAR, B.Entry_No)  [ReceiptNo],
	   B.NetValue [Amount],
       D.Name [DriverName],
	   X.Name [EmployeeName]
FROM Inv_CashDrawerHistory A
INNER JOIN mstr_CashDrawer Y ON A.CashDrawerId = Y.Id 
INNER JOIN Inv_Receipt_h B ON A.ReceiptId = B.ID AND
		(B.Is_Canceled = 0 OR B.Is_Canceled IS null) AND
		B.Code = 51 
LEFT JOIN Security_Users D ON B.DriverId = D.Id
LEFT JOIN Security_Users X ON B.Empoyee_ID = X.Id
WHERE 
		A.ReceiptId IS NOT NULL AND
		A.ClosedDateTime = @LastClosingDate 

END
GO
/****** Object:  StoredProcedure [dbo].[POS_GenerateCouponForRefundAndCreditNote]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[POS_GenerateCouponForRefundAndCreditNote]
(
	@ReceiptId int ,
	@PhoneNo varchar(8)
)
AS
BEGIN

	Declare @subsiduryId int,
	@entryNo int,
	@total decimal(18,5),
	@branchid int,
	@brachName varchar(max),
	@ActionId int , 
	@pomotionId int ,
	@rendono decimal,
	@conditionId int

	select @subsiduryId = SubsidiaryID,@entryNo = Entry_No,@total = NetValue,@branchid =Branch_ID  from Inv_Receipt_h where Id = @ReceiptId
	select @brachName = Name from mstr_Branch where ID =@branchid

	INSERT INTO Gl_Promotion_Action
	select 
	3 AS ActionTypeId,
	NULL AS ActionItemCategoryId, 
	NULL AS ActionItemId,
	NULL AS ActionQuantity,
	@total AS ActionDiscountValue,
	2 AS DiscountType

	SET @ActionId = @@IDENTITY

	INSERT INTO GL_Promotion
	SELECT 
	'Refund for sales return '+ convert(varchar(max), @entryNo) +' '+ @brachName AS Name,
	GETDATE() AS FromDate,
	DATEADD(year, 3, GETDATE()) AS ToDate,
	1 As IsActive,
	NUll As CustomerCategoryId,
	0 CondtionId,
	@ActionId AS ActionId,
	GETDATE() AS CreationDate,
	@subsiduryId AS SubsidiaryID,
	null AS discountAccountID,
	1 As Coupon,
	1 AS AutoGenerateCopan,
	1 AS is_creditnote

	SET @pomotionId = @@IDENTITY

	INSERT INTO Gl_Promotion_Condtion
	select 
	4 AS ConditionTypeId,
	null AS ConditionItemCategoryId,
	null AS ConditionItemId,
	1 AS ConditionQuantity,
	null AS CondtionTotal,
	null AS VendorID,
	@pomotionId AS PromotionID,
	0 AS MinimumPurchaseOf,
	null AS ConditionItemQuantity,
	null AS ConditionForEachValue,
	null AS ConditionMinimumValue

	SET @conditionId = @@IDENTITY

	update GL_Promotion set CondtionId = @conditionId where  Id = @pomotionId

	SET @rendono = ( (DATEPART(mm, GETDATE()) * 100000 )+ (DATEPART(ss, GETDATE()) * 1000 )+ DATEPART(ms, GETDATE()) )

	INSERT INTO GL_Promotion_CouponDetails
	select 
	@pomotionId AS PromotionID,
	convert(varchar(8),@PhoneNo) +'-' +convert(varchar(3),convert(varchar(MAX),@rendono)) AS CouponCode,
	1 AS Valid,
	0 AS Used_cnt
 

END
GO
/****** Object:  StoredProcedure [dbo].[POS_GetAllItemsCurrentBalances]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[POS_GetAllItemsCurrentBalances] 	--46
@BranchId INT --16
AS

	DECLARE @StoreId INT = (SELECT StoreID FROM mstr_Branch WHERE ID = @BranchId)

select * from 
(
SELECT        Inv_Receipt_d.ID AS TransactionID, ST.ID AS StoreID,Convert(Decimal(28,20), Inv_Receipt_d.TotalQTy / ISNULL(Inv_Items_Units.FinalConv,1)) as TotalQTy, ST.Code AS StoreCode, ST.Name AS StoreName,
 ST.Name_AR AS StoreNameAr,Inv_Receipt_h.Entry_Date,ISNULL(Inv_Receipt_d.TotalReservedQTy,0) TotalReservedQTy, Inv_Items.Name, Inv_Items.ID as ItemId
FROM            Inv_Receipt_d INNER JOIN
                         Inv_Receipt_h ON Inv_Receipt_d.Parent_ID = Inv_Receipt_h.ID INNER JOIN
                         Inv_Store AS ST ON Inv_Receipt_d.Store_ID = ST.ID INNER JOIN
                         Inv_Items ON Inv_Receipt_d.Item_ID = Inv_Items.ID  INNER JOIN
                         Inv_Items_Units ON Inv_Items.ID = Inv_Items_Units.Item_ID and Inv_Items_Units.Unit_id = Inv_Items.Inventory_UnitId
WHERE        (Inv_Receipt_d.Store_ID = @StoreId)
GROUP BY Inv_Receipt_d.ID, ST.ID, Inv_Receipt_d.TotalQTy, ST.Code, ST.Name, ST.Name_AR, Inv_Receipt_h.Entry_Date, Inv_Items_Units.FinalConv,Inv_Receipt_d.TotalReservedQTy, Inv_Items.Name, Inv_Items.ID
) Table1

WHERE Table1.Entry_Date=
(SELECT Max(Table2.Entry_Date) From 
(
SELECT        Inv_Receipt_d.ID AS TransactionID, ST.ID AS StoreID, Inv_Receipt_d.TotalQTy / ISNULL(Inv_Items_Units.FinalConv,1) as TotalQTy, ST.Code AS StoreCode, ST.Name AS StoreName,
 ST.Name_AR AS StoreNameAr,Inv_Receipt_h.Entry_Date,Inv_Receipt_d.TotalReservedQTy, Inv_Items.Name, Inv_Items.ID as ItemId
FROM            Inv_Receipt_d INNER JOIN
                         Inv_Receipt_h ON Inv_Receipt_d.Parent_ID = Inv_Receipt_h.ID INNER JOIN
                         Inv_Store AS ST ON Inv_Receipt_d.Store_ID = ST.ID INNER JOIN
                         Inv_Items ON Inv_Receipt_d.Item_ID = Inv_Items.ID  INNER JOIN
                         Inv_Items_Units ON Inv_Items.ID = Inv_Items_Units.Item_ID and Inv_Items_Units.Unit_id = Inv_Items.Inventory_UnitId
WHERE        (Inv_Receipt_d.Store_ID = @StoreId)
GROUP BY Inv_Receipt_d.ID, ST.ID, Inv_Receipt_d.TotalQTy, ST.Code, ST.Name, ST.Name_AR, Inv_Receipt_h.Entry_Date, Inv_Items_Units.FinalConv,Inv_Receipt_d.TotalReservedQTy, Inv_Items.Name, Inv_Items.ID
) Table2
WHERE Table1.StoreCode = Table2.StoreCode Group by Table2.StoreCode)


union
-- Opening balance
SELECT        0 AS TransactionID, Inv_Items_Store.Store_ID AS StoreID, Inv_Items_Store.First_Qty as TotalQTy, ST.Code AS StoreCode, ST.Name AS StoreName, ST.Name_AR AS StoreNameAr, CAST('2000/01/01' AS datetime) 
                         AS Entry_Date , 0 as TotalReservedQTy, Inv_Items.Name, Inv_Items.ID as ItemId
FROM            Inv_Items_Store INNER JOIN
                         Inv_Store AS ST ON Inv_Items_Store.Store_ID = ST.ID INNER JOIN
                         Inv_Items ON Inv_Items_Store.Item_ID = Inv_Items.ID INNER JOIN
                         Inv_Items_Units ON Inv_Items.ID = Inv_Items_Units.Item_ID and Inv_Items_Units.Unit_id = Inv_Items.Inventory_UnitId
WHERE        (Inv_Items_Store.Store_ID = @StoreId)

order by TransactionID
GO
/****** Object:  StoredProcedure [dbo].[POS_GetBranchMainGooglePrinterId]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[POS_GetBranchMainGooglePrinterId]
@BranchId INT
AS
BEGIN
	SELECT TOP 1 PrinterGoogleId FROM mstr_Printers WHERE BranchID = @BranchId AND IsMainPrinter = 1;
END
GO
/****** Object:  StoredProcedure [dbo].[POS_GetBussinessSummaryReport]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[POS_GetBussinessSummaryReport]
@BranchId INT,
@FromDate DATETIME,
@ToDate DATETIME
AS
BEGIN
IF OBJECT_ID('tempdb..#BusinessSummary') IS NOT NULL DROP TABLE #BusinessSummary

CREATE TABLE #BusinessSummary (ReportType NVARCHAR(50), Metric NVARCHAR(250), Qty INT, QtyPercentage NUMERIC(36,2), [Value] Decimal(18,6), [ValuePercentage] NUMERIC(36,2))
DECLARE @TotalValue Decimal(18,6), @TotalDiscount Decimal(18,6), @TotalDeliveryFees Decimal(18,6), @TotalNetValue Decimal(18,6), @OrdersCount DECIMAL(18,2)

-- Header Report Section
		
		SELECT 
			@TotalValue = SUM(A.Value),
			@TotalNetValue = SUM(A.NetValue),
			@TotalDeliveryFees = SUM(A.DeliveryFees),
			@TotalDiscount = SUM(A.Discount_Value),
			@OrdersCount = COUNT(A.ID)
			FROM Inv_Receipt_h A
			WHERE OrderType IN (1,2,3,4,5)
			AND (Is_Canceled = 0 OR Is_Canceled IS NULL)
			AND CODE = 51
			AND Entry_Date >= @FromDate
			AND Entry_Date <= @ToDate
			AND Branch_ID = @BranchId;

		INSERT INTO #BusinessSummary 
		SELECT 'HeaderLabel', 'Sales', NULL, NULL, @TotalValue, NULL;
		INSERT INTO #BusinessSummary 
		SELECT 'HeaderLabel', 'Total Orders', NULL, NULL, @OrdersCount, NULL;
		INSERT INTO #BusinessSummary 
		SELECT 'HeaderLabel', 'Total Discount', NULL, NULL, @TotalDiscount, NULL;
		INSERT INTO #BusinessSummary 
		SELECT 'HeaderLabel', 'Total Delivery Fees', NULL, NULL, @TotalDeliveryFees, NULL;
		INSERT INTO #BusinessSummary 
		SELECT 'HeaderLabel', 'Net Sales', NULL, NULL, @TotalNetValue, NULL;

--Void Report Section

		DECLARE @VoidOrdersQty INT, @VoidOrdersValue Decimal(18,6), @VoidItemsQty INT, @VoidItemsValue Decimal(18,6);
		SELECT @VoidOrdersQty = COUNT(ID), @VoidOrdersValue = SUM(Value)  FROM Inv_Receipt_h 			
		WHERE OrderType IN (1,2,3,4,5)
			AND Is_Canceled = 1
			AND CODE = 51
			AND Entry_Date >= @FromDate
			AND Entry_Date <= @ToDate
			AND Branch_ID = @BranchId;
		SELECT @VoidItemsQty = SUM(A.Qty), @VoidItemsValue = SUM(A.Price)  FROM Inv_Receipt_d A
		INNER JOIN Inv_Receipt_h B ON A.Parent_ID = B.ID
			WHERE B.OrderType IN (1,2,3,4,5)
			AND A.IsDeleted = 1
			AND B.CODE = 51
			AND B.Entry_Date >= @FromDate
			AND B.Entry_Date <= @ToDate
			AND B.Branch_ID = @BranchId
		
		INSERT INTO #BusinessSummary 
		SELECT 'Void', 'Orders', @VoidOrdersQty, NULL, ISNULL(@VoidOrdersValue, 0), NULL;
		INSERT INTO #BusinessSummary 
		SELECT 'Void', 'Items', ISNULL(@VoidItemsQty, 0), NULL,ISNULL(@VoidItemsValue, 0), NULL;

--Order Type Report Section

		INSERT INTO #BusinessSummary 
		SELECT 
		   'OrderType' [ReportType],
			CASE A.OrderType WHEN 1 THEN 'Take Away'
						WHEN 2 THEN 'Delivery'
						WHEN 3 THEN 'Dine In'
						WHEN 4 THEN 'Pick Up'
						WHEN 5 THEN 'Membership'
						 END [Metric],
			COUNT(A.OrderType) [Qty],
			CAST(ROUND((COUNT(A.ID) / @OrdersCount) * 100, 2) as numeric(36,2)) [QtyPercentage],
			SUM(A.[NetValue]) [Value],
			CAST(ROUND((SUM(A.[NetValue]) / @TotalNetValue) * 100, 2) as numeric(36,2)) [ValuePercentage]
		FROM Inv_Receipt_h A
			WHERE OrderType IN (1,2,3,4,5)
			AND (Is_Canceled = 0 OR Is_Canceled IS NULL)
			AND CODE = 51
			AND Entry_Date >= @FromDate
			AND Entry_Date <= @ToDate
			AND Branch_ID = @BranchId
		 GROUP BY A.OrderType

--Payment Type Report Section
DECLARE @PaymentOrderCount DECIMAL(18,2) = (SELECT COUNT(PaymentName) FROM ReceiptsWithPaymentCompination_VW 
			WHERE OrderType IN (1,2,3,4,5)
			AND (Is_Canceled = 0 OR Is_Canceled IS NULL)
			AND CODE = 51
			AND Entry_Date >= @FromDate
			AND Entry_Date <= @ToDate
			AND Branch_ID = @BranchId)
		INSERT INTO #BusinessSummary 
		SELECT 
		   'PaymentType' [ReportType],
		    A.PaymentName [Metric],
			COUNT(A.PaymentName) [Qty],
			CAST(ROUND((COUNT(A.PaymentName) / @PaymentOrderCount) * 100, 2) as numeric(36,2)) [QtyPercentage],
			SUM(A.[NetValue]) [Value],
			CAST(ROUND((SUM(A.[NetValue]) / @TotalNetValue) * 100, 2) as numeric(36,2)) [ValuePercentage]
		FROM ReceiptsWithPaymentCompination_VW A
		INNER JOIN Inv_PaymentType B ON A.Payment_Type = B.id
			WHERE OrderType IN (1,2,3,4,5)
			AND (A.Is_Canceled = 0 OR A.Is_Canceled IS NULL)
			AND A.CODE = 51
			AND A.Entry_Date >= @FromDate
			AND A.Entry_Date <= @ToDate
			AND A.Branch_ID = @BranchId
		GROUP BY A.PaymentName

--Employee Report Section

		INSERT INTO #BusinessSummary 
		SELECT 
		   'Employee' [ReportType],
		    B.Name [Metric],
			COUNT(A.ID) [Qty],
			CAST(ROUND((COUNT(A.ID) / @OrdersCount) * 100, 2) as numeric(36,2)) [QtyPercentage],
			SUM(A.[NetValue]) [Value],
			CAST(ROUND((SUM(A.[NetValue]) / @TotalNetValue) * 100, 2) as numeric(36,2)) [ValuePercentage]
		FROM Inv_Receipt_h A
		INNER JOIN Security_Users B ON A.Empoyee_ID = B.Id
			WHERE OrderType IN (1,2,3,4,5)
			AND (A.Is_Canceled = 0 OR A.Is_Canceled IS NULL)
			AND A.CODE = 51
			AND A.Entry_Date >= @FromDate
			AND A.Entry_Date <= @ToDate
			AND A.Branch_ID = @BranchId
		GROUP BY A.Empoyee_ID, B.Name
		
--Category Report Section

		DECLARE @TotalItemsQty DECIMAL(18,2), @TotalItemsPrice DECIMAL(18,6);
		SELECT @TotalItemsQty = SUM(Qty), @TotalItemsPrice = SUM(Price) From Inv_Receipt_d;
		
		INSERT INTO #BusinessSummary 
		SELECT 
			'Category', 
			C.Name [Metric], 
			SUM(A.Qty) [Qty], 
			CAST(ROUND((SUM(A.Qty) / @TotalItemsQty) * 100, 2) as numeric(36,2)) [QtyPercentage],
			SUM(A.Price) [Value],
			CAST(ROUND((SUM(A.Price) / @TotalItemsPrice) * 100, 2) as numeric(36,2)) [ValuePercentage]
		FROM Inv_Receipt_d A
		INNER JOIN Inv_ProductCategories C ON C.ID = (SELECT TOP 1 ItemCategory_ID FROM Inv_Items_Categories WHERE Item_ID = A.Item_ID)
		INNER JOIN Inv_receipt_h B ON A.Parent_Id = B.ID
		WHERE OrderType IN (1,2,3,4,5)
			AND (B.Is_Canceled = 0 OR B.Is_Canceled IS NULL)
			AND B.CODE = 51
			AND B.Entry_Date >= @FromDate
			AND B.Entry_Date <= @ToDate
			AND B.Branch_ID = @BranchId
			AND (A.IsDeleted = 0 OR A.IsDeleted IS NULL)
		Group BY C.Name
		
		SELECT * FROM #BusinessSummary

END
GO
/****** Object:  StoredProcedure [dbo].[POS_GetCashDrawerCreditReceipts]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE
PROCEDURE [dbo].[POS_GetCashDrawerCreditReceipts]
@CashDrawerId INT
AS
BEGIN
DECLARE @LastClosedDate DATETIME = 
							(SELECT TOP 1  ClosedDateTime FROM Inv_CashDrawerHistory 
							WHERE IsClosed = 1 AND ReceiptId IS NOT NULL AND CashDrawerId = @CashDrawerId
							ORDER BY ClosedDateTime DESC)
SELECT '#' + CONVERT(varchar, Entry_No)  [OrderNumber], NetValue [Total] FROM Inv_Receipt_h 
WHERE Entry_Date >= ISNULL(@LastClosedDate, DATEADD(YEAR, -1, GETDATE())) AND CODE = 52 AND CashDrawerId = @CashDrawerId
END

GO
/****** Object:  StoredProcedure [dbo].[POS_GetCouponWiseDiscount]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[POS_GetCouponWiseDiscount] --2019,63,null,null,'en-US'
(
	 @subsidiaryID int ,--= 63
	 @date date,-- = '20200901'
	 @mobileNo varchar(8), --= '12345678'
	 @couponCode varchar(MAX),
	 @lan varchar(10)
)
AS 
BEGIN 

	SET NOCOUNT ON

	SELECT 
	PCD.Id AS CouponCodeId,
	PCD.CouponCode,
	PA.ActionDiscountValue,
	P.is_creditnote,
	PA.DiscountType,
	P.FromDate ,
	P.ToDate,
	PCD.Valid
	Into #HT_CouponDetails
	from GL_Promotion_CouponDetails PCD
	INNER JOIN GL_Promotion P
	ON PCD.PromotionID = P.Id
	INNER JOIN Gl_Promotion_Action PA
	ON PA.Id = P.ActionId
	INNER JOIN Gl_Promotion_Condtion PC
	ON PC.Id = P.CondtionId
	WHERE PCD.CouponCode = @couponCode
	AND SubsidiaryID = @subsidiaryID
	AND P.Coupon = 1
	AND PC.ConditionTypeId = 4
	AND PA.ActionTypeId = 3
	
	

	IF( ( SELECT COUNT(1) from #HT_CouponDetails WHERE is_creditnote = 1 ) > 0)
	BEGIN
		
		IF(@mobileNo != '')
		BEGIN
			IF((SELECT COUNT(1) from #HT_CouponDetails) > 0 )
			BEGIN
				IF NOT EXISTS (SELECT 1 FROM #HT_CouponDetails WHERE CouponCode like @mobileNo+'-%' )
				BEGIN
						IF(@lan = 'en')
						BEGIN
							RAISERROR('This coupon is not related to this customer',11, 1)
						END
						ELSE
						BEGIN
							RAISERROR('هذا الكوبون لا يتبع هذا العميل',11, 1)
						END
					

				 END
				ELSE 
				BEGIN

					IF NOT EXISTS  (SELECT 1 FROM #HT_CouponDetails WHERE CouponCode like @mobileNo+'-%' AND @date between  CONVERT(date, FromDate) and CONVERT(date, ToDate ))
					BEGIN

						IF(@lan = 'en')
						BEGIN
							RAISERROR('This coupon was expired',11, 1)
						END
						ELSE
						BEGIN
							RAISERROR('هذا الكوبون منتهي الصلاحية',11, 1)
						END

					END
					ELSE IF NOT EXISTS  (SELECT 1 FROM #HT_CouponDetails WHERE CouponCode like @mobileNo+'-%' AND Valid = 1)
					BEGIN

						IF(@lan = 'en')
						BEGIN
							RAISERROR('This coupon was used before',11, 1)
						END
						ELSE
						BEGIN
							RAISERROR('تم الاستخدام من قبل ',11, 1)
						END

					END
					ELSE
					BEGIN

						SELECT CouponCodeId,CouponCode,ActionDiscountValue,DiscountType from #HT_CouponDetails WHERE CouponCode like @mobileNo+'-%'

					END
					

			 END
			END	
			ELSE
			BEGIN

				SELECT CouponCodeId,CouponCode,ActionDiscountValue,DiscountType from #HT_CouponDetails

			END
		END
		ELSE
		BEGIN

			IF(@lan = 'en')
			BEGIN
				RAISERROR('Select Cash Cutomer',11, 1)
			END
			ELSE
			BEGIN
				RAISERROR('رجاء اختيار عميل نقدي',11, 1)
			END
			
		END

	END
	ELSE
	BEGIN	
			IF((SELECT COUNT(1) from #HT_CouponDetails) > 0 )
			BEGIN
				IF NOT EXISTS  (SELECT 1 FROM #HT_CouponDetails WHERE @date between  FromDate AND ToDate)
				BEGIN
					
					IF(@lan = 'en')
					BEGIN
						RAISERROR('This coupon was expired',11, 1)
					END
					ELSE
					BEGIN
						RAISERROR('هذا الكوبون منتهي الصلاحية',11, 1)
					END
					
				END
				ELSE IF NOT EXISTS  (SELECT 1 FROM #HT_CouponDetails WHERE Valid = 1)
				BEGIN

					IF(@lan = 'en')
					BEGIN
						RAISERROR('This coupon was used before',11, 1)
					END
					ELSE
					BEGIN
						RAISERROR('تم الاستخدام من قبل ',11, 1)
					END

				END
				ELSE
				BEGIN

					SELECT CouponCodeId,CouponCode,ActionDiscountValue,DiscountType from #HT_CouponDetails WHERE CouponCode like @mobileNo+'-%'

				END
			END	
			ELSE
			BEGIN

				SELECT CouponCodeId,CouponCode,ActionDiscountValue,DiscountType from #HT_CouponDetails

			END

	END 

	IF OBJECT_ID('tempdb..#HT_CouponDetails') IS NOT NULL DROP TABLE #HT_CouponDetails  

END
GO
/****** Object:  StoredProcedure [dbo].[POS_GetCreditReceiptVoucherAmount]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[POS_GetCreditReceiptVoucherAmount]
@ReceiptId INT
AS
BEGIN
DECLARE @VoucherType INT = (SELECT TOP 1 Id FROM GL_VoucherType WHERE Code = 11)
SELECT ISNULL(SUM(B.Debit), 0) FROM GL_Vouchers A
INNER JOIN GL_VoucherDetails B ON A.ID = B.VoucherID
WHERE VoucherTypeID = @VoucherType AND ReceiptID = @ReceiptId;

END
GO
/****** Object:  StoredProcedure [dbo].[POS_GetCustomerPriceList]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE
PROCEDURE [dbo].[POS_GetCustomerPriceList]
@CustomerId INT
AS
BEGIN
		SELECT ItemId, UnitId, SalePrice, 
			CASE DiscountValue WHEN 0 THEN  (DiscountPercentage * SalePrice) / 100 
				WHEN NULL THEN (DiscountPercentage * SalePrice) / 100 
				ELSE DiscountValue END [Discount]
		FROM Inv_CustomerPriceList
		WHERE CustomerId = @CustomerId
END
GO
/****** Object:  StoredProcedure [dbo].[POS_GetCutomerWiseCouponCode]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [dbo].[POS_GetCutomerWiseCouponCode]
(	
	@PhoneNo varchar(8)
)
AS
BEGIN

	declare @code varchar(max)= @PhoneNo+'-%'

	select A.CouponCode AS Coupon,C.ActionDiscountValue AS Value,CONVERT(date, B.ToDate) ExpiryDate
	from GL_Promotion_CouponDetails A
	INNER JOIN GL_Promotion B
	ON A.PromotionID = B.Id
	INNER JOIN Gl_Promotion_Action C
	ON C.Id = B.ActionId
	where A.CouponCode like @code

END
GO
/****** Object:  StoredProcedure [dbo].[POS_GetDeliveryTimes]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE
PROCEDURE [dbo].[POS_GetDeliveryTimes]
@SubsidaryID INT
AS 
BEGIN
	SELECT 
		IsDefault,
		CASE TimeUnitID WHEN 1 THEN CONVERT(varchar, [Value]) + ' Minutes' WHEN 2 THEN CONVERT(varchar, [Value]) + ' Days' ELSE CONVERT(varchar, [Value]) + ' Months' END [Label],
		CASE TimeUnitID WHEN 1 THEN [Value] WHEN 2 THEN [Value] * 24 * 60 ELSE [Value] * 24 * 60 * 30 END [ValueInMinutes]
	FROM [dbo].[DeliveryTime]
	WHERE SubsidaryID = @SubsidaryID;
END
GO
/****** Object:  StoredProcedure [dbo].[POS_GetLastCashReportByEmployee]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[POS_GetLastCashReportByEmployee]
@EmployeeId INT
AS
BEGIN

DECLARE @CashDrawerId INT = (SELECT TOP 1 CashDrawerId FROM Security_Users WHERE ID = @EmployeeId);
DECLARE @LastClosingDate DATETIME = (
		SELECT TOP 1 CreationDate FROM Inv_CashDrawerHistory A
			INNER JOIN CashDrawerActionType_Vw B ON A.CashDrawerTypeId = B.Id
			WHERE A.CashDrawerId = @CashDrawerId AND B.Name LIKE '%Cash Counted%'
			ORDER BY A.CreationDate DESC)
			print @LastClosingDate
SELECT 
	   '#' + CONVERT(NVARCHAR, B.Entry_No)  [ReceiptNo],
	   CASE WHEN A.Notes LIKE 'Added From Sales Order' THEN B.NetValue - ISNULL(B.Deposite, 0) ELSE A.Amount END [Amount],
	   B.Discount_Value [Discount],
	   C.Code [Currency],
	   A.CreationDate [Date],
	   LTRIM(RTRIM(E.Name)) COLLATE Arabic_CI_AI_KS_WS  [PaymentType],
	   CASE B.OrderType WHEN 1 THEN 'Take Away'
						WHEN 2 THEN 'Delivery'
						WHEN 3 THEN 'Dine In'
						WHEN 4 THEN 'Pick Up'
						WHEN 5 THEN 'Membership'
						ELSE NULL END [OrderType],
	   D.[NAME] COLLATE Arabic_CI_AI_KS_WS [DriverName],
	   F.Name [DeliveryStatus],
	   E.IsCoverFlags [IsCoverFlags],
	   B.DeliveryFees
FROM Inv_CashDrawerHistory A
INNER JOIN mstr_CashDrawer Y ON A.CashDrawerId = Y.Id 
INNER JOIN [CashDrawerActionType_Vw] E ON A.CashDrawerTypeId = E.Id
INNER JOIN Inv_Receipt_h B ON A.ReceiptId = B.ID AND
		(B.Is_Canceled = 0 OR B.Is_Canceled IS null) AND
		B.Code = 51 
INNER JOIN [dbo].[mstr_DeliveryStatus] F ON B.DeliveryStatusId = F.Id
INNER JOIN mstr_Currencies C ON A.CurrencyID = C.ID
INNER JOIN Inv_PaymentType X ON B.Payment_Type = X.id
LEFT JOIN Security_Users D ON B.DriverId = D.Id
WHERE 
		A.ReceiptId IS NOT NULL AND
		A.ClosedDateTime = @LastClosingDate AND
		A.CashDrawerId = @CashDrawerId;
	 
END

GO
/****** Object:  StoredProcedure [dbo].[POS_GetLastFourCustomerOrders]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE
PROCEDURE [dbo].[POS_GetLastFourCustomerOrders]
@OrderCode INT,
@CustomerId INT
AS 
BEGIN
     
	IF @OrderCode = 51
		BEGIN
		   select top 4 *  INTO #HT_CashorderDetails from Inv_Receipt_h where CashCustomerID = @CustomerId and Code = @OrderCode order by Entry_Date desc


			SELECT  A.Id, Entry_No, A.Code, NetValue, Entry_Date, B.Name BranchName, A.CustomerDeliverDate, 
					C.Name [DriverName], D.Name [ChefName],
					T.Name [ItemName], I.Qty [ItemQty], I.Price [ItemPrice]
			FROM Inv_Receipt_d I 
			INNER JOIN  #HT_CashorderDetails A ON I.Parent_Id = A.ID 
			INNER JOIN Inv_Items T ON I.Item_Id = T.ID
			INNER JOIN mstr_Branch B ON A.Branch_ID = B.ID
			LEFT JOIN Security_Users C ON A.DriverId = C.Id
			LEFT JOIN Security_Users D ON A.ChefId = D.Id
			WHERE CashCustomerID = @CustomerId
			Order By Entry_Date Desc;


			 IF OBJECT_ID('tempdb..#HT_CashorderDetails') IS NOT NULL DROP TABLE HT_CashorderDetails

		END
	IF @OrderCode = 52
		BEGIN
			
		select top 4 *  INTO #HT_CreditorderDetails from Inv_Receipt_h where CashCustomerID = Vendor_ID and Code = @OrderCode order by Entry_Date desc

			SELECT  A.Id, Entry_No, A.Code, NetValue, Entry_Date, B.Name BranchName, A.CustomerDeliverDate,
				C.Name [DriverName], D.Name [ChefName],
					T.Name [ItemName], I.Qty [ItemQty], I.Price [ItemPrice]
			FROM Inv_Receipt_d I 
			INNER JOIN  #HT_CreditorderDetails A ON I.Parent_Id = A.ID 
			INNER JOIN Inv_Items T ON I.Item_Id = T.ID
			INNER JOIN mstr_Branch B ON A.Branch_ID = B.ID
			LEFT JOIN Security_Users C ON A.DriverId = C.Id
			LEFT JOIN Security_Users D ON A.ChefId = D.Id
			WHERE Vendor_ID = @CustomerId
			Order By Entry_Date Desc;

			IF OBJECT_ID('tempdb..#HT_CreditorderDetails') IS NOT NULL DROP TABLE #HT_CreditorderDetails
		END
END
GO
/****** Object:  StoredProcedure [dbo].[POS_GetOrderCancellationReason]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[POS_GetOrderCancellationReason]
AS
BEGIN
SELECT ID, Name, Name_AR FROM GL_OrderCancelationReasons
END
GO
/****** Object:  StoredProcedure [dbo].[POS_GetPrintOrders]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[POS_GetPrintOrders] 
	
AS
BEGIN

			DECLARE @PrintOrders TABLE(
				ID INT NOT NULL,
			    CloudPrinterId NVARCHAR(250) NOT NULL,
			    Content NVARCHAR(Max) NOT NULL,
				ContentType NVARCHAR(50) NOT NULL,
				ReceiptId INT
			);	

			INSERT INTO @PrintOrders 
			SELECT ID, CloudPrinterId, Content, ContentType, ReceiptId FROM GL_CloudPrintingTransactions
			WHERE IsProcess = 0;

			UPDATE GL_CloudPrintingTransactions SET IsProcess = 1, ProcessDate = GETDATE()
			WHERE ID IN (SELECT ID FROM @PrintOrders);

			SELECT * FROM @PrintOrders;
END
GO
/****** Object:  StoredProcedure [dbo].[POS_GetQuickSalesReportReceipts]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE
PROCEDURE [dbo].[POS_GetQuickSalesReportReceipts]
	@BranchId INT,
	@FromDate DATETIME,
	@ToDate DateTIME
AS
BEGIN
	SELECT  A.OrderType, A.PaymentName PaymentType, A.NetValue [Amount]
	FROM ReceiptsWithPaymentCompination_VW A
	WHERE Branch_ID = @BranchId AND Entry_Date >= @FromDate AND Entry_Date <= @ToDate
	AND (A.Is_Canceled = 0 OR A.Is_Canceled IS NULL) AND (A.IsHolded = 0 OR A.IsHolded IS NULL) 
	AND A.Code = 51
	AND A.OrderType IS NOT NULL
END
GO
/****** Object:  StoredProcedure [dbo].[POS_GetReceiptMultiPayments]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[POS_GetReceiptMultiPayments]
@ReceiptId INT
AS
BEGIN
	SELECT [Id], [PaymentTypeId], [ReceiptId], [Amount], [LastFourDigit], [DynamicId] 
	FROM Inv_ReceiptMultiPayment WHERE ReceiptId = @ReceiptId;
END
GO
/****** Object:  StoredProcedure [dbo].[POS_GetTransactionMove]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[POS_GetTransactionMove] 
@TransactionCode INT
	AS
	BEGIN
			SELECT TOP 1 Items FROM Inv_Transaction_Codes WHERE Code = @TransactionCode;
	END
GO
/****** Object:  StoredProcedure [dbo].[POS_GetTransferRequestsCount]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[POS_GetTransferRequestsCount]
@BranchId int 
AS
BEGIN
DECLARE @StoreId INT = (SELECT TOP 1 StoreID FROM mstr_Branch WHERE ID = @BranchId)
SELECT COUNT(ID) FROM Inv_Receipt_h
WHERE ToStoreID = @StoreId AND ERPStatus = 1 AND Code = 80;
END
GO
/****** Object:  StoredProcedure [dbo].[POS_InsertNewVoucher]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[POS_InsertNewVoucher] 
@ReceiptId INT, 
@PaymentTypeId INT, 
@EmployeeId INT,
@PaymentAmount DECIMAL(18, 6)
AS
BEGIN
DECLARE @BranchId INT = (SELECT TOP 1 Branch_ID FROM Inv_Receipt_h WHERE ID = @ReceiptId)
DECLARE @PaymentAccountId INT = (SELECT TOP 1 AccountID FROM Inv_Posting_PaymentTypes WHERE PaymentTypeID = @PaymentTypeId AND BranchID = @BranchId)
IF @PaymentAccountId IS NULL
BEGIN
	SELECT -1;
	RETURN;
END
DECLARE @VoucherType INT = (SELECT TOP 1 Id FROM GL_VoucherType WHERE Code = 11)
DECLARE @VoucherCode INT = (SELECT TOP 1 ISNULL(MAX(Code), 0) + 1 FROM GL_Vouchers WHERE VoucherTypeID = @VoucherType AND 
BranchID = @BranchId)

INSERT INTO GL_Vouchers ([Code], [VoucherTypeID], [BranchID], [CurrencyID], [SubsidaryID], [VouhcerDate], 
[ReversalDate], [ExchangeRate], [ReferanceNo], [Memo], [Approved], [DeferEntry], [Posted], 
[BankName], [CheeckBookID], [CheckNumber], [IsActive], [Beneficiary], [ReceiptID], [BillNo], 
[CheckTransfer], [voucherid], [InvoiceInstallmentsDetailsId], [Prepaid], [PaymentTypeId], [CollectionBookId], 
[CollectionNumber], [CollecterId], [CreationDate], [LastUpdateDate], [CreatedByID], [UpdatedByID], 
[DueDate], [CostPostedSer], [CostPostedUserId], [WorkOrderStatusID], [PaidAmount], [isTotalyPaid])
SELECT @VoucherCode [Code], @VoucherType [VoucherTypeID], A.Branch_ID [BranchID], A.Currency_ID [CurrencyID], A.SubsidiaryID [SubsidaryID], 
GETDATE() [VouhcerDate], NULL [ReversalDate], 1 [ExchangeRate], NULL [ReferanceNo],'' [Memo], 0 [Approved], 
0 [DeferEntry], 0 [Posted], NULL [BankName], NULL [CheeckBookID], NULL [CheckNumber], 1 [IsActive], 
NULL [Beneficiary], A.ID [ReceiptID],NULL [BillNo],NULL [CheckTransfer],NULL [voucherid],NULL [InvoiceInstallmentsDetailsId], 
NULL [Prepaid], @PaymentTypeId [PaymentTypeId],NULL [CollectionBookId],NULL [CollectionNumber],NULL [CollecterId], GETDATE() [CreationDate], 
GETDATE() [LastUpdateDate], @EmployeeId [CreatedByID], @EmployeeId [UpdatedByID], NULL [DueDate], NULL [CostPostedSer], 
NULL [CostPostedUserId], NULL [WorkOrderStatusID], NULL [PaidAmount], NULL [isTotalyPaid] FROM Inv_Receipt_h A
WHERE ID = @ReceiptId;

DECLARE @VoucherId INT = @@Identity;

INSERT INTO GL_VoucherDetails
SELECT @VoucherId [VoucherID], NULL [LocationID], NULL [DepartmentID], NULL [ClassID], 
NULL [CostcenterID], @PaymentAccountId [AccountNoID], @PaymentAmount [Debit], 0 [Credit], @PaymentAmount [DebitForeign], 
0 [CreditForeign], '' [Memo], 1 [IsActive],1 [Header],0 [Reconciled], 
0 [Cleared],NULL [inv_ReceipID],NULL [SetupAccountType] 

INSERT INTO GL_VoucherDetails
SELECT @VoucherId [VoucherID], NULL [LocationID], NULL [DepartmentID], NULL [ClassID], 
NULL [CostcenterID], A.Vendor_ID [AccountNoID], 0 [Debit], @PaymentAmount [Credit],0 [DebitForeign], 
 @PaymentAmount [CreditForeign], '' [Memo], 1 [IsActive],0 [Header],0 [Reconciled], 
0 [Cleared],NULL [inv_ReceipID],NULL [SetupAccountType] FROM Inv_Receipt_h A  WHERE ID = @ReceiptId;

DECLARE @PaymentTypeValue VARCHAR(50) =  '1' + CONVERT(VARCHAR, @PaymentTypeID);
DECLARE @CashDrawerTypeId INT = CONVERT(INT, @PaymentTypeValue);
INSERT INTO Inv_CashDrawerHistory
SELECT A.CashDrawerId [CashDrawerId], 0 [IsClosed], NULL [ReceiptId], NULL [ClosedDateTime], 
 @CashDrawerTypeId [CashDrawerTypeId], 'ADDED FROM VOUCHER ' + CONVERT(VARCHAR, @VoucherId) [Notes], @PaymentAmount [Amount], 
A.Currency_ID [CurrencyId], @EmployeeId [EmployeeId], GETDATE() [CreationDate], NULL [MultiPaymentId] 
FROM Inv_Receipt_h A WHERE ID = @ReceiptId

SELECT 1;
RETURN;

END


GO
/****** Object:  StoredProcedure [dbo].[POS_InsertRecordInCashDrawer]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[POS_InsertRecordInCashDrawer]
@ReceiptId INT
AS
BEGIN
DECLARE @PaymentTypeID INT, @PaymentTypeCode INT, @CashDrawerId INT, @PaymentAmount DECIMAL(18, 6), @IsHolded Int, @ReceiptCode int,
@CurrencyId INT, @EmployeeId INT, @VoucherDATE DATETIME, @DepositeValue DECIMAL(18, 6), @DepositePaymentType INT, @ChangeAmount DECIMAL(18,6);

SELECT		    @PaymentTypeID = Payment_Type, @ReceiptCode = A.Code,
				@VoucherDATE =  Entry_Date,@CurrencyId = Currency_ID, @IsHolded = IsHolded,
				@PaymentAmount = NetValue, @CashDrawerId = CashDrawerId, @EmployeeId = Empoyee_ID,
				@DepositeValue = Deposite, @DepositePaymentType = DepositePaymentTypeId,
				@PaymentTypeCode = B.Code, @ChangeAmount = ISNULL(A.NetValue, 0)
FROM Inv_Receipt_h A
INNER JOIN Inv_PaymentType B ON A.Payment_Type = B.id
WHERE A.ID = @ReceiptId 

IF (@ReceiptCode <> 51 AND @ReceiptCode <> 53)
RETURN;

IF (@CashDrawerId IS NULL OR ISNULL(@IsHolded, 0) = 1)
RETURN;
		
IF (@PaymentTypeID IS NULL)
RETURN;
				
				
	DECLARE @PaymentTypeValue VARCHAR(50) =  '1' + CONVERT(VARCHAR, @PaymentTypeID);
	DECLARE @IsReceptInCashDrawer INT = (SELECT TOP 1 1 FROM Inv_CashDrawerHistory WHERE ReceiptId = @receiptID);
	DECLARE @CashDrawerTypeId INT = CONVERT(INT, @PaymentTypeValue);

	-- Commented by Eng. Mohamed discussion
	--IF @PaymentTypeCode = 1 AND @ChangeAmount > 0 AND @ReceiptCode <> 53
	--BEGIN
	--	SET @PaymentAmount = @PaymentAmount - @ChangeAmount;
	--END

	IF @ReceiptCode = 53
		BEGIN
			SET @PaymentAmount = @PaymentAmount * -1;
			SET @DepositeValue = @DepositeValue * -1;
		END
	
	IF @IsReceptInCashDrawer IS NOT NULL
	BEGIN
		DELETE FROM Inv_CashDrawerHistory WHERE ReceiptId = @ReceiptId;
	END

	IF  @PaymentTypeCode = 0
	BEGIN
			INSERT INTO dbo.Inv_CashDrawerHistory 
			(CashDrawerId, 
			IsClosed, 
			ReceiptId, 
			CashDrawerTypeId, 
			Notes, 
			Amount, 
			CurrencyId, 
			EmployeeId,
			CreationDate,
			MultiPaymentId)
			SELECT	@CashDrawerId CashDrawerId,
					0 IsClosed,
					@receiptID ReceiptId,
					CONVERT(INT, '1' + CONVERT(VARCHAR, PaymentTypeId)) CashDrawerTypeId,
					'Added From Sales Order With Multi Payment' Notes,
					--CASE WHEN ISNULL(Inv_Receipt_h.ChangeAmount, 0) > 0 AND Inv_PaymentType.Code = 1 THEN Amount - Inv_Receipt_h.ChangeAmount
					--ELSE Amount END Amount,
					Amount,
					@CurrencyId,
					@EmployeeId,
					@VoucherDATE,
					Inv_ReceiptMultiPayment.Id MultiPaymentId
			FROM Inv_ReceiptMultiPayment
			INNER JOIN Inv_Receipt_h ON Inv_ReceiptMultiPayment.ReceiptId = Inv_Receipt_h.ID
			INNER JOIN Inv_PaymentType ON Inv_ReceiptMultiPayment.PaymentTypeId = Inv_PaymentType.id 
			WHERE ReceiptId = @ReceiptId;
	END
	ELSE
		BEGIN
				INSERT INTO dbo.Inv_CashDrawerHistory 
				(CashDrawerId, 
				IsClosed, 
				ReceiptId, 
				CashDrawerTypeId, 
				Notes, 
				Amount, 
				CurrencyId, 
				EmployeeId,
				CreationDate)
				VALUES (
				@CashDrawerId,
				0,
				@receiptID,
				@CashDrawerTypeId,
				'Added From Sales Order',
				@PaymentAmount,
				@CurrencyId,
				@EmployeeId,
				@VoucherDATE
				);

				IF @PaymentTypeCode = -1 AND @DepositeValue IS NOT NULL AND @DepositeValue > 0 AND  @DepositePaymentType IS NOT NULL
				BEGIN
						DECLARE @DepositeCashDrawerPaymentType INT = CONVERT(INT, '1' + CONVERT(VARCHAR, @DepositePaymentType));
						INSERT INTO dbo.Inv_CashDrawerHistory 
							(CashDrawerId, 
							IsClosed, 
							ReceiptId, 
							CashDrawerTypeId, 
							Notes, 
							Amount, 
							CurrencyId, 
							EmployeeId,
							CreationDate)
							VALUES (
							@CashDrawerId,
							0,
							@receiptID,
							@DepositeCashDrawerPaymentType,
							'Added From Deposite Order',
							@DepositeValue,
							@CurrencyId,
							@EmployeeId,
							@VoucherDATE
							);
				END
		END

END
GO
/****** Object:  StoredProcedure [dbo].[POS_InsertReturnOrderFromSalesOrder]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 CREATE PROCEDURE [dbo].[POS_InsertReturnOrderFromSalesOrder]
@ReceiptId INT

AS
BEGIN
INSERT INTO Inv_Receipt_h ([Entry_No], [SubsidiaryID], [Code], [Branch_ID], [Transaction_Code], [Entry_Date], [Payment_Type],
		 [Vendor_ID], [CashCustomerID], [Currency_ID], [Currency_Rate], [Empoyee_ID], [Memo], [Reference_No], 
		 [Related_Voucher_Type], [Related_Voucher_Code], [Value], [ValueForeign], [Discount_Value], 
		 [Discount_Percent], [NetValue], [Discount_ForeignValue], [Discount_ForeignPercent], [NetValueForeign], 
		 [Status_ID], [ApprovalStatus_ID], [Costing_Rate], [Reference], [ApprovedBy_ID], [ShipmentTerm_ID], 
		 [PaymentTerm_ID], [SupplierAccount_ID], [PlannedDeliveryDate], [ActualDeliveryDate], [DeliveryLocation],
		 [ContactedPerson], [OtherNotes], [CustomerSalesPrice], [CashDrawerId], [LeadID], [OrderType], 
		 [DriverId], [DeliveryNotes], [CashCustomerDetailId], [Is_Canceled], [DeliveryFees], [FromStoreID], 
		 [ToStoreID], [IsDeliveryPrint], [PrintCount], [CostCenterID], [ClassID], [LocationID], [DepartmentID],
		 [IsKitchenDone], [PaidAmount], [IsHolded], [BranchTableId], [CustomerDeliverDate], [Signature], 
		 [CustomerActualDeliverDate], [DeliveryStatusId], [CarID], [Deposite], [PaymentAndConditions], 
		 [Notes], [ChefId], [ChangeAmount], [DivisionID], [CourierID], [DepositePaymentTypeId], [CreationDate],
		 [LastUpdateDate], [CreatedByID], [UpdatedByID], [ReservedFlag], [ReceiptAttributeId], [SalesTypeID], 
		 [CommissionType], [Commission], [CommissionNet], [CommisionAccountID], [CostPosted], [LCAccountID], 
		 [LCNo], [LCBank], [LCStartDate], [LCEndDate], [LCRenewDate], [LCRenewEndDate], [LCInsuranceCompany], 
		 [LCPolicyNo], [InsuranceDate], [GoodDeliveryDate], [LCCondition], [ShippingMethod], [ExportPort],
		 [ShipName], [LCNotes], [QuotationCustomerName], [DueDate], [Schedule_Date], [ERPStatus], [StoreType], 
		  [QuotationEndDate], [WOstatusID], [ParentReceiptId])
		
         SELECT 
	     1 [Entry_No], [SubsidiaryID], 53  [Code], [Branch_ID], [Transaction_Code], getdate() [Entry_Date], [Payment_Type],
		 [Vendor_ID], [CashCustomerID], [Currency_ID], [Currency_Rate], [Empoyee_ID], [Memo], [Reference_No], 
		 [Related_Voucher_Type], [Related_Voucher_Code], [Value], [ValueForeign], [Discount_Value], 
		 [Discount_Percent], [NetValue], [Discount_ForeignValue], [Discount_ForeignPercent], [NetValueForeign], 
		 [Status_ID], [ApprovalStatus_ID], [Costing_Rate], [Reference], [ApprovedBy_ID], [ShipmentTerm_ID], 
		 [PaymentTerm_ID], [SupplierAccount_ID], NULL [PlannedDeliveryDate], NULL [ActualDeliveryDate], [DeliveryLocation],
		 [ContactedPerson], [OtherNotes], [CustomerSalesPrice], [CashDrawerId], [LeadID], [OrderType], 
		 [DriverId], [DeliveryNotes], [CashCustomerDetailId], [Is_Canceled], [DeliveryFees], [FromStoreID], 
		 [ToStoreID], [IsDeliveryPrint], [PrintCount], [CostCenterID], [ClassID], [LocationID], [DepartmentID],
		 [IsKitchenDone], [PaidAmount], [IsHolded], [BranchTableId], NULL  [CustomerDeliverDate], [Signature], 
		 NULL [CustomerActualDeliverDate], [DeliveryStatusId], [CarID], [Deposite], [PaymentAndConditions], 
		 [Notes], [ChefId], [ChangeAmount], [DivisionID], [CourierID], [DepositePaymentTypeId], GETDATE() [CreationDate],
		 GETDATE() [LastUpdateDate], [CreatedByID], [UpdatedByID], [ReservedFlag], [ReceiptAttributeId], [SalesTypeID], 
		 [CommissionType], [Commission], [CommissionNet], [CommisionAccountID], [CostPosted], [LCAccountID], 
		 [LCNo], [LCBank], NULL [LCStartDate], NULL [LCEndDate], NULL [LCRenewDate], NULL [LCRenewEndDate], [LCInsuranceCompany], 
		 [LCPolicyNo],NULL [InsuranceDate], NULL [GoodDeliveryDate], [LCCondition], [ShippingMethod], [ExportPort],
		 [ShipName], [LCNotes], [QuotationCustomerName], NULL [DueDate], NULL [Schedule_Date], [ERPStatus], [StoreType], 
		 NULL [QuotationEndDate], [WOstatusID], [ParentReceiptId]
		FROM Inv_Receipt_h 
		WHERE ID = @ReceiptId;

DECLARE @NewReceiptId INT;
SELECT @NewReceiptId = SCOPE_IDENTITY();
DECLARE @TransactionMove INT = (SELECT TOP 1 Items FROM Inv_Transaction_Codes WHERE Code = 53);
INSERT INTO Inv_Receipt_d ([Parent_ID], [Store_ID], [Item_ID], [Qty], [Price], [Unit_ID], [Conv], [Discount_Value], 
		[Discount_Percent], [Total], [Transaction_move], [Item_Type], [H_Discount_Percentage], [Recieved_Qty], 
		[Avr_Cost], [Notes], [FinishedProductID], [H_Discount_Value], [DepartmentID], [SalesManId], 
		[KitchenStatus], [DetailsHTML], [CustomItemName], [IsMembership], [MembershipDetailId], 
		[IsCustomOption], [CustomOptionReceiptDetailParentId], [updatefromproc], [DynamicId], [IssueQty], 
		[DefaultItemCost], [DefaultItemQty], [Final_conv], [IsDeleted], [FinishedReceipt_dID], 
	    [WarrantyDate], [IsReturn])
SELECT 
		@NewReceiptId [Parent_ID], [Store_ID], [Item_ID], [Qty], [Price], [Unit_ID], [Conv], [Discount_Value], 
		[Discount_Percent], [Total], @TransactionMove [Transaction_move], [Item_Type], [H_Discount_Percentage], [Recieved_Qty], 
		[Avr_Cost], [Notes], [FinishedProductID], [H_Discount_Value], [DepartmentID], [SalesManId], 
		[KitchenStatus], [DetailsHTML], [CustomItemName], [IsMembership], [MembershipDetailId], 
		[IsCustomOption], [CustomOptionReceiptDetailParentId], [updatefromproc], [DynamicId], [IssueQty], 
		[DefaultItemCost], [DefaultItemQty], [Final_conv], [IsDeleted], [FinishedReceipt_dID], 
		NULL [WarrantyDate], [IsReturn]
		FROM Inv_Receipt_d
		WHERE [Parent_ID] =  @ReceiptId;

EXEC POS_InsertRecordInCashDrawer @NewReceiptId
END
GO
/****** Object:  StoredProcedure [dbo].[POS_InsertTransferTransaction]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[POS_InsertTransferTransaction]-- 4544
@ReceiptId int 
AS
BEGIN
UPDATE Inv_Receipt_h SET ERPStatus = 3 WHERE ID = @ReceiptId;

DECLARE @SubsID INT = (SELECT SubsidiaryID FROM Inv_Receipt_h WHERE ID = @ReceiptId);
DECLARE @TransactionSerial INT = (SELECT TransactionSerial FROM mstr_InventroySettings WHERE SubsidiaryID = @SubsID);
DECLARE @BranchID INT = (SELECT Branch_ID FROM Inv_Receipt_h WHERE ID = @ReceiptId);

DECLARE @TransferGoodEntryNo INT = 1 
IF (@TransactionSerial = 1) -- تسلسل متتالى
  set @TransferGoodEntryNo = (SELECT isnull(max(Entry_No),0) + 1 FROM Inv_Receipt_h WHERE Code = 81);
ELSE  -- تسلسل لكل فرع
    set @TransferGoodEntryNo = (SELECT isnull(max(Entry_No),0) + 1 FROM Inv_Receipt_h WHERE Code = 81 and Branch_ID = @BranchID);

DECLARE @FromStoreID INT = (SELECT FromStoreID FROM Inv_Receipt_h WHERE ID = @ReceiptId);
DECLARE @ToStoreID INT = (SELECT ToStoreID FROM Inv_Receipt_h WHERE ID = @ReceiptId);

INSERT INTO Inv_Receipt_h ([Entry_No], [SubsidiaryID], [Code], [Branch_ID], [Transaction_Code], [Entry_Date], [Payment_Type],
		 [Vendor_ID], [CashCustomerID], [Currency_ID], [Currency_Rate], [Empoyee_ID], [Memo], [Reference_No], 
		 [Related_Voucher_Type], [Related_Voucher_Code], [Value], [ValueForeign], [Discount_Value], 
		 [Discount_Percent], [NetValue], [Discount_ForeignValue], [Discount_ForeignPercent], [NetValueForeign], 
		 [Status_ID], [ApprovalStatus_ID], [Costing_Rate], [Reference], [ApprovedBy_ID], [ShipmentTerm_ID], 
		 [PaymentTerm_ID], [SupplierAccount_ID], [PlannedDeliveryDate], [ActualDeliveryDate], [DeliveryLocation],
		 [ContactedPerson], [OtherNotes], [CustomerSalesPrice], [CashDrawerId], [LeadID], [OrderType], 
		 [DriverId], [DeliveryNotes], [CashCustomerDetailId], [Is_Canceled], [DeliveryFees], [FromStoreID], 
		 [ToStoreID], [IsDeliveryPrint], [PrintCount], [CostCenterID], [ClassID], [LocationID], [DepartmentID],
		 [IsKitchenDone], [PaidAmount], [IsHolded], [BranchTableId], [CustomerDeliverDate], [Signature], 
		 [CustomerActualDeliverDate], [DeliveryStatusId], [CarID], [Deposite], [PaymentAndConditions], 
		 [Notes], [ChefId], [ChangeAmount], [DivisionID], [CourierID], [DepositePaymentTypeId], [CreationDate],
		 [LastUpdateDate], [CreatedByID], [UpdatedByID], [ReservedFlag], [ReceiptAttributeId], [SalesTypeID], 
		 [CommissionType], [Commission], [CommissionNet], [CommisionAccountID], [CostPosted], [LCAccountID], 
		 [LCNo], [LCBank], [LCStartDate], [LCEndDate], [LCRenewDate], [LCRenewEndDate], [LCInsuranceCompany], 
		 [LCPolicyNo], [InsuranceDate], [GoodDeliveryDate], [LCCondition], [ShippingMethod], [ExportPort],
		 [ShipName], [LCNotes], [QuotationCustomerName], [DueDate], [Schedule_Date], [ERPStatus], [StoreType], 
		  [QuotationEndDate], [WOstatusID], [ParentReceiptId])
		
         SELECT 
	     @TransferGoodEntryNo [Entry_No], [SubsidiaryID], 81  [Code], [Branch_ID], [Transaction_Code], getdate() [Entry_Date], [Payment_Type],
		 [Vendor_ID], [CashCustomerID], [Currency_ID], [Currency_Rate], [Empoyee_ID], [Memo], [Reference_No], 
		 [Related_Voucher_Type], [Related_Voucher_Code], [Value], [ValueForeign], [Discount_Value], 
		 [Discount_Percent], [NetValue], [Discount_ForeignValue], [Discount_ForeignPercent], [NetValueForeign], 
		 [Status_ID], [ApprovalStatus_ID], [Costing_Rate], [Reference], [ApprovedBy_ID], [ShipmentTerm_ID], 
		 [PaymentTerm_ID], [SupplierAccount_ID], NULL [PlannedDeliveryDate], NULL [ActualDeliveryDate], [DeliveryLocation],
		 [ContactedPerson], [OtherNotes], [CustomerSalesPrice], [CashDrawerId], [LeadID], [OrderType], 
		 [DriverId], [DeliveryNotes], [CashCustomerDetailId], [Is_Canceled], [DeliveryFees], [FromStoreID], 
		 [ToStoreID], [IsDeliveryPrint], [PrintCount], [CostCenterID], [ClassID], [LocationID], [DepartmentID],
		 [IsKitchenDone], [PaidAmount], [IsHolded], [BranchTableId], NULL  [CustomerDeliverDate], [Signature], 
		 NULL [CustomerActualDeliverDate], [DeliveryStatusId], [CarID], [Deposite], [PaymentAndConditions], 
		 [Notes], [ChefId], [ChangeAmount], [DivisionID], [CourierID], [DepositePaymentTypeId], GETDATE() [CreationDate],
		 GETDATE() [LastUpdateDate], [CreatedByID], [UpdatedByID], [ReservedFlag], [ReceiptAttributeId], [SalesTypeID], 
		 [CommissionType], [Commission], [CommissionNet], [CommisionAccountID], [CostPosted], [LCAccountID], 
		 [LCNo], [LCBank], NULL [LCStartDate], NULL [LCEndDate], NULL [LCRenewDate], NULL [LCRenewEndDate], [LCInsuranceCompany], 
		 [LCPolicyNo],NULL [InsuranceDate], NULL [GoodDeliveryDate], [LCCondition], [ShippingMethod], [ExportPort],
		 [ShipName], [LCNotes], [QuotationCustomerName], NULL [DueDate], NULL [Schedule_Date], [ERPStatus], [StoreType], 
		 NULL [QuotationEndDate], [WOstatusID], [ParentReceiptId]
		FROM Inv_Receipt_h 
		WHERE ID = @ReceiptId;

DECLARE @NewReceiptId INT;
SELECT @NewReceiptId = SCOPE_IDENTITY();
--DECLARE @TransactionMove INT = (SELECT TOP 1 Items FROM Inv_Transaction_Codes WHERE Code = 53);

--- Save from Store record

INSERT INTO Inv_Receipt_d ([Parent_ID], [Store_ID], [Item_ID], [Qty], [Price], [Unit_ID], [Conv], [Discount_Value], 
		[Discount_Percent], [Total], [Transaction_move], [Item_Type], [H_Discount_Percentage], [Recieved_Qty], 
		[Avr_Cost], [Notes], [FinishedProductID], [H_Discount_Value], [DepartmentID], [SalesManId], 
		[KitchenStatus], [DetailsHTML], [CustomItemName], [IsMembership], [MembershipDetailId], 
		[IsCustomOption], [CustomOptionReceiptDetailParentId], [updatefromproc], [DynamicId], [IssueQty], 
		[DefaultItemCost], [DefaultItemQty], [Final_conv], [IsDeleted], [FinishedReceipt_dID], 
	    [WarrantyDate], [IsReturn])
SELECT 
		@NewReceiptId [Parent_ID], @FromStoreID, [Item_ID], [Qty], [Price], [Unit_ID], [Conv], [Discount_Value], 
		[Discount_Percent], [Total], -1 [Transaction_move], [Item_Type], [H_Discount_Percentage], [Recieved_Qty], 
		[Avr_Cost], [Notes], [FinishedProductID], [H_Discount_Value], [DepartmentID], [SalesManId], 
		[KitchenStatus], [DetailsHTML], [CustomItemName], [IsMembership], [MembershipDetailId], 
		[IsCustomOption], [CustomOptionReceiptDetailParentId], [updatefromproc], [DynamicId], [IssueQty], 
		[DefaultItemCost], [DefaultItemQty], [Final_conv], [IsDeleted], [FinishedReceipt_dID], 
		NULL [WarrantyDate], [IsReturn]
		FROM Inv_Receipt_d
		WHERE [Parent_ID] =  @ReceiptId;

--- Save to Store record
INSERT INTO Inv_Receipt_d ([Parent_ID], [Store_ID], [Item_ID], [Qty], [Price], [Unit_ID], [Conv], [Discount_Value], 
		[Discount_Percent], [Total], [Transaction_move], [Item_Type], [H_Discount_Percentage], [Recieved_Qty], 
		[Avr_Cost], [Notes], [FinishedProductID], [H_Discount_Value], [DepartmentID], [SalesManId], 
		[KitchenStatus], [DetailsHTML], [CustomItemName], [IsMembership], [MembershipDetailId], 
		[IsCustomOption], [CustomOptionReceiptDetailParentId], [updatefromproc], [DynamicId], [IssueQty], 
		[DefaultItemCost], [DefaultItemQty], [Final_conv], [IsDeleted], [FinishedReceipt_dID], 
	    [WarrantyDate], [IsReturn])
SELECT 
		@NewReceiptId [Parent_ID], @ToStoreID, [Item_ID], [Qty], [Price], [Unit_ID], [Conv], [Discount_Value], 
		[Discount_Percent], [Total], 1 [Transaction_move], [Item_Type], [H_Discount_Percentage], [Recieved_Qty], 
		[Avr_Cost], [Notes], [FinishedProductID], [H_Discount_Value], [DepartmentID], [SalesManId], 
		[KitchenStatus], [DetailsHTML], [CustomItemName], [IsMembership], [MembershipDetailId], 
		[IsCustomOption], [CustomOptionReceiptDetailParentId], [updatefromproc], [DynamicId], [IssueQty], 
		[DefaultItemCost], [DefaultItemQty], [Final_conv], [IsDeleted], [FinishedReceipt_dID], 
		NULL [WarrantyDate], [IsReturn]
		FROM Inv_Receipt_d
		WHERE [Parent_ID] =  @ReceiptId;

END
GO
/****** Object:  StoredProcedure [dbo].[POS_ItemWiseStockReport]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[POS_ItemWiseStockReport] 
(
	@itemId int, --=  7530, --7530 ,--4292, -- 7536
	@BranchId int --=46
)
AS 
BEGIN 
 
	Declare @ItemType int,@ConfigurableItemId int

	select @ItemType = Item_Type ,@ConfigurableItemId = ConfigurableItemId  from Inv_Items where Id = @itemId

	IF(@ItemType = 5 OR @ConfigurableItemId > 0)
	BEGIN 
	    
		if(@ConfigurableItemId > 0)
		BEGIN 
			SET @itemId = @ConfigurableItemId
		END

		select  
		BAL.Color,
		BAL.Size,
		S.Code,
		S.Name,
		S.Name_AR,
		BAL.Balance,
		1 Configurable
		from mstr_Branch BR
		INNER JOIN Inv_Store S
		ON S.ID = BR.StoreID
		INNER JOIN (select A.Color,A.Size,B.Balance,B.store_id from Inv_Items A
		INNER JOIN AV_Inv_items_store B
		ON A.ID = B.item_id
		WHERE A.ConfigurableItemId = @itemId) BAL
		ON BAL.store_id = S.ID
		WHERE BR.ID = @BranchId


	END
	ELSE
	BEGIN

		SELECT 
		'' AS Color,
		'' AS Size,
		S.Code,
		S.Name,
		S.Name_AR,
		BAL.Balance,
		0 Configurable 
		from Inv_Store S 
		INNER JOIN  AV_Inv_items_store BAl
		ON BAl.store_id = S.ID
		where BAL.item_id = @itemId

	END

END
GO
/****** Object:  StoredProcedure [dbo].[POS_LinkDriverWithOrders]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[POS_LinkDriverWithOrders]
	@DriverId INT,
	@ChefId INT = NULL,
	@OrdersIds NVARCHAR(250)
AS 
BEGIN 
		DECLARE @sql NVARCHAR(500)
		SET @sql = 'UPDATE Inv_receipt_h SET DriverId = ' + CONVERT(VARCHAR, @DriverId) + ', DeliveryStatusId = 3';
		IF @ChefId IS NOT NULL
		BEGIN
				SET @sql = @sql + ' ,ChefId = ' + CONVERT(VARCHAR, @ChefId);
		END
		SET @sql = @sql + ' WHERE ID IN (' + @OrdersIds + ')';
		EXEC sp_executesql @sql;
		SET @sql = 'INSERT INTO Inv_DeliveryStatusHistory
					SELECT 3 DeliveryStatusId, ID RecieptId, GETDATE() CreationDate  FROM Inv_Receipt_h WHERE ID IN ('+ @OrdersIds +')'
		EXEC sp_executesql @sql;
END
GO
/****** Object:  StoredProcedure [dbo].[POS_Rep_Membership]    Script Date: 2020-12-07 10:00:20 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

		CREATE PROCEDURE [dbo].[POS_Rep_Membership]
@CustomerId INT = null,
@FromExpirationDate DATETIME = null,
@ToExpirationDate DATETIME = null,
@BranchId INT, 
@CustomerName NVARCHAR(50) = NULL, 
@CustomerPhone NVARCHAR(50) NULL
AS
BEGIN
			;WITH MembershipItems AS (SELECT 
					D.Entry_Date [CreationDate],
					B.MembershipId,
					B.Id [MembershipDetailId],
					C.Name [ItemName],
					C.Name_AR [ItemNameAr],
					B.Qty,
					'Exist' [Status],
					'' [SalesMan]
			
			FROM Inv_MembershipDetail B
			INNER JOIN Inv_Membership A ON B.MembershipId = A.Id
			INNER JOIN Inv_Receipt_h D ON A.ReceiptId = D.ID
			INNER JOIN Inv_Items C ON B.ItemId = C.ID
			WHERE QTY > 0 AND A.ExpirationDate > GETDATE()
			
			UNION ALL
			
			SELECT 
					V.Entry_Date [CreationDate],
					B.MembershipId,
					B.Id [MembershipDetailId],
					C.Name [ItemName],
					C.Name_AR [ItemNameAr],
					A.Qty,
					'Consumed' [Status],
					X.Name [SalesMan]
			FROM Inv_Receipt_d A
			INNER JOIN Inv_Receipt_h V ON A.Parent_Id = V.ID
			INNER JOIN Inv_MembershipDetail B ON A.MembershipDetailId = B.Id
			INNER JOIN Inv_Membership D ON B.MembershipId = D.Id
			INNER JOIN Inv_Items C ON B.ItemId = C.ID
			LEFT JOIN Security_Users X ON A.SalesManId = X.Id
			WHERE A.MembershipDetailId IS NOT NULL AND D.ExpirationDate > GETDATE())
			
			SELECT 
					A.MembershipId,
					C.Name [CustomerName],
					C.PhoneNumber [CustomerPhoneNumber],
					C.ID [CustomerId],
					H.NetValue [Amount],
					H.Entry_No [ReceiptNumber],
					B.ExpirationDate,
					A.CreationDate,
					A.[MembershipDetailId],
					A.[ItemName],
					A.ItemNameAr,
					A.Qty,
					A.[Status],
					A.[SalesMan]
			FROM MembershipItems A
			INNER JOIN Inv_Membership B ON A.MembershipId = B.Id 
			INNER JOIN Inv_CashCustomer C ON B.CashCustomerId = C.Id
			INNER JOIN Inv_Receipt_h H ON B.ReceiptId = H.ID
			WHERE	H.Branch_ID = @BranchId
				AND	B.CashCustomerId = COALESCE(@CustomerId, B.CashCustomerId)
				AND (@FromExpirationDate IS NULL OR B.ExpirationDate BETWEEN @FromExpirationDate AND @ToExpirationDate)
				AND (@CustomerName IS NULL OR C.Name LIKE '%' + @CustomerName + '%')
				AND (@CustomerPhone IS NULL OR C.PhoneNumber LIKE '%' + @CustomerPhone + '%')
			ORDER BY B.CreationDate DESC
END 
GO
/****** Object:  StoredProcedure [dbo].[POS_StaffCashDrawerReport]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[POS_StaffCashDrawerReport]
AS
BEGIN
SELECT
A.Id [UserId], 
A.Name [UserName],
B.Name [CashDrawer], 
C.Amount [CashCounted],
C.ClosedDateTime [CloseDate],
B.BranchId,
A.Id [EmployeeId]
FROM Security_Users A
INNER JOIN mstr_CashDrawer B ON A.CashDrawerId = B.Id
CROSS APPLY 
   ( 
   SELECT TOP 1 Amount, ClosedDateTime, EmployeeId FROM Inv_CashDrawerHistory E 
   INNER JOIN CashDrawerActionType_Vw X ON E.CashDrawerTypeId = X.Id
   WHERE E.EmployeeId = A.Id  AND X.Name LIKE '%Cash Counted%'
   ORDER BY E.CreationDate DESC
   ) C 
END

GO
/****** Object:  StoredProcedure [dbo].[POS_UpdateCouponUsed]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[POS_UpdateCouponUsed]
(
	 @couponCodeId int
)
AS 
BEGIN
	
	UPDATE GL_Promotion_CouponDetails SET  Valid = 0 ,Used_cnt = Used_cnt + 1  where Id = @couponCodeId

END
GO
/****** Object:  StoredProcedure [dbo].[POS_UpdateCustomerLoyalityBalance]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[POS_UpdateCustomerLoyalityBalance]
@ReceiptId INT, 
@CustomerId INT,
@LoyalityBalance DECIMAL(18, 6),
@SubsidiaryID INT
AS
BEGIN
	IF @ReceiptId = 0
		BEGIN
			UPDATE Inv_CashCustomer SET LoyalityBalance = ISNULL(LoyalityBalance , 0) + @LoyalityBalance
				WHERE id = @CustomerId;
		END
	ELSE
		BEGIN
			DECLARE @OldLoyalityBalance decimal(18, 6) = (SELECT LoyalityBalance FROM Inv_Receipt_h WHERE ID = @ReceiptId)
			IF @OldLoyalityBalance <> @LoyalityBalance
				BEGIN
					UPDATE Inv_CashCustomer 
					SET LoyalityBalance = ISNULL(LoyalityBalance , 0) + (@LoyalityBalance - @OldLoyalityBalance)
					WHERE id = @CustomerId;
				END
		END
END

GO
/****** Object:  StoredProcedure [dbo].[POS_UpdateOrderStatus]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[POS_UpdateOrderStatus]
@OrderId INT,
@DriverId INT = NULL,
@DeliveryStatusId INT,
@ChefId INT = NULL
AS 
BEGIN
	
	IF @DeliveryStatusId = 1
		BEGIN
			UPDATE Inv_Receipt_d SET KitchenStatus = 3 WHERE Parent_ID = @OrderId;
			UPDATE Inv_Receipt_h SET IsKitchenDone = 1, DeliveryStatusId = @DeliveryStatusId WHERE ID = @OrderId;
		END
	ELSE
	IF @DeliveryStatusId = 3
		BEGIN
			IF @ChefId IS NULL OR @ChefId <= 0
				BEGIN
					UPDATE Inv_Receipt_h SET DeliveryStatusId = @DeliveryStatusId,  IsKitchenDone = 1, DriverId = @DriverId WHERE ID = @OrderId;
				END
			ELSE
				BEGIN
					UPDATE Inv_Receipt_h SET DeliveryStatusId = @DeliveryStatusId, ChefId = @ChefId, IsKitchenDone = 1, DriverId = @DriverId WHERE ID = @OrderId;
				END
		END
	ELSE
	IF @DeliveryStatusId = 4
		BEGIN
				UPDATE Inv_Receipt_h SET DeliveryStatusId = @DeliveryStatusId, CustomerActualDeliverDate = GETDATE() WHERE ID = @OrderId;
		END
	ELSE
	IF @DeliveryStatusId = 5
		BEGIN
			 UPDATE Inv_Receipt_h SET DeliveryStatusId = @DeliveryStatusId WHERE ID = @OrderId;
		      EXEC POS_InsertReturnOrderFromSalesOrder @OrderId;
			  --EXEC POS_InsertReturnOrderDetailsFromSalesOrder @OrderId;
		END
	ELSE
		BEGIN
			UPDATE Inv_Receipt_h SET DeliveryStatusId = @DeliveryStatusId, IsKitchenDone = 1 WHERE ID = @OrderId;
		END


	INSERT INTO Inv_DeliveryStatusHistory
	(DeliveryStatusId, RecieptId, CreationDate)
	VALUES
	(@DeliveryStatusId, @OrderId, GETDATE());
	
	DECLARE @returnValue NVARCHAR(100) = 'Success';
	IF @DriverId IS NOT NULL
		BEGIN
			SET @returnValue = (SELECT TOP 1 Name FROM Security_Users WHERE Id = @DriverId);
		END
	SELECT @returnValue;
END


GO
/****** Object:  StoredProcedure [dbo].[POS_UpdatePrintOrderDoneStatus]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[POS_UpdatePrintOrderDoneStatus]
	@PrintOrderId INT,
	@IsDone BIT,
	@ErrorMessage NVARCHAR(500)
AS
BEGIN

	UPDATE GL_CloudPrintingTransactions SET IsDone = @IsDone, DoneDate = GETDATE(), ErrorMessage = @ErrorMessage
	WHERE ID = @PrintOrderId;

END
GO
/****** Object:  StoredProcedure [dbo].[POS_UpdateReceiptPaymentType]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[POS_UpdateReceiptPaymentType]
@ReceiptId INT,
@PaymentType INT
AS
BEGIN
	UPDATE Inv_Receipt_h SET Payment_Type = @PaymentType WHERE ID = @ReceiptId;

END

GO
/****** Object:  StoredProcedure [dbo].[proc_CreateTempPostingTable]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[proc_CreateTempPostingTable] 
AS
BEGIN
	 
	-- IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='GL_VoucherDetailstemp') 
	--	Drop Table GL_VoucherDetailsTemp
	--IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='GL_Voucherstemp') 
	--	Drop Table GL_Voucherstemp

		CREATE TABLE [dbo].[GL_Voucherstemp](
			[ID] [int] IDENTITY(1,1) NOT NULL,
			[Code] [nvarchar](50) NULL,
			[VoucherTypeID] [int] NOT NULL,
			[BranchID] [int] NULL,
			[CurrencyID] [int] NOT NULL,
			[SubsidaryID] [int] NOT NULL,
			[VouhcerDate] [datetime] NOT NULL,
			[ReversalDate] [datetime] NULL,
			[ExchangeRate] [numeric](18, 6) NOT NULL CONSTRAINT [DF_GL_VouchersTemp_ExchangeRatetemp]  DEFAULT ((1)),
			[ReferanceNo] [nvarchar](50) NULL,
			[Memo] [nvarchar](500) NULL,
			[Approved] [bit] NOT NULL CONSTRAINT [DF_GL_VouchersTemp_Approvedtemp]  DEFAULT ((0)),
			[DeferEntry] [bit] NOT NULL CONSTRAINT [DF_GL_VouchersTemp_DeferEntrytemp]  DEFAULT ((0)),
			[Posted] [bit] NOT NULL CONSTRAINT [DF_GL_VouchersTemp_Postedtemp]  DEFAULT ((0)),
			[BankName] [nvarchar](100) NULL,
			[CheeckBookID] [int] NULL,
			[CheckNumber] [nvarchar](100) NULL,
			[IsActive] [bit] NOT NULL CONSTRAINT [DF_GL_VouchersTemp_IsActivetemp]  DEFAULT ((1)),
			[Beneficiary] [nvarchar](500) NULL,
			[ReceiptID] [int] NULL,
			[BillNo] [int] NULL,
		 CONSTRAINT [PK_GL_vouchertemp] PRIMARY KEY CLUSTERED 
		(
			[ID] ASC
		)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
		) ON [PRIMARY]

		ALTER TABLE [dbo].[GL_VouchersTemp]  WITH CHECK ADD  CONSTRAINT [FK_GL_VouchersTemp_Gl_CheckBookstemp] FOREIGN KEY([CheeckBookID])
		REFERENCES [dbo].[Gl_CheckBooks] ([ID]) 

		ALTER TABLE [dbo].[GL_VouchersTemp] CHECK CONSTRAINT [FK_GL_VouchersTemp_Gl_CheckBookstemp]

		ALTER TABLE [dbo].[GL_VouchersTemp]  WITH CHECK ADD  CONSTRAINT [FK_GL_VouchersTemp_GL_VoucherTypetemp] FOREIGN KEY([VoucherTypeID])
		REFERENCES [dbo].[GL_VoucherType] ([ID]) 

		ALTER TABLE [dbo].[GL_VouchersTemp] CHECK CONSTRAINT [FK_GL_VouchersTemp_GL_VoucherTypetemp]

		ALTER TABLE [dbo].[GL_VouchersTemp]  WITH CHECK ADD  CONSTRAINT [FK_GL_VouchersTemp_mstr_Branchtemp] FOREIGN KEY([BranchID])
		REFERENCES [dbo].[mstr_Branch] ([ID])

		ALTER TABLE [dbo].[GL_VouchersTemp] CHECK CONSTRAINT [FK_GL_VouchersTemp_mstr_Branchtemp]

		ALTER TABLE [dbo].[GL_VouchersTemp]  WITH CHECK ADD  CONSTRAINT [FK_GL_VouchersTemp_mstr_Currenciestemp] FOREIGN KEY([CurrencyID])
		REFERENCES [dbo].[mstr_Currencies] ([ID])

		ALTER TABLE [dbo].[GL_VouchersTemp] CHECK CONSTRAINT [FK_GL_VouchersTemp_mstr_Currenciestemp]

		ALTER TABLE [dbo].[GL_VouchersTemp]  WITH CHECK ADD  CONSTRAINT [FK_GL_VouchersTemp_mstr_Subsidariestemp] FOREIGN KEY([SubsidaryID])
		REFERENCES [dbo].[mstr_Subsidaries] ([ID])

		ALTER TABLE [dbo].[GL_VouchersTemp] CHECK CONSTRAINT [FK_GL_VouchersTemp_mstr_Subsidariestemp]


		/**************Details************/
		

	CREATE TABLE [dbo].[GL_VoucherDetailsTemp](
		[ID] [int] IDENTITY(1,1) NOT NULL,
		[VoucherID] [int] NOT NULL,
		[LocationID] [int] NULL,
		[DepartmentID] [int] NULL,
		[ClassID] [int] NULL,
		[CostcenterID] [int] NULL,
		[AccountNoID] [int] NULL,
		[Debit] [numeric](18, 6) NOT NULL CONSTRAINT [DF_GL_VoucherDetailsTemp_Debit]  DEFAULT ((0)),
		[Credit] [numeric](18, 6) NOT NULL CONSTRAINT [DF_GL_VoucherDetailsTemp_Credit]  DEFAULT ((0)),
		[DebitForeign] [numeric](18, 6) NOT NULL CONSTRAINT [DF_GL_VoucherDetailsTemp_DebitForeign]  DEFAULT ((0)),
		[CreditForeign] [numeric](18, 6) NOT NULL CONSTRAINT [DF_GL_VoucherDetailsTemp_CreditForeign]  DEFAULT ((0)),
		[Memo] [nvarchar](500) NULL,
		[IsActive] [bit] NOT NULL CONSTRAINT [DF_GL_Vouchersdtemp_IsActive]  DEFAULT ((0)),
		[Header] [bit] NULL CONSTRAINT [DF_GL_VoucherDetailsTemp_Header]  DEFAULT ((0)),
		[Reconciled] [bit] NOT NULL CONSTRAINT [DF_GL_VoucherDetailsTemp_Reconciled]  DEFAULT ((0)),
		[Cleared] [bit] NOT NULL CONSTRAINT [DF_GL_VoucherDetailsTemp_Reconciled1]  DEFAULT ((0)),
		[inv_ReceipID] [int] NULL,
	 CONSTRAINT [PK_GL_voucherdtemp] PRIMARY KEY CLUSTERED 
	(
		[ID] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
	) ON [PRIMARY]



	ALTER TABLE [dbo].[GL_VoucherDetailsTemp]  WITH CHECK ADD  CONSTRAINT [FK_GL_VoucherDetailsTemp_GL_Accounts] FOREIGN KEY([AccountNoID])
	REFERENCES [dbo].[GL_Accounts] ([AccountID])


	ALTER TABLE [dbo].[GL_VoucherDetailsTemp] CHECK CONSTRAINT [FK_GL_VoucherDetailsTemp_GL_Accounts]


	ALTER TABLE [dbo].[GL_VoucherDetailsTemp]  WITH CHECK ADD  CONSTRAINT [FK_GL_VoucherDetailsTemp_GL_Vouchers] FOREIGN KEY([VoucherID])
	REFERENCES [dbo].[GL_Voucherstemp] ([ID])
	ON UPDATE CASCADE
	ON DELETE CASCADE


	ALTER TABLE [dbo].[GL_VoucherDetailsTemp] CHECK CONSTRAINT [FK_GL_VoucherDetailsTemp_GL_Vouchers]


	ALTER TABLE [dbo].[GL_VoucherDetailsTemp]  WITH CHECK ADD  CONSTRAINT [FK_GL_VoucherDetailsTemp_mstr_Classes] FOREIGN KEY([ClassID])
	REFERENCES [dbo].[mstr_Classes] ([ID])


	ALTER TABLE [dbo].[GL_VoucherDetailsTemp] CHECK CONSTRAINT [FK_GL_VoucherDetailsTemp_mstr_Classes]


	ALTER TABLE [dbo].[GL_VoucherDetailsTemp]  WITH CHECK ADD  CONSTRAINT [FK_GL_VoucherDetailsTemp_mstr_Costcenter] FOREIGN KEY([CostcenterID])
	REFERENCES [dbo].[mstr_Costcenter] ([ID])


	ALTER TABLE [dbo].[GL_VoucherDetailsTemp] CHECK CONSTRAINT [FK_GL_VoucherDetailsTemp_mstr_Costcenter]


	ALTER TABLE [dbo].[GL_VoucherDetailsTemp]  WITH CHECK ADD  CONSTRAINT [FK_GL_VoucherDetailsTemp_mstr_Departments] FOREIGN KEY([DepartmentID])
	REFERENCES [dbo].[mstr_Departments] ([ID])


	ALTER TABLE [dbo].[GL_VoucherDetailsTemp] CHECK CONSTRAINT [FK_GL_VoucherDetailsTemp_mstr_Departments]


	ALTER TABLE [dbo].[GL_VoucherDetailsTemp]  WITH CHECK ADD  CONSTRAINT [FK_GL_VoucherDetailsTemp_mstr_Locations] FOREIGN KEY([LocationID])
	REFERENCES [dbo].[mstr_Locations] ([ID])


	ALTER TABLE [dbo].[GL_VoucherDetailsTemp] CHECK CONSTRAINT [FK_GL_VoucherDetailsTemp_mstr_Locations]






END

GO
/****** Object:  StoredProcedure [dbo].[Proc_LC_PostingPurchaseTransactions]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
CREATE PROCEDURE [dbo].[Proc_LC_PostingPurchaseTransactions]
	  @RecieptID int  ,@Lang  nvarchar(50) ='en-US'
AS
BEGIN
	Declare @TransactionCode int,@PaymentTypeID int,@SubsidiaryID int ,@CurrencyId int ,@Rate  numeric(18,6) ,@BranchId int ,@entryno nvarchar(50) 
		   ,@STORE_id int,@MCOUNTER int,@VouchertypeID int,@VoucherID int,@ExpAccount int
	Declare @VoucherDATE Date ,@PurDiscount int 
	Declare @VendorAmount numeric(18,6),@VendorAmountForing numeric(18,6),@CostingRate numeric(18,6),@VendorAmountForign numeric(18,6),
			@StoreAmount Numeric(18,6),@HDisAmount  numeric(18,6)
	Declare @memo nvarchar(500),@DiscountAmount Numeric(18,6)
	Declare @CostCenter integer,@Location integer,@Class integer,@department integer
	Declare @PostingVouchertypeID int,@PaymentCode nvarchar(50)
	Declare @StoreAccount int
	Declare @ExpAmount Numeric(18,6),@ExpAmountForiegn Numeric(18,6)
	Declare @DetailAccount Int,@CreditAmount numeric(18,6),@CreditAmountF numeric(18,6),@DebiAmount numeric(18,6),@DebiAmountF numeric(18,6)
	Declare @Vouchercode nvarchar(50),@Reference_No nvarchar(50),@OriginalMemo nvarchar(500) =''
	Declare @TempVoucherID int,@LCAccount int ,@LCNo  nvarchar(50),@LCNo1  int
	Declare @TotalTempCreditAmount Numeric(18,6)
	Declare @ExpArMemo nvarchar(150), @ExpEnMemo nvarchar(150) , @posted int = 0

	Select @PurDiscount = [payableAccount] from [dbo].[Inv_Posting] where [branchid]  = @BranchId;

	select @TransactionCode = Code ,@PaymentTypeID = Payment_Type,
		 @VoucherDATE =  Entry_Date,@SubsidiaryID = SubsidiaryID,@CurrencyId = Currency_ID,@Rate =  Currency_Rate ,
		 @BranchId =  Branch_ID,@VendorAmount = NetValue,@VendorAmountForign = NetValueForeign ,
		 @entryno = Entry_No ,@CostingRate = Costing_Rate,@DiscountAmount = Discount_Value
		 ,@CostCenter =CostCenterID,@Location =locationID,@Class =ClassID,@department = DepartmentID,@Reference_No = Reference_No
		 ,@LCAccount = LCAccountID  , @LCNo = LCNo,@OriginalMemo = memo
	from [dbo].[Inv_Receipt_h] where id = @RecieptID ;
	IF  @LCNo is null  Set @LCNo = ' ' else Set @LCNo = @LCNo
		
	IF isnull (@Reference_No,'') = ''  Set @Reference_No = ''
	IF  @LCAccount IS Null
		 Begin
			Print 'LCAccountID should entered to receipt no ' + Cast(@RecieptID as varchar(50))
			Return
		 END
	 SELECT @PostingVouchertypeID = [PostingVoucher] FROM [Inv_Transaction_Codes]  where code =  @TransactionCode  ;
	 Select @VouchertypeID = id , @posted = DefaultPostingStatus  from  GL_VoucherType where code = Cast(@PostingVouchertypeID as varchar(50)) ;
	  IF @posted IS Null Set @posted = 0
	IF @TransactionCode = 1 
	Begin
	--IF @CostCenter is null
	--	Select @CostCenter =CostCenterID,@Location =locationID,@Class =ClassID,@department = DepartmentID from  [dbo].[Inv_Transactions_branchs_Account] where [BranchID] = @BranchId and [TransctionID]=@TransactionCode ;
	--Execute proc_CreateTempPostingTable ;
	IF @Lang   ='en-US'
		Set @memo ='Cost of Purchase Invoice No.' + Cast( @entryno as varchar(100)) + 'Comprehensive on the Expenses of LC No.  ' + Cast(@LCNo as varchar(100))
	ELSE
		Set @memo = N'تكلفة فاتورة المشتريات رقم' +Cast( @entryno as varchar(100)) +N'شاملة لمصاريف الاعتماد رقم ' +Cast(@LCNo as varchar(100))
	IF 	  isnull(@OriginalMemo ,'') <> '' and @Reference_No =''    set @OriginalMemo = @memo  
	IF 	  isnull(@OriginalMemo ,'') <> '' and @Reference_No <> ''    set @OriginalMemo = @memo  + ' ' + @Reference_No
	
	--IF @Lang   ='en-US'
	--	Set @memo ='Close the amount of LC No.'+Cast(@LCNo as varchar(100))+ ' For Purchase Invoice No.' + Cast( @entryno as varchar(100));
	--ELSE
	--	Set @memo = 'إقفال ما يخص قيمة الاعتماد رقم '+Cast(@LCNo as varchar(100))+' لفاتورة المشتريات رقم '+Cast( @entryno as varchar(100))
	----Delete from GL_VoucherDetails where VoucherID = (Select id from GL_Vouchers where ReceiptID = @RecieptID);
	--Delete from GL_Vouchers where ReceiptID = @RecieptID;
	insert into GL_Voucherstemp (code,VoucherTypeID,BranchID,CurrencyID,SubsidaryID,VouhcerDate,ExchangeRate,Memo,ReceiptID,Posted,IsActive) 
				Values			(@RecieptID,@VouchertypeID,@BranchId ,@CurrencyId,@SubsidiaryID,@VoucherDATE,@Rate,@memo,@RecieptID,@posted,1)
	IF @@ERROR <> 0 return 99
	Select @VoucherID = id From GL_Voucherstemp where ReceiptID = @RecieptID;
	/*********                  Store Account (Debit)        *****************/
	SELECT  Top 1 @STORE_id = Store_ID 
	FROM   Inv_Receipt_d 
	Where  Inv_Receipt_d.Parent_ID= @RecieptID   
	
	Set @StoreAmount =  @CostingRate * @VendorAmount

	Select @StoreAccount = GL_Setup.InventoryAccountId from GL_Setup  
	if @StoreAccount is null (Select  top 1 @StoreAccount = [StoreAccount] from [Inv_Store] where     SubsidiaryID = @SubsidiaryID)

	 insert into GL_VoucherDetailsTemp(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive)
		 Values (@VoucherID,@StoreAccount,@VendorAmount   ,0,@memo,@VendorAmount * @Rate ,0,1)

	 IF @@ERROR <> 0 return 99
	/*********                  LC Account (Credit)        *****************/
	IF @Lang   ='en-US'
		Set @memo ='Close the amount of LC No.'+Cast(@LCNo as varchar(100))+ ' For Purchase Invoice No.' + Cast( @entryno as varchar(100));
	ELSE
		Set @memo = N'إقفال ما يخص قيمة الاعتماد رقم '+Cast(@LCNo as varchar(100))+N' لفاتورة المشتريات رقم '+Cast( @entryno as varchar(100))
	
	insert into GL_VoucherDetailsTemp(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive)
		 Values						 (@VoucherID,@LCAccount,0,@VendorAmount  ,@memo,0,@VendorAmount * @Rate ,1) 

	IF @@ERROR <> 0 return 99 
	Declare CUR_Exp  cursor For 
		SELECT [Value]  
		  ,[LocalValue]
		  ,[AccountID] , N'المصروفات لفاتورة المشتريات رقم '+Cast( @entryno as varchar(100))
		  ,' Expenses For Purchase Invoice No.' + Cast( @entryno as varchar(100))
	  FROM  [dbo].[Inv_ReceiptExpenses] where [ReceiptID] = @RecieptID   
	  AND  ISNull([RelatedToLC],0) = 0 
		 Union
	SELECT Sum( [LocalValue] * ExchangeRate ) 
		  ,Sum([LocalValue])
		  , @LCAccount ,  N'إقفال ما يخص مصاريف الاعتماد رقم '+Cast(@LCNo as varchar(100))+N' لفاتورة المشتريات رقم '+Cast( @entryno as varchar(100)),
		  'Close the expenses of LC No.'+Cast(@LCNo as varchar(100))+ ' For Purchase Invoice No.' + Cast( @entryno as varchar(100))
	  FROM  [dbo].[Inv_ReceiptExpenses] where [ReceiptID] = @RecieptID   
	  and ISNull([RelatedToLC],0) = 1 
	  Group by [ReceiptID]
 SET @MCOUNTER = 0
 OPEN CUR_Exp
	Fetch Next From CUR_Exp Into @ExpAmountForiegn, @ExpAmount  , @ExpAccount,@ExpArMemo,@ExpEnMemo
		
	While @@Fetch_Status = 0 Begin
		/*********                  Expensess Account (Credit)        *****************/
		IF @Lang ='en-US' Set @memo = @ExpEnMemo ELSE Set @memo = @ExpArMemo
		 insert into GL_VoucherDetailsTemp(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive)
		 Values (@VoucherID,@ExpAccount,0,@ExpAmount ,@memo,0,@ExpAmountForiegn,1)
		 IF @@ERROR <> 0 return 99
	Fetch Next From CUR_Exp Into @ExpAmountForiegn,  @ExpAmount , @ExpAccount,@ExpArMemo,@ExpEnMemo
		
	End		--	 End of Fetch
 
	Close CUR_Exp
	Deallocate CUR_Exp
	
	Delete from GL_VoucherDetails where VoucherID = (Select id from GL_Vouchers where ReceiptID = @RecieptID)
	Delete from GL_Vouchers where ReceiptID = @RecieptID
	
	Select @Vouchercode = code from GL_Vouchers where code = @entryno and VoucherTypeID = @VouchertypeID and BranchID = @BranchId;
	IF @Vouchercode = @entryno 
		Select @Vouchercode = max(isnull(code,0)) +1 from gl_vouchers where VoucherTypeID =  @VouchertypeID and BranchID = @BranchId;
	ELSE
		Set  @Vouchercode = @entryno 
	
	Set @TempVoucherID = @VoucherID
	IF @Lang   ='en-US'
		Set @memo ='Cost of Purchase Invoice No.' + Cast( @entryno as varchar(100)) + 'Comprehensive on the Expenses of LC No.  '  + Cast(@LCNo as varchar(100))
	ELSE
		Set @memo = N'تكلفة فاتورة المشتريات رقم' +Cast( @entryno as varchar(100)) +N'شاملة لمصاريف الاعتماد رقم ' +Cast(@LCNo as varchar(100))
	insert into GL_Vouchers(code,VoucherTypeID,BranchID,CurrencyID,SubsidaryID,VouhcerDate,ExchangeRate,Memo,ReceiptID,Posted,IsActive,ReferanceNo) 
				Values				(@Vouchercode,@VouchertypeID,@BranchId ,@CurrencyId,@SubsidiaryID,@VoucherDATE,@Rate,@memo,@RecieptID,@posted,1,@Reference_No)
	IF @@ERROR <> 0 return 99

	
	Select @TotalTempCreditAmount = Sum (Credit)   From GL_VoucherDetailsTemp where VoucherID = @TempVoucherID; 
	Update GL_VoucherDetailsTemp set Debit =@TotalTempCreditAmount where VoucherID = @TempVoucherID And Debit > 0 ;
	 
	Select @TotalTempCreditAmount = Sum (CreditForeign)   From GL_VoucherDetailsTemp where VoucherID = @TempVoucherID; 
	Update GL_VoucherDetailsTemp set DebitForeign =@TotalTempCreditAmount where VoucherID = @TempVoucherID And Debit > 0 ;

	Select @VoucherID = id From GL_Vouchers where ReceiptID = @RecieptID;
	

	Declare CUR_Details  cursor For 
		Select AccountNoID,Debit,Credit ,DebitForeign,CreditForeign,Memo From GL_VoucherDetailsTemp where VoucherID = @TempVoucherID; 

	 SET @MCOUNTER = 0
 OPEN CUR_Details
	Fetch Next From CUR_Details Into @DetailAccount, @DebiAmount  , @CreditAmount,@DebiAmountF,@CreditAmountF,@memo
		
	While @@Fetch_Status = 0 Begin
		  
			 insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,CostCenterID,ClassID,LocationID,DepartmentID)
			 Values (@VoucherID,@DetailAccount,@DebiAmount,@CreditAmount,@memo,@DebiAmountF,@CreditAmountF,1,@CostCenter,@Class,@Location,@department)
		  
		 IF @@ERROR <> 0 return 99
	Fetch Next From CUR_Details Into @DetailAccount, @DebiAmount  , @CreditAmount,@DebiAmountF,@CreditAmountF,@memo
		
	End		--	 End of Fetch
 
	Close CUR_Details
	Deallocate CUR_Details
	Delete from GL_VoucherDetailsTemp where VoucherID = @TempVoucherID;
	Delete from GL_VouchersTemp where  ID = @TempVoucherID;
	 
	return  0
END
IF @TransactionCode = 2 
	Begin
	--IF @CostCenter is null
	--	Select @CostCenter =CostCenterID,@Location =locationID,@Class =ClassID,@department = DepartmentID from  [dbo].[Inv_Transactions_branchs_Account] where [BranchID] = @BranchId and [TransctionID]=@TransactionCode ;
	IF @Lang   ='en-US'
		Set @memo ='Cost of Purchase Invoice No.' + Cast( @entryno as varchar(100)) + 'Comprehensive on the Expenses of LC No.  ' + Cast(@LCNo as varchar(100))
	ELSE
		Set @memo = N'تكلفة فاتورة المشتريات رقم' +Cast( @entryno as varchar(100)) +N'شاملة لمصاريف الاعتماد رقم ' +Cast(@LCNo as varchar(100))
	IF 	  isnull(@OriginalMemo ,'') <> '' and @Reference_No =''    set @OriginalMemo = @memo  
	IF 	  isnull(@OriginalMemo ,'') <> '' and @Reference_No <> ''    set @OriginalMemo = @memo  + ' ' + @Reference_No
	
	--Delete from GL_VoucherDetails where VoucherID = (Select id from GL_Vouchers where ReceiptID = @RecieptID);
	--Delete from GL_Vouchers where ReceiptID = @RecieptID;
	insert into GL_Voucherstemp (code,VoucherTypeID,BranchID,CurrencyID,SubsidaryID,VouhcerDate,ExchangeRate,Memo,ReceiptID,Posted,IsActive) 
				Values				(@RecieptID,@VouchertypeID,@BranchId ,@CurrencyId,@SubsidiaryID,@VoucherDATE,@Rate,@memo,@RecieptID,@posted,1)
	IF @@ERROR <> 0 return 99
	Select @VoucherID = id From GL_Voucherstemp where ReceiptID = @RecieptID;
	/*********                  Store Account (Debit)        *****************/
	SELECT  Top 1 @STORE_id = Store_ID 
	FROM   Inv_Receipt_d 
	Where  Inv_Receipt_d.Parent_ID= @RecieptID   
	
	Set @StoreAmount =  @CostingRate * @VendorAmount

	
	Declare CUR_Exp  cursor For 
		SELECT [Value]  * ExchangeRate
		  ,[LocalValue]
		  ,[AccountID] , N'المصروفات لفاتورة المشتريات رقم '+Cast( @entryno as varchar(100))
		  ,' Expenses For Purchase Invoice No.' + Cast( @entryno as varchar(100))
	  FROM  [dbo].[Inv_ReceiptExpenses] where [ReceiptID] = @RecieptID   
	  AND  ISNull([RelatedToLC],0) = 0 
		 Union
	SELECT Sum( [LocalValue] * ExchangeRate )
		  ,Sum([LocalValue])
		  , @LCAccount ,  N'إقفال ما يخص مصاريف الاعتماد رقم '+Cast(@LCNo as varchar(100))+N' لفاتورة المشتريات رقم '+Cast( @entryno as varchar(100)),
		  'Close the expenses of LC No.'+Cast(@LCNo as varchar(100))+ ' For Purchase Invoice No.' + Cast( @entryno as varchar(100))
	  FROM  [dbo].[Inv_ReceiptExpenses] where [ReceiptID] = @RecieptID   
	  and ISNull([RelatedToLC],0) = 1 
	  Group by [ReceiptID]
		 
 SET @MCOUNTER = 0
 OPEN CUR_Exp
	Fetch Next From CUR_Exp Into @ExpAmountForiegn, @ExpAmount  , @ExpAccount,@ExpArMemo,@ExpEnMemo
		
	While @@Fetch_Status = 0 Begin
		/*********                  Expensess Account (Credit)        *****************/
		IF @Lang ='en-US' Set @memo = @ExpEnMemo ELSE Set @memo = @ExpArMemo
		 insert into GL_VoucherDetailsTemp(VoucherID,AccountNoID,Credit,Debit,Memo,CreditForeign,DebitForeign,IsActive)
		 Values (@VoucherID,@ExpAccount,0,@ExpAmount,@memo,0,@ExpAmountForiegn,1)
		 IF @@ERROR <> 0 return 99
	Fetch Next From CUR_Exp Into @ExpAmountForiegn,  @ExpAmount , @ExpAccount,@ExpArMemo,@ExpEnMemo
		
	End		--	 End of Fetch
 
	Close CUR_Exp
	Deallocate CUR_Exp 

	Select @StoreAccount = GL_Setup.InventoryAccountId from GL_Setup  
	if @StoreAccount is null (Select  top 1 @StoreAccount = [StoreAccount] from [Inv_Store] where     SubsidiaryID = @SubsidiaryID)

	
	/*********                  Vendor Account (Credit)        *****************/
	insert into GL_VoucherDetailsTemp(VoucherID,AccountNoID,Credit,Debit,Memo,CreditForeign,DebitForeign,IsActive)
		 Values (@VoucherID,@LCAccount,0,@VendorAmount / @Rate,@memo,0,@VendorAmount,1) 

	IF @@ERROR <> 0 return 99 
	IF @Lang   ='en-US'
		Set @memo ='Close the amount of LC No.'+Cast(@LCNo as varchar(100))+ ' For Purchase Invoice No.' + Cast( @entryno as varchar(100))
	ELSE
		Set @memo = N'إقفال ما يخص قيمة الاعتماد رقم '+Cast(@LCNo as varchar(100))+N' لفاتورة المشتريات رقم '+Cast( @entryno as varchar(100))
	
	 insert into GL_VoucherDetailsTemp(VoucherID,AccountNoID,Credit,Debit,Memo,CreditForeign,DebitForeign,IsActive)
		 Values (@VoucherID,@StoreAccount,@StoreAmount,0,@memo,@StoreAmount * @Rate,0,1)

	 IF @@ERROR <> 0 return 99

	Delete from GL_VoucherDetails where VoucherID = (Select id from GL_Vouchers where ReceiptID = @RecieptID)
	Delete from GL_Vouchers where ReceiptID = @RecieptID
	
	Select @Vouchercode = code from GL_Vouchers where code = @entryno and VoucherTypeID = @VouchertypeID  and BranchID = @BranchId;
	IF @Vouchercode = @entryno 
		Select @Vouchercode = max(isnull(code,0)) +1 from gl_vouchers where VoucherTypeID =  @VouchertypeID  and BranchID = @BranchId;
	ELSE
		Set  @Vouchercode = @entryno 
	
	Set @TempVoucherID = @VoucherID
	IF @Lang   ='en-US'
		Set @memo ='Cost of Purchase Invoice No.' + Cast( @entryno as varchar(100)) + 'Comprehensive on the Expenses of LC No.  ' + Cast(@LCNo as varchar(100))
	ELSE
		Set @memo = N'تكلفة فاتورة المشتريات رقم' +Cast( @entryno as varchar(100)) +N'شاملة لمصاريف الاعتماد رقم ' +Cast(@LCNo as varchar(100))
	
	insert into GL_Vouchers(code,VoucherTypeID,BranchID,CurrencyID,SubsidaryID,VouhcerDate,ExchangeRate,Memo,ReceiptID,Posted,IsActive,ReferanceNo) 
				Values				(@Vouchercode,@VouchertypeID,@BranchId ,@CurrencyId,@SubsidiaryID,@VoucherDATE,@Rate,@memo,@RecieptID,@posted,1,@Reference_No)
	IF @@ERROR <> 0 return 99
	 
	Select @TotalTempCreditAmount = Sum (Credit)   From GL_VoucherDetailsTemp where VoucherID = @TempVoucherID; 
	Update GL_VoucherDetailsTemp set Debit =@TotalTempCreditAmount where VoucherID = @TempVoucherID And Debit > 0 ;

	Select @TotalTempCreditAmount = Sum (CreditForeign)   From GL_VoucherDetailsTemp where VoucherID = @TempVoucherID; 
	Update GL_VoucherDetailsTemp set DebitForeign =@TotalTempCreditAmount where VoucherID = @TempVoucherID And Debit > 0 ;


	Select @VoucherID = id From GL_Vouchers where ReceiptID = @RecieptID; 

	Declare CUR_Details  cursor For 
		Select AccountNoID,Debit,Credit ,DebitForeign,CreditForeign,Memo From GL_VoucherDetailsTemp where VoucherID = @TempVoucherID; 

	 SET @MCOUNTER = 0
 OPEN CUR_Details
	Fetch Next From CUR_Details Into @DetailAccount, @DebiAmount  , @CreditAmount,@DebiAmountF,@CreditAmountF,@memo
		
	While @@Fetch_Status = 0 Begin 
			 insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,CostCenterID,ClassID,LocationID,DepartmentID)
			 Values (@VoucherID,@DetailAccount,@DebiAmount,@CreditAmount,@memo,@DebiAmount * @Rate ,@CreditAmount * @Rate ,1,@CostCenter,@Class,@Location,@department)
		 
		 IF @@ERROR <> 0 return 99
	Fetch Next From CUR_Details Into @DetailAccount, @DebiAmount  , @CreditAmount,@DebiAmountF,@CreditAmountF,@memo
		
	End		--	 End of Fetch
 
	Close CUR_Details
	Deallocate CUR_Details
	Delete from GL_VoucherDetailsTemp where VoucherID = @TempVoucherID;
	Delete from GL_VouchersTemp where  ID = @TempVoucherID;
	 
	return  0
END 
END
GO
/****** Object:  StoredProcedure [dbo].[Proc_LC_PostingPurchaseTransactions_withoutExp]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
Create PROCEDURE [dbo].[Proc_LC_PostingPurchaseTransactions_withoutExp]
	  @RecieptID int  ,@Lang  nvarchar(50) ='en-US'
AS
BEGIN
	Declare @TransactionCode int,@PaymentTypeID int,@SubsidiaryID int ,@CurrencyId int ,@Rate  numeric(18,6) ,@BranchId int ,@entryno int 
		   ,@STORE_id int,@MCOUNTER int,@VouchertypeID int,@VoucherID int,@ExpAccount int
	Declare @VoucherDATE Date ,@PurDiscount int 
	Declare @VendorAmount numeric(18,6),@VendorAmountForing numeric(18,6),@CostingRate numeric(18,6),@VendorAmountForign numeric(18,6),
			@StoreAmount Numeric(18,6),@HDisAmount  numeric(18,6)
	Declare @memo varchar(500),@DiscountAmount Numeric(18,6)
	Declare @CostCenter integer,@Location integer,@Class integer,@department integer
	Declare @PostingVouchertypeID int,@PaymentCode nvarchar(50)
	Declare @StoreAccount int
	Declare @ExpAmount Numeric(18,6),@ExpAmountForiegn Numeric(18,6)
	Declare @DetailAccount Int,@CreditAmount numeric(18,6),@CreditAmountF numeric(18,6),@DebiAmount numeric(18,6),@DebiAmountF numeric(18,6)
	Declare @Vouchercode nvarchar(50),@Reference_No nvarchar(50)
	Declare @TempVoucherID int,@LCAccount int ,@LCNo int
	Declare @TotalTempCreditAmount Numeric(18,6)
	Declare @ExpArMemo nvarchar(150), @ExpEnMemo nvarchar(150)
	Select @PurDiscount = [payableAccount] from [dbo].[Inv_Posting] where [branchid]  = @BranchId;

	select @TransactionCode = Code ,@PaymentTypeID = Payment_Type,
		 @VoucherDATE =  Entry_Date,@SubsidiaryID = SubsidiaryID,@CurrencyId = Currency_ID,@Rate =  Currency_Rate ,
		 @BranchId =  Branch_ID,@VendorAmount =Costing_Rate *  NetValue,@VendorAmountForign = NetValueForeign ,
		 @entryno = Entry_No ,@CostingRate = Costing_Rate,@DiscountAmount = Discount_Value
		 ,@CostCenter =CostCenterID,@Location =locationID,@Class =ClassID,@department = DepartmentID,@Reference_No = Reference_No
		 ,@LCAccount = LCAccountID  , @LCNo = LCNo
	from [dbo].[Inv_Receipt_h] where id = @RecieptID ;

	IF isnull (@Reference_No,'') = ''  Set @Reference_No = ''
	IF  @LCAccount IS Null
		 Begin
			Print 'LCAccountID should entered to receipt no ' + Cast(@RecieptID as varchar(50))
			Return
		 END
	 SELECT @PostingVouchertypeID = [PostingVoucher] FROM [Inv_Transaction_Codes]  where code =  @TransactionCode  ;
	 Select @VouchertypeID = id from  GL_VoucherType where code = Cast(@PostingVouchertypeID as varchar(50)) ;
	  
	IF @TransactionCode = 1 
	Begin
	--IF @CostCenter is null
	--	Select @CostCenter =CostCenterID,@Location =locationID,@Class =ClassID,@department = DepartmentID from  [dbo].[Inv_Transactions_branchs_Account] where [BranchID] = @BranchId and [TransctionID]=@TransactionCode ;
	--Execute proc_CreateTempPostingTable ;
	IF @Lang   ='en-US'
		Set @memo ='Cost of Purchase Invoice No.' + Cast( @entryno as varchar(100)) + 'Comprehensive on the Expenses of LC No.  ' + Cast(@LCNo as varchar(100))
	ELSE
		Set @memo = 'تكلفة فاتورة المشتريات رقم' +Cast( @entryno as varchar(100)) +'شاملة لمصاريف الاعتماد رقم ' +Cast(@LCNo as varchar(100))
	
	--IF @Lang   ='en-US'
	--	Set @memo ='Close the amount of LC No.'+Cast(@LCNo as varchar(100))+ ' For Purchase Invoice No.' + Cast( @entryno as varchar(100));
	--ELSE
	--	Set @memo = 'إقفال ما يخص قيمة الاعتماد رقم '+Cast(@LCNo as varchar(100))+' لفاتورة المشتريات رقم '+Cast( @entryno as varchar(100))
	----Delete from GL_VoucherDetails where VoucherID = (Select id from GL_Vouchers where ReceiptID = @RecieptID);
	--Delete from GL_Vouchers where ReceiptID = @RecieptID;
	insert into GL_Voucherstemp (code,VoucherTypeID,BranchID,CurrencyID,SubsidaryID,VouhcerDate,ExchangeRate,Memo,ReceiptID,Posted,IsActive) 
				Values			(@RecieptID,@VouchertypeID,@BranchId ,@CurrencyId,@SubsidiaryID,@VoucherDATE,@Rate,@memo,@RecieptID,0,1)
	IF @@ERROR <> 0 return 99
	Select @VoucherID = id From GL_Voucherstemp where ReceiptID = @RecieptID;
	/*********                  Store Account (Debit)        *****************/
	SELECT  Top 1 @STORE_id = Store_ID 
	FROM   Inv_Receipt_d 
	Where  Inv_Receipt_d.Parent_ID= @RecieptID   
	
	Set @StoreAmount =    @VendorAmount
	 
	--SELECT  @StoreAccount = [StoreAccount]  FROM  [dbo].[Inv_Store]  where ID =@STORE_id AND SubsidiaryID = @SubsidiaryID

	SELECT  @StoreAccount = [StoreAccount]  FROM  [dbo].[Inv_Store]  where ID = (select StoreID from mstr_Branch where ID = @BranchId)

	 insert into GL_VoucherDetailsTemp(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive)
		 Values (@VoucherID,@StoreAccount,@VendorAmount   ,0,@memo,@VendorAmountForign ,0,1)

	 IF @@ERROR <> 0 return 99
	/*********                  LC Account (Credit)        *****************/
	IF @Lang   ='en-US'
		Set @memo ='Close the amount of LC No.'+Cast(@LCNo as varchar(100))+ ' For Purchase Invoice No.' + Cast( @entryno as varchar(100));
	ELSE
		Set @memo = 'إقفال ما يخص قيمة الاعتماد رقم '+Cast(@LCNo as varchar(100))+' لفاتورة المشتريات رقم '+Cast( @entryno as varchar(100))
	
	insert into GL_VoucherDetailsTemp(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive)
		 Values						 (@VoucherID,@LCAccount,0,@VendorAmount  ,@memo,0,@VendorAmountForign,1) 

	IF @@ERROR <> 0 return 99 
	
	Delete from GL_VoucherDetails where VoucherID = (Select id from GL_Vouchers where ReceiptID = @RecieptID)
	Delete from GL_Vouchers where ReceiptID = @RecieptID
	
	Select @Vouchercode = code from GL_Vouchers where code = @entryno and VoucherTypeID = @VouchertypeID;
	IF @Vouchercode = @entryno 
		Select @Vouchercode = max(isnull(code,0)) +1 from gl_vouchers where VoucherTypeID =  @VouchertypeID;
	ELSE
		Set  @Vouchercode = @entryno 
	
	Set @TempVoucherID = @VoucherID
	IF @Lang   ='en-US'
		Set @memo ='Cost of Purchase Invoice No.' + Cast( @entryno as varchar(100)) + 'Comprehensive on the Expenses of LC No.  '  + Cast(@LCNo as varchar(100))
	ELSE
		Set @memo = 'تكلفة فاتورة المشتريات رقم' +Cast( @entryno as varchar(100)) +'شاملة لمصاريف الاعتماد رقم ' +Cast(@LCNo as varchar(100))
	insert into GL_Vouchers(code,VoucherTypeID,BranchID,CurrencyID,SubsidaryID,VouhcerDate,ExchangeRate,Memo,ReceiptID,Posted,IsActive,ReferanceNo) 
				Values				(@Vouchercode,@VouchertypeID,@BranchId ,@CurrencyId,@SubsidiaryID,@VoucherDATE,@Rate,@memo,@RecieptID,0,1,@Reference_No)
	IF @@ERROR <> 0 return 99

	
	--Select @TotalTempCreditAmount = Sum (Credit)   From GL_VoucherDetailsTemp where VoucherID = @TempVoucherID; 
	--Update GL_VoucherDetailsTemp set Debit =@TotalTempCreditAmount where VoucherID = @TempVoucherID And Debit > 0 ;


	Select @VoucherID = id From GL_Vouchers where ReceiptID = @RecieptID;
	

	Declare CUR_Details  cursor For 
		Select AccountNoID,Debit,Credit ,DebitForeign,CreditForeign,Memo From GL_VoucherDetailsTemp where VoucherID = @TempVoucherID; 

	 SET @MCOUNTER = 0
 OPEN CUR_Details
	Fetch Next From CUR_Details Into @DetailAccount, @DebiAmount  , @CreditAmount,@DebiAmountF,@CreditAmountF,@memo
		
	While @@Fetch_Status = 0 Begin
		 
		 insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,CostCenterID,ClassID,LocationID,DepartmentID)
		 Values (@VoucherID,@DetailAccount,@DebiAmount,@CreditAmount,@memo,@DebiAmountF,@CreditAmountF,1,@CostCenter,@Class,@Location,@department)
		 IF @@ERROR <> 0 return 99
	Fetch Next From CUR_Details Into @DetailAccount, @DebiAmount  , @CreditAmount,@DebiAmountF,@CreditAmountF,@memo
		
	End		--	 End of Fetch
 
	Close CUR_Details
	Deallocate CUR_Details
	Delete from GL_VoucherDetailsTemp where VoucherID = @TempVoucherID;
	Delete from GL_VouchersTemp where  ID = @TempVoucherID;
	 
	return  0
END
IF @TransactionCode = 2 
	Begin
	--IF @CostCenter is null
	--	Select @CostCenter =CostCenterID,@Location =locationID,@Class =ClassID,@department = DepartmentID from  [dbo].[Inv_Transactions_branchs_Account] where [BranchID] = @BranchId and [TransctionID]=@TransactionCode ;
	IF @Lang   ='en-US'
		Set @memo ='Cost of Purchase Invoice No.' + Cast( @entryno as varchar(100)) + 'Comprehensive on the Expenses of LC No.  ' + Cast(@LCNo as varchar(100))
	ELSE
		Set @memo = 'تكلفة فاتورة المشتريات رقم' +Cast( @entryno as varchar(100)) +'شاملة لمصاريف الاعتماد رقم ' +Cast(@LCNo as varchar(100))
	--Delete from GL_VoucherDetails where VoucherID = (Select id from GL_Vouchers where ReceiptID = @RecieptID);
	--Delete from GL_Vouchers where ReceiptID = @RecieptID;
	insert into GL_Voucherstemp (code,VoucherTypeID,BranchID,CurrencyID,SubsidaryID,VouhcerDate,ExchangeRate,Memo,ReceiptID,Posted,IsActive) 
				Values				(@RecieptID,@VouchertypeID,@BranchId ,@CurrencyId,@SubsidiaryID,@VoucherDATE,@Rate,@memo,@RecieptID,0,1)
	IF @@ERROR <> 0 return 99
	Select @VoucherID = id From GL_Voucherstemp where ReceiptID = @RecieptID;
	/*********                  Store Account (Debit)        *****************/
	SELECT  Top 1 @STORE_id = Store_ID 
	FROM   Inv_Receipt_d 
	Where  Inv_Receipt_d.Parent_ID= @RecieptID   
	
	Set @StoreAmount =  @CostingRate * @VendorAmount

	
	Declare CUR_Exp  cursor For 
		SELECT [Value]  
		  ,[LocalValue]
		  ,[AccountID] , 'المصروفات لفاتورة المشتريات رقم '+Cast( @entryno as varchar(100))
		  ,' Expenses For Purchase Invoice No.' + Cast( @entryno as varchar(100))
	  FROM  [dbo].[Inv_ReceiptExpenses] where [ReceiptID] = @RecieptID   
	  AND  ISNull([RelatedToLC],0) = 0 
		 Union
	SELECT Sum( [LocalValue]  )
		  ,Sum([LocalValue])
		  , @LCAccount ,  'إقفال ما يخص مصاريف الاعتماد رقم '+Cast(@LCNo as varchar(100))+' لفاتورة المشتريات رقم '+Cast( @entryno as varchar(100)),
		  'Close the expenses of LC No.'+Cast(@LCNo as varchar(100))+ ' For Purchase Invoice No.' + Cast( @entryno as varchar(100))
	  FROM  [dbo].[Inv_ReceiptExpenses] where [ReceiptID] = @RecieptID   
	  and ISNull([RelatedToLC],0) = 1 
	  Group by [ReceiptID]
		 
 SET @MCOUNTER = 0
 OPEN CUR_Exp
	Fetch Next From CUR_Exp Into @ExpAmountForiegn, @ExpAmount  , @ExpAccount,@ExpArMemo,@ExpEnMemo
		
	While @@Fetch_Status = 0 Begin
		/*********                  Expensess Account (Credit)        *****************/
		IF @Lang ='en-US' Set @memo = @ExpEnMemo ELSE Set @memo = @ExpArMemo
		 insert into GL_VoucherDetailsTemp(VoucherID,AccountNoID,Credit,Debit,Memo,CreditForeign,DebitForeign,IsActive)
		 Values (@VoucherID,@ExpAccount,0,@ExpAmount,@memo,0,@ExpAmountForiegn,1)
		 IF @@ERROR <> 0 return 99
	Fetch Next From CUR_Exp Into @ExpAmountForiegn,  @ExpAmount , @ExpAccount,@ExpArMemo,@ExpEnMemo
		
	End		--	 End of Fetch
 
	Close CUR_Exp
	Deallocate CUR_Exp 


	--SELECT  @StoreAccount = [StoreAccount]  FROM  [dbo].[Inv_Store]  where ID =@STORE_id AND SubsidiaryID = @SubsidiaryID

	SELECT  @StoreAccount = [StoreAccount]  FROM  [dbo].[Inv_Store]  where ID = (select StoreID from mstr_Branch where ID = @BranchId)

	
	/*********                  Vendor Account (Credit)        *****************/
	insert into GL_VoucherDetailsTemp(VoucherID,AccountNoID,Credit,Debit,Memo,CreditForeign,DebitForeign,IsActive)
		 Values (@VoucherID,@LCAccount,0,@VendorAmount / @Rate,@memo,0,@VendorAmount,1) 

	IF @@ERROR <> 0 return 99 
	IF @Lang   ='en-US'
		Set @memo ='Close the amount of LC No.'+Cast(@LCNo as varchar(100))+ ' For Purchase Invoice No.' + Cast( @entryno as varchar(100))
	ELSE
		Set @memo = 'إقفال ما يخص قيمة الاعتماد رقم '+Cast(@LCNo as varchar(100))+' لفاتورة المشتريات رقم '+Cast( @entryno as varchar(100))
	
	 insert into GL_VoucherDetailsTemp(VoucherID,AccountNoID,Credit,Debit,Memo,CreditForeign,DebitForeign,IsActive)
		 Values (@VoucherID,@StoreAccount,@StoreAmount,0,@memo,@StoreAmount * @Rate,0,1)

	 IF @@ERROR <> 0 return 99

	Delete from GL_VoucherDetails where VoucherID = (Select id from GL_Vouchers where ReceiptID = @RecieptID)
	Delete from GL_Vouchers where ReceiptID = @RecieptID
	
	Select @Vouchercode = code from GL_Vouchers where code = @entryno and VoucherTypeID = @VouchertypeID;
	IF @Vouchercode = @entryno 
		Select @Vouchercode = max(isnull(code,0)) +1 from gl_vouchers where VoucherTypeID =  @VouchertypeID;
	ELSE
		Set  @Vouchercode = @entryno 
	
	Set @TempVoucherID = @VoucherID
	IF @Lang   ='en-US'
		Set @memo ='Cost of Purchase Invoice No.' + Cast( @entryno as varchar(100)) + 'Comprehensive on the Expenses of LC No.  ' + Cast(@LCNo as varchar(100))
	ELSE
		Set @memo = 'تكلفة فاتورة المشتريات رقم' +Cast( @entryno as varchar(100)) +'شاملة لمصاريف الاعتماد رقم ' +Cast(@LCNo as varchar(100))
	
	insert into GL_Vouchers(code,VoucherTypeID,BranchID,CurrencyID,SubsidaryID,VouhcerDate,ExchangeRate,Memo,ReceiptID,Posted,IsActive) 
				Values				(@Vouchercode,@VouchertypeID,@BranchId ,@CurrencyId,@SubsidiaryID,@VoucherDATE,@Rate,@memo,@RecieptID,0,1)
	IF @@ERROR <> 0 return 99
	 
	Select @TotalTempCreditAmount = Sum (Credit)   From GL_VoucherDetailsTemp where VoucherID = @TempVoucherID; 
	Update GL_VoucherDetailsTemp set Debit =@TotalTempCreditAmount where VoucherID = @TempVoucherID And Debit > 0 ;


	Select @VoucherID = id From GL_Vouchers where ReceiptID = @RecieptID; 

	Declare CUR_Details  cursor For 
		Select AccountNoID,Debit,Credit ,DebitForeign,CreditForeign,Memo From GL_VoucherDetailsTemp where VoucherID = @TempVoucherID; 

	 SET @MCOUNTER = 0
 OPEN CUR_Details
	Fetch Next From CUR_Details Into @DetailAccount, @DebiAmount  , @CreditAmount,@DebiAmountF,@CreditAmountF,@memo
		
	While @@Fetch_Status = 0 Begin
		 
		 insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,CostCenterID,ClassID,LocationID,DepartmentID)
		 Values (@VoucherID,@DetailAccount,@DebiAmount,@CreditAmount,@memo,@DebiAmountF,@CreditAmountF,1,@CostCenter,@Class,@Location,@department)
		 IF @@ERROR <> 0 return 99
	Fetch Next From CUR_Details Into @DetailAccount, @DebiAmount  , @CreditAmount,@DebiAmountF,@CreditAmountF,@memo
		
	End		--	 End of Fetch
 
	Close CUR_Details
	Deallocate CUR_Details
	Delete from GL_VoucherDetailsTemp where VoucherID = @TempVoucherID;
	Delete from GL_VouchersTemp where  ID = @TempVoucherID;
	 
	return  0
END 
END
GO
/****** Object:  StoredProcedure [dbo].[Proc_PostingIssueVoucherTransactions]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Batch submitted through debugger: SQLQuery1.sql|7|0|C:\Users\DEVELO~1\AppData\Local\Temp\4\~vs5CB8.sql
-- Batch submitted through debugger: SQLQuery6.sql|7|0|C:\Users\DEVELO~1\AppData\Local\Temp\4\~vs7481.sql
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[Proc_PostingIssueVoucherTransactions]
	  @RecieptID int  
AS
BEGIN
	Declare @VendorID int,@TransactionCode int,@PaymentTypeID int,@SubsidiaryID int ,@CurrencyId int ,@Rate int ,@BranchId int ,@entryno int 
		   ,@STORE_id int,@MCOUNTER int,@VouchertypeID int,@VoucherID int,@ExpAccount int
	Declare @VoucherDATE Date ,@IssueDiscount int 
	Declare @VendorAmount numeric(18,3),@VendorAmountForing numeric(18,3),@CostingRate numeric(18,3),@VendorAmountForign numeric(18,3),
			@StoreAmount Numeric(18,3),@HDisAmount  numeric(18,6)
	Declare @memo varchar(500),@DiscountAmount Numeric(18,3),@Reference_No nvarchar(50)
	Declare   @CostCenter integer,@Location integer,@Class integer,@department integer


	Select @IssueDiscount = [RecivableAccount] from [dbo].[Inv_Posting] where [branchid]  = @BranchId;

	select @VendorID = [Vendor_ID]  ,@TransactionCode = Code ,@PaymentTypeID = Payment_Type,
		 @VoucherDATE =  Entry_Date,@SubsidiaryID = SubsidiaryID,@CurrencyId = Currency_ID,@Rate =  Currency_Rate ,
		 @BranchId =  Branch_ID,@VendorAmount = NetValue,@VendorAmountForign = NetValueForeign ,
		 @entryno = Entry_No ,@CostingRate = Costing_Rate,@DiscountAmount = Discount_Value
		 ,@CostCenter =CostCenterID,@Location =locationID,@Class =ClassID,@department = DepartmentID,@Reference_No = Reference_No
	from [dbo].[Inv_Receipt_h] where id = @RecieptID ;

	IF @CostCenter is null
		Select @CostCenter =CostCenterID,@Location =locationID,@Class =ClassID,@department = DepartmentID from  [dbo].[Inv_Transactions_branchs_Account] where [BranchID] = @BranchId and [TransctionID]=@TransactionCode ;

	
	  Declare  @PostingVouchertypeID int,@PaymentCode nvarchar(50)
	-- Select @VouchertypeID = id from  GL_VoucherType where code = Cast(@TransactionCode as varchar(50)) ;
	 SELECT @PostingVouchertypeID = [PostingVoucher] FROM [Inv_Transaction_Codes]  where code =  @TransactionCode  ;
	 Select @VouchertypeID = id from  GL_VoucherType where code = Cast(@PostingVouchertypeID as varchar(50)) ;

	 Select @PaymentCode = code from [dbo].[Inv_PaymentType] where id =@PaymentTypeID   ;
	 IF @PaymentCode <> 1  Select @VendorID = [AccountID]  from  Inv_Posting_PaymentTypes  where PaymentTypeID= @PaymentTypeID and BranchID = @BranchId;
	--Execute proc_CreateTempPostingTable ;

	Set @memo = 'IssueVoucher Invoice No.' + Cast( @entryno as varchar(100));
	--Delete from GL_VoucherDetails where VoucherID = (Select id from GL_Vouchers where ReceiptID = @RecieptID);
	--Delete from GL_Vouchers where ReceiptID = @RecieptID;
	insert into GL_Voucherstemp (code,VoucherTypeID,BranchID,CurrencyID,SubsidaryID,VouhcerDate,ExchangeRate,Memo,ReceiptID,Posted,IsActive) 
				Values				(@RecieptID,@VouchertypeID,@BranchId ,@CurrencyId,@SubsidiaryID,@VoucherDATE,@Rate,@memo,@RecieptID,0,1)
	IF @@ERROR <> 0 return 99
	Select @VoucherID = id From GL_Voucherstemp where ReceiptID = @RecieptID;

	/*********                  Vendor Account (Credit)        *****************/
	insert into GL_VoucherDetailsTemp(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive)
		 Values (@VoucherID,@VendorID,0,@VendorAmount,@memo,0,0,1)
	IF (not @DiscountAmount  is null) and @DiscountAmount > 0 
		insert into GL_VoucherDetailsTemp(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive)
		 Values (@VoucherID,@IssueDiscount,0,@DiscountAmount,@memo,0,0,1)

	IF @@ERROR <> 0 return 99
	Declare @StoreAccount int
    Declare CUR_Store  cursor For 
	SELECT  Store_ID,  total,  H_Discount_Value
	FROM   Inv_Receipt_d 
	Where  Inv_Receipt_d.Parent_ID= @RecieptID   
		       
		 
	SET @MCOUNTER = 0
	OPEN CUR_Store
	Fetch Next From CUR_Store Into @STORE_id ,@StoreAmount,@HDisAmount

	While @@Fetch_Status = 0 Begin
		IF @CostingRate <> 1 
			Set @StoreAmount = @StoreAmount + @CostingRate * @StoreAmount - @HDisAmount

		/*********                  Store Account (Debit)        *****************/
		SELECT  @StoreAccount = [StoreAccount]  FROM  [dbo].[Inv_Store]  where ID =@STORE_id AND SubsidiaryID = @SubsidiaryID

		 insert into GL_VoucherDetailsTemp(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive)
		 Values (@VoucherID,@StoreAccount,@StoreAmount,0,@memo,@StoreAmount * @Rate,0,1)

		 IF @@ERROR <> 0 return 99
	Fetch Next From CUR_Store Into  @STORE_id ,@StoreAmount,@HDisAmount
	End		--	 End of Fetch
 
	Close CUR_Store
	Deallocate CUR_Store


 Declare @ExpAmount Numeric(18,3),@ExpAmountForiegn Numeric(18,3)

Declare CUR_Exp  cursor For 
	SELECT [Value]  
      ,[LocalValue]
      ,[AccountID] 
  FROM [GL_WEB].[dbo].[Inv_ReceiptExpenses] where [ReceiptID] = @RecieptID   
		       
		 
 SET @MCOUNTER = 0
 OPEN CUR_Exp
	Fetch Next From CUR_Exp Into @ExpAmountForiegn, @ExpAmount  , @ExpAccount
		
	While @@Fetch_Status = 0 Begin
		/*********                  Expensess Account (Credit)        *****************/
		 insert into GL_VoucherDetailsTemp(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive)
		 Values (@VoucherID,@ExpAccount,0,@ExpAmount,@memo,0,@ExpAmountForiegn,1)
		 IF @@ERROR <> 0 return 99
	Fetch Next From CUR_Exp Into @ExpAmountForiegn,  @ExpAmount , @ExpAccount
		
	End		--	 End of Fetch
 
	Close CUR_Exp
	Deallocate CUR_Exp
	
	Declare @Vouchercode nvarchar(50)
	Declare @TempVoucherID int

	Delete from GL_VoucherDetails where VoucherID = (Select id from GL_Vouchers where ReceiptID = @RecieptID)
	Delete from GL_Vouchers where ReceiptID = @RecieptID
	
	Select @Vouchercode = code from GL_Vouchers where code = @entryno;
	IF @Vouchercode = @entryno 
		Select @Vouchercode = max(isnull(code,0)) +1 from gl_vouchers ;
	
	
	Set @TempVoucherID = @VoucherID
	insert into GL_Vouchers(code,VoucherTypeID,BranchID,CurrencyID,SubsidaryID,VouhcerDate,ExchangeRate,Memo,ReceiptID,Posted,IsActive,ReferanceNo) 
				Values				(@Vouchercode,@VouchertypeID,@BranchId ,@CurrencyId,@SubsidiaryID,@VoucherDATE,@Rate,@memo,@RecieptID,0,1,@Reference_No)
	IF @@ERROR <> 0 return 99
	Select @VoucherID = id From GL_Vouchers where ReceiptID = @RecieptID;
	Declare @DetailAccount Int,@CreditAmount numeric(18,3),@CreditAmountF numeric(18,3),@DebiAmount numeric(18,3),@DebiAmountF numeric(18,3)

	Declare CUR_Details  cursor For 
		Select AccountNoID,Debit,Credit ,DebitForeign,CreditForeign From GL_VoucherDetailsTemp where VoucherID = @TempVoucherID; 

	 SET @MCOUNTER = 0
 OPEN CUR_Details
	Fetch Next From CUR_Details Into @DetailAccount, @DebiAmount  , @CreditAmount,@DebiAmountF,@CreditAmountF
		
	While @@Fetch_Status = 0 Begin
		 
		 insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,CostCenterID,ClassID,LocationID,DepartmentID)
		 Values (@VoucherID,@DetailAccount,@DebiAmount,@CreditAmount,@memo,@DebiAmountF,@CreditAmountF,1,@CostCenter,@Class,@Location,@department)
		 IF @@ERROR <> 0 return 99
	Fetch Next From CUR_Details Into @DetailAccount, @DebiAmount  , @CreditAmount,@DebiAmountF,@CreditAmountF
		
	End		--	 End of Fetch
 
	Close CUR_Details
	Deallocate CUR_Details
	Delete from GL_VoucherDetailsTemp where VoucherID = @TempVoucherID;
	Delete from GL_VouchersTemp where  ID = @TempVoucherID;
	 
	return  0
END
GO
/****** Object:  StoredProcedure [dbo].[Proc_PostingPurchaseTransactions]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
CREATE PROCEDURE [dbo].[Proc_PostingPurchaseTransactions]
	  @RecieptID int  ,@Lang  nvarchar(50) ='en-US'
AS
BEGIN
	Declare @LCNO int  
 

	select @LCNo = LCAccountID  from [dbo].[Inv_Receipt_h] where id = @RecieptID ;
	IF @LCNo is null Set @LCNo = 0 
	IF @LCNo = 0 
		Exec [Proc_PostingPurchaseTransactions_details] @RecieptID ,@Lang
	ELSE
		Exec [Proc_LC_PostingPurchaseTransactions] @RecieptID ,@Lang
		
	 
 END
GO
/****** Object:  StoredProcedure [dbo].[Proc_PostingPurchaseTransactions_Details]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[Proc_PostingPurchaseTransactions_Details]
	  @RecieptID int  ,@Lang  nvarchar(50) ='en-US'
AS
BEGIN
	Declare @VendorID int,@TransactionCode int,@PaymentTypeID int,@SubsidiaryID int ,@CurrencyId int ,@Rate  numeric(18,6) ,@BranchId int ,@entryno  nvarchar(50)
		   ,@STORE_id int,@MCOUNTER int,@VouchertypeID int,@VoucherID int,@ExpAccount int
	Declare @VoucherDATE Date ,@PurDiscount int 
	Declare @VendorAmount numeric(18,6),@VendorAmountForing numeric(18,6),@CostingRate numeric(18,6),@VendorAmountForign numeric(18,6),
			@StoreAmount Numeric(18,6),@HDisAmount  numeric(18,6)
	Declare @memo nvarchar(500),@DiscountAmount Numeric(18,6)
	Declare @CostCenter integer,@Location integer,@Class integer,@department integer
	Declare @PostingVouchertypeID int,@PaymentCode nvarchar(50)
	Declare @StoreAccount int
	Declare @ExpAmount Numeric(18,6),@ExpAmountForiegn Numeric(18,6)
	Declare @DetailAccount Int,@CreditAmount numeric(18,6),@CreditAmountF numeric(18,6),@DebiAmount numeric(18,6),@DebiAmountF numeric(18,6)
	Declare @Vouchercode nvarchar(50),@Reference_No nvarchar(50),@OriginalMemo  nvarchar(500) =''
	Declare @TempVoucherID int
	Declare @TotalTempCreditAmount Numeric(18,6),@DeliveryFees  Numeric(18,6) ,@deliveryAccount int,@memoInstallment nvarchar(500),@BranchCode nvarchar(50) ,@expAmt   Numeric(18,6), @Posted int
	--Inv_Posting  deliveryAccount
	--
	declare @TaxValue numeric(18,6)
   declare @TaxAccount int
	
	Declare @Discount_Value numeric(18,6)
	select @VendorID = [Vendor_ID]  ,@TransactionCode = Code ,@PaymentTypeID = Payment_Type,
		   @StoreAmount = value ,@Discount_Value =  ISnull(Discount_Value,0) ,
		   @VoucherDATE =  Entry_Date,@SubsidiaryID = SubsidiaryID,@CurrencyId = Currency_ID,@Rate =  Currency_Rate ,
		   @BranchId =  Branch_ID,@VendorAmount = NetValue,@VendorAmountForign = NetValueForeign ,
		   @entryno = Entry_No ,@CostingRate = Costing_Rate,@DiscountAmount = Discount_Value
		 , @CostCenter =CostCenterID,@Location =locationID,@Class =ClassID,@department = DepartmentID,
		   @Reference_No = Reference_No ,@DeliveryFees = DeliveryFees ,@OriginalMemo = Memo ,@TaxValue = Inv_Receipt_h.SurchargeValue
	from [dbo].[Inv_Receipt_h] where id = @RecieptID ;
	Declare @TaxName nvarchar(500)
		Select @TaxAccount = Mstr_TaxSetting.PurchaseAccountId,@TaxName=TaxName FROM [dbo].Mstr_TaxSetting WHERE Mstr_TaxSetting.SubsidiaryId = @SubsidiaryID
		IF @TaxName is null set @TaxName = ''
		print @TaxAccount
	Select @PurDiscount = [payableAccount] ,@deliveryAccount = deliveryAccount from [dbo].[Inv_Posting] where [branchid]  = @BranchId;
	
	IF isnull (@Reference_No,'') = ''  Set @Reference_No = ''
	IF @DeliveryFees is null		   set @DeliveryFees = 0 
	IF @deliveryAccount is null		   set @deliveryAccount = 0 

	 SELECT @PostingVouchertypeID = [PostingVoucher] FROM [Inv_Transaction_Codes]  where code =  @TransactionCode  ;
	 Select @VouchertypeID = id from  GL_VoucherType where code = Cast(@PostingVouchertypeID as varchar(50)) ;
	 Select @VouchertypeID = id ,@posted = DefaultPostingStatus from  GL_VoucherType where code = Cast(@PostingVouchertypeID as varchar(50)) ;
	 IF @posted is null Set @posted = 0
	 Select @PaymentCode = code from [dbo].[Inv_PaymentType] where id =@PaymentTypeID   ;
	 IF @PaymentCode <> 2  Select @VendorID = [AccountID] from  Inv_Posting_PaymentTypes  where PaymentTypeID= @PaymentTypeID and BranchID = @BranchId;


	IF @TransactionCode = 1 
	Begin
	--IF @CostCenter is null
	--	Select @CostCenter =CostCenterID,@Location =locationID,@Class =ClassID,@department = DepartmentID from  [dbo].[Inv_Transactions_branchs_Account] where [BranchID] = @BranchId and [TransctionID]=@TransactionCode ;
	--Execute proc_CreateTempPostingTable ;

	IF @Lang ='en-US' Set    @memo = 'Purchase Invoice No.' + Cast( @entryno as nvarchar(100));
	IF @Lang <> 'en-US' Set    @memo = N'فاتورة مشتريات رقم :' + Cast( @entryno as nvarchar(100));
	IF 	  isnull(@OriginalMemo ,'') <> '' and @Reference_No =''    set  @memo   = @OriginalMemo
	IF 	  isnull(@OriginalMemo ,'') <> '' and @Reference_No <> ''    set  @memo=  @OriginalMemo  + ' ' + @Reference_No
	--Delete from GL_VoucherDetails where VoucherID = (Select id from GL_Vouchers where ReceiptID = @RecieptID);
	--Delete from GL_Vouchers where ReceiptID = @RecieptID;
	insert into GL_Voucherstemp (code,VoucherTypeID,BranchID,CurrencyID,SubsidaryID,VouhcerDate,ExchangeRate,Memo,ReceiptID,Posted,IsActive) 
				Values			(@RecieptID,@VouchertypeID,@BranchId ,@CurrencyId,@SubsidiaryID,@VoucherDATE,@Rate,@memo,@RecieptID,@posted,1)

	Select @VoucherID = id From GL_Voucherstemp where ReceiptID = @RecieptID;
	IF @TaxAccount >0 and @TaxValue > 0  insert into GL_VoucherDetailsTemp(VoucherID,AccountNoID,Credit,Debit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
					Values				(@VoucherID,@TaxAccount,0,@TaxValue,@TaxName +' '+ @memo,@TaxValue * @Rate,0,1,@Costcenter);	
   
	IF @@ERROR <> 0 return 99
	
	/*********                  Store Account (Debit)        *****************/
	--SELECT  Top 1 @STORE_id = Store_ID 
	--FROM   Inv_Receipt_d 
	--Where  Inv_Receipt_d.Parent_ID= @RecieptID 

	Select @StoreAccount = GL_Setup.InventoryAccountId from GL_Setup   where     SubsidaryId = @SubsidiaryID
	if @StoreAccount is null (Select  top 1 @StoreAccount = [StoreAccount] from [Inv_Store] where     SubsidiaryID = @SubsidiaryID)

SELECT @expAmt = SUM(LocalValue  ) 
  FROM  [dbo].[Inv_ReceiptExpenses] where [ReceiptID] = @RecieptID   
		
	 IF @Discount_Value is null set @Discount_Value = 0
	 print @discount_value 
	 IF @expAmt is null set @expAmt = 0
	 Set @StoreAmount =  @expAmt +  @StoreAmount - @Discount_Value  --- @DeliveryFees
	 print @StoreAmount  
	

	--SELECT  @StoreAccount = [StoreAccount]  FROM  [dbo].[Inv_Store]  where ID = (select StoreID from mstr_Branch where ID = @BranchId)

	 insert into GL_VoucherDetailsTemp(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive)
		 Values (@VoucherID,@StoreAccount,@StoreAmount   ,0,@memo,@StoreAmount  * @Rate ,0,1)

	/*********************************فوائد التقسيط*************************************/
	IF @DeliveryFees > 0 and @deliveryAccount > 0 
	Begin
		select @BranchCode = Code from mstr_Branch where ID = @BranchId
		IF @Lang ='en-US' Set @memoInstallment = 'Installment benefits of purchase invoice No. ' + Cast(@entryno as nvarchar(500)) + ' Branch No.' + @BranchCode
		IF @Lang <>'en-US' Set @memoInstallment =N'فوائد تقسيط فاتورة المشتريات '+ Cast(@entryno as nvarchar(500)) +N' فرع ' + @BranchCode
		insert into GL_VoucherDetailsTemp(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive)
		 Values						 (@VoucherID,@deliveryAccount,@DeliveryFees,0  ,@memoInstallment,@DeliveryFees * @Rate,0,1) 

	END
	 IF @@ERROR <> 0 return 99
	/*********                  Vendor Account (Credit)        *****************/
	insert into GL_VoucherDetailsTemp(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive)
		 Values						 (@VoucherID,@VendorID,0,@VendorAmount  ,@memo,0,@VendorAmountForign,1) 

	IF @@ERROR <> 0 return 99 
	Declare CUR_Exp  cursor For 
		SELECT [Value]  
		  ,[LocalValue]
		  ,[AccountID] 
	  FROM  [dbo].[Inv_ReceiptExpenses] where [ReceiptID] = @RecieptID   
		       
		 
 SET @MCOUNTER = 0
 OPEN CUR_Exp
	Fetch Next From CUR_Exp Into @ExpAmountForiegn, @ExpAmount  , @ExpAccount
		
	While @@Fetch_Status = 0 Begin
		/*********                  Expensess Account (Credit)        *****************/

		 insert into GL_VoucherDetailsTemp(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive)
		 Values (@VoucherID,@ExpAccount,0,@ExpAmount ,@memo,0,@ExpAmountForiegn,1)
		 IF @@ERROR <> 0 return 99
	Fetch Next From CUR_Exp Into @ExpAmountForiegn,  @ExpAmount , @ExpAccount
		
	End		--	 End of Fetch
 
	Close CUR_Exp
	Deallocate CUR_Exp
	
	Delete from GL_VoucherDetails where VoucherID = (Select id from GL_Vouchers where ReceiptID = @RecieptID)
	Delete from GL_Vouchers where ReceiptID = @RecieptID
	
	Select @Vouchercode = code from GL_Vouchers where code = cast(@entryno as varchar(50)) and VoucherTypeID = @VouchertypeID and BranchID = @BranchId;
	IF @Vouchercode = @entryno 
		Select @Vouchercode = max(isnull(code,0)) +1 from gl_vouchers where VoucherTypeID =  @VouchertypeID and BranchID = @BranchId;
	ELSE
		Set  @Vouchercode = @entryno 
	
	Set @TempVoucherID = @VoucherID
	insert into GL_Vouchers(code,VoucherTypeID,BranchID,CurrencyID,SubsidaryID,VouhcerDate,ExchangeRate,Memo,ReceiptID,Posted,IsActive,ReferanceNo) 
				Values				(@Vouchercode,@VouchertypeID,@BranchId ,@CurrencyId,@SubsidiaryID,@VoucherDATE,@Rate,@memo,@RecieptID,@Posted,1,@Reference_No)
	IF @@ERROR <> 0 return 99

	IF (Select Count(Debit) From GL_VoucherDetailsTemp where VoucherID = @TempVoucherID and Debit > 0  ) =1 
	Begin
		Select @TotalTempCreditAmount = Sum (Credit)   From GL_VoucherDetailsTemp where VoucherID = @TempVoucherID; 
		Update GL_VoucherDetailsTemp set Debit =@TotalTempCreditAmount  where VoucherID = @TempVoucherID And Debit > 0 ;
	END

	Select @VoucherID = id From GL_Vouchers where ReceiptID = @RecieptID;
	

	Declare CUR_Details  cursor For 
		Select AccountNoID,Debit,Credit ,DebitForeign,CreditForeign , memo From GL_VoucherDetailsTemp where VoucherID = @TempVoucherID; 

	 SET @MCOUNTER = 0
 OPEN CUR_Details
	Fetch Next From CUR_Details Into @DetailAccount, @DebiAmount  , @CreditAmount,@DebiAmountF,@CreditAmountF,@memo
		
	While @@Fetch_Status = 0 Begin
	 
			 insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,CostCenterID,ClassID,LocationID,DepartmentID)
			 Values (@VoucherID,@DetailAccount,@DebiAmount,@CreditAmount,@memo,@DebiAmountF,@CreditAmountF,1,@CostCenter,@Class,@Location,@department)
		 
		 IF @@ERROR <> 0 return 99
	Fetch Next From CUR_Details Into @DetailAccount, @DebiAmount  , @CreditAmount,@DebiAmountF,@CreditAmountF,@memo
		
	End		--	 End of Fetch
 
	Close CUR_Details
	Deallocate CUR_Details
	Delete from GL_VoucherDetailsTemp where VoucherID = @TempVoucherID;
	Delete from GL_VouchersTemp where  ID = @TempVoucherID;
	 

	return  0
END

/********************************                    Purchase Return         **********************/
IF @TransactionCode = 2 
	Begin
	Select @TaxAccount = Mstr_TaxSetting.PurchaseReturnAccountId FROM [dbo].Mstr_TaxSetting WHERE Mstr_TaxSetting.SubsidiaryId = @SubsidiaryID
	--IF @CostCenter is null
	--	Select @CostCenter =CostCenterID,@Location =locationID,@Class =ClassID,@department = DepartmentID from  [dbo].[Inv_Transactions_branchs_Account] where [BranchID] = @BranchId and [TransctionID]=@TransactionCode ;
	 print @taxname
	IF @Lang ='en-US' Set    @memo = 'Purchase Return Invoice No.' + Cast( @entryno as varchar(100));
	IF @Lang <> 'en-US' Set    @memo = N'فاتورة  مرتجع مشتريات رقم :' + Cast( @entryno as varchar(100));

	--Select * from Inv_Receipt_h  where id  = 204021
	--Select  * from Inv_Receipt_d where Parent_ID  = 204021
	IF 	  isnull(@OriginalMemo ,'') <> '' and @Reference_No =''    set  @memo   = @OriginalMemo
	IF 	  isnull(@OriginalMemo ,'') <> '' and @Reference_No <> ''    set  @memo=  @OriginalMemo  + ' ' + @Reference_No
	
	--Delete from GL_VoucherDetails where VoucherID = (Select id from GL_Vouchers where ReceiptID = @RecieptID);
	--Delete from GL_Vouchers where ReceiptID = @RecieptID;
	insert into GL_Voucherstemp (code,VoucherTypeID,BranchID,CurrencyID,SubsidaryID,VouhcerDate,ExchangeRate,Memo,ReceiptID,Posted,IsActive) 
				Values				(@RecieptID,@VouchertypeID,@BranchId ,@CurrencyId,@SubsidiaryID,@VoucherDATE,@Rate,@memo,@RecieptID,@posted,1)
	Select @VoucherID = id From GL_Voucherstemp where ReceiptID = @RecieptID;
	--IF @TaxAccount >0 and @TaxValue > 0  insert into GL_VoucherDetailsTemp(VoucherID,AccountNoID,Credit,Debit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
	--				Values				(@VoucherID,@TaxAccount,@TaxValue,0,@memo,0,@TaxValue * @Rate,1,@Costcenter);	
	--IF @@ERROR <> 0 return 99
	
	/*********                  Store Account (Debit)        *****************/
	SELECT  Top 1 @STORE_id = Store_ID 
	FROM   Inv_Receipt_d 
	Where  Inv_Receipt_d.Parent_ID= @RecieptID   
	
	Set @StoreAmount =  @CostingRate * @VendorAmount

	
	Declare CUR_Exp  cursor For 
		SELECT [Value]  
		  ,[LocalValue]
		  ,[AccountID] 
		  
	  FROM  [dbo].[Inv_ReceiptExpenses] where [ReceiptID] = @RecieptID   
		       
		 
 SET @MCOUNTER = 0
 OPEN CUR_Exp
	Fetch Next From CUR_Exp Into @ExpAmountForiegn, @ExpAmount  , @ExpAccount
		
	While @@Fetch_Status = 0 Begin
		/*********                  Expensess Account (Credit)        *****************/
		 insert into GL_VoucherDetailsTemp(VoucherID,AccountNoID,Credit,Debit,Memo,CreditForeign,DebitForeign,IsActive)
		 Values (@VoucherID,@ExpAccount,0,@ExpAmount,@memo,0,@ExpAmountForiegn,1)
		 IF @@ERROR <> 0 return 99
	Fetch Next From CUR_Exp Into @ExpAmountForiegn,  @ExpAmount , @ExpAccount
		
	End		--	 End of Fetch
 
	Close CUR_Exp
	Deallocate CUR_Exp 

	SELECT @expAmt = SUM(LocalValue  ) 
	  FROM  [dbo].[Inv_ReceiptExpenses] where [ReceiptID] = @RecieptID   
		
	 IF @Discount_Value is null set @Discount_Value = 0
	 print @discount_value 
	 IF @expAmt is null set @expAmt = 0
	 Set @StoreAmount =  @expAmt +  @StoreAmount - @Discount_Value  --- @DeliveryFees
	 print @StoreAmount  
	SELECT  @StoreAccount = [StoreAccount]  FROM  [dbo].[Inv_Store]  where ID =@STORE_id AND SubsidiaryID = @SubsidiaryID

	--SELECT  @StoreAccount = [StoreAccount]  FROM  [dbo].[Inv_Store]  where ID = (select StoreID from mstr_Branch where ID = @BranchId)

	
	/*********                  Vendor Account (Credit)   مدين    *****************/
	 
	insert into GL_VoucherDetailsTemp(VoucherID,AccountNoID,Credit,Debit,Memo,CreditForeign,DebitForeign,IsActive)
		 Values (@VoucherID,@VendorID,0,@VendorAmount / @Rate,@memo,0,@VendorAmount,1) 

	IF @@ERROR <> 0 return 99 

	 insert into GL_VoucherDetailsTemp(VoucherID,AccountNoID,Credit,Debit,Memo,CreditForeign,DebitForeign,IsActive)
		 Values (@VoucherID,@StoreAccount,@StoreAmount,0,@memo,@StoreAmount * @Rate,0,1)

	 IF @@ERROR <> 0 return 99
	 IF @TaxAccount >0 and @TaxValue > 0  insert into GL_VoucherDetailsTemp(VoucherID,AccountNoID,Credit,Debit,Memo,DebitForeign,CreditForeign,IsActive,costcenterid) 
					Values				(@VoucherID,@TaxAccount,@TaxValue,0,@TaxName + ' '+@memo,0,@TaxValue * @Rate,1,@Costcenter);
					Print @TaxName + ' '+@memo
	IF @@ERROR <> 0 return 99
	
	Delete from GL_VoucherDetails where VoucherID = (Select id from GL_Vouchers where ReceiptID = @RecieptID)
	Delete from GL_Vouchers where ReceiptID = @RecieptID
	
	Select @Vouchercode = code from GL_Vouchers where code = cast(@entryno as varchar(50)) and VoucherTypeID = @VouchertypeID and BranchID = @BranchId;
	IF @Vouchercode = @entryno 
	Begin
		Select @Vouchercode = max(isnull(code,0))  from gl_vouchers where VoucherTypeID =  @VouchertypeID and BranchID = @BranchId;
		Set @Vouchercode = Cast ((Cast(@Vouchercode as int) + 1)  as nvarchar(50))
	END
	ELSE
		Set  @Vouchercode = @entryno 
	
	Set @TempVoucherID = @VoucherID
	insert into GL_Vouchers(code,VoucherTypeID,BranchID,CurrencyID,SubsidaryID,VouhcerDate,ExchangeRate,Memo,ReceiptID,Posted,IsActive,ReferanceNo ) 
				Values	   (@Vouchercode,@VouchertypeID,@BranchId ,@CurrencyId,@SubsidiaryID,@VoucherDATE,@Rate,@memo,@RecieptID,@Posted,1,@Reference_No)
	IF @@ERROR <> 0 return 99
	 
	--Select @TotalTempCreditAmount = Sum (Debit ) From GL_VoucherDetailsTemp where VoucherID = @TempVoucherID; 
	--Update GL_VoucherDetailsTemp set Credit =@TotalTempCreditAmount  - @TaxValue   where VoucherID = @TempVoucherID And Credit > 0 ;
	   	  
	Select @VoucherID = id From GL_Vouchers where ReceiptID = @RecieptID; 

	Declare CUR_Details  cursor For 
		Select AccountNoID,Debit,Credit ,DebitForeign,CreditForeign , Memo From GL_VoucherDetailsTemp where VoucherID = @TempVoucherID; 

	 SET @MCOUNTER = 0
 OPEN CUR_Details
	Fetch Next From CUR_Details Into @DetailAccount, @DebiAmount  , @CreditAmount,@DebiAmountF,@CreditAmountF,@memo
		
	While @@Fetch_Status = 0 Begin
		
		 insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,CostCenterID,ClassID,LocationID,DepartmentID)
		                       Values (@VoucherID,@DetailAccount,@DebiAmount,@CreditAmount,@memo,@DebiAmountF,@CreditAmountF,1,@CostCenter,@Class,@Location,@department)
		print @memo
		 IF @@ERROR <> 0 return 99
	Fetch Next From CUR_Details Into @DetailAccount, @DebiAmount  , @CreditAmount,@DebiAmountF,@CreditAmountF,@memo
		
	End		--	 End of Fetch
 
	Close CUR_Details
	Deallocate CUR_Details
	Delete from GL_VoucherDetailsTemp where VoucherID = @TempVoucherID;
	Delete from GL_VouchersTemp where  ID = @TempVoucherID;
	 
	return  0
END 
END
GO
/****** Object:  StoredProcedure [dbo].[Proc_PostingStoreTransactions]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Batch submitted through debugger: SQLQuery1.sql|7|0|C:\Users\DEVELO~1\AppData\Local\Temp\4\~vs5CB8.sql
-- Batch submitted through debugger: SQLQuery6.sql|7|0|C:\Users\DEVELO~1\AppData\Local\Temp\4\~vs7481.sql
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[Proc_PostingStoreTransactions]
	  @RecieptID int  
AS
BEGIN
	Declare @VendorID int,@TransactionCode int,@PaymentTypeID int,@SubsidiaryID int ,@CurrencyId int ,@Rate int ,@BranchId int ,@entryno int 
		   ,@STORE_id int,@MCOUNTER int,@VouchertypeID int,@VoucherID int,@ExpAccount int
	Declare @VoucherDATE Date ,@PurDiscount int 
	Declare @VendorAmount numeric(18,3),@VendorAmountForing numeric(18,3),@CostingRate numeric(18,3),@VendorAmountForign numeric(18,3),
			@StoreAmount Numeric(18,3),@HDisAmount  numeric(18,6)
	Declare @memo varchar(500),@DiscountAmount Numeric(18,3),@Reference_No nvarchar(50)
	Declare   @CostCenter integer,@Location integer,@Class integer,@department integer
	Declare  @PostingVouchertypeID int,@PaymentCode nvarchar(50)
	Declare  @Move int 

	Select @PurDiscount = [payableAccount] from [dbo].[Inv_Posting] where [branchid]  = @BranchId;

	select @VendorID = [Vendor_ID]  ,@TransactionCode = Code ,@PaymentTypeID = Payment_Type,
		 @VoucherDATE =  Entry_Date,@SubsidiaryID = SubsidiaryID,@CurrencyId = Currency_ID,@Rate =  Currency_Rate ,
		 @BranchId =  Branch_ID,@VendorAmount = NetValue,@VendorAmountForign = NetValueForeign ,
		 @entryno = Entry_No ,@CostingRate = Costing_Rate,@DiscountAmount = Discount_Value
		 ,@CostCenter =CostCenterID,@Location =locationID,@Class =ClassID,@department = DepartmentID,@Reference_No = Reference_No
	from [dbo].[Inv_Receipt_h] 
	where id = @RecieptID ;

	--IF @CostCenter is null
	--	Select @CostCenter =CostCenterID,@Location =locationID,@Class =ClassID,@department = DepartmentID from  [dbo].[Inv_Transactions_branchs_Account] where [BranchID] = @BranchId and [TransctionID]=@TransactionCode ;

	
	  
	-- Select @VouchertypeID = id from  GL_VoucherType where code = Cast(@TransactionCode as varchar(50)) ;
	 SELECT @PostingVouchertypeID = [PostingVoucher] FROM [Inv_Transaction_Codes]  where code =  @TransactionCode  ;
	 Select @VouchertypeID = id from  GL_VoucherType where code = Cast(@PostingVouchertypeID as varchar(50)) ;
	 

	 IF @TransactionCode = 82 
	 Begin
		Set @memo = 'Production Voucher No.' + Cast( @entryno as varchar(100));
		insert into GL_Voucherstemp (code,VoucherTypeID,BranchID,CurrencyID,SubsidaryID,VouhcerDate,ExchangeRate,Memo,ReceiptID,Posted,IsActive) 
				Values				(@RecieptID,@VouchertypeID,@BranchId ,@CurrencyId,@SubsidiaryID,@VoucherDATE,@Rate,@memo,@RecieptID,0,1)
		IF @@ERROR <> 0 return 99	
		Select @VoucherID = id From GL_Voucherstemp where ReceiptID = @RecieptID;
		Declare @StoreAccount int
		Select @StoreAccount = GL_Setup.InventoryAccountId from GL_Setup  
	    if @StoreAccount is null (Select  top 1 @StoreAccount = [StoreAccount] from [Inv_Store] where     SubsidiaryID = @SubsidiaryID)

		/*comment 1 insted of comment 2*/
		Select @StoreAccount = GL_Setup.InventoryAccountId from GL_Setup  
	     if @StoreAccount is null (Select  top 1 @StoreAccount = [StoreAccount] from [Inv_Store] where     SubsidiaryID = @SubsidiaryID)


		Declare CUR_Store  cursor For 
		SELECT  Store_ID,  total,  H_Discount_Value,Transaction_move
		FROM   Inv_Receipt_d 
		Where  Inv_Receipt_d.Parent_ID= @RecieptID   
		       
		 
		SET @MCOUNTER = 0
		OPEN CUR_Store
		Fetch Next From CUR_Store Into @STORE_id ,@StoreAmount,@HDisAmount,@Move

		While @@Fetch_Status = 0 Begin 

			/*********                  Store Account (Debit)        *****************/
			/*comment 2*/--SELECT  @StoreAccount = [StoreAccount]  FROM  [dbo].[Inv_Store]  where ID =@STORE_id AND SubsidiaryID = @SubsidiaryID
			IF @Move = 1 
				 insert into GL_VoucherDetailsTemp(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive)
				 Values (@VoucherID,@StoreAccount,@StoreAmount,0,@memo,@StoreAmount * @Rate,0,1)
			 ELSE
				insert into GL_VoucherDetailsTemp(VoucherID,AccountNoID,Credit,Debit,Memo,CreditForeign,DebitForeign,IsActive)
				 Values (@VoucherID,@StoreAccount,@StoreAmount,0,@memo,@StoreAmount * @Rate,0,1)
			 
			 IF @@ERROR <> 0 return 99
		Fetch Next From CUR_Store Into  @STORE_id ,@StoreAmount,@HDisAmount,@Move
		End		--	 End of Fetch 
		Close CUR_Store
		Deallocate CUR_Store
	 END

	/*********                  Vendor Account (Credit)        *****************/
	 
	Declare @Vouchercode nvarchar(50)
	Declare @TempVoucherID int

	Delete from GL_VoucherDetails where VoucherID = (Select id from GL_Vouchers where ReceiptID = @RecieptID)
	Delete from GL_Vouchers where ReceiptID = @RecieptID
	
	Select @Vouchercode = code from GL_Vouchers where code = @entryno;
	IF @Vouchercode = @entryno 
		Select @Vouchercode = max(isnull(code,0)) +1 from gl_vouchers ;
	
	
	Set @TempVoucherID = @VoucherID
	insert into GL_Vouchers(code,VoucherTypeID,BranchID,CurrencyID,SubsidaryID,VouhcerDate,ExchangeRate,Memo,ReceiptID,Posted,IsActive,ReferanceNo) 
				Values				(@Vouchercode,@VouchertypeID,@BranchId ,@CurrencyId,@SubsidiaryID,@VoucherDATE,@Rate,@memo,@RecieptID,0,1,@Reference_No)
	IF @@ERROR <> 0 return 99
	Select @VoucherID = id From GL_Vouchers where ReceiptID = @RecieptID;
	Declare @DetailAccount Int,@CreditAmount numeric(18,3),@CreditAmountF numeric(18,3),@DebiAmount numeric(18,3),@DebiAmountF numeric(18,3)

	Declare CUR_Details  cursor For 
		Select AccountNoID,Debit,Credit ,DebitForeign,CreditForeign From GL_VoucherDetailsTemp where VoucherID = @TempVoucherID; 

	 SET @MCOUNTER = 0
	 OPEN CUR_Details
	Fetch Next From CUR_Details Into @DetailAccount, @DebiAmount  , @CreditAmount,@DebiAmountF,@CreditAmountF
		
	While @@Fetch_Status = 0 Begin
		 
		 insert into GL_VoucherDetails(VoucherID,AccountNoID,Debit,Credit,Memo,DebitForeign,CreditForeign,IsActive,CostCenterID,ClassID,LocationID,DepartmentID)
		 Values (@VoucherID,@DetailAccount,@DebiAmount,@CreditAmount,@memo,@DebiAmountF,@CreditAmountF,1,@CostCenter,@Class,@Location,@department)
		 IF @@ERROR <> 0 return 99
	Fetch Next From CUR_Details Into @DetailAccount, @DebiAmount  , @CreditAmount,@DebiAmountF,@CreditAmountF
		
	End		--	 End of Fetch
 
	Close CUR_Details
	Deallocate CUR_Details
	Delete from GL_VoucherDetailsTemp where VoucherID = @TempVoucherID;
	Delete from GL_VouchersTemp where  ID = @TempVoucherID;
	 
	return  0
END
GO
/****** Object:  StoredProcedure [dbo].[Proc_UpdateInvoiceTotalAfterImport]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create proc [dbo].[Proc_UpdateInvoiceTotalAfterImport]
 @RecieptID int
AS

BEGIN

update Inv_Receipt_d set Total = (Qty * Price) - ISNULL(Discount_Value,0)  where Parent_ID = @RecieptID
update Inv_Receipt_h set Value = (select sum(Total) from Inv_Receipt_d where Parent_ID = @RecieptID and FinishedProductID is null) where id = @RecieptID
update Inv_Receipt_h set ValueForeign = (select sum(Total) from Inv_Receipt_d where Parent_ID = @RecieptID and FinishedProductID is null) where id = @RecieptID
update  Inv_Receipt_h set NetValue = ISNULL(Value,0) + ISNULL(DeliveryFees,0) - ISNULL(Discount_Value,0) where id = @RecieptID

update Inv_Receipt_h set Costing_Rate = (ValueForeign/
(Value + ISNULL((select sum(LocalValue) from Inv_ReceiptExpenses where ReceiptID = @RecieptID),0))) where Code = 1 and NetValue <> 0
and ID = @RecieptID

END

GO
/****** Object:  StoredProcedure [dbo].[Proc_UpdatePostingPurchaseTransactions]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create PROCEDURE [dbo].[Proc_UpdatePostingPurchaseTransactions] 
AS
BEGIN
	Declare @RecieptID int 
	 
	Declare CUR_RDForPur  cursor For  
			SELECT  ID	FROM   Inv_Receipt_h  where  Transaction_Code = 1
		
		 OPEN CUR_RDForPur 
		Fetch Next From CUR_RDForPur Into @RecieptID

		While @@Fetch_Status = 0 Begin  
			 	Exec [Proc_PostingPurchaseTransactions]  @RecieptID,'en-US11'
			 
		Fetch Next From CUR_RDForPur Into @RecieptID

		End		--	 End of Fetch

		Close CUR_RDForPur
		Deallocate CUR_RDForPur
		 
 END
GO
/****** Object:  StoredProcedure [dbo].[Rep_Get_Deploy_Scripts]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROC [dbo].[Rep_Get_Deploy_Scripts]

AS

BEGIN



DECLARE @Enter Nvarchar(max) = NULL
SET @Enter = char(13) + char(10)  

--SELECT name FROM master.dbo.sysdatabases
--WHERE Name LIKE 'Gl_WEB%'

DECLARE @sql nvarchar(max) = null

SELECT  
'set varServerPath=http://ec2amaz-opq5oi9/ReportServer_SSRS'+@Enter+
'set varServerName=EC2AMAZ-OPQ5OI9'+@Enter+
'set varDatabaseName='+ name +@Enter+
'set varDatabaseUserName=SSRS'+@Enter+ 
'set varDatabasePassword=SSRS'+@Enter+ 
'set varReportName='+@Enter+ 
'call deploy.bat='+@Enter+@Enter sql

INTO #bat
FROM master.dbo.sysdatabases
WHERE Name LIKE 'Gl_WEB%'



SELECT '@echo off'
UNION ALL
SELECT * from #bat 
END
GO
/****** Object:  StoredProcedure [dbo].[Rep_Get_SQL_Scripts]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROC [dbo].[Rep_Get_SQL_Scripts]

AS

BEGIN



DECLARE @Enter Nvarchar(max) = NULL
SET @Enter = char(13) + char(10)  

--SELECT name FROM master.dbo.sysdatabases
--WHERE Name LIKE 'Gl_WEB%'

DECLARE @sql nvarchar(max) = null

SELECT  
'Set ServerName=18.195.174.125'+@Enter+
'Set UserName=SSRS'+@Enter+
'Set UserPassword=SSRS'+@Enter+
'Set DataBase='+ name +@Enter+
'echo Starting Database Update > .\AlterDatabase.log'+@Enter+ 
'forfiles /p . /s /m *.sql /c "cmd /c echo Executing @path >> ..\AlterDatabase.log&sqlcmd -S %ServerName% -U %UserName% -P %UserPassword% -d %DataBase% -i @path -o .\output.log&type .\output.log >> ..\AlterDatabase.log"'+@Enter+
'echo 18.195.174.125'+ name + @Enter+@Enter sql

INTO #bat
FROM master.dbo.sysdatabases
WHERE Name LIKE 'Gl_WEB%'



SELECT '@echo off'
UNION ALL
SELECT * from #bat 
END
GO
/****** Object:  StoredProcedure [dbo].[Rep_Group_I_P_S]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Proc [dbo].[Rep_Group_I_P_S]
     @Model   NVARCHAR(50) = 'P'
   , @GroupBy NVARCHAR(50) = 'ItemCategories'
   ,@lang  nvarchar(50)    = null -- make order by based on lang
As
         Begin


             Declare
                    @TblName     NVARCHAR(MAX) = Null
                  , @TblCol      NVARCHAR(MAX) = Null
                  , @Sql         NVARCHAR(MAX) = Null
                  , @CodeIn      NVARCHAR(50)  = Null
                  , @CodeOut     NVARCHAR(50)  = Null
                  , @Code_In_Out NVARCHAR(50)  = Null


             Select
                    @TblName = Case
                                   When @GroupBy = 'ItemCategories'
                                   Then '
								Left Join Inv_Items  
									On Inv_Items.ID = D.Item_ID
								Left Join Inv_Items_Categories
									On Inv_Items_Categories.Item_ID = Inv_Items.ID
								Left Join Inv_ProductCategories tbl
									On tbl.ID = Inv_Items_Categories.ItemCategory_ID
								'
                               End;



             Select
                    @TblCol = Case
                                  When @GroupBy = 'ItemCategories'
                                  Then '
								  tbl.ID
								, tbl.Name_Ar
								, tbl.Name
								'
                              End;

             If(@Model = 'S')
                 Begin
                     Select
                            @CodeIn = '51,52'
                          , @CodeOut = '53,54'
                          , @Code_In_Out = @CodeIn+','+@CodeOut
                 End
             If(@Model = 'P')
                 Begin
                     Select
                            @CodeIn = '1'
                          , @CodeOut = '2'
                          , @Code_In_Out = @CodeIn+','+@CodeOut
                 End

             Select
                    @Model       [@Model]
                  , @CodeIn      [@CodeIn]
                  , @CodeOut     [@CodeOut]
                  , @Code_In_Out [@Code_In_Out]


             Select
                    @Sql = ' Select
				      '+@TblCol+'
                         , In_Qty = SUM(Case
                                                 When H.CODE In('+@CodeIn+')
                                                 Then D.qty
                                                 Else 0
                                             End)
                         , Out_Qyty = SUM(Case
                                                 When H.CODE In('+@CodeOut+')
                                                 Then D.qty
                                                 Else 0
                                             End)
                         , Net_QTY = SUM(Case
                                             When H.CODE In('+@CodeIn+')
                                             Then D.qty
                                             Else 0
                                         End) - SUM(Case
                                                        When H.CODE In('+@CodeOut+')
                                                        Then D.qty
                                                        Else 0
                                                    End)
                         , In_Total = SUM(Case
                                                   When H.CODE In('+@CodeIn+')
                                                   Then(D.Total / IsNull(H.Currency_Rate, 1)) - (D.H_Discount_Value / IsNull(H.Currency_Rate, 1))
                                                   Else 0
                                               End)
                         , Out_Total = SUM(Case
                                                   When H.CODE In('+@CodeOut+')
                                                   Then(D.Total / IsNull(H.Currency_Rate, 1)) - (D.H_Discount_Value / IsNull(H.Currency_Rate, 1))
                                                   Else 0
                                               End)
                         , NetSale = SUM(Case
                                             When H.CODE In('+@CodeIn+')
                                             Then(D.Total / IsNull(H.Currency_Rate, 1)) - (D.H_Discount_Value / IsNull(H.Currency_Rate, 1))
                                             Else 0
                                         End) - SUM(Case
                                                        When H.CODE In('+@CodeOut+')
                                                        Then(D.Total / IsNull(H.Currency_Rate, 1)) - (D.H_Discount_Value / IsNull(H.Currency_Rate, 1))
                                                        Else 0
                                                    End)
                        
                        
                         , Sales_Cost = SUM(Case
                                                When H.CODE In('+@CodeIn+')
                                                Then D.Avr_Cost * D.qty * D.Conv
                                                Else 0
                                            End)
                         , Returns_Cost = SUM(Case
                                                  When H.CODE In('+@CodeOut+')
                                                  Then D.Avr_Cost * D.qty * D.Conv
                                                  Else 0
                                              End)
                    From
                         Inv_Receipt_H H
                    Left Join Inv_Receipt_d D
                         On D.Parent_ID = H.ID

					'+@TblName+'

                    Group By
				    '+@TblCol+'
                    Order By
                             tbl.Name
                           , tbl.Name_Ar'
 
             Exec Sp_executesql
                  @Sql
         End
GO
/****** Object:  StoredProcedure [dbo].[Report_Aging_Data_Payable]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create PROCEDURE [dbo].[Report_Aging_Data_Payable]

@SubsidiaryID int ,
@ToDate date  ,
@TransactionTypeId int =  NULL,
@TransactionPostedId int = NULL,
@AccountId int = NULL,
@PeriodNumber int = 30

AS

Declare @Period30Date date = DATEADD(DAY, -(1*@PeriodNumber), CONVERT(datetime, @ToDate))
Declare @Period60Date date = DATEADD(DAY, - (2*@PeriodNumber), CONVERT(datetime, @ToDate))
Declare @Period90Date date = DATEADD(DAY, -(3*@PeriodNumber), CONVERT(datetime, @ToDate))
Declare @Period120Date date = DATEADD(DAY, -(4*@PeriodNumber), CONVERT(datetime, @ToDate))
Declare @PeriodAbove120Date date = DATEADD(DAY, -1, @Period120Date)

--Select @Period30Date as Period30Date , @Period60Date as Period60Date, @Period90Date as Period90Date ,@Period120Date as Period120Date ,@PeriodAbove120Date  as Periodabove120Date
Select * from (
Select Max(GL_Accounts.VendorCode) as Code,Max(GL_Accounts.Name) as CustomerName,Max(GL_Accounts.Name_AR) as CustomerNameAr ,Sum(Debit) as TotalDebit , Sum(Credit) as TotalCredit ,
CASE WHEN  Sum(Credit) - Sum(Debit) > 0  
     THEN CONVERT(NVARCHAR,CONVERT(DECIMAL(18,3) ,(Sum(Credit) - Sum(Debit))))
	 ELSE '(' + CONVERT(NVARCHAR,CONVERT(DECIMAL(18,3) ,(Sum(Debit) - Sum(Credit)))) + ')' END   As CustomerBalance  ,
     Sum(Credit) - Sum(Debit)   As CustomerBalanceValue  ,
    -- Aging Above 120
    -- Start AgingPeriodAbove120_WithoutPayment Column
	(Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ) as AgingPeriodAbove120WithoutPayment ,
    -- End AgingPeriodAbove120_WithoutPayment Column

---*********************************************************************************************************************************---

    -- Start AgingPeriodAbove120_WithPayment Column
	Sum(GL_VoucherDetails.Credit) - (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ) as AgingPeriodAbove120WithPayment ,
    -- End AgingPeriodAbove120_WithPayment Column

---*********************************************************************************************************************************---

   CASE WHEN Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END as CreditAfterAbove120,

---*********************************************************************************************************************************---

    -- Start AgingPeriodAbove120 Column
	CONVERT(DECIMAL(18,3) ,Case When Sum(GL_VoucherDetails.Credit) - Sum(GL_VoucherDetails.Debit) > 0 
	Then
	    Case 
		WHEN ISNULL((Select  Sum(VD.Credit)    --Start Condition_1
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0) = 0  --End Condition_1
		THEN 0
		WHEN  -- Start Condition_2
		Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)  < 0  -- End Condition_2
		THEN 
		ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)	-Sum(GL_VoucherDetails.Credit)
		Else 0 End
	Else 0 End) as AgingPeriodAbove120   ,
	-- End AgingPeriodAbove120 Column

---*********************************************************************************************************************************---

	-- Aging = 120
	-- Start AgingPeriod120_WithoutPayment Column
	(Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ) as AgingPeriod120WithoutPayment ,
	-- End AgingPeriod120_WithoutPayment Column

---*********************************************************************************************************************************---

	-- Aging = 120
	-- Start CreditAfter120 Column
	   Case WHEN ((CASE WHEN Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END as CreditAfter120 ,
	-- End CreditAfter120 Column

---*********************************************************************************************************************************---

	-- Start AgingPeriod120 Column
	CONVERT(DECIMAL(18,3) ,Case When Sum(GL_VoucherDetails.Credit) - Sum(GL_VoucherDetails.Debit) > 0 
	Then
	    Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		THEN 
		0
		ELSE 
		(ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)
		- (CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		) END  
		ELSE 0 END) as AgingPeriod120  , 
	-- End AgingPeriod120 Column

---*********************************************************************************************************************************---

	-- Aging = 90
	-- Start AgingPeriod90_WithoutPayment Column
	(Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ) as AgingPeriod90WithoutPayment ,
	-- End AgingPeriod90_WithoutPayment Column

---*********************************************************************************************************************************---
	
	-- Aging = 90
	-- Start CreditAfter90 Column
	Case WHEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0))
	ELSE 0
	END as CreditAfter90 ,
	   
---*********************************************************************************************************************************---
	
	-- Aging = 90
	-- Start AgingPeriod90 Column
	CONVERT(DECIMAL(18,3) ,	Case When Sum(GL_VoucherDetails.Credit) - Sum(GL_VoucherDetails.Debit) > 0 
	Then
	Case WHEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	-----///////////////////////////////////////////////////////////////////////////////////////-----
	THEN 0
	ELSE (ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ) ,0)
		-(Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END))
	END 
	ELSE 0 END) as AgingPeriod90,
	   
---*********************************************************************************************************************************---
	-- Aging = 60
	-- Start AgingPeriod60_WithoutPayment Column
	(Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ) as AgingPeriod60WithoutPayment ,
	-- End AgingPeriod60_WithoutPayment Column

---*********************************************************************************************************************************---
    --CreditAfter60
	CASE WHEN ((Case WHEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) ) > 0
	OR ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	-----////////////////////////////////////////////---------------------------------------------------------------------
	THEN ((Case WHEN ((Case WHEN ((CASE WHEN    Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) )
	ELSE 0
	END as CreditAfter60 ,

---*********************************************************************************************************************************---
    --AgingPeriod60
	CONVERT(DECIMAL(18,3) ,Case When Sum(GL_VoucherDetails.Credit) - Sum(GL_VoucherDetails.Debit) > 0 
	Then
	CASE WHEN ((Case WHEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) ) > 0
	OR ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	-----////////////////////////////////////////////---------------------------------------------------------------------
	THEN 0
	ELSE (ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) 
		- (Case WHEN ((Case WHEN ((CASE WHEN Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0))
	ELSE 0
	END) )
	END 
	ELSE 0 END) as AgingPeriod60 ,

---*********************************************************************************************************************************---

	-- Aging = 30
	-- Start AgingPeriod30_WithoutPayment Column
	(Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < @ToDate and V.VouhcerDate >=  @Period30Date ) as AgingPeriod30WithoutPayment ,
	-- End AgingPeriod30_WithoutPayment Column

---*********************************************************************************************************************************---

     -- CreditAfter30
	 CASE WHEN ((CASE WHEN ((Case WHEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) ) > 0
	OR ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	-----////////////////////////////////////////////---------------------------------------------------------------------
	THEN ((Case WHEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) )
	ELSE 0
	END) 
	 - ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < @ToDate and V.VouhcerDate >=  @Period30Date ), 0)) > 0
	 OR ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < @ToDate and V.VouhcerDate >=  @Period30Date ), 0) = 0
	 OR Sum(GL_VoucherDetails.Credit) = 0
	 -----/*/*/*/*/*/*/*/*/*/*/*/*/**/*//**/*/*/*/*//**/**/*/**/*/*------
	 THEN ((CASE WHEN ((Case WHEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) ) > 0
	OR ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	-----////////////////////////////////////////////---------------------------------------------------------------------
	THEN ((Case WHEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) )
	ELSE 0
	END) 
	 - ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < @ToDate and V.VouhcerDate >=  @Period30Date ), 0))
	 ELSE 0
	 END as CreditAfter30 ,

---*********************************************************************************************************************************---

     -- AgingPeriod30
	CONVERT(DECIMAL(18,3) ,Case When Sum(GL_VoucherDetails.Credit) - Sum(GL_VoucherDetails.Debit) > 0 
	Then
	 CASE WHEN ((CASE WHEN ((Case WHEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) ) > 0
	OR ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	-----////////////////////////////////////////////---------------------------------------------------------------------
	THEN ((Case WHEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) )
	ELSE 0
	END) 
	 - ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < @ToDate and V.VouhcerDate >=  @Period30Date ), 0)) > 0
	 OR ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < @ToDate and V.VouhcerDate >=  @Period30Date ), 0) = 0
	 OR Sum(GL_VoucherDetails.Credit) = 0
	 -----/*/*/*/*/*/*/*/*/*/*/*/*/**/*//**/*/*/*/*//**/**/*/**/*/*------
	 THEN 0
	 ELSE (ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < @ToDate and V.VouhcerDate >=  @Period30Date ), 0))
		- (CASE WHEN ((Case WHEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) ) > 0
	OR ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	-----////////////////////////////////////////////---------------------------------------------------------------------
	THEN ((Case WHEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) )
	ELSE 0
	END) 
	 END 
	 ELSE 0 END) as AgingPeriod30 

---*********************************************************************************************************************************---

From GL_Vouchers
JOIN GL_VoucherDetails ON GL_Vouchers.ID = GL_VoucherDetails.VoucherID
JOIN GL_Accounts ON GL_VoucherDetails.AccountNoID = GL_Accounts.AccountID
Where 
GL_Vouchers.SubsidaryID = @SubsidiaryID
AND GL_Accounts.IsVendor = 0 AND GL_Accounts.LevelNo = 0 -- Customers Only
AND (GL_Accounts.AccountID = @AccountId OR  @AccountId IS NULL)
AND Cast(GL_Vouchers.VouhcerDate as date) <= Cast(@ToDate as date)
AND (GL_VoucherDetails.SetupAccountType IS NULL OR GL_VoucherDetails.SetupAccountType = 1)
AND ((@TransactionPostedId = 1) OR( GL_Vouchers.Posted = 1 AND @TransactionPostedId = 2))

Group By AccountID

) ResultData

WHERE ((@TransactionTypeId = 2) OR( (CustomerBalanceValue > 0) AND @TransactionTypeId = 3))
 
GO
/****** Object:  StoredProcedure [dbo].[Report_Aging_Data_Receivable]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[Report_Aging_Data_Receivable]

@SubsidiaryID int ,
@ToDate date  ,
@TransactionTypeId int =  NULL,
@TransactionPostedId int = NULL,
@AccountId int = NULL,
@PeriodNumber int = 30

AS

Declare @Period30Date date = DATEADD(DAY, -(1*@PeriodNumber), CONVERT(datetime, @ToDate))
Declare @Period60Date date = DATEADD(DAY, - (2*@PeriodNumber), CONVERT(datetime, @ToDate))
Declare @Period90Date date = DATEADD(DAY, -(3*@PeriodNumber), CONVERT(datetime, @ToDate))
Declare @Period120Date date = DATEADD(DAY, -(4*@PeriodNumber), CONVERT(datetime, @ToDate))
Declare @PeriodAbove120Date date = DATEADD(DAY, -1, @Period120Date)

--Select @Period30Date as Period30Date , @Period60Date as Period60Date, @Period90Date as Period90Date ,@Period120Date as Period120Date ,@PeriodAbove120Date  as Periodabove120Date
Select * from (
Select Max(GL_Accounts.VendorCode) as Code,Max(GL_Accounts.Name) as CustomerName,Max(GL_Accounts.Name_AR) as CustomerNameAr ,Sum(Debit) as TotalDebit , Sum(Credit) as TotalCredit ,
CASE WHEN  Sum(Debit) - Sum(Credit) > 0  
     THEN CONVERT(NVARCHAR,CONVERT(DECIMAL(18,3) ,(Sum(Debit) - Sum(Credit))))
	 ELSE '(' + CONVERT(NVARCHAR,CONVERT(DECIMAL(18,3) ,(Sum(Credit) - Sum(Debit)))) + ')' END   As CustomerBalance  ,
     Sum(Debit) - Sum(Credit)   As CustomerBalanceValue  ,
    -- Aging Above 120
    -- Start AgingPeriodAbove120_WithoutPayment Column
	(Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ) as AgingPeriodAbove120WithoutPayment ,
    -- End AgingPeriodAbove120_WithoutPayment Column

---*********************************************************************************************************************************---

    -- Start AgingPeriodAbove120_WithPayment Column
	Sum(GL_VoucherDetails.Credit) - (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ) as AgingPeriodAbove120WithPayment ,
    -- End AgingPeriodAbove120_WithPayment Column

---*********************************************************************************************************************************---

   CASE WHEN Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END as CreditAfterAbove120,

---*********************************************************************************************************************************---

    -- Start AgingPeriodAbove120 Column
	CONVERT(DECIMAL(18,3) ,Case When Sum(GL_VoucherDetails.Debit) - Sum(GL_VoucherDetails.Credit) > 0 
	Then
	    Case 
		WHEN ISNULL((Select  Sum(VD.Debit)    --Start Condition_1
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0) = 0  --End Condition_1
		THEN 0
		WHEN  -- Start Condition_2
		Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)  < 0  -- End Condition_2
		THEN 
		ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)	-Sum(GL_VoucherDetails.Credit)
		Else 0 End
	Else 0 End) as AgingPeriodAbove120   ,
	-- End AgingPeriodAbove120 Column

---*********************************************************************************************************************************---

	-- Aging = 120
	-- Start AgingPeriod120_WithoutPayment Column
	(Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ) as AgingPeriod120WithoutPayment ,
	-- End AgingPeriod120_WithoutPayment Column

---*********************************************************************************************************************************---

	-- Aging = 120
	-- Start CreditAfter120 Column
	   Case WHEN ((CASE WHEN Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END as CreditAfter120 ,
	-- End CreditAfter120 Column

---*********************************************************************************************************************************---

	-- Start AgingPeriod120 Column
	CONVERT(DECIMAL(18,3) ,Case When Sum(GL_VoucherDetails.Debit) - Sum(GL_VoucherDetails.Credit) > 0 
	Then
	    Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		THEN 
		0
		ELSE 
		(ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)
		- (CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		) END  
		ELSE 0 END) as AgingPeriod120  , 
	-- End AgingPeriod120 Column

---*********************************************************************************************************************************---

	-- Aging = 90
	-- Start AgingPeriod90_WithoutPayment Column
	(Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ) as AgingPeriod90WithoutPayment ,
	-- End AgingPeriod90_WithoutPayment Column

---*********************************************************************************************************************************---
	
	-- Aging = 90
	-- Start CreditAfter90 Column
	Case WHEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0))
	ELSE 0
	END as CreditAfter90 ,
	   
---*********************************************************************************************************************************---
	
	-- Aging = 90
	-- Start AgingPeriod90 Column
	CONVERT(DECIMAL(18,3) ,	Case When Sum(GL_VoucherDetails.Debit) - Sum(GL_VoucherDetails.Credit) > 0 
	Then
	Case WHEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	-----///////////////////////////////////////////////////////////////////////////////////////-----
	THEN 0
	ELSE (ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ) ,0)
		-(Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END))
	END 
	ELSE 0 END) as AgingPeriod90,
	   
---*********************************************************************************************************************************---
	-- Aging = 60
	-- Start AgingPeriod60_WithoutPayment Column
	(Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ) as AgingPeriod60WithoutPayment ,
	-- End AgingPeriod60_WithoutPayment Column

---*********************************************************************************************************************************---
    --CreditAfter60
	CASE WHEN ((Case WHEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) ) > 0
	OR ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	-----////////////////////////////////////////////---------------------------------------------------------------------
	THEN ((Case WHEN ((Case WHEN ((CASE WHEN    Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) )
	ELSE 0
	END as CreditAfter60 ,

---*********************************************************************************************************************************---
    --AgingPeriod60
	CONVERT(DECIMAL(18,3) ,Case When Sum(GL_VoucherDetails.Debit) - Sum(GL_VoucherDetails.Credit) > 0 
	Then
	CASE WHEN ((Case WHEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) ) > 0
	OR ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	-----////////////////////////////////////////////---------------------------------------------------------------------
	THEN 0
	ELSE (ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) 
		- (Case WHEN ((Case WHEN ((CASE WHEN Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0))
	ELSE 0
	END) )
	END 
	ELSE 0 END) as AgingPeriod60 ,

---*********************************************************************************************************************************---

	-- Aging = 30
	-- Start AgingPeriod30_WithoutPayment Column
	(Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < @ToDate and V.VouhcerDate >=  @Period30Date ) as AgingPeriod30WithoutPayment ,
	-- End AgingPeriod30_WithoutPayment Column

---*********************************************************************************************************************************---

     -- CreditAfter30
	 CASE WHEN ((CASE WHEN ((Case WHEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) ) > 0
	OR ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	-----////////////////////////////////////////////---------------------------------------------------------------------
	THEN ((Case WHEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) )
	ELSE 0
	END) 
	 - ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < @ToDate and V.VouhcerDate >=  @Period30Date ), 0)) > 0
	 OR ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < @ToDate and V.VouhcerDate >=  @Period30Date ), 0) = 0
	 OR Sum(GL_VoucherDetails.Credit) = 0
	 -----/*/*/*/*/*/*/*/*/*/*/*/*/**/*//**/*/*/*/*//**/**/*/**/*/*------
	 THEN ((CASE WHEN ((Case WHEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) ) > 0
	OR ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	-----////////////////////////////////////////////---------------------------------------------------------------------
	THEN ((Case WHEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) )
	ELSE 0
	END) 
	 - ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < @ToDate and V.VouhcerDate >=  @Period30Date ), 0))
	 ELSE 0
	 END as CreditAfter30 ,

---*********************************************************************************************************************************---

     -- AgingPeriod30
	CONVERT(DECIMAL(18,3) ,Case When Sum(GL_VoucherDetails.Debit) - Sum(GL_VoucherDetails.Credit) > 0 
	Then
	 CASE WHEN ((CASE WHEN ((Case WHEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) ) > 0
	OR ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	-----////////////////////////////////////////////---------------------------------------------------------------------
	THEN ((Case WHEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) )
	ELSE 0
	END) 
	 - ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < @ToDate and V.VouhcerDate >=  @Period30Date ), 0)) > 0
	 OR ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < @ToDate and V.VouhcerDate >=  @Period30Date ), 0) = 0
	 OR Sum(GL_VoucherDetails.Credit) = 0
	 -----/*/*/*/*/*/*/*/*/*/*/*/*/**/*//**/*/*/*/*//**/**/*/**/*/*------
	 THEN 0
	 ELSE (ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < @ToDate and V.VouhcerDate >=  @Period30Date ), 0))
		- (CASE WHEN ((Case WHEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) ) > 0
	OR ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	-----////////////////////////////////////////////---------------------------------------------------------------------
	THEN ((Case WHEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) )
	ELSE 0
	END) 
	 END 
	 ELSE 0 END) as AgingPeriod30 

---*********************************************************************************************************************************---

From GL_Vouchers
JOIN GL_VoucherDetails ON GL_Vouchers.ID = GL_VoucherDetails.VoucherID
JOIN GL_Accounts ON GL_VoucherDetails.AccountNoID = GL_Accounts.AccountID
Where 
GL_Vouchers.SubsidaryID = @SubsidiaryID
AND GL_Accounts.IsVendor = 0 AND GL_Accounts.LevelNo = 0 -- Customers Only
AND (GL_Accounts.AccountID = @AccountId OR  @AccountId IS NULL)
AND Cast(GL_Vouchers.VouhcerDate as date) <= Cast(@ToDate as date)
AND (GL_VoucherDetails.SetupAccountType IS NULL OR GL_VoucherDetails.SetupAccountType = 1)
AND ((@TransactionPostedId = 1) OR( GL_Vouchers.Posted = 1 AND @TransactionPostedId = 2))

Group By AccountID

) ResultData

WHERE ((@TransactionTypeId = 2) OR( (CustomerBalanceValue > 0) AND @TransactionTypeId = 1))
 
GO
/****** Object:  StoredProcedure [dbo].[Report_Aging_Payable_Data]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[Report_Aging_Payable_Data]

@SubsidiaryID int ,
@ToDate date  ,
@TransactionTypeId int =  NULL,
@TransactionPostedId int = NULL,
@AccountId int = NULL,
@PeriodNumber int = 30

AS

Declare @Period30Date date = DATEADD(DAY, -(1*(@PeriodNumber - 1)), CONVERT(datetime, @ToDate))
Declare @Period60Date date = DATEADD(DAY, - (2*(@PeriodNumber - 1)), CONVERT(datetime, @ToDate))
Declare @Period90Date date = DATEADD(DAY, -(3*(@PeriodNumber)), CONVERT(datetime, @ToDate))
Declare @Period120Date date = DATEADD(DAY, -(4*(@PeriodNumber )), CONVERT(datetime, @ToDate))
Declare @PeriodAbove120Date date = DATEADD(DAY, -1, @Period120Date)

--Select @Period30Date as Period30Date , @Period60Date as Period60Date, @Period90Date as Period90Date ,@Period120Date as Period120Date ,@PeriodAbove120Date  as Periodabove120Date
Select * from (
Select Max(GL_Accounts.Code) as Code,Max(GL_Accounts.Name) as CustomerName,Max(GL_Accounts.Name_AR) as CustomerNameAr ,Sum(Credit) as TotalCredit , Sum(Debit) as TotalDebit ,
--CASE WHEN  Sum(Credit) - Sum(Debit) > 0  
--     THEN CONVERT(NVARCHAR,Format(CONVERT(DECIMAL(18,3) ,(Sum(Credit) - Sum(Debit))),'#,###,##0.##0'))
--	 ELSE '(' + CONVERT(NVARCHAR,Format(CONVERT(DECIMAL(18,3) ,(Sum(Debit) - Sum(Credit))),'#,###,##0.##0')) + ')' END   As CustomerBalance  ,
--     Sum(Credit) - Sum(Debit) As CustomerBalanceValue  ,
CASE WHEN  Sum(Debit) - Sum(Credit) > 0  
     THEN CONVERT(NVARCHAR,Format(CONVERT(DECIMAL(18,3) ,(Sum(Debit) - Sum(Credit))),'#,###,##0.##0'))
	 ELSE '(' + CONVERT(NVARCHAR,Format(CONVERT(DECIMAL(18,3) ,(Sum(Credit) - Sum(Debit))),'#,###,##0.##0')) + ')' END   As CustomerBalance  ,
     Sum(Debit) - Sum(Credit) As CustomerBalanceValue  ,
    -- Aging Above 120
    -- Start AgingPeriodAbove120_WithoutPayment Column
	(Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ) as AgingPeriodAbove120WithoutPayment ,
    -- End AgingPeriodAbove120_WithoutPayment Column

---*********************************************************************************************************************************---

    -- Start AgingPeriodAbove120_WithPayment Column
	Sum(GL_VoucherDetails.Debit) - (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ) as AgingPeriodAbove120WithPayment ,
    -- End AgingPeriodAbove120_WithPayment Column

---*********************************************************************************************************************************---

   CASE WHEN Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END as CreditAfterAbove120,

---*********************************************************************************************************************************---

    -- Start AgingPeriodAbove120 Column
	convert(nvarchar(255),FORMAT(CONVERT(DECIMAL(18,3) ,Case When Sum(GL_VoucherDetails.Credit) - Sum(GL_VoucherDetails.Debit) > 0 
	Then
	    Case 
		WHEN ISNULL((Select  Sum(VD.Credit)    --Start Condition_1
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0) = 0  --End Condition_1
		THEN 0
		WHEN  -- Start Condition_2
		Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)  < 0  -- End Condition_2
		THEN 
		ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)	-Sum(GL_VoucherDetails.Debit)
		Else 0 End
	Else 0 End),'#,###,##0.##0')) as AgingPeriodAbove120   ,
	-- End AgingPeriodAbove120 Column

---*********************************************************************************************************************************---

	-- Aging = 120
	-- Start AgingPeriod120_WithoutPayment Column
	(Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ) as AgingPeriod120WithoutPayment ,
	-- End AgingPeriod120_WithoutPayment Column

---*********************************************************************************************************************************---

	-- Aging = 120
	-- Start CreditAfter120 Column
	   Case WHEN ((CASE WHEN Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		--OR Sum(GL_VoucherDetails.Debit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END as CreditAfter120 ,
	-- End CreditAfter120 Column

---*********************************************************************************************************************************---

	-- Start AgingPeriod120 Column
	FORMAT(CONVERT(DECIMAL(18,3) ,Case When Sum(GL_VoucherDetails.Credit) - Sum(GL_VoucherDetails.Debit) > 0 
	Then
	    Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		THEN 
		0
		ELSE 
		(ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)
		- (CASE WHEN   Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		) END  
		ELSE 0 END),'#,###,##0.##0') as AgingPeriod120  , 
	-- End AgingPeriod120 Column

---*********************************************************************************************************************************---

	-- Aging = 90
	-- Start AgingPeriod90_WithoutPayment Column
	(Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ) as AgingPeriod90WithoutPayment ,
	-- End AgingPeriod90_WithoutPayment Column

---*********************************************************************************************************************************---
	
	-- Aging = 90
	-- Start CreditAfter90 Column
	Case WHEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		--OR Sum(GL_VoucherDetails.Debit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0) = 0
	--OR Sum(GL_VoucherDetails.Debit) = 0
	THEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		--OR Sum(GL_VoucherDetails.Debit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0))
	ELSE 0
	END as CreditAfter90 ,
	   
---*********************************************************************************************************************************---
	
	-- Aging = 90
	-- Start AgingPeriod90 Column
	FORMAT(CONVERT(DECIMAL(18,3) ,	Case When Sum(GL_VoucherDetails.Credit) - Sum(GL_VoucherDetails.Debit) > 0 
	Then
	Case WHEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		--OR Sum(GL_VoucherDetails.Debit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0) = 0
	------OR Sum(GL_VoucherDetails.Debit) = 0
	-----///////////////////////////////////////////////////////////////////////////////////////-----
	THEN 0
	ELSE (ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ) ,0)
		-(Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Debit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END))
	END 
	ELSE 0 END),'#,###,##0.##0') as AgingPeriod90,
	   
---*********************************************************************************************************************************---
	-- Aging = 60
	-- Start AgingPeriod60_WithoutPayment Column
	(Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period30Date) and Cast(V.VouhcerDate as date) >=  @Period60Date ) as AgingPeriod60WithoutPayment ,
	-- End AgingPeriod60_WithoutPayment Column

---*********************************************************************************************************************************---
    --CreditAfter60
	CASE WHEN ((Case WHEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Debit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0) = 0
	----OR Sum(GL_VoucherDetails.Debit) = 0
	THEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Debit) = 0
		THEN 
		((CASE WHEN  Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period30Date) and Cast(V.VouhcerDate as date) >=  @Period60Date ),0) ) > 0
	OR ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period30Date) and Cast(V.VouhcerDate as date) >=  @Period60Date ),0) = 0
	------OR Sum(GL_VoucherDetails.Debit) = 0
	-----////////////////////////////////////////////---------------------------------------------------------------------
	THEN ((Case WHEN ((Case WHEN ((CASE WHEN    Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Debit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0) = 0
	----OR Sum(GL_VoucherDetails.Debit) = 0
	THEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Debit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period30Date) and Cast(V.VouhcerDate as date) >=  @Period60Date ),0) )
	ELSE 0
	END as CreditAfter60 ,

---*********************************************************************************************************************************---
    --AgingPeriod60
	Format(CONVERT(DECIMAL(18,3) ,Case When Sum(GL_VoucherDetails.Credit) - Sum(GL_VoucherDetails.Debit) > 0 
	Then
	CASE WHEN ((Case WHEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Debit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0) = 0
	----OR Sum(GL_VoucherDetails.Debit) = 0
	THEN ((Case WHEN ((CASE WHEN Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Debit) = 0
		THEN 
		((CASE WHEN  Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period30Date) and Cast(V.VouhcerDate as date) >=  @Period60Date ),0) ) > 0
	OR ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period30Date) and Cast(V.VouhcerDate as date) >=  @Period60Date ),0) = 0
	------OR Sum(GL_VoucherDetails.Debit) = 0
	-----////////////////////////////////////////////---------------------------------------------------------------------
	THEN 0
	ELSE (ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period30Date) and Cast(V.VouhcerDate as date) >=  @Period60Date ),0) 
		- (Case WHEN ((Case WHEN ((CASE WHEN Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Debit) = 0
		THEN 
		((CASE WHEN  Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0) = 0
	----OR Sum(GL_VoucherDetails.Debit) = 0
	THEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Debit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0))
	ELSE 0
	END) )
	END 
	ELSE 0 END),'#,###,##0.##0') as AgingPeriod60 ,

---*********************************************************************************************************************************---

	-- Aging = 30
	-- Start AgingPeriod30_WithoutPayment Column
	(Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @ToDate and Cast(V.VouhcerDate as date) >=  @Period30Date ) as AgingPeriod30WithoutPayment ,
	-- End AgingPeriod30_WithoutPayment Column

---*********************************************************************************************************************************---

     -- CreditAfter30
	 CASE WHEN ((	CASE WHEN ((Case WHEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Debit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0) = 0
	----OR Sum(GL_VoucherDetails.Debit) = 0
	THEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Debit) = 0
		THEN 
		((CASE WHEN  Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period30Date) and Cast(V.VouhcerDate as date) >=  @Period60Date ),0) ) > 0
	OR ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period30Date) and Cast(V.VouhcerDate as date) >=  @Period60Date ),0) = 0
	------OR Sum(GL_VoucherDetails.Debit) = 0
	-----////////////////////////////////////////////---------------------------------------------------------------------
	THEN ((Case WHEN ((Case WHEN ((CASE WHEN    Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Debit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0) = 0
	----OR Sum(GL_VoucherDetails.Debit) = 0
	THEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Debit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period30Date) and Cast(V.VouhcerDate as date) >=  @Period60Date ),0) )
	ELSE 0
	END) 
	 - ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND Cast(V.VouhcerDate as date) <= @ToDate and Cast(V.VouhcerDate as date) >=  @Period30Date ), 0)) > 0
	 OR ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND Cast(V.VouhcerDate as date) <= @ToDate and Cast(V.VouhcerDate as date) >=  @Period30Date ), 0) = 0
	 ----OR Sum(GL_VoucherDetails.Debit) = 0
	 -----/*/*/*/*/*/*/*/*/*/*/*/*/**/*//**/*/*/*/*//**/**/*/**/*/*------ End of Condition 30
	 --Then of Condition 30
	 THEN ((	CASE WHEN ((Case WHEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Debit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0) = 0
	----OR Sum(GL_VoucherDetails.Debit) = 0
	THEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Debit) = 0
		THEN 
		((CASE WHEN  Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period30Date) and Cast(V.VouhcerDate as date) >=  @Period60Date ),0) ) > 0
	OR ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period30Date) and Cast(V.VouhcerDate as date) >=  @Period60Date ),0) = 0
	------OR Sum(GL_VoucherDetails.Debit) = 0
	-----////////////////////////////////////////////---------------------------------------------------------------------
	THEN ((Case WHEN ((Case WHEN ((CASE WHEN    Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Debit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0) = 0
	----OR Sum(GL_VoucherDetails.Debit) = 0
	THEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Debit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period30Date) and Cast(V.VouhcerDate as date) >=  @Period60Date ),0) )
	ELSE 0
	END) 
	 - ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @ToDate and Cast(V.VouhcerDate as date) >=  @Period30Date ), 0))
	 ELSE 0
	 END as CreditAfter30 ,

---*********************************************************************************************************************************---

     -- AgingPeriod30
	FORMAT(CONVERT(DECIMAL(18,3) ,Case When Sum(GL_VoucherDetails.Credit) - Sum(GL_VoucherDetails.Debit) > 0 
	Then 
	-- StartCalculateAgingPeriod30
	
	CASE WHEN (
	-- StartCreditAfter60
	(CASE WHEN ((Case WHEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Debit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0) = 0
	----OR Sum(GL_VoucherDetails.Debit) = 0
	THEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Debit) = 0
		THEN 
		((CASE WHEN  Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period30Date) and Cast(V.VouhcerDate as date) >=  @Period60Date ),0) ) > 0
	OR ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period30Date) and Cast(V.VouhcerDate as date) >=  @Period60Date ),0) = 0
	------OR Sum(GL_VoucherDetails.Debit) = 0
	-----////////////////////////////////////////////---------------------------------------------------------------------
	THEN ((Case WHEN ((Case WHEN ((CASE WHEN    Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Debit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0) = 0
	----OR Sum(GL_VoucherDetails.Debit) = 0
	THEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Debit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period30Date) and Cast(V.VouhcerDate as date) >=  @Period60Date ),0) )
	ELSE 0
	END)
	-- EndCreditAfter60
	-
	-- Start AgingPeriod30WithoutPayment
	(ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @ToDate and Cast(V.VouhcerDate as date) >=  @Period30Date ),0))
	-- End AgingPeriod30WithoutPayment
	) < 0
	OR
	-- Start AgingPeriod30WithoutPaymentEqualZero
		(ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @ToDate and Cast(V.VouhcerDate as date) >=  @Period30Date ),0)) = 0
	-- End AgingPeriod30WithoutPaymentEqualZero

   -- EndCalculateAgingPeriod30
   THEN     
   (
   	-- Start AgingPeriod30WithoutPayment
		(ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @ToDate and Cast(V.VouhcerDate as date) >=  @Period30Date ),0))
	-- End AgingPeriod30WithoutPayment
	-
   -- StartCreditAfter60
	(CASE WHEN ((Case WHEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Debit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0) = 0
	----OR Sum(GL_VoucherDetails.Debit) = 0
	THEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Debit) = 0
		THEN 
		((CASE WHEN  Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period30Date) and Cast(V.VouhcerDate as date) >=  @Period60Date ),0) ) > 0
	OR ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period30Date) and Cast(V.VouhcerDate as date) >=  @Period60Date ),0) = 0
	------OR Sum(GL_VoucherDetails.Debit) = 0
	-----////////////////////////////////////////////---------------------------------------------------------------------
	THEN ((Case WHEN ((Case WHEN ((CASE WHEN    Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Debit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0) = 0
	----OR Sum(GL_VoucherDetails.Debit) = 0
	THEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Debit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Debit) = 0 OR 
		(Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Debit) - ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Credit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period30Date) and Cast(V.VouhcerDate as date) >=  @Period60Date ),0) )
	ELSE 0
	END)
	-- EndCreditAfter60
	)
   ELSE 0
   END

   ELSE 0 END),'#,###,##0.##0') as AgingPeriod30 

---*********************************************************************************************************************************---

From GL_Vouchers
JOIN GL_VoucherDetails ON GL_Vouchers.ID = GL_VoucherDetails.VoucherID
JOIN GL_Accounts ON GL_VoucherDetails.AccountNoID = GL_Accounts.AccountID
Where 
GL_Vouchers.SubsidaryID = @SubsidiaryID
AND GL_Accounts.IsVendor = 1 AND GL_Accounts.LevelNo = 0 -- Customers Only
AND (GL_Accounts.AccountID = @AccountId OR  @AccountId IS NULL)
AND Cast(GL_Vouchers.VouhcerDate as date) <= Cast(@ToDate as date)
AND (GL_VoucherDetails.SetupAccountType IS NULL OR GL_VoucherDetails.SetupAccountType = 1)
AND ((@TransactionPostedId = 1) OR( GL_Vouchers.Posted = 1 AND @TransactionPostedId = 2))
Group By AccountID

) ResultData

WHERE ((@TransactionTypeId = 2 and CustomerBalanceValue != 0 ) OR( (CustomerBalanceValue < 0) AND @TransactionTypeId = 3))
Order By Code
GO
/****** Object:  StoredProcedure [dbo].[Report_Aging_ReceivableData]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[Report_Aging_ReceivableData]

@SubsidiaryID int ,
@ToDate date  ,
@TransactionTypeId int =  NULL,
@TransactionPostedId int = NULL,
@AccountId int = NULL,
@PeriodNumber int = 30

AS

Declare @Period30Date date = DATEADD(DAY, -(1*(@PeriodNumber - 1)), CONVERT(datetime, @ToDate))
Declare @Period60Date date = DATEADD(DAY, - (2*(@PeriodNumber - 1)), CONVERT(datetime, @ToDate))
Declare @Period90Date date = DATEADD(DAY, -(3*(@PeriodNumber)), CONVERT(datetime, @ToDate))
Declare @Period120Date date = DATEADD(DAY, -(4*(@PeriodNumber )), CONVERT(datetime, @ToDate))
Declare @PeriodAbove120Date date = DATEADD(DAY, -1, @Period120Date)

--Select @Period30Date as Period30Date , @Period60Date as Period60Date, @Period90Date as Period90Date ,@Period120Date as Period120Date ,@PeriodAbove120Date  as Periodabove120Date
Select * from (
Select Max(GL_Accounts.Code) as Code,Max(GL_Accounts.Name) as CustomerName,Max(GL_Accounts.Name_AR) as CustomerNameAr ,Sum(Debit) as TotalDebit , Sum(Credit) as TotalCredit ,
CASE WHEN  Sum(Debit) - Sum(Credit) > 0  
     THEN CONVERT(NVARCHAR,Format(CONVERT(DECIMAL(18,3) ,(Sum(Debit) - Sum(Credit))),'#,###,##0.##0'))
	 ELSE '(' + CONVERT(NVARCHAR,Format(CONVERT(DECIMAL(18,3) ,(Sum(Credit) - Sum(Debit))),'#,###,##0.##0')) + ')' END   As CustomerBalance  ,
     Sum(Debit) - Sum(Credit) As CustomerBalanceValue  ,
    -- Aging Above 120
    -- Start AgingPeriodAbove120_WithoutPayment Column
	(Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ) as AgingPeriodAbove120WithoutPayment ,
    -- End AgingPeriodAbove120_WithoutPayment Column

---*********************************************************************************************************************************---

    -- Start AgingPeriodAbove120_WithPayment Column
	Sum(GL_VoucherDetails.Credit) - (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ) as AgingPeriodAbove120WithPayment ,
    -- End AgingPeriodAbove120_WithPayment Column

---*********************************************************************************************************************************---

   CASE WHEN Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END as CreditAfterAbove120,

---*********************************************************************************************************************************---

    -- Start AgingPeriodAbove120 Column
	convert(nvarchar(255),FORMAT(CONVERT(DECIMAL(18,3) ,Case When Sum(GL_VoucherDetails.Debit) - Sum(GL_VoucherDetails.Credit) > 0 
	Then
	    Case 
		WHEN ISNULL((Select  Sum(VD.Debit)    --Start Condition_1
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0) = 0  --End Condition_1
		THEN 0
		WHEN  -- Start Condition_2
		Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)  < 0  -- End Condition_2
		THEN 
		ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)	-Sum(GL_VoucherDetails.Credit)
		Else 0 End
	Else 0 End),'#,###,##0.##0')) as AgingPeriodAbove120   ,
	-- End AgingPeriodAbove120 Column

---*********************************************************************************************************************************---

	-- Aging = 120
	-- Start AgingPeriod120_WithoutPayment Column
	(Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ) as AgingPeriod120WithoutPayment ,
	-- End AgingPeriod120_WithoutPayment Column

---*********************************************************************************************************************************---

	-- Aging = 120
	-- Start CreditAfter120 Column
	   Case WHEN ((CASE WHEN Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		--OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END as CreditAfter120 ,
	-- End CreditAfter120 Column

---*********************************************************************************************************************************---

	-- Start AgingPeriod120 Column
	FORMAT(CONVERT(DECIMAL(18,3) ,Case When Sum(GL_VoucherDetails.Debit) - Sum(GL_VoucherDetails.Credit) > 0 
	Then
	    Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		THEN 
		0
		ELSE 
		(ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)
		- (CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		) END  
		ELSE 0 END),'#,###,##0.##0') as AgingPeriod120  , 
	-- End AgingPeriod120 Column

---*********************************************************************************************************************************---

	-- Aging = 90
	-- Start AgingPeriod90_WithoutPayment Column
	(Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ) as AgingPeriod90WithoutPayment ,
	-- End AgingPeriod90_WithoutPayment Column

---*********************************************************************************************************************************---
	
	-- Aging = 90
	-- Start CreditAfter90 Column
	Case WHEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		--OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0) = 0
	--OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		--OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0))
	ELSE 0
	END as CreditAfter90 ,
	   
---*********************************************************************************************************************************---
	
	-- Aging = 90
	-- Start AgingPeriod90 Column
	FORMAT(CONVERT(DECIMAL(18,3) ,	Case When Sum(GL_VoucherDetails.Debit) - Sum(GL_VoucherDetails.Credit) > 0 
	Then
	Case WHEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		--OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0) = 0
	------OR Sum(GL_VoucherDetails.Credit) = 0
	-----///////////////////////////////////////////////////////////////////////////////////////-----
	THEN 0
	ELSE (ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ) ,0)
		-(Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END))
	END 
	ELSE 0 END),'#,###,##0.##0') as AgingPeriod90,
	   
---*********************************************************************************************************************************---
	-- Aging = 60
	-- Start AgingPeriod60_WithoutPayment Column
	(Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period30Date) and Cast(V.VouhcerDate as date) >=  @Period60Date ) as AgingPeriod60WithoutPayment ,
	-- End AgingPeriod60_WithoutPayment Column

---*********************************************************************************************************************************---
    --CreditAfter60
	CASE WHEN ((Case WHEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0) = 0
	----OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period30Date) and Cast(V.VouhcerDate as date) >=  @Period60Date ),0) ) > 0
	OR ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period30Date) and Cast(V.VouhcerDate as date) >=  @Period60Date ),0) = 0
	------OR Sum(GL_VoucherDetails.Credit) = 0
	-----////////////////////////////////////////////---------------------------------------------------------------------
	THEN ((Case WHEN ((Case WHEN ((CASE WHEN    Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0) = 0
	----OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period30Date) and Cast(V.VouhcerDate as date) >=  @Period60Date ),0) )
	ELSE 0
	END as CreditAfter60 ,

---*********************************************************************************************************************************---
    --AgingPeriod60
	Format(CONVERT(DECIMAL(18,3) ,Case When Sum(GL_VoucherDetails.Debit) - Sum(GL_VoucherDetails.Credit) > 0 
	Then
	CASE WHEN ((Case WHEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0) = 0
	----OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period30Date) and Cast(V.VouhcerDate as date) >=  @Period60Date ),0) ) > 0
	OR ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period30Date) and Cast(V.VouhcerDate as date) >=  @Period60Date ),0) = 0
	------OR Sum(GL_VoucherDetails.Credit) = 0
	-----////////////////////////////////////////////---------------------------------------------------------------------
	THEN 0
	ELSE (ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period30Date) and Cast(V.VouhcerDate as date) >=  @Period60Date ),0) 
		- (Case WHEN ((Case WHEN ((CASE WHEN Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0) = 0
	----OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0))
	ELSE 0
	END) )
	END 
	ELSE 0 END),'#,###,##0.##0') as AgingPeriod60 ,

---*********************************************************************************************************************************---

	-- Aging = 30
	-- Start AgingPeriod30_WithoutPayment Column
	(Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @ToDate and Cast(V.VouhcerDate as date) >=  @Period30Date ) as AgingPeriod30WithoutPayment ,
	-- End AgingPeriod30_WithoutPayment Column

---*********************************************************************************************************************************---

     -- CreditAfter30
	 CASE WHEN ((	CASE WHEN ((Case WHEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0) = 0
	----OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period30Date) and Cast(V.VouhcerDate as date) >=  @Period60Date ),0) ) > 0
	OR ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period30Date) and Cast(V.VouhcerDate as date) >=  @Period60Date ),0) = 0
	------OR Sum(GL_VoucherDetails.Credit) = 0
	-----////////////////////////////////////////////---------------------------------------------------------------------
	THEN ((Case WHEN ((Case WHEN ((CASE WHEN    Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0) = 0
	----OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period30Date) and Cast(V.VouhcerDate as date) >=  @Period60Date ),0) )
	ELSE 0
	END) 
	 - ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND Cast(V.VouhcerDate as date) <= @ToDate and Cast(V.VouhcerDate as date) >=  @Period30Date ), 0)) > 0
	 OR ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND Cast(V.VouhcerDate as date) <= @ToDate and Cast(V.VouhcerDate as date) >=  @Period30Date ), 0) = 0
	 ----OR Sum(GL_VoucherDetails.Credit) = 0
	 -----/*/*/*/*/*/*/*/*/*/*/*/*/**/*//**/*/*/*/*//**/**/*/**/*/*------ End of Condition 30
	 --Then of Condition 30
	 THEN ((	CASE WHEN ((Case WHEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0) = 0
	----OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period30Date) and Cast(V.VouhcerDate as date) >=  @Period60Date ),0) ) > 0
	OR ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period30Date) and Cast(V.VouhcerDate as date) >=  @Period60Date ),0) = 0
	------OR Sum(GL_VoucherDetails.Credit) = 0
	-----////////////////////////////////////////////---------------------------------------------------------------------
	THEN ((Case WHEN ((Case WHEN ((CASE WHEN    Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0) = 0
	----OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period30Date) and Cast(V.VouhcerDate as date) >=  @Period60Date ),0) )
	ELSE 0
	END) 
	 - ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @ToDate and Cast(V.VouhcerDate as date) >=  @Period30Date ), 0))
	 ELSE 0
	 END as CreditAfter30 ,

---*********************************************************************************************************************************---

     -- AgingPeriod30
	FORMAT(CONVERT(DECIMAL(18,3) ,Case When Sum(GL_VoucherDetails.Debit) - Sum(GL_VoucherDetails.Credit) > 0 
	Then 
	-- StartCalculateAgingPeriod30
	
	CASE WHEN (
	-- StartCreditAfter60
	(CASE WHEN ((Case WHEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0) = 0
	----OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period30Date) and Cast(V.VouhcerDate as date) >=  @Period60Date ),0) ) > 0
	OR ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period30Date) and Cast(V.VouhcerDate as date) >=  @Period60Date ),0) = 0
	------OR Sum(GL_VoucherDetails.Credit) = 0
	-----////////////////////////////////////////////---------------------------------------------------------------------
	THEN ((Case WHEN ((Case WHEN ((CASE WHEN    Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0) = 0
	----OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period30Date) and Cast(V.VouhcerDate as date) >=  @Period60Date ),0) )
	ELSE 0
	END)
	-- EndCreditAfter60
	-
	-- Start AgingPeriod30WithoutPayment
	(ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @ToDate and Cast(V.VouhcerDate as date) >=  @Period30Date ),0))
	-- End AgingPeriod30WithoutPayment
	) < 0
	OR
	-- Start AgingPeriod30WithoutPaymentEqualZero
		(ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @ToDate and Cast(V.VouhcerDate as date) >=  @Period30Date ),0)) = 0
	-- End AgingPeriod30WithoutPaymentEqualZero

   -- EndCalculateAgingPeriod30
   THEN     
   (
   	-- Start AgingPeriod30WithoutPayment
		(ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @ToDate and Cast(V.VouhcerDate as date) >=  @Period30Date ),0))
	-- End AgingPeriod30WithoutPayment
	-
   -- StartCreditAfter60
	(CASE WHEN ((Case WHEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0) = 0
	----OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period30Date) and Cast(V.VouhcerDate as date) >=  @Period60Date ),0) ) > 0
	OR ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period30Date) and Cast(V.VouhcerDate as date) >=  @Period60Date ),0) = 0
	------OR Sum(GL_VoucherDetails.Credit) = 0
	-----////////////////////////////////////////////---------------------------------------------------------------------
	THEN ((Case WHEN ((Case WHEN ((CASE WHEN    Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0) = 0
	----OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0) = 0
		----OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period90Date) and Cast(V.VouhcerDate as date) >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2))
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period60Date) and Cast(V.VouhcerDate as date) >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID
		AND ((@TransactionPostedId = 1) OR( V.Posted = 1 AND @TransactionPostedId = 2)) 
		AND Cast(V.VouhcerDate as date) < DATEADD(DAY, -0,@Period30Date) and Cast(V.VouhcerDate as date) >=  @Period60Date ),0) )
	ELSE 0
	END)
	-- EndCreditAfter60
	)
   ELSE 0
   END

   ELSE 0 END),'#,###,##0.##0') as AgingPeriod30 

---*********************************************************************************************************************************---

From GL_Vouchers
JOIN GL_VoucherDetails ON GL_Vouchers.ID = GL_VoucherDetails.VoucherID
JOIN GL_Accounts ON GL_VoucherDetails.AccountNoID = GL_Accounts.AccountID
Where 
GL_Vouchers.SubsidaryID = @SubsidiaryID
AND GL_Accounts.IsVendor = 0 AND GL_Accounts.LevelNo = 0 -- Customers Only
AND (GL_Accounts.AccountID = @AccountId OR  @AccountId IS NULL)
AND Cast(GL_Vouchers.VouhcerDate as date) <= Cast(@ToDate as date)
AND (GL_VoucherDetails.SetupAccountType IS NULL OR GL_VoucherDetails.SetupAccountType = 1)
AND ((@TransactionPostedId = 1) OR( GL_Vouchers.Posted = 1 AND @TransactionPostedId = 2))
Group By AccountID

) ResultData

WHERE ((@TransactionTypeId = 2 and CustomerBalanceValue != 0 ) OR( (CustomerBalanceValue > 0) AND @TransactionTypeId = 1))
Order By Code
GO
/****** Object:  StoredProcedure [dbo].[Report_Asset_Assets_List]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Report_Asset_Assets_List] @AssetType   INT = NULL
                                   , @SubsidaryID INT = NULL
                                   , @CostCenter  INT = NULL
AS
    BEGIN

        SELECT AssetsId
             , SUM(AssetCosts) AssetCosts
        INTO #GL_AssetCosts_Purchase
        FROM GL_AssetCosts
        WHERE recordType = 3
        GROUP BY AssetsId


        SELECT AssetsId
             , recordType
             , SUM(AssetCosts) AssetCosts
        INTO #GL_AssetCosts_Sales_CompleteDisposal
        FROM GL_AssetCosts
        WHERE recordType IN(2 , 6)
        GROUP BY AssetsId
               , recordType

        SELECT A.Code
             , A.AssetName
             , A.AssetName_AR
             ,
        (
         SELECT TOP 1 MoveDate
         FROM GL_AssetMoves
         WHERE GL_AssetMoves.AssetsID = A.ID
               AND GL_AssetMoves.IsActive = 1
         ORDER BY MoveDate DESC
        )                                                                                  [c.c. Date ]
             , (100 / CASE
                          WHEN A.LifeTime = 0
                          THEN NULL
                          ELSE CAST(A.LifeTime AS FLOAT)
                      END) * 12                                                            [Depr.%]
             , A.LifeTime
             , ISNULL(A.OriginalCost , 0) + ISNULL(#GL_AssetCosts_Purchase.AssetCosts , 0) CostPrice
             , ISNULL(#GL_AssetCosts_Sales_CompleteDisposal.AssetCosts , 0)                [Cost Changes]
             , ISNULL(A.CumulativDepriciation + A.YTDDepreciation , 0)                     [Cumulative Depreciation]
             , AT.Name                                                                     TypeName
             , AT.Name_AR                                                                  TypeName_Ar
        FROM GL_Assets A
             LEFT JOIN GL_AssetsType AT
             ON a.AssetType = AT.ID
             LEFT JOIN #GL_AssetCosts_Purchase
             ON #GL_AssetCosts_Purchase.AssetsId = A.ID
             LEFT JOIN #GL_AssetCosts_Sales_CompleteDisposal
             ON #GL_AssetCosts_Sales_CompleteDisposal.AssetsId = A.ID
        WHERE(@AssetType IS NULL
              OR A.AssetType IN(@AssetType))
             AND (@SubsidaryID IS NULL
                  OR A.Subsidary = @SubsidaryID)
             AND (@CostCenter IS NULL
                  OR A.ID IN
        (
         SELECT AssetsID
         FROM GL_AssetMoves
         WHERE GL_AssetMoves.AssetsID = A.ID
               AND (GL_AssetMoves.CostCenterID = @CostCenter)
        ))
    END
GO
/****** Object:  StoredProcedure [dbo].[Report_Asset_Detailed_report]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


Create Proc [dbo].[Report_Asset_Detailed_report]
     @Type        INT = Null
   , @SubsidaryID INT = 1
As
         Begin
             Select
                    A.Code
                  , A.AssetName
                  , A.AssetName_AR
                  , AT.Name                 TypeName
                  , AT.Name_AR              TypeName_Ar
				  -- Bug No : 2649
                  --, AC.AssetCosts           OriginalCost
                  --, AC.PreviousDepriciation AccumulativeCost
				  , A.OriginalCost           OriginalCost
                  , A.CumulativDepriciation AccumulativeCost
             From
                  GL_Assets A
             --Left Join GL_AssetCosts AC
             --     On AC.AssetsID = A.ID
             Left Join GL_AssetsType At
                  On a.AssetType = AT.ID
             Where
                         (
                                     @Type Is Null
                                     Or A.AssetType In(@Type))
             And (
                             @SubsidaryID Is Null
                             Or A.Subsidary = @SubsidaryID)
         End
GO
/****** Object:  StoredProcedure [dbo].[Report_Asset_Summery_Report]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


Create Proc [dbo].[Report_Asset_Summery_Report]
     @Type        INT = Null
   , @SubsidaryID INT = Null
As
         Begin
             Select
                    AT.Name                      TypeName
                  , AT.Name_Ar                   TypeName_AR
                  --, SUM(AC.AssetCosts)           OriginalCost
                  --, SUM(AC.PreviousDepriciation) AccumulativeCost
                  , SUM(A.OriginalCost)           OriginalCost
                  , SUM(A.CumulativDepriciation) AccumulativeCost
             From
                  GL_Assets A
             --Left Join GL_AssetCosts AC
             --     On AC.AssetsID = A.ID
             Left Join GL_AssetsType At
                  On a.AssetType = AT.ID
             Where
                         (
                                     @Type Is Null
                                     Or A.AssetType In(@Type))
             And (
                             @SubsidaryID Is Null
                             Or a.Subsidary = @SubsidaryID)
             Group By
                      AT.Name
                    , AT.Name_Ar
         End
GO
/****** Object:  StoredProcedure [dbo].[Report_Asset_Summery_Report_Asset]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Report_Asset_Summery_Report_Asset] @SubsidaryID  INT  = NULL
                                            , @PurchaseDate DATE = NULL
AS
    BEGIN

        SELECT AssetsId
             , SUM(AssetCosts) AssetCosts
        INTO #GL_AssetCosts_Purchase
        FROM GL_AssetCosts
        WHERE recordType = 3
        GROUP BY AssetsId

        SELECT AssetsId
             , recordType
             , SUM(AssetCosts) AssetCosts
        INTO #GL_AssetCosts_Sales_CompleteDisposal
        FROM GL_AssetCosts
        WHERE recordType IN(2 , 6)
        GROUP BY AssetsId
               , recordType

        SELECT *
             , CASE WHEN (OriginalCost - CostCharge - Total)  < 0 THEN 0 else (OriginalCost - CostCharge - Total) end NetTotal
        FROM
        (
         SELECT GL_AssetsType.name
              , GL_AssetsType.name_Ar
              , SUM(ISNULL(A.OriginalCost , 0)) + SUM(ISNULL(#GL_AssetCosts_Purchase.AssetCosts , 0)) OriginalCost
              , SUM(ISNULL(A.#GL_AssetCosts_Sales_CompleteDisposal.AssetCosts , 0))                   CostCharge
              , SUM(ISNULL(A.CumulativDepriciation , 0))                                              CumulativDepriciation
              , SUM(ISNULL(A.YTDDepreciation , 0))                                                    YTDDepreciation
              , SUM(ISNULL(A.CumulativDepriciation , 0)) + SUM(ISNULL(A.YTDDepreciation , 0))         Total
         FROM GL_Assets A
              LEFT JOIN GL_AssetsType
              ON GL_AssetsType.Id = A.AssetType
              LEFT JOIN #GL_AssetCosts_Purchase
              ON #GL_AssetCosts_Purchase.AssetsId = A.ID
              LEFT JOIN #GL_AssetCosts_Sales_CompleteDisposal
              ON #GL_AssetCosts_Purchase.AssetsId = A.ID
         WHERE(@SubsidaryID IS NULL
               OR A.Subsidary = @SubsidaryID)
              AND (@PurchaseDate IS NULL
                   OR cast(A.PurchaseDate as date) = @PurchaseDate)
         GROUP BY GL_AssetsType.name
                , GL_AssetsType.name_Ar
        ) Final
    END
GO
/****** Object:  StoredProcedure [dbo].[Report_Asset_Summery_Report_CostCenters]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Report_Asset_Summery_Report_CostCenters] @SubsidaryID  INT  = NULL
                                                  , @PurchaseDate DATE = NULL
AS
    BEGIN

        SELECT AssetsId
             , SUM(AssetCosts) AssetCosts
        INTO #GL_AssetCosts_Purchase
        FROM GL_AssetCosts
        WHERE recordType = 3
        GROUP BY AssetsId

        SELECT AssetsId
             , recordType
             , SUM(AssetCosts) AssetCosts
        INTO #GL_AssetCosts_Sales_CompleteDisposal
        FROM GL_AssetCosts
        WHERE recordType IN(2 , 6)
        GROUP BY AssetsId
               , recordType

        SELECT *
             , CASE
                   WHEN(CostCharge - CostCharge - Total) < 0
                   THEN 0
                   ELSE(CostCharge - CostCharge - Total)
               END NetTotal
        FROM
        (
         SELECT mstr_Costcenter.name
              , mstr_Costcenter.name_Ar
              , SUM(ISNULL(A.OriginalCost , 0)) + SUM(ISNULL(#GL_AssetCosts_Purchase.AssetCosts , 0)) OriginalCost
              , SUM(ISNULL(A.#GL_AssetCosts_Sales_CompleteDisposal.AssetCosts , 0))                   CostCharge
              , SUM(ISNULL(A.CumulativDepriciation , 0))                                              CumulativDepriciation
              , SUM(ISNULL(A.YTDDepreciation , 0))                                                    YTDDepreciation
              , SUM(ISNULL(A.CumulativDepriciation , 0)) + SUM(ISNULL(A.YTDDepreciation , 0))         Total
         FROM GL_Assets A
              LEFT JOIN GL_AssetCosts
              ON GL_AssetCosts.AssetsId = A.ID
              LEFT JOIN mstr_Costcenter
              ON mstr_Costcenter.ID = GL_AssetCosts.CostCenterID
              LEFT JOIN #GL_AssetCosts_Purchase
              ON #GL_AssetCosts_Purchase.AssetsId = A.ID
              LEFT JOIN #GL_AssetCosts_Sales_CompleteDisposal
              ON #GL_AssetCosts_Purchase.AssetsId = A.ID
         WHERE(@SubsidaryID IS NULL
               OR A.Subsidary = @SubsidaryID)
              AND (@PurchaseDate IS NULL
                   OR A.PurchaseDate <= @PurchaseDate)
         GROUP BY mstr_Costcenter.name
                , mstr_Costcenter.name_Ar
        ) Final
    END
GO
/****** Object:  StoredProcedure [dbo].[Report_CashDrawer_Sales_Group_By_Invoices]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Report_CashDrawer_Sales_Group_By_Invoices] @FromDate DATE = '2020-03-23'
, @ToDate DATE =  '2020-03-23'
, @BrachID INT = NULL
, @CustomerID INT = NULL
, @CashCustomerID INT = NULL
, @CustomerCatID INT = NULL
, @FromInvoiceNumber INT = NULL
, @ToInvoiceNumber INT = NULL
, @TransactionType NVARCHAR(MAX) = NULL
, @ItemCategoryID NVARCHAR(MAX) = NULL
, @ItemId INT = NULL
, @Item_vendor INT = NULL
, @SalesManId INT = NULL
, @SubsidaryID INT = NULL
, @FromCustomerActualDeliverDate DATE = NULL
, @ToCustomerActualDeliverDate DATE = NULL
, @FromTime TIME = NULL
, @ToTime TIME = NULL
, @CustomerStatusID INT = NULL
, @Payment_Type INT = NULL
, @User_Role_Sale INT = NULL
,@userId int =13
,@CashDrawer int =NULL
AS
--select distinct Branch_ID  from Inv_Receipt_h where    cast(Entry_Date as date) >='2020-03-23' and cast(Entry_Date as date) < '2020-03-24'
BEGIN
 
   
  IF OBJECT_ID('tbl') IS NOT NULL
begin
        drop table tbl
end
    if @FromTime is null set @FromTime = ' 00:00:00';
    if @ToTime is null set @ToTime = ' 23:59:59';

    IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@TransactionType, ',')
            WHERE Item = -1
        )
        SET @TransactionType = NULL

    IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@ItemCategoryID, ',')
            WHERE Item = -1
        )
        SET @ItemCategoryID = NULL
		
   select * Into #tbl from (
    SELECT H.ID						   ID
         , H.Entry_No                  Bilno
         , H.Entry_Date                [Date]
         , Inv_PaymentType.Name        Payment
         , Inv_PaymentType.Name_AR     Payment_Ar
         , case when @User_Role_Sale IS NULL
		 then
		   ISNULL(H.Value, 0)   
		   else
		    (
               SELECT top 1 sum(Inv_Receipt_D.Total)
               FROM Inv_Receipt_D
               WHERE Inv_Receipt_D.SalesManId = @User_Role_Sale
			   and Inv_Receipt_D.Parent_ID=h.ID
			   group by Inv_Receipt_D.SalesManId
           ) 
		   end       Total
         ,case when @User_Role_Sale IS NULL
		 then
		   ISNULL(H.Discount_Value, 0)   
		   else
		    0
		   end  [Invoice Discount]
         , case when @User_Role_Sale IS NULL
		 then
		  ISNULL(H.NetValue, 0)  
		   else
		    (
               SELECT top 1 sum(Inv_Receipt_D.Total)
               FROM Inv_Receipt_D
               WHERE Inv_Receipt_D.SalesManId = @User_Role_Sale
			   and Inv_Receipt_D.Parent_ID=h.ID
			   group by Inv_Receipt_D.SalesManId
           ) 
		   end      [Net Total]
         ,case when @User_Role_Sale IS NULL
		 then
		    ISNULL(H.DeliveryFees, 0)  
		   else
		    0
		   end
		   
		      DeliveryFees
		 ,H.CustomerDeliverDate as  CustomerActualDeliverDate
         , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN ''
               ELSE GL_Accounts.VendorCode
        END                            CustomerNo
         , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN Inv_CashCustomer.Name
               ELSE GL_Accounts.Name
        END                            CustomerName
         , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN Inv_CashCustomer.Name_Ar
               ELSE GL_Accounts.Name_Ar
        END                            CustomerName_Ar
         , H.Vendor_ID
         , H.CashCustomerID
         , GL_Accounts.AccountID
         , Gl_Accounts.VendorCode
         , Security_Users.Name         [S.Name]
         , Security_Users.Name_Ar      [S.Name_Ar]
         , C.Name                      C_Name
         , C.Name_Ar                   C_Name_Ar
         , C.Code                      C_Code
		 
		 ,avgcost = (SELECT top 1 Sum(D.Final_conv * D.AvgCost * d.Qty)  
               FROM Inv_Receipt_D d
               WHERE ( d.SalesManId = @User_Role_Sale or @User_Role_Sale is null) 
			   and d.Parent_ID=H.ID
			   group by d.SalesManId) 
		 ,    ( H.netvalue -  (SELECT top 1 Sum(D.Final_conv * D.AvgCost * d.Qty)  
							   FROM Inv_Receipt_D d
							   WHERE ( d.SalesManId = @User_Role_Sale or @User_Role_Sale is null) 
							   and d.Parent_ID=H.ID
							   group by d.SalesManId)  ) Profit
    -- cost and profit
    FROM Inv_Receipt_H H
             LEFT JOIN
         Inv_CashCustomer ON Inv_CashCustomer.id = H.CashCustomerID
        
		LEFT JOIN
         GL_Accounts ON GL_Accounts.AccountID = H.Vendor_ID
             LEFT JOIN
         Inv_Transaction_Codes C ON H.Code = C.Code
             LEFT JOIN
         Security_Users ON Security_Users.Id = H.Empoyee_ID
             LEFT JOIN
         Inv_PaymentType ON Inv_PaymentType.id = H.Payment_Type
    WHERE H.Code IN (51, 52, 53, 54)
      AND (ISNULL(H.Is_Canceled, 0) <> 1)
      AND (ISNULL(H.IsHolded, 0) <> 1)
      AND (@User_Role_Sale IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
               WHERE Inv_Receipt_D.SalesManId = @User_Role_Sale
           ))
      AND EXISTS
        (
            SELECT Parent_ID
            FROM Inv_Receipt_D D
            WHERE D.Parent_ID = H.ID
        )
      AND (@SubsidaryID IS NULL
        OR H.SubsidiaryID = @SubsidaryID)
      AND (@FromDate IS NULL
        OR
           CAST(H.Entry_Date AS DATETIME) >= cast(@FromDate as datetime) + cast(@FromTime as datetime)
        )
      AND (@ToDate IS NULL
        OR
           CAST(H.Entry_Date AS DATETIME) <= cast(@ToDate as datetime) + cast(@ToTime as datetime)
        )
      AND (@ItemId IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
               WHERE (@ItemId is null or Inv_Receipt_D.Item_ID = @ItemId)
           ))

      AND (@Item_vendor IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
                        left join Inv_Items on Inv_Receipt_d.Item_ID = Inv_Items.ID
                        left join Inv_Items_Vendors on Inv_Items.ID = Inv_Items_Vendors.ItemID
               WHERE ( Inv_Items_Vendors.VendorID = @item_vendor)
           ))

      AND (@SalesManId IS NULL
        OR H.Empoyee_ID = @SalesManId)
      AND (@BrachID IS NULL
        OR H.Branch_ID IN (@BrachID))
	AND (@CashDrawer IS NULL
        OR H.CashDrawerId = @CashDrawer)
		and H.Branch_ID in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId)
     AND (@CashDrawer IS NULL
        OR H.CashDrawerId = @CashDrawer)
	 AND (@CustomerID IS NULL
        OR H.Vendor_ID = @CustomerID)
      AND (@CashCustomerID IS NULL
        OR H.CashCustomerID = @CashCustomerID)
      AND (@CustomerCatID IS NULL
        OR Inv_CashCustomer.CategoryID IN (@CustomerCatID)
        OR Gl_Accounts.VendorCategoryID IN (@CustomerCatID))
      AND (@FromInvoiceNumber IS NULL
        OR H.Entry_No >= @FromInvoiceNumber)
      AND (@ToInvoiceNumber IS NULL
        OR H.Entry_No <= @ToInvoiceNumber)
      AND (@TransactionType IS NULL
        OR H.Code IN
           (
               SELECT item
               FROM dbo.Split(@TransactionType, ',')
           ))
      AND (@ItemCategoryID IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_d
                        LEFT JOIN
                    Inv_Items_Categories ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
               WHERE Inv_Receipt_d.Parent_ID = H.ID
                 AND Inv_Items_Categories.ItemCategory_ID IN
                     (
                         SELECT item
                         FROM dbo.Split(@ItemCategoryID, ',')
                     )
           ))
      AND (@FromDate IS not NULL
        OR CAST(Entry_Date AS TIME) >= @FromTime)
      AND (@ToDate IS not NULL
        OR CAST(Entry_Date AS TIME) <= @ToTime)
      AND (@FromCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) >= @FromCustomerActualDeliverDate)
      AND (@ToCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) <= @ToCustomerActualDeliverDate)
      AND (@CustomerStatusID IS NULL
        OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
      AND (@Payment_Type IS NULL
        OR H.Payment_Type = @Payment_Type)
		union 
		SELECT H.ID                     ID
         , H.Entry_No                  Bilno
         , H.Entry_Date                [Date]
	
         , Inv_PaymentType.Name        Payment
         , Inv_PaymentType.Name_AR     Payment_Ar
         , ISNULL(Inv_ReceiptMultiPayment .Amount, 0)          Total
         , 0 [Invoice Discount]
         ,  ISNULL(Inv_ReceiptMultiPayment .Amount, 0)       [Net Total]
         , ISNULL(H.DeliveryFees, 0)   DeliveryFees
         ,H.CustomerDeliverDate as CustomerActualDeliverDate
		 , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN ''
               ELSE GL_Accounts.VendorCode
        END                            CustomerNo
         , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN Inv_CashCustomer.Name
               ELSE GL_Accounts.Name
        END                            CustomerName
         , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN Inv_CashCustomer.Name_Ar
               ELSE GL_Accounts.Name_Ar
        END                            CustomerName_Ar
         , H.Vendor_ID
         , H.CashCustomerID
         , GL_Accounts.AccountID
         , Gl_Accounts.VendorCode
         , Security_Users.Name         [S.Name]
         , Security_Users.Name_Ar      [S.Name_Ar]
         , C.Name                      C_Name
         , C.Name_Ar                   C_Name_Ar
         , C.Code                      C_Code
    
		 ,avgcost = (SELECT top 1 Sum(D.Final_conv * D.AvgCost * d.Qty)  
               FROM Inv_Receipt_D d
               WHERE ( d.SalesManId = @User_Role_Sale or @User_Role_Sale is null) 
			   and d.Parent_ID=H.ID
			   group by d.SalesManId) 
		 ,    ( H.netvalue -  (SELECT top 1 Sum(D.Final_conv * D.AvgCost * d.Qty)  
							   FROM Inv_Receipt_D d
							   WHERE ( d.SalesManId = @User_Role_Sale or @User_Role_Sale is null) 
							   and d.Parent_ID=H.ID
							   group by d.SalesManId)  ) Profit
    FROM Inv_Receipt_H H
	inner join Inv_ReceiptMultiPayment on Inv_ReceiptMultiPayment.ReceiptId=H.id
             LEFT JOIN
         Inv_CashCustomer ON Inv_CashCustomer.id = H.CashCustomerID
            
             LEFT JOIN
         GL_Accounts ON GL_Accounts.AccountID = H.Vendor_ID
             LEFT JOIN
         Inv_Transaction_Codes C ON H.Code = C.Code
             LEFT JOIN
         Security_Users ON Security_Users.Id = H.Empoyee_ID
             LEFT JOIN
         Inv_PaymentType ON Inv_PaymentType.id = H.Payment_Type
    WHERE H.Payment_Type=51 
	and  Inv_ReceiptMultiPayment.PaymentTypeId=@Payment_Type 
	and
	H.Code IN (51, 52, 53, 54)
      AND (ISNULL(H.Is_Canceled, 0) <> 1)
      AND (ISNULL(H.IsHolded, 0) <> 1)
      AND (@User_Role_Sale IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
               WHERE Inv_Receipt_D.SalesManId = @User_Role_Sale
           ))
      AND EXISTS
        (
            SELECT Parent_ID
            FROM Inv_Receipt_D D
            WHERE D.Parent_ID = H.ID
        )
      AND (@SubsidaryID IS NULL
        OR H.SubsidiaryID = @SubsidaryID)
      AND (@FromDate IS NULL
        OR
           CAST(H.Entry_Date AS DATETIME) >= cast(@FromDate as datetime) + cast(@FromTime as datetime)
        )
      AND (@ToDate IS NULL
        OR
           CAST(H.Entry_Date AS DATETIME) <= cast(@ToDate as datetime) + cast(@ToTime as datetime)
        )
      AND (@ItemId IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
               WHERE (@ItemId is null or Inv_Receipt_D.Item_ID = @ItemId)
           ))

      AND (@Item_vendor IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
                        left join Inv_Items on Inv_Receipt_d.Item_ID = Inv_Items.ID
                        left join Inv_Items_Vendors on Inv_Items.ID = Inv_Items_Vendors.ItemID
               WHERE (Inv_Items_Vendors.VendorID = @item_vendor)
           ))

      AND (@SalesManId IS NULL
        OR H.Empoyee_ID = @SalesManId)
      AND (@BrachID IS NULL
        OR H.Branch_ID IN (@BrachID))
	   AND (@CashDrawer IS NULL
        OR H.CashDrawerId = @CashDrawer)
		--	and H.Branch_ID in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId)
      AND (@CustomerID IS NULL
        OR H.Vendor_ID = @CustomerID)
      AND (@CashCustomerID IS NULL
        OR H.CashCustomerID = @CashCustomerID)
      AND (@CustomerCatID IS NULL
        OR Inv_CashCustomer.CategoryID IN (@CustomerCatID)
        OR Gl_Accounts.VendorCategoryID IN (@CustomerCatID))
      AND (@FromInvoiceNumber IS NULL
        OR H.Entry_No >= @FromInvoiceNumber)
      AND (@ToInvoiceNumber IS NULL
        OR H.Entry_No <= @ToInvoiceNumber)
      AND (@TransactionType IS NULL
        OR H.Code IN
           (
               SELECT item
               FROM dbo.Split(@TransactionType, ',')
           ))
      AND (@ItemCategoryID IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_d
                        LEFT JOIN
                    Inv_Items_Categories ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
               WHERE Inv_Receipt_d.Parent_ID = H.ID
                 AND Inv_Items_Categories.ItemCategory_ID IN
                     (
                         SELECT item
                         FROM dbo.Split(@ItemCategoryID, ',')
                     )
           ))
      AND (@FromDate IS not NULL
        OR CAST(Entry_Date AS TIME) >= @FromTime)
      AND (@ToDate IS not NULL
        OR CAST(Entry_Date AS TIME) <= @ToTime)
      AND (@FromCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) >= @FromCustomerActualDeliverDate)
      AND (@ToCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) <= @ToCustomerActualDeliverDate)
      AND (@CustomerStatusID IS NULL
        OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
      
		) as Q;
  

    SELECT *,( SELECT  Sum(D.Qty) as Qty
            FROM Inv_Receipt_D D
            WHERE D.Parent_ID = #tbl.ID ) as Qty
    FROM #tbl  ORDER BY #tbl.Date
           , #tbl.Bilno
   -- SELECT  Sum( #tbl.[Net Total]  ) FROM #tbl where #tbl.C_Code in (51,52)
END
GO
/****** Object:  StoredProcedure [dbo].[Report_Chart_Of_Account]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

		 CREATE Proc [dbo].[Report_Chart_Of_Account]
     @Level       INT = Null
   , @SubsidaryID INT = Null
As
         Begin
             if(@Level=1 or @Level=2 or @Level=3) 
			   begin
			      select isNull(A.Name_AR,A.Name) AS Name_AR
					   ,A.Name
					   ,A.Code
					   ,A.LevelNo
					 from Gl_Accounts A
					 where a.LevelNo=@Level
				end
			  else
			   begin
			   select  isNull(A.Name_AR,A.Name) AS Name_AR
					   ,A.Name
					   ,A.Code
					   ,A.LevelNo
					   ,SubsidiaryID
					 from Gl_Accounts A left join GL_AccountSubsidiary s
					 on A.AccountID=s.AccountID where s.SubsidiaryID=@SubsidaryID
				     and (@level is null or a.LevelNo=@Level)
			   end

         END
	
GO
/****** Object:  StoredProcedure [dbo].[Report_Contract_FollowUp]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Report_Contract_FollowUp]
 @FromDate DATE = NULL
, @ToDate DATE = NULL
 ,@SalesType INT=NULL
 ,@Invoicing INT=NULL
  ,@BranchId INT=NULL
  ,@PaymentId INT=NULL
  ,@StatusId INT=NULL
AS
BEGIN
    
    select H.ID as ContractId
	,(select top 1 Inv_ContractPayment.Date from Inv_ContractPayment where Inv_ContractPayment.ContractId=H.ID and Inv_ContractPayment.Date < GETDATE() ) as DueDate
	, H.Value as ContractValue
	, CustomerName = CASE
                           WHEN GL_Accounts.AccountID IS NULL
                           THEN Inv_CashCustomer.Name
                           ELSE GL_Accounts.Name
                       END
      , CustomerName_Ar = CASE
                              WHEN GL_Accounts.AccountID IS NULL
                              THEN Inv_CashCustomer.Name_Ar
                              ELSE GL_Accounts.Name_Ar
                          END
	,H.LCEndDate  as ExpiryDate
	,ISNULL((select top 1 Inv_SalesTypes.Name_AR from Inv_SalesTypes where Inv_SalesTypes.ID=H.SalesTypeID),0)as SalesTypeAr 
	,ISNULL((select top 1 Inv_SalesTypes.Name from Inv_SalesTypes where Inv_SalesTypes.ID=H.SalesTypeID),0) as SalesType
	,ISNULL((select Sum(Inv_Receipt_h.Value) from Inv_Receipt_h where Inv_Receipt_h.ContractId=H.ID),0) as TotalInvoices
	,ISNULL((select Sum(Inv_ContractPayment.Remaining) from Inv_ContractPayment where Inv_ContractPayment.ContractId=H.ID and Inv_ContractPayment.Date < GETDATE() ),0) as DuoPayments
	,ISNULL((select Sum(Inv_ContractPayment.Remaining) from Inv_ContractPayment where Inv_ContractPayment.ContractId=H.ID ),0) as RemainPayments
	,ISNULL((select Sum(Inv_ContractPayment.Value) from Inv_ContractPayment where Inv_ContractPayment.ContractId=H.ID ),0) as TotalPayments
	,ISNULL(0,0) as Prograss
	from dbo.Inv_Receipt_h as H
	LEFT JOIN Inv_CashCustomer
             ON Inv_CashCustomer.id = H.CashCustomerID
	  LEFT JOIN GL_Accounts
             ON GL_Accounts.AccountID = H.Vendor_ID
	where 
	H.Code=87
	AND (@FromDate IS NULL
            OR H.Entry_Date >= @FromDate)
	AND (@ToDate IS NULL
            OR H.Entry_Date <= @ToDate)
   AND (@SalesType IS NULL
            OR H.SalesTypeID <= @SalesType)
	AND (@BranchId IS NULL
            OR H.Branch_ID <= @BranchId)
	AND (@PaymentId IS NULL
            OR H.Payment_Type <= @PaymentId)
	AND (@Invoicing IS NULL
            OR NOT EXISTS (select Inv_Receipt_h.ID from Inv_Receipt_h where Inv_Receipt_h.ContractId=H.ID))
END
GO
/****** Object:  StoredProcedure [dbo].[Report_CRM_DashBord_Lead_Owner]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[Report_CRM_DashBord_Lead_Owner]
     @SubsidaryID    INT  = Null
   , @FromDate       DATE = Null
   , @ToDate         DATE = Null
   , @LeadCategoryId INT  = Null
As
         Begin

             Select
                    L.LeadOwnerId
                  , U.Name
                  , U.Name_AR
                  , L.StatusId
                  , Case L.StatusId
                        When 1
                        Then 'New'
                        When 2
                        Then 'Follow up'
                        When 3
                        Then 'Win'
                        When 4
                        Then 'Postponed'
                        When 5
                        Then 'Lost'
                        Else 'None'
                    End Status_En
                  , Case L.StatusId
                        When 1
                        Then N'جديد'
                        When 2
                        Then N'متابعه'
                        When 3
                        Then N'فائز'
                        When 4
                        Then N'مؤجل'
                        When 5
                        Then N'مفقود'
                        Else N'غير محدد'
                    End Status_Ar
             Into
                  #Context
             From
                  Crm_Lead L
             Left Join Security_Users U
                  On L.LeadOwnerId = U.Id
             Where
                         (
                                     @FromDate Is Null
                                     Or l.CreatedDate >= @FromDate)
                         And (
                                         @ToDate Is Null
                                         Or L.CreatedDate <= @ToDate)
                         And (
                                         @LeadCategoryId Is Null
                                         Or L.LeadCategoryId In(@LeadCategoryId))

             Select
                    COUNT(1) Count
                  , LeadOwnerId
                  , Name
                  , Name_AR
                  , StatusId
                  , Status_En
                  , Status_Ar
             Into
                  #GetCount
             From
                  #Context
             Group By
                      LeadOwnerId
                    , Name
                    , Name_AR
                    , StatusId
                    , Status_En
                    , Status_Ar


             Select
                    SUM(Count)  SumCount
                  , LeadOwnerID LeadOwnerID
                  , Name
                  , Name_AR
                  , 6           StatusId
                  , 'Total'     Total
                  , N'الاجمالى' Total_Ar
             Into
                  #GetTotal
             From
                  #GetCount
             Group By
                      Name
                    , Name_AR
                    , LeadOwnerID

             Select
                    *
             Into
                  #GetCountAndTotal
             From
(
    Select
           *
    From
         #GetCount
    Union All
    Select
           *
    From
         #GetTotal
) T
             Order By
                      Name
                    , StatusId


             Select
                    LeadOwnerID
                  , Count
                  , StatusId
             Into
                  #GetTotalOnly
             From
                  #GetCountAndTotal
             Where StatusId = 6


             Select
                    LeadOwnerID
                  , Count
                  , StatusId
             Into
                  #GetWinOnly
             From
                  #GetCountAndTotal
             Where StatusId = 3


             Select
                  
			   Round( Cast(#GetWinOnly.Count as float) / Cast(#GetTotalOnly.Count as float),3) * 100  As Count
                    ,#GetCountAndTotal.LeadOwnerId
			   
			   ,#GetCountAndTotal.Name
			   ,#GetCountAndTotal.Name_Ar
                  , '7'                                                                                                  StatusId
                  , 'Win %'                                                                                              Total
                  , N'فائز %'                                                                                            Total_Ar
             Into
                  #GetWinPercent
             From
                  #GetCountAndTotal
             Left Join #GetTotalOnly
                  On #GetTotalOnly.LeadOwnerId = #GetCountAndTotal.LeadOwnerId
             Left Join #GetWinOnly
                  On #GetWinOnly.LeadOwnerId = #GetCountAndTotal.LeadOwnerId


             Select
                    *
             Into
                  #GetCountAndTotalAndWinPercent
             From
(
    Select
           *
    From
         #GetCount
    Union All
    Select
           *
    From
         #GetTotal
    Union All
    Select Distinct
           *
    From
         #GetWinPercent
) T
             Order By
                      Name
                    , StatusId

             Select
                    *
             From
                  #GetCountAndTotalAndWinPercent
             Order By
                      Name
                    , StatusId
         End
GO
/****** Object:  StoredProcedure [dbo].[Report_CRM_DashBord_SalesMen]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[Report_CRM_DashBord_SalesMen]
     @SubsidaryID    INT  = Null
   , @FromDate       DATE = Null
   , @ToDate         DATE = Null
   , @LeadCategoryId INT  = Null
   , @Role           INT  = Null
As
         Begin

                     Select
                    L.LeadOwnerId
                  , U.Name
                  , U.Name_AR
                  , L.StatusId
                  , Case L.StatusId
                        When 1
                        Then 'New'
                        When 2
                        Then 'Follow up'
                        When 3
                        Then 'Win'
                        When 4
                        Then 'Postponed'
                        When 5
                        Then 'Lost'
                        Else 'None'
                    End Status_En
                  , Case L.StatusId
                        When 1
                        Then N'جديد'
                        When 2
                        Then N'متابعه'
                        When 3
                        Then N'فائز'
                        When 4
                        Then N'مؤجل'
                        When 5
                        Then N'مفقود'
                        Else N'غير محدد'
                    End Status_Ar
             Into
                  #Context
             From
                  Crm_Lead L
             Left Join Security_Users U
                  On L.LeadOwnerId = U.Id
             Where
                         (
                                     @FromDate Is Null
                                     Or l.CreatedDate >= @FromDate)
                         And (
                                         @ToDate Is Null
                                         Or L.CreatedDate <= @ToDate)
                         And (
                                         @LeadCategoryId Is Null
                                         Or L.LeadCategoryId In(@LeadCategoryId))

             And (
                             @Role Is Null
                             Or L.ID In
(
    Select
           LeadID
    From
         Crm_Lead_Users
    Where LeadID = L.ID
))
-- Get Leads
--Leads = Leads assigned to this employee with no appointments
--		status <>( postopen , lost or win)
             Select
                    LeadOwnerId
                  , Name
                  , Name_AR
                  , COUNT(1) Count
 
                  , 'Leads'  Status
			   ,1 Sort
             Into
                  #GetLeads
             From
                  #Context
             Where StatusId Not In(3, 4, 5)
             Group By
                      LeadOwnerId
                    , Name
                    , Name_AR
	 

 

-- Get Demos
--Demos =  appointments in this period
             Select
                    LeadOwnerId
                  , Name
                  , Name_AR
                  , COUNT(1) Count
 
                  , 'Demos'  Status
			   ,2 Sort

             Into
                  #GetDemos
             From
                  #Context
             Group By
                      LeadOwnerId
                    , Name
                    , Name_AR
 

-- Get Win
--Win = Leads assigned to this employee and satatus = Win
             Select
                    LeadOwnerId
                  , Name
                  , Name_AR
                  , COUNT(1) Count
 
                  , 'Win'    Status
			   ,3 Sort
             Into
                  #GetWin
             From
                  #Context
             Where StatusId = 3
             Group By
                      LeadOwnerId
                    , Name
 

                    , Name_AR

-- Get WIn %
--Win%= win/demos * 100
             Select Distinct
                    C.LeadOwnerId
                  , C.Name
                  , C.Name_AR
                  , ROUND((CAST(W.Count As FLOAT) / CAST(D.Count As FLOAT)) * 100, 1) As Count
                  , 'Win %'                                                              Status
			   ,4 Sort

             Into
                  #GetWinPercent
             From
                  #Context C
             Left Join #GetDemos D
                  On C.LeadOwnerId = D.LeadOwnerId
             Left Join #GetWin W
                  On C.LeadOwnerId = W.LeadOwnerId
 


             Select
                    *
             From
(
    Select
           *
    From
         #GetLeads
    Union All
    Select
           *
    From
         #GetDemos
    Union All
    Select
           *
    From
         #GetWin
    Union All
    Select
           *
    From
         #GetWinPercent
) T
order by Name
         End
GO
/****** Object:  StoredProcedure [dbo].[Report_CRM_Get_User_Role_Related_LeadId]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[Report_CRM_Get_User_Role_Related_LeadId]
     @LeadId INT = Null
As
         Begin
             Select
                    CL.ID
                  , ROW_NUMBER() Over(Partition By cl.id Order By CL.ID) RowNumber
                  , CR.Name_AR                                           CR_Name_Ar
                  , SU_Activity.Name_Ar                                  SU_Name_Ar
                  , CR.Name                                              CR_Name
                  , SU_Activity.Name                                     SU_Name
             Into
                  #AllData
             From
                  Crm_Lead CL
             Join Crm_Lead_Users CLU
                  On CLU.LeadID = Cl.id
             Join Crm_Roles CR
                  On CLU.RoleID = Cr.ID
             Join Security_Users SU_Activity
                  On SU_Activity.Id = CLU.UserID
             Where
                         (
                                     @LeadID Is Null
                                     Or CL.ID = @LeadID)
                         And (CR.IsActive = 1)

             Select
                    *
             Into
                  #FirstRow
             From
                  #AllData
             Where RowNumber = 1
             Select
                    *
             Into
                  #SecoundRow
             From
                  #AllData
             Where RowNumber = 2



             Select
                    F.ID
                  , F.CR_Name_Ar  F_CR_Name_Ar
                  , F.SU_Name_ar F_SU_Name_ar
                  , S.CR_Name_Ar S_CR_Name_Ar
                  , S.SU_Name_ar S_SU_Name_ar
             From
                  #FirstRow F
             Left Join #SecoundRow S
                  On F.ID = s.ID
         End
GO
/****** Object:  StoredProcedure [dbo].[Report_CRM_Gropu_By_Actitvity_Type]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[Report_CRM_Gropu_By_Actitvity_Type] @SubsidaryID      INT  = 1
                                                        , @CustomerCatID    INT  = NULL
                                                        , @CustomerStatusID INT  = NULL
                                                        , @AreaID           INT  = NULL
                                                        , @Assigned_To      INT  = NULL
                                                        , @TaskTypesId      INT  = NULL
                                                        , @FromDate         DATE = '20190428'
                                                        , @ToDate           DATE = '20190428'
AS
    BEGIN
        SELECT Crm_Activity.ID                           Crm_Activity_ID
             , Crm_Activity.Code                         Crm_Activity_Code
             , Crm_Activity.Name                         Crm_Activity_Name
             , Crm_Activity.Name_Ar                      Crm_Activity_Name_Ar
             , Crm_Lead_Activities.StartDate             Crm_Lead_Activities_StartDate
             , Security_Users.ID                         Security_Users_ID
             , Security_Users.Name                       Security_Users_Name
             , Security_Users.Name_Ar                    Security_Users_Name_Ar
             , ISNULL(Crm_Lead_Activities.TaskValue , 0) Crm_Lead_Activities_TaskValue
             , Crm_Lead_Activities.StatusID              Crm_Lead_Activities_StatusID
             , CASE StatusID
                   WHEN 3
                   THEN N'تاجيل'
                   WHEN 4
                   THEN N'الغاء'
                   ELSE NULL
               END                                       Crm_Lead_Activities_StatusID_Name
        INTO #Context
        FROM Crm_Activity
             LEFT JOIN Crm_Lead_Activities
             ON Crm_Activity.ID = Crm_Lead_Activities.ActivityTypeID
             LEFT JOIN GL_Accounts
             ON GL_Accounts.AccountID = Crm_Lead_Activities.CustomerId
             LEFT JOIN Security_Users
             ON Security_Users.id = Crm_Lead_Activities.AssignedToId
        WHERE Crm_Activity.IsSystem <> 1
              AND Crm_Lead_Activities.CustomerId IS NOT NULL
              AND (@SubsidaryID IS NULL
                   OR GL_Accounts.AccountID IN
        (
         SELECT AccountID
         FROM GL_AccountSubsidiary
         WHERE GL_AccountSubsidiary.AccountID = GL_Accounts.AccountID
               AND GL_AccountSubsidiary.SubsidiaryID = @SubsidaryID
        ))
              AND (@CustomerCatID IS NULL
                   OR Gl_Accounts.VendorCategoryID IN(@CustomerCatID))
             AND (@CustomerStatusID IS NULL
                  OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
             AND (@AreaID IS NULL
                  OR GL_Accounts.AreaId = @AreaID)
             AND (@Assigned_To IS NULL
                  OR Crm_Lead_Activities.AssignedToId = @Assigned_To)
             AND (@TaskTypesId IS NULL
                  OR Crm_Lead_Activities.ActivityTypeID = @TaskTypesId)
             AND (@FromDate IS NULL
                  OR CAST(Crm_Lead_Activities.StartDate AS DATE) >= @FromDate)
             AND (@ToDate IS NULL
                  OR CAST(Crm_Lead_Activities.StartDate AS DATE) <= @ToDate)
   
		
		-- Get Activity 

        SELECT Crm_Activity_ID
             , Crm_Activity_Code
             , Crm_Activity_Name
             , Crm_Activity_Name_Ar
             , Security_Users_ID
             , Security_Users_Name
             , Security_Users_Name_Ar
             , COUNT(1)                                       Activity_Count
             , SUM(ISNULL(Crm_Lead_Activities_TaskValue , 0)) Crm_Lead_Activities_TaskValue
        INTO #Activity
        FROM #context
        GROUP BY Crm_Activity_ID
               , Crm_Activity_Code
               , Crm_Activity_Name
               , Crm_Activity_Name_Ar
               , Security_Users_ID
               , Security_Users_Name
               , Security_Users_Name_Ar



        --GET StatusID = 3

        SELECT Security_Users_ID
             , Security_Users_Name
             , Security_Users_Name_Ar
             , Crm_Lead_Activities_StatusID
             , Crm_Lead_Activities_StatusID_Name
             , COUNT(1) Count
        INTO #StatusID_3
        FROM #context
        WHERE Crm_Lead_Activities_StatusID = 3
        GROUP BY Security_Users_ID
               , Security_Users_Name
               , Security_Users_Name_Ar
               , Crm_Lead_Activities_StatusID
               , Crm_Lead_Activities_StatusID_Name

        --GET StatusID = 4
        SELECT Security_Users_ID
             , Security_Users_Name
             , Security_Users_Name_Ar
             , Crm_Lead_Activities_StatusID
             , Crm_Lead_Activities_StatusID_Name
             , COUNT(1) Count
        INTO #StatusID_4
        FROM #context
        WHERE Crm_Lead_Activities_StatusID = 4
        GROUP BY Security_Users_ID
               , Security_Users_Name
               , Security_Users_Name_Ar
               , Crm_Lead_Activities_StatusID
               , Crm_Lead_Activities_StatusID_Name

        SELECT #Activity.*
             , #StatusID_3.Count StatusID_3_Count
             , #StatusID_4.Count StatusID_4_Count
        FROM #Activity
             LEFT JOIN #StatusID_3
             ON #Activity.Security_Users_ID = #StatusID_3.Security_Users_ID
             LEFT JOIN #StatusID_4
             ON #Activity.Security_Users_ID = #StatusID_4.Security_Users_ID
    END
GO
/****** Object:  StoredProcedure [dbo].[Report_CRM_Group_By_LeadOwner]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[Report_CRM_Group_By_LeadOwner] @SubsidaryID    INT  = NULL
                                                   , @FromDate       DATE = NULL
                                                   , @ToDate         DATE = NULL
                                                   , @LeadCategoryId INT  = NULL
                                                   , @RoleID         INT  = NULL
AS
    BEGIN

        SELECT crm_lead.LeadOwnerId         TaskOwnerID
             , U.Name
             , U.Name_AR
             , Crm_AppointmentTypes.Name    Status_En
             , Crm_AppointmentTypes.Name_ar Status_Ar
             , COUNT(L.StatusId)            StatusId_Count
        FROM
             dbo.Crm_Lead_Activities L
        LEFT JOIN
        crm_lead ON crm_lead.Id = L.LeadID
        LEFT JOIN
        dbo.Security_Users U ON crm_lead.LeadOwnerId = U.Id
        LEFT JOIN
        dbo.Crm_AppointmentTypes ON Crm_AppointmentTypes.ID = L.AppointmentTypeID
        WHERE  
		L.LeadID IS NOT null
		and (@SubsidaryID IS NULL
              OR crm_lead.SubsidiaryID IN(@SubsidaryID))
        AND (@FromDate IS NULL
             OR L.StartDate >= @FromDate)
        AND (@ToDate IS NULL
             OR L.StartDate <= @ToDate)
        AND (@LeadCategoryId IS NULL
             OR crm_lead.LeadOwnerId IN(@LeadCategoryId))
             AND (@RoleID IS NULL
                  OR crm_lead.ID IN
        (
         SELECT Crm_Lead_Users.LeadID
         FROM dbo.Crm_Lead_Users
         WHERE Crm_Lead_Users.UserId = crm_lead.LeadOwnerId
               AND Crm_Lead_Users.RoleID = @RoleID
        ))
        GROUP BY crm_lead.LeadOwnerId
               , U.Name
               , U.Name_AR
               , Crm_AppointmentTypes.Name
               , Crm_AppointmentTypes.Name_ar
    END
GO
/****** Object:  StoredProcedure [dbo].[Report_CRM_Group_By_UserRole]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[Report_CRM_Group_By_UserRole] @SubsidaryID    INT  = NULL
                                                     , @FromDate       DATE = NULL
                                                     , @ToDate         DATE = NULL
                                                     , @LeadCategoryId INT  = NULL
                                                     , @RoleID         INT  = NULL
AS
    BEGIN


        SELECT L.AssignedToId
             , U.Name
             , U.Name_AR
             , Crm_AppointmentTypes.Name    Status_En
             , Crm_AppointmentTypes.Name_ar Status_Ar
             , COUNT(L.StatusId)            StatusId_Count
        FROM Crm_Lead_Activities L
             LEFT JOIN Security_Users U
             ON L.AssignedToId = U.Id
             LEFT JOIN Crm_AppointmentTypes
             ON Crm_AppointmentTypes.ID = L.AppointmentTypeID
        WHERE(@SubsidaryID IS NULL
              OR L.LeadID IN
        (
         SELECT Id
         FROM Crm_Lead
         WHERE crm_lead.ID = L.LeadID
               AND crm_Lead.SubsidiaryID = @SubsidaryID
        ))
             AND (@FromDate IS NULL
                  OR L.StartDate >= @FromDate)
             AND (@ToDate IS NULL
                  OR L.StartDate <= @ToDate)
             AND (@LeadCategoryId IS NULL
                  OR L.AssignedToId IN(@LeadCategoryId))
             AND (@RoleID IS NULL
                  OR L.LeadID IN
        (
         SELECT LeadID
         FROM Crm_Lead_Users
         WHERE UserId = L.AssignedToId
               AND Crm_Lead_Users.RoleID = @RoleID
        ))
        GROUP BY L.AssignedToId
               , U.Name
               , U.Name_AR
               , Crm_AppointmentTypes.Name
               , Crm_AppointmentTypes.Name_ar
    END
GO
/****** Object:  StoredProcedure [dbo].[Report_CRM_Lead_Activities]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[Report_CRM_Lead_Activities] @SubsidaryID       INT           = NULL
                                                  , @LeadOwnerId       INT           = NULL
                                                  , @AssignedToId      INT           = NULL
                                                  , @TaskTypeId        INT           = NULL
                                                  , @ActivityStatusId  INT           = NULL
                                                  , @DateFrom          DATE          = NULL
                                                  , @DateTo            DATE          = NULL
                                                  , @LeadActivities_ID NVARCHAR(MAX) = NULL
                                                  , @LeadId            INT           = 58
AS
    BEGIN
        IF EXISTS
        (
         SELECT 1
         FROM dbo.Split(@LeadActivities_ID , ',')
         WHERE Item = -1
        )
            SET @LeadActivities_ID = NULL

        SELECT CL.Id                                      CL_ID
             , cl.Name                                    LeadName
             , cl.Name_AR                                 LeadNameAR
             , cl.SourcePhone                             SourcePhone

               --*********
               -- اسم العميل
               --*********
             , su.Name                                    openBy
             , su.Name                                    openBy_Ar

               --*********
               --محدد الموعد
               --*********
             , cl.Phone
             , cl.Mobile

               --*****
               -- Adress
               --*****
             , GL_Area.Name                               AreaName
             , GL_Area.Name_Ar                            AreaName_Ar
             , cl.Sector
             , cl.Avenu
             , cl.House
             , cl.Flat
             , cl.Street
             , cl.Floor
             , cl.AddressNotes
             , clr.Name                                   leadSource

               --*********
               -- اسم المرجع
               --*********
             , clr.Name_AR                                leadSource_ar
             , CASE
                   WHEN cl.LeadSourceAccount IS NOT NULL
                   THEN CL_LeadSourceAccount.Name
                   WHEN cl.CustomerSourceAccount IS NOT NULL
                   THEN gla.Name
                   WHEN cl.UserSourceAccount IS NOT NULL
                   THEN Su_Employee.Name
                   ELSE NULL
               END                                        SourceAccount_Name

               --*********
               -- نوع المرجع
               --*********
             , CASE
                   WHEN cl.LeadSourceAccount IS NOT NULL
                   THEN CL_LeadSourceAccount.Name_AR
                   WHEN cl.CustomerSourceAccount IS NOT NULL
                   THEN gla.Name_AR
                   WHEN cl.UserSourceAccount IS NOT NULL
                   THEN Su_Employee.Name_AR
                   ELSE NULL
               END                                        SourceAccount_Name_Ar
             , cla.ID
             , cla.StartDate                              StartDate
             , DATENAME(dw , cla.StartDate)               dayName
             , CONVERT(VARCHAR(10) , cla.StartTime , 100) StartTime
             , cla.Subject
             , cla.ActivityTypeID
             , CASE
                   WHEN cla.ActivityTypeID > 20
                   THEN 'Tasks'
                   WHEN cla.ActivityTypeID = 1
                   THEN 'Calls'
                   WHEN cla.ActivityTypeID = 2
                   THEN 'Meetings'
                   ELSE NULL
               END                                        TYPE
             , CASE
                   WHEN cla.ActivityTypeID > 20
                   THEN N'المهام'
                   WHEN cla.ActivityTypeID = 1
                   THEN N'التلفون'
                   WHEN cla.ActivityTypeID = 2
                   THEN N'المقابلات'
                   ELSE NULL
               END                                        Type_ar
             , su.Code                                    Code
             , Crm_LeadCategory.Name_Ar AS                Crm_LeadCategory_Name_Ar
             , cl.LeadNotes
             , Crm_Lead_Rating.Name                       Crm_Lead_Rating_Name
             , Crm_Lead_Rating.Name_AR                    Crm_Lead_Rating_Name_AR
        FROM
             Crm_Lead_Activities cla
        LEFT JOIN
        Crm_Lead cl ON cla.LeadID = cl.ID
        LEFT JOIN
        Crm_Lead_Rating ON cl.RatingId = Crm_Lead_Rating.ID
        LEFT JOIN
        GL_Area ON cl.AreaId = GL_Area.ID
        LEFT JOIN
        Security_Users su ON su.Id = cl.LeadOwnerId
        LEFT JOIN
        Crm_Lead_Source clr ON clr.ID = cl.SourceId
        LEFT JOIN
        Crm_lead CL_LeadSourceAccount ON cl.LeadSourceAccount = CL_LeadSourceAccount.id
        LEFT JOIN
        GL_Accounts gla ON cl.CustomerSourceAccount = gla.AccountID
        LEFT JOIN
        Security_Users Su_Employee ON cl.UserSourceAccount = su_employee.id
        LEFT JOIN
        Crm_LeadCategory ON cl.LeadCategoryId = Crm_LeadCategory.ID
        WHERE(@LeadId IS NULL
              OR cl.ID = @LeadId)
             AND (@SubsidaryID IS NULL
                  OR cl.SubsidiaryID = @SubsidaryID)
             AND (@LeadOwnerId IS NULL
                  OR cl.LeadOwnerId = @LeadOwnerId)
             AND (@AssignedToId IS NULL
                  OR cla.AssignedToId = @AssignedToId)
             AND ((@TaskTypeId = 21 -- This Mean All Taskes 
                   AND cla.ActivityTypeID >= 21)
                  OR (@TaskTypeId IS NULL
                      OR cla.ActivityTypeID = @TaskTypeId))
             AND (@ActivityStatusId IS NULL
                  OR cla.StatusID = @ActivityStatusId)
             AND (@DateFrom IS NULL
                  OR cla.StartDate >= @DateFrom)
             AND (@DateTo IS NULL
                  OR cla.StartDate <= @DateTo)
             AND (@LeadActivities_ID IS NULL
                  OR cla.ID IN
        (
         SELECT item
         FROM dbo.Split(@LeadActivities_ID , ',')
        ))
    END
GO
/****** Object:  StoredProcedure [dbo].[Report_CRM_Lead_Activities_Dates]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[Report_CRM_Lead_Activities_Dates] @OpenBy       INT  = NULL
                                                        , @AssignedToId INT  = NULL
                                                        , @TaskTypeId   INT  = NULL
                                                        , @DateFrom     DATE = NULL
                                                        , @DateTo       DATE = NULL
AS
    BEGIN
        SELECT GL_Accounts.VendorCode
             , Crm_Lead_Activities.ActivityTypeID
             , GL_Accounts.Name AS                [GL_Accounts_Name]
             , GL_Accounts.Name_AR AS             [GL_Accounts_Name_AR]
             , GL_Accounts.AltPhone AS            [GL_Accounts_AltPhone]
             , GL_Accounts.Phone AS               [GL_Accounts_Phone]
             , GL_Accounts.Fax AS                 [Fax]
             , Crm_Lead_Activities.StartTime AS   [Crm_Lead_Activities_StartTime]
             , Crm_Lead_Activities.Subject AS     [Crm_Lead_Activities_Subject]
             , GL_Area.Name AS                    [GL_Area_Name]
             , GL_Area.Name_AR AS                 [GL_Area_Name_AR]
             , GL_Accounts.Address AS             [GL_Accounts_Address]
             , Crm_Lead_Activities.Description AS [Crm_Lead_Activities_Description]
             , Crm_Lead_Activities.StartDate
			 , Account_Manager.Name Account_Manager_Name
			 , Account_Manager.Name_AR Account_Manager_Name_Ar
			 ,Security_Users.Name Security_Users_Name
			 ,Security_Users.Name_Ar Security_Users_Name_Ar
        FROM Crm_Lead_Activities
             LEFT JOIN Crm_Lead
             ON Crm_Lead.ID = Crm_Lead_Activities.LeadID
             LEFT JOIN Security_Users
             ON Security_Users.Id = Crm_Lead_Activities.AssignedToId
             LEFT JOIN Security_Users Account_Manager
             ON Account_Manager.ID = Crm_Lead.LeadOwnerId
             LEFT JOIN GL_Accounts
             ON Gl_accounts.AccountID = Crm_Lead_Activities.CustomerId
             LEFT JOIN GL_Area
             ON GL_Area.ID = GL_Accounts.AreaId
        WHERE(@OpenBy IS NULL
              OR Crm_Lead.LeadOwnerId = @OpenBy)
             AND ((@AssignedToId IS NULL
                   OR Crm_Lead_Activities.AssignedToId = @AssignedToId))
             AND ((@TaskTypeId = 21 -- This Mean All Taskes 
                   AND Crm_Lead_Activities.ActivityTypeID >= 21)
                  OR (@TaskTypeId IS NULL
                      OR Crm_Lead_Activities.ActivityTypeID = @TaskTypeId))
             AND (@DateFrom IS NULL
                  OR Crm_Lead_Activities.StartDate >= @DateFrom)
             AND (@DateTo IS NULL
                  OR Crm_Lead_Activities.StartDate <= @DateTo)
             AND CustomerId IS NOT NULL
    END
GO
/****** Object:  StoredProcedure [dbo].[Report_CRM_Lead_Monitor_Appointments]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[Report_CRM_Lead_Monitor_Appointments] @OpenBy       INT  = NULL
                                                          , @TaskTypeId   INT  = NULL
                                                          , @SubsidaryID  INT  = NULL
                                                          , @AssignedToId INT  = NULL
                                                          , @DateFrom     DATE = NULL
                                                          , @DateTo       DATE = NULL
AS
    BEGIN
        SELECT Crm_Lead_Activities.ActivityTypeID
             , Crm_Lead.Name AS                                                                                                                                                                                                                                                 [Crm_Lead_Name]
             , Crm_Lead.Name_AR AS                                                                                                                                                                                                                                              [Crm_Lead_Name_AR]
             , Crm_Lead.Mobile AS                                                                                                                                                                                                                                               [Crm_Lead_AltPhone]
             , Crm_Lead.Phone AS                                                                                                                                                                                                                                                [Crm_Lead_Phone]
             , Crm_Lead_Activities.Subject AS                                                                                                                                                                                                                                   [Crm_Lead_Activities_Subject]
             , Account_Manager.code                                                                                                                                                                                                                                             Account_Manager_code
             , N'المنطقه ' + ISNULL(GL_Area.Name_AR , '') + N' القطعه ' + ISNULL(Crm_Lead.Sector , '') + N' ش ' + ISNULL(Crm_Lead.Street , '') + N' المنزل ' + ISNULL(Crm_Lead.House , '') + N' الدور ' + ISNULL(CRm_Lead.Floor , '') + N' الشقه ' + ISNULL(CRm_Lead.Flat , '') [CRM_Address]
             , CONVERT(VARCHAR(10) , Crm_Lead_Activities.StartTime , 100) AS                                                                                                                                                                                                    [Crm_Lead_Activities_StartTime]
             , Security_Users.Name                                                                                                                                                                                                                                              Security_Users_Name
             , Security_Users.Name_Ar                                                                                                                                                                                                                                           Security_Users_Name_Ar
             , Crm_AppointmentTypes.Name_AR                                                                                                                                                                                                                                     [State]
             , GL_Area.Name AS                                                                                                                                                                                                                                                  [GL_Area_Name]
             , GL_Area.Name_AR AS                                                                                                                                                                                                                                               [GL_Area_Name_AR]
             , Crm_Lead_Source.id                                                                                                                                                                                                                                               Crm_Lead_Source_id
             , Crm_Lead_Source.Name                                                                                                                                                                                                                                             Crm_Lead_Source_Name
             , Crm_Lead_Source.Name_Ar                                                                                                                                                                                                                                          Crm_Lead_Source_Name_Ar
             , LeadSourceAccount.Name                                                                                                                                                                                                                                           LeadSourceAccount_Name
             , LeadSourceAccount.Name_ar                                                                                                                                                                                                                                        LeadSourceAccount_Name
             , UserSourceAccount.Name                                                                                                                                                                                                                                           UserSourceAccount_Name
             , UserSourceAccount.Name_Ar                                                                                                                                                                                                                                        UserSourceAccount_Name_Ar
             , CustomerSourceAccount.Name                                                                                                                                                                                                                                       CustomerSourceAccount_Name
             , CustomerSourceAccount.Name_Ar                                                                                                                                                                                                                                    CustomerSourceAccount_Name_Ar
             , CASE Crm_Lead_Source.id
                   WHEN 4
                   THEN LeadSourceAccount.Name_ar
                   WHEN 5
                   THEN CustomerSourceAccount.Name_Ar
                   WHEN 6
                   THEN UserSourceAccount.Name_Ar
                   ELSE Crm_Lead.SourceName
               END                                                                                                                                                                                                                                                              SourceName_Ar
             , Crm_Lead.SourcePhone                                                                                                                                                                                                                                             Crm_Lead_SourcePhone
        FROM
             dbo.Crm_Lead_Activities
        LEFT JOIN
        dbo.Crm_Lead ON Crm_Lead.ID = Crm_Lead_Activities.LeadID
        LEFT JOIN
        dbo.Security_Users ON Security_Users.Id = Crm_Lead_Activities.AssignedToId
        LEFT JOIN
        dbo.Security_Users Account_Manager ON Account_Manager.ID = Crm_Lead.LeadOwnerId
        LEFT JOIN
        dbo.GL_Area ON GL_Area.ID = Crm_Lead.AreaId
        LEFT JOIN
        dbo.Crm_AppointmentTypes ON Crm_AppointmentTypes.id = Crm_Lead_Activities.AppointmentTypeID
        -- Source             
        LEFT JOIN
        dbo.Crm_Lead_Source ON Crm_Lead_Source.ID = Crm_Lead.SourceId
        LEFT JOIN
        dbo.Crm_Lead LeadSourceAccount ON LeadSourceAccount.ID = Crm_Lead.LeadSourceAccount
        LEFT JOIN
        dbo.Security_Users UserSourceAccount ON UserSourceAccount.Id = Crm_Lead.UserSourceAccount
        LEFT JOIN
        dbo.GL_Accounts CustomerSourceAccount ON CustomerSourceAccount.AccountID = Crm_lead.CustomerSourceAccount
        WHERE(@OpenBy IS NULL
              OR Crm_Lead.LeadOwnerId = @OpenBy)
             AND ((@AssignedToId IS NULL
                   OR Crm_Lead_Activities.AssignedToId = @AssignedToId))
             AND ((@TaskTypeId = 21 -- This Mean All Taskes 
                   AND Crm_Lead_Activities.ActivityTypeID >= 21)
                  OR (@TaskTypeId IS NULL
                      OR Crm_Lead_Activities.ActivityTypeID = @TaskTypeId))
             AND (@DateFrom IS NULL
                  OR Crm_Lead_Activities.StartDate >= @DateFrom)
             AND (@DateTo IS NULL
                  OR Crm_Lead_Activities.StartDate <= @DateTo)
             AND (@SubsidaryID IS NULL
                  OR Crm_Lead.SubsidiaryID = @SubsidaryID)
             AND Crm_Lead_Activities.CustomerId IS NULL
        ORDER BY Crm_Lead_Activities.StartTime
    END
	
GO
/****** Object:  StoredProcedure [dbo].[Report_DueInstallments]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 
CREATE PROCEDURE [dbo].[Report_DueInstallments] --@SubsidiaryID = 1

@SubsidaryID int = NULL,
@BranchID int= null,
@DateFrom date= NULL,
@DateTo date= NULL,
@InstallmentStatusPaidId int = NULL,
@CustomerId int = NULL,
@CustomerCategoryId int = NULL,
@CustomerStatusId INT = NULL,
@Language nvarchar(50) = 'ar-KW',
@AreaId int= NULL
as
SELECT     ROW_NUMBER() OVER (ORDER BY [dbo].[Crm_Invoice_Installments_Details].[ID]) as RowNum
          ,[SubsidiaryID]
          ,[dbo].[Crm_Invoice_Installments_Details].[ID] as InstallmentsDetailID
		  ,[dbo].[Crm_Invoice_Installments_Details].[Comment] as Comment
          ,[dbo].[Inv_Receipt_h].[ID] as InvoiceID
		  ,[Entry_No] as InvoiceNumber	 
		  ,[dbo].[Inv_Receipt_h].[Memo] as Memo
		  ,[Branch_ID]
		  ,[Crm_Invoice_Installments_Details].[StatusID] as InstallmentsDetailsStatusID
		  ,[dbo].[GL_Accounts].[AccountID] as CustomerID 
		  ,CASE WHEN  @Language = 'en-Us' THEN [dbo].[GL_Accounts].[Name] ELSE [dbo].[GL_Accounts].[Name_AR] END as CustomerName
		  ,CASE WHEN  @Language = 'en-Us' THEN [dbo].[mstr_Branch].[Name] ELSE [dbo].[mstr_Branch].[Name_AR] END as BranchName
		  ,[dbo].[GL_Accounts].[Phone] as Phone
		  ,[dbo].[mstr_Branch].Code as BranchCode
		  , convert(varchar(25),  [InstallmentDate], 120) as DueDate
		  ,[InstallmentValue] as Amount
		  ,(CASE  [Crm_Invoice_Installments_Details].[StatusID]
            WHEN 1 THEN  (Cast([dbo].[Crm_Invoice_Installments_Details].[InstallmentValue]  as nVarchar(100)))
            WHEN 2 THEN '0.000'  
			WHEN 3 THEN (Cast((select  ISNULL(Sum(Debit), '0.000') as Debit
				 From GL_VoucherDetails 
				 join GL_Vouchers on GL_VoucherDetails.VoucherID = GL_Vouchers.ID 
				 where 
				 GL_Vouchers.InvoiceInstallmentsDetailsId  = [dbo].[Crm_Invoice_Installments_Details].ID  AND
				 Header = 1 AND (GL_VoucherDetails.SetupAccountType  Is NULL))  as nVarchar(100)))
            END  ) as Paid
		  --, (CASE  [Crm_Invoice_Installments_Details].[StatusID]
    --        WHEN 1 THEN '0.000'
    --        WHEN 2 THEN [InstallmentValue]   
    --        END  ) as Unpaid
	 
		  ,(Select Top 1 GL_Vouchers.[ID] From GL_Vouchers where GL_Vouchers.InvoiceInstallmentsDetailsId =[dbo].[Crm_Invoice_Installments_Details].ID ) as VoucherID
           ,isnull((select sum(id2.InstallmentValue) from Crm_Invoice_Installments_Details id2 
		   inner join Crm_Invoice_Installments i2 on i2.ID=id2.InvoiceInstallmentsID
		   where i2.InvoiceID=[dbo].[Inv_Receipt_h].ID and id2.ID<=[Crm_Invoice_Installments_Details].ID and id2.StatusID=2),0)    as balance      
  FROM [dbo].[Inv_Receipt_h] 
  Join [dbo].[GL_Accounts] on [dbo].[GL_Accounts].[AccountID] = [dbo].[Inv_Receipt_h].[Vendor_ID]
  Join [dbo].[Crm_Invoice_Installments] on [dbo].[Inv_Receipt_h].[ID] = [dbo].[Crm_Invoice_Installments].[InvoiceID] 
  Join [dbo].[Crm_Invoice_Installments_Details] on [dbo].[Crm_Invoice_Installments_Details].[InvoiceInstallmentsID] = [dbo].[Crm_Invoice_Installments].[ID]  
  --LEFT JOIN [dbo].[GL_Vouchers] as Vouchers on Vouchers.[InvoiceInstallmentsDetailsId] = [dbo].[Crm_Invoice_Installments_Details].[ID]
  Left JOIN [dbo].[mstr_Branch] on [dbo].[mstr_Branch].ID = [dbo].[Inv_Receipt_h].Branch_ID 
  LEFT JOIN [dbo].[GL_VendorCategory] on [dbo].[GL_VendorCategory].[ID] = [dbo].[GL_Accounts].VendorCategoryID
    
 Where 
 ([dbo].[Inv_Receipt_h].[SubsidiaryID] = @SubsidaryID ) AND
 ([Crm_Invoice_Installments_Details].[StatusID] = @InstallmentStatusPaidId or @InstallmentStatusPaidId IS NULL ) AND
 ([GL_Accounts].[AccountID] = @CustomerId or @CustomerId IS NULL ) AND
 ([GL_Accounts].[AreaId] = @AreaId or @AreaId IS NULL ) AND
 ([GL_VendorCategory].[ID] = @CustomerCategoryId or @CustomerCategoryId IS NULL ) AND
 ([GL_Accounts].[CustomerStatusId] = @CustomerStatusId or @CustomerStatusId IS NULL ) AND
 ([dbo].[Inv_Receipt_h].[Branch_ID] = @BranchID OR @BranchID  is null) AND
 (([InstallmentDate] >= @DateFrom And [InstallmentDate] <= @DateTo)OR( @DateFrom IS NULL and @DateTo IS NULL) OR (@DateFrom Is NULL And [InstallmentDate] <= @DateTo))
GO
/****** Object:  StoredProcedure [dbo].[Report_GL_1]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROC [dbo].[Report_GL_1]
@GL_AssetsID	Int		=	Null
,@FromDate		Date	=	NULL
,@ToDate		Date	=	NULL

AS
BEGIN
	SELECT Code
       ,AssetName
       ,PurchaseDate
       ,00 AS opening_balance
       ,YTDDepreciation
       ,00 AS [sell \assetes]
       ,00 AS [buy \assetes]
       ,00 AS [Asset Depreciation]
       ,CurrentCost
       ,DepriciationPercentage
       ,CumulativDepriciation
FROM   GL_Assets

	WHERE
	(@GL_AssetsID IS NULL OR GL_Assets.ID = @GL_AssetsID)
	and
	(@FromDate IS NULL OR PurchaseDate >= @FromDate) 
	AND
	(@ToDate IS NULL OR PurchaseDate <= @ToDate)
	
END



GO
/****** Object:  StoredProcedure [dbo].[Report_GL_2]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROC [dbo].[Report_GL_2]
@GL_AssetsID	Int		=	Null
,@FromDate		Date	=	NULL
,@ToDate		Date	=	NULL

AS
BEGIN
	SELECT Code
       ,AssetName
       ,OriginalCost + CostCharge
       ,00 AS [sell\assets]
       ,YTDDepreciation
       ,00 AS [Asset Depreciation]
       ,00 AS [deprecations history]       
       ,CurrentCost

FROM   GL_Assets

	WHERE
	(@GL_AssetsID IS NULL OR GL_Assets.ID = @GL_AssetsID)
	and
	(@FromDate IS NULL OR PurchaseDate >= @FromDate) 
	AND
	(@ToDate IS NULL OR PurchaseDate <= @ToDate)
	
END



GO
/****** Object:  StoredProcedure [dbo].[Report_GL_Balance_Sheet]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Report_GL_Balance_Sheet]
@ToDate				 DATE = NULL
,@Level				 INT  = NULL
,@SubsidaryID		 INT = 1
,@Type				 INT = NULL
,@TargetMoves        INT = NULL
,@displayAccounts    INT = NULL
AS
BEGIN
        IF @Level=4
        SET @Type = 2 ;	
    
    DECLARE @ReceivablesAccount_ID     INT=NULL
    ,       @PayablesAccount_ID        INT=NULL
    
    SELECT @ReceivablesAccount_ID = ReceivableAccount
    ,      @PayablesAccount_ID = PayableAccount
    FROM   GL_Setup
    WHERE 
    (ReceivableAccount IS NOT NULL Or PayableAccount IS NOT null)


    -- Get Account Level : #Accounts_Level
    ;WITH Accounts_Level AS
    (
        -- root level
        SELECT GL_Accounts.AccountID
        ,      GL_Accounts.ParentID
        ,      1            AS [Level]
        ,      CAST('-'+CAST(AccountID AS NVARCHAR(10))+'-' AS NVARCHAR(100)) AS Hierarchy -- build hierarchy in format -L0-L1-L2-...-Ln--
        FROM   GL_Accounts
        WHERE  ParentID IS     NULL
        UNION ALL
        -- recursive join on parent, building hierarchy
        SELECT CurrentLevel.AccountID
        ,      CurrentLevel.ParentID
        ,      ParentLevel.[Level]+1  AS [Level]
        ,      CAST(
                   ParentLevel.Hierarchy+CAST(CurrentLevel.AccountID AS NVARCHAR(10))+'-' AS NVARCHAR(100)
               )                      AS Hierarchy
        FROM   GL_Accounts CurrentLevel
               JOIN Accounts_Level ParentLevel
                    ON  CurrentLevel.ParentID = ParentLevel.AccountID
    )
    
    SELECT *
    INTO   #AccountsLevel
    FROM   Accounts_Level

/*
    select Count(#Accounts_Level.AccountID),Count(Gl_Accounts.AccountID)
    from Gl_Accounts
    Left join #Accounts_Level
    on #Accounts_Level.AccountID = Gl_Accounts.AccountID 
 */
---------------------------------------------------------------------------------------------------
-- Get Details :#GL_VoucherDetails
    Select
		 D.AccountNoID								    AccountNoID
	    , #AccountsLevel.Hierarchy					    Hierarchy
	    , ISNULL(SUM(Debit), 00)					    Debit
	    , ISNULL(SUM(Credit), 00)					    Credit
	    , ISNULL(SUM(Debit), 00) - ISNULL(SUM(D.Credit), 00) Balance 

    Into
	    #GL_VoucherDetails
    From
	    GL_VoucherDetails D
    Left Join #AccountsLevel
	    On #AccountsLevel.AccountID = D.AccountNoID
    Where
			 ( D.VoucherID in 
					   (
						  Select 
						  ID
						  from GL_Vouchers H
						  where
						   H.ID = D.VoucherID
						    
						  And 
						  (@ToDate is null Or Cast(H.VouhcerDate AS Date) <= @ToDate)
						  And
						  (@SubsidaryID is null Or H.SubsidaryID in (@SubsidaryID) )
						  And 
						  (@TargetMoves is null Or H.Posted = @TargetMoves) 
					   ) 
			 )
    
Group By
D.AccountNoID
,#AccountsLevel.Hierarchy
order by AccountNoID

 

    -- Get All Acounts With It's Value : #All_Accounts
    SELECT GL_Accounts.AccountID
    ,      GL_Accounts.Code
    ,      SUM(Debit)  AS [Debit]
    ,      SUM(Credit)  AS [Credit]
    INTO   #All_Accounts
    FROM   GL_Accounts 
           LEFT JOIN #AccountsLevel
                ON  #AccountsLevel.AccountID = GL_Accounts.AccountID
    ,      #GL_VoucherDetails
    WHERE  #GL_VoucherDetails.Hierarchy LIKE #AccountsLevel.Hierarchy+'%'
    GROUP BY
           GL_Accounts.AccountID
    ,      GL_Accounts.Code




	                -- Get Accounts Related to @SubsidaryID

                SELECT *
                INTO #GL_Accounts
                FROM
                (
                 SELECT *
                 FROM GL_Accounts
                 WHERE GL_Accounts.LevelNo <= 3
                 UNION ALL
                 SELECT *
                 FROM GL_Accounts
                 WHERE GL_Accounts.LevelNo >= 4
                       AND (GL_Accounts.AccountID IN
                 (
                  SELECT AccountID
                  FROM GL_AccountSubsidiary
                  WHERE GL_AccountSubsidiary.AccountID = GL_Accounts.AccountID
                        AND (@SubsidaryID IS NULL
                             OR GL_AccountSubsidiary.SubsidiaryID = @SubsidaryID)
                 ))
                ) GL_Accounts_SubsidaryID


    -- Get Accounts_Balance_Hierarchy
    SELECT Gl_Accounts.AccountID
    ,      GL_Accounts.Code
    ,      Case when (Gl_Accounts.AccountID = @ReceivablesAccount_ID ) OR (Gl_Accounts.AccountID = @PayablesAccount_ID) then 2 else  GL_Accounts.Type  End Type
    ,      GL_Accounts.Type Type2
    ,      GL_Accounts.LevelNo
    ,      GL_Accounts.Name
    ,      GL_Accounts.Name_AR
    ,      #All_Accounts.Debit
    ,      #All_Accounts.Credit
,      CASE 
                WHEN Type=1
			  THEN ISNULL(
 						  ISNULL(Debit , 00) - ISNULL(Credit , 00)
                     ,   0
                     )
                ELSE 0
           END  AS Main_Account
		 Into #All_Accounts_Final
    FROM  #GL_Accounts  GL_Accounts
          left JOIN #All_Accounts
                ON  #All_Accounts.AccountID = GL_Accounts.AccountID



select 
CASE WHEN Code LIKE '1%' THEN '1' WHEN Code LIKE '2%' Or   Code LIKE '3%' Then  '2 & 3'   WHEN Code LIKE '4%' Or   Code LIKE '5%' Then  '4 & 5'    END AccountType
,*
    ,      CASE 
                WHEN  (Type=2) 
					THEN ISNULL(
						   ISNULL(Debit , 00) - ISNULL(Credit , 00)
                     ,   0
                     )
                ELSE 0
           END  AS Sub_Account
 INTO #All_Accounts_Final_1_2_3_4_5
 from #All_Accounts_Final
    WHERE  
			 
			   (
                            @Type Is Null
                            Or Type = @Type)
                --And (
                --                @Level = 4
                --                Or @Level Is Null
                --                Or	 LevelNo <= @Level)
 
                And (LevelNo != 0)
				           AND (@displayAccounts  IS NULL OR  Debit- Credit<>0)

    ORDER BY
           Code
 		  

--SELECT * FROM #All_Accounts_Final_1_2_3_4_5 ORDER BY code

  
DECLARE @Sum_4_5 decimal(18,6) = NULL ;		       
SELECT @Sum_4_5 = sum(ISNull(Sub_Account,0))   FROM #All_Accounts_Final_1_2_3_4_5 WHERE AccountType = '4 & 5' GROUP BY AccountType 

set @Sum_4_5 = CASE WHEN @Sum_4_5 IS NULL THEN 0 ELSE @Sum_4_5 END 
 

 SELECT * 
 INTO #All_Accounts_Final_1 
 FROM #All_Accounts_Final_1_2_3_4_5 WHERE AccountType = '1' 
 
 
 SELECT * 
 INTO #All_Accounts_Final_2_3 
 FROM #All_Accounts_Final_1_2_3_4_5 WHERE AccountType = '2 & 3' 

 
 
   IF(@Sum_4_5 > 0) 
   BEGIN
   INSERT #All_Accounts_Final_1
   SELECT '1','','','','','1','Loss',N'خساره',null,null,@Sum_4_5,@Sum_4_5
   END 
   ELSE
   BEGIN
      INSERT #All_Accounts_Final_2_3
   SELECT '2 & 3','','','','','1','Profit',N'ربح',null,null,@Sum_4_5,@Sum_4_5
   END 

 --SELECT * FROM #All_Accounts_Final_1  ORDER BY CASE WHEN Code IS NULL THEN 1 ELSE 0 END 
 --SELECT * FROM #All_Accounts_Final_2_3 ORDER BY CASE WHEN Code IS NULL THEN 1 ELSE 0 END 

 SELECT *
 INTO #All_Accounts_Final_1_2_3
 FROM
 ( 
 SELECT * FROM #All_Accounts_Final_1
 UNION ALL
 SELECT * FROM #All_Accounts_Final_2_3
 ) Finally


SELECT 
CASE WHEN Code = '' THEN 1 ELSE 0 END Sort
, *
 FROM #All_Accounts_Final_1_2_3
 WHERE
                   (
                                @Level = 4
                                Or @Level Is Null
                                Or	 LevelNo <= @Level)
ORDER BY  AccountType,CASE WHEN Code = '' THEN 1 ELSE 0 END ,Code
 
    


END
 
GO
/****** Object:  StoredProcedure [dbo].[Report_GL_Balance_Sheet_dtsMain]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Proc [dbo].[Report_GL_Balance_Sheet_dtsMain]
     @FromDate    DATE = Null
   , @ToDate      DATE = '20181029'
   , @Level       INT  = 1
   , @SubsidaryID INT  = 63
   , @Type        INT  = Null
As
         Begin
             If @Level = 4
                 Begin


                     Set @Type = 2
                 End

/************************************
- Get Account Level : #Accounts_Level
************************************/

                     ;
             With Accounts_Level
                  As (

/**********
 root level
**********/

                  Select
                         GL_Accounts.AccountID
                       , GL_Accounts.ParentID
                       , 1 As                                                              Level
                       , CAST('-'+CAST(AccountID As NVARCHAR(10))+'-' As NVARCHAR(100)) As Hierarchy
                  From
                       GL_Accounts
                  Where ParentID Is Null
                  Union All
  
/********************************************
 recursive join on parent, building hierarchy
********************************************/

                  Select
                         CurrentLevel.AccountID
                       , CurrentLevel.ParentID
                       , ParentLevel.Level + 1 As                                                                         Level
                       , CAST(ParentLevel.Hierarchy+CAST(CurrentLevel.AccountID As NVARCHAR(10))+'-' As NVARCHAR(100)) As Hierarchy
                  From
                       GL_Accounts CurrentLevel
                  Join Accounts_Level ParentLevel
                       On CurrentLevel.ParentID = ParentLevel.AccountID)
                  Select
                         *
                  Into
                       #Accounts_Level
                  From
                       Accounts_Level

/**************************************************************************************
 Get Details
 #Details
**************************************************************************************/

             Select
                    GL_Accounts.AccountID
                  , GL_Accounts.Code
                  , Gl_Accounts.Name
                  , GL_Vouchers.VouhcerDate
                  , #Accounts_Level.Hierarchy
                  , IsNull(SUM(GL_VoucherDetails.Debit), 00) As                                             Debit
                  , IsNull(SUM(GL_VoucherDetails.Credit), 00) As                                            Credit
                  , IsNull(SUM(GL_VoucherDetails.Debit), 00) - IsNull(SUM(GL_VoucherDetails.Credit), 00) As Balance
             Into
                  #Details
             From
                  GL_Accounts
             Left Join GL_VoucherDetails
                  On GL_VoucherDetails.AccountNoID = GL_Accounts.AccountID
             Left Join GL_Vouchers
                  On GL_Vouchers.ID = GL_VoucherDetails.VoucherID
             Left Join #Accounts_Level
                  On #Accounts_Level.AccountID = GL_Accounts.AccountID
             Where
                         (
                                     @SubsidaryID Is Null
                                     Or GL_Vouchers.SubsidaryID In(@SubsidaryID))
             And GL_Vouchers.Posted = 1
             Group By
                      GL_Accounts.AccountID
                    , GL_Accounts.Code
                    , Gl_Accounts.Name
                    , GL_Vouchers.VouhcerDate
                    , #Accounts_Level.Hierarchy
       
/*********************************
 Get All Acounts With It's Value !
*********************************/

             Select
                    All_Accounts.AccountID
                  , All_Accounts.Code
                  , IsNull(SUM(#Details.Debit), 00) As   Debit
                  , IsNull(SUM(#Details.Credit), 00) As  Credit
                  , IsNull(SUM(#Details.Balance), 00) As Balance
             Into
                  #All_Accounts
             From
                  GL_Accounts All_Accounts
             Left Join #Accounts_Level
                  On #Accounts_Level.AccountID = All_Accounts.AccountID
                , #Details
             Where
                         #Details.Hierarchy Like #Accounts_Level.Hierarchy+'%'
                         And (
                                         @FromDate Is Null
                                         Or #Details.VouhcerDate >= @FromDate)
                         And (
                                         @ToDate Is Null
                                         Or #Details.VouhcerDate <= @ToDate)
             Group By
                      All_Accounts.AccountID
                    , All_Accounts.Code
       
/******************************
 Get Accounts_Balance_Hierarchy
******************************/

             Select
                    GL_Accounts.Code
                  , GL_Accounts.LevelNo
                  , GL_Accounts.Name
                  , IsNull(#All_Accounts.Balance, 00) As                            Balance
                  , ISNull(Case
                               When IsNull(#All_Accounts.Debit, 00) - IsNull(#All_Accounts.Credit, 00) > 0
                               Then IsNull(#All_Accounts.Debit, 00) - IsNull(#All_Accounts.Credit, 00)
                               Else 0
                           End, 0) As                                               Balance_Debit
                  , ISNull(Case
                               When IsNull(#All_Accounts.Credit, 00) - IsNull(#All_Accounts.Debit, 00) > 0
                               Then IsNull(#All_Accounts.Credit, 00) - IsNull(#All_Accounts.Debit, 00)
                               Else 0
                           End, 0) As                                               Balance_Credit
             From
                  GL_Accounts
             Left Join #All_Accounts
                  On #All_Accounts.AccountID = GL_Accounts.AccountID
             Where
                         (
                                     @Type Is Null
                                     Or GL_Accounts.Type = @Type)
                         And (
                                         @Level = 4
                                         Or @Level Is Null
                                         Or GL_Accounts.LevelNo <= @Level)
                         And (
                                         @Level = 4
           
/*****************
OR  @Level IS NULL
*****************/

                                         Or GL_Accounts.LevelNo != 0)
                         And #All_Accounts.Debit - #All_Accounts.Credit <> 0
             Order By
                      #All_Accounts.Code
         End
 
GO
/****** Object:  StoredProcedure [dbo].[Report_GL_Balance_Sheet_dtsMain_1]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Report_GL_Balance_Sheet_dtsMain_1]
@ToDate				 Date	=	'20180630'
,@Level				 int	=	Null
,@SubsidaryID      int	=	Null

AS
BEGIN
						
			Create Table #Accounts_Balance_Hierarchy 
				(
					AccountID			int
					,ParentID			Int
					,Code			    Nvarchar(MAX)
					,Type				Int
					,Level			    NvarchAR(MAX)
					,[Code For View]    Nvarchar(MAX)
					,Name				Nvarchar(MAX)
					,Name_Ar			Nvarchar(MAX)
					,[Name For View]    Nvarchar(MAX)
					,Debit			    Numeric(18,6)
					,Credit			    Numeric(18,6)
					,Balance		    Numeric(18,6)
					,Balance_Debit		Numeric(18,6)
					,Balance_Credit		Numeric(18,6)
					,BeginBalance_Debit		    Numeric(18,6)								
					,BeginBalance_Credit		Numeric(18,6)								
					,BeginBalance_Balance		Numeric(18,6)								
													
				)

								
				Insert into #Accounts_Balance_Hierarchy 
				(	 AccountID	
					,ParentID			
					,Code		
					,Type	     
					,Level			     
					,[Code For View]     
					,NAME
					,NAme_Ar				 
					,[Name For View]     
					,Debit			   
					,Credit			    
					,Balance
					,Balance_Debit
					,Balance_Credit
					,BeginBalance_Debit
					,BeginBalance_Credit
					,BeginBalance_Balance
													     
				)
				exec Accounts_Balance_Hierarchy
				 @ToDate=@ToDate
				,@Level=@Level
				,@SubsidaryID=@SubsidaryID
				
				
				
				SELECT #Accounts_Balance_Hierarchy.AccountID
				       ,#Accounts_Balance_Hierarchy.ParentID
				       ,#Accounts_Balance_Hierarchy.Code
				       ,#Accounts_Balance_Hierarchy.Level
				       ,#Accounts_Balance_Hierarchy.[Code For View]
				       ,#Accounts_Balance_Hierarchy.Name
				       ,#Accounts_Balance_Hierarchy.Name_Ar
				       ,#Accounts_Balance_Hierarchy.[Name For View]
				       ,#Accounts_Balance_Hierarchy.Type
				       ,CASE 
				             WHEN @Level IS NULL and Type  = 1 THEN #Accounts_Balance_Hierarchy.Balance
				             WHEN @Level IS NOT NULL AND (Level < @Level and level != 0 ) THEN #Accounts_Balance_Hierarchy.Balance
				             ELSE 00
				        END AS [Main Account]
				       ,CASE 
				             WHEN @Level IS NULL and  Type  = 2 THEN #Accounts_Balance_Hierarchy.Balance
				             WHEN @Level IS NOT NULL AND (Level >= @Level  or Level =0)THEN #Accounts_Balance_Hierarchy.Balance
				             ELSE 00
				        END AS [Sub Account]

				       ,CASE 
				             WHEN #Accounts_Balance_Hierarchy.Code LIKE '1%' THEN 'Assets'
				             WHEN #Accounts_Balance_Hierarchy.Code LIKE '2%' OR #Accounts_Balance_Hierarchy.Code LIKE '3%' THEN 
				             'liabilities and equity'
				             ELSE NULL
				        END AS [Group Type]
				        ,Balance_Debit
				        ,Balance_Credit

				FROM   #Accounts_Balance_Hierarchy
       
				WHERE  (
				           #Accounts_Balance_Hierarchy.Code LIKE '1%'
				       )
				ORDER BY
				       #Accounts_Balance_Hierarchy.Code
				       
 		       
 
 

END
 
GO
/****** Object:  StoredProcedure [dbo].[Report_GL_Balance_Sheet_dtsMain_2]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Report_GL_Balance_Sheet_dtsMain_2]
@ToDate				 Date	=	Null
,@Level				 int	=	4
,@SubsidaryID		 int	=	Null

AS
BEGIN
						
					Create Table #Accounts_Balance_Hierarchy 
				(
					AccountID			int
					,ParentID			Int
					,Code			    Nvarchar(MAX)
					,Type				Int
					,Level			    NvarchAR(MAX)
					,[Code For View]    Nvarchar(MAX)
					,Name				Nvarchar(MAX)
					,Name_Ar     		Nvarchar(MAX)
					,[Name For View]    Nvarchar(MAX)
					,Debit			    Numeric(18,6)
					,Credit			    Numeric(18,6)
					,Balance		    Numeric(18,6)
					,Balance_Debit		Numeric(18,6)
					,Balance_Credit		Numeric(18,6)
					,BeginBalance_Debit		    Numeric(18,6)								
					,BeginBalance_Credit		Numeric(18,6)								
					,BeginBalance_Balance		Numeric(18,6)								
													
				)

								
				Insert into #Accounts_Balance_Hierarchy 
				(	 AccountID	
					,ParentID			
					,Code		
					,Type	     
					,Level			     
					,[Code For View]     
					,Name				 
					,Name_Ar				 
					,[Name For View]     
					,Debit			   
					,Credit			    
					,Balance
					,Balance_Debit
					,Balance_Credit
					,BeginBalance_Debit
					,BeginBalance_Credit
					,BeginBalance_Balance
													     
				)
				exec Accounts_Balance_Hierarchy
				 @ToDate=@ToDate
				,@Level=@Level
				,@SubsidaryID=@SubsidaryID
				
				
				SELECT #Accounts_Balance_Hierarchy.AccountID
				       ,#Accounts_Balance_Hierarchy.ParentID
				       ,#Accounts_Balance_Hierarchy.Code
				       ,#Accounts_Balance_Hierarchy.Level
				       ,#Accounts_Balance_Hierarchy.[Code For View]
				       ,#Accounts_Balance_Hierarchy.Name
				       ,#Accounts_Balance_Hierarchy.Name_Ar
				       ,#Accounts_Balance_Hierarchy.[Name For View]
				       ,#Accounts_Balance_Hierarchy.Type
				       ,CASE 
				             WHEN @Level IS NULL and Type  = 1 THEN #Accounts_Balance_Hierarchy.Balance
				             WHEN @Level IS NOT NULL AND (Level < @Level and level != 0 ) THEN #Accounts_Balance_Hierarchy.Balance
				             ELSE 00
				        END AS [Main Account]
				       ,CASE 
				             WHEN @Level IS NULL and  Type  = 2 THEN #Accounts_Balance_Hierarchy.Balance
				             WHEN @Level IS NOT NULL AND (Level >= @Level  or Level =0)THEN #Accounts_Balance_Hierarchy.Balance
				             ELSE 00
				        END AS [Sub Account]


				       ,CASE 
				             WHEN #Accounts_Balance_Hierarchy.Code LIKE '1%' THEN 'Assets'
				             WHEN #Accounts_Balance_Hierarchy.Code LIKE '2%' OR #Accounts_Balance_Hierarchy.Code LIKE '3%' THEN 
				             'liabilities and equity'
				             ELSE NULL
				        END AS [Group Type]
				        ,Balance_Debit
				        ,Balance_Credit				        
				FROM   #Accounts_Balance_Hierarchy
				
       
				WHERE  (
				          #Accounts_Balance_Hierarchy.Code LIKE '2%'
				       OR  #Accounts_Balance_Hierarchy.Code LIKE '3%'
				       )
				ORDER BY
				       #Accounts_Balance_Hierarchy.Code
 

END
 
 
GO
/****** Object:  StoredProcedure [dbo].[Report_GL_Budget]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create PROC [dbo].[Report_GL_Budget] @ToDate      DATE = Null
                                        , @Level       INT  = NULL
                                        , @SubsidaryID INT  = NULL
                                        , @Type        INT  = NULL
                                        , @TargetMoves INT  = NULL
                                        , @ClearZero   INT  = NULL
AS
    BEGIN
        IF @Level = 4
            SET @Type = 2;

        -- Get Account Level : #Accounts_Level;
        WITH Accounts_Level
             AS (
             -- root level
             SELECT GL_Accounts.AccountID
                  , GL_Accounts.ParentID
                  , 1 AS                                                                  [Level]
                  , CAST('-' + CAST(AccountID AS NVARCHAR(10)) + '-' AS NVARCHAR(100)) AS Hierarchy -- build hierarchy in format -L0-L1-L2-...-Ln--
             FROM GL_Accounts
             WHERE ParentID IS NULL
             UNION ALL
             -- recursive join on parent, building hierarchy
             SELECT CurrentLevel.AccountID
                  , CurrentLevel.ParentID
                  , ParentLevel.[Level] + 1 AS                                                                           [Level]
                  , CAST(ParentLevel.Hierarchy + CAST(CurrentLevel.AccountID AS NVARCHAR(10)) + '-' AS NVARCHAR(100)) AS Hierarchy
             FROM GL_Accounts CurrentLevel
                  JOIN Accounts_Level ParentLevel
                  ON CurrentLevel.ParentID = ParentLevel.AccountID)
             SELECT Accounts_Level.AccountID
                  , Accounts_Level.ParentID
                  , Accounts_Level.Level
                  , Accounts_Level.Hierarchy
             INTO #AccountsLevel
             FROM Accounts_Level

        DECLARE @ReceivablesAccount_ID INT= NULL , @PayablesAccount_ID INT= NULL

        SELECT @ReceivablesAccount_ID = ReceivableAccount
             , @PayablesAccount_ID = PayableAccount
        FROM GL_Setup
        WHERE(ReceivableAccount IS NOT NULL
              OR PayableAccount IS NOT NULL)

        ---------------------------------------------------------------------------------------------------
        -- Get Details :#GL_VoucherDetails
        SELECT D.AccountNoID                                        AccountNoID
             , #AccountsLevel.Hierarchy                             Hierarchy
             , ISNULL(SUM(Debit) , 00)                              Debit
             , ISNULL(SUM(Credit) , 00)                             Credit
             , ISNULL(SUM(Debit) , 00) - ISNULL(SUM(D.Credit) , 00) Balance
        INTO #GL_VoucherDetails
        FROM GL_VoucherDetails D
             LEFT JOIN #AccountsLevel
             ON #AccountsLevel.AccountID = D.AccountNoID
        WHERE(D.VoucherID IN
        (
         SELECT ID
         FROM GL_Vouchers H
         WHERE H.ID = D.VoucherID
               AND (@SubsidaryID IS NULL
                    OR H.SubsidaryID IN(@SubsidaryID))
         AND (@ToDate IS NULL
              OR CAST(H.VouhcerDate AS DATE) <= @ToDate)
         AND (@TargetMoves IS NULL
              OR H.Posted = @TargetMoves)
        ))
        GROUP BY D.AccountNoID
               , #AccountsLevel.Hierarchy
        ORDER BY AccountNoID

        -- Get All Acounts With It's Value : #All_Accounts
        SELECT GL_Accounts.AccountID
             , GL_Accounts.Code
             , SUM(Debit) AS  [Debit]
             , SUM(Credit) AS [Credit]
			 ,LEFT(GL_Accounts.Code, 1) frtchar
        INTO #All_Accounts
        FROM GL_Accounts
             LEFT JOIN #AccountsLevel
             ON #AccountsLevel.AccountID = GL_Accounts.AccountID , 
             #GL_VoucherDetails
        WHERE #GL_VoucherDetails.Hierarchy LIKE #AccountsLevel.Hierarchy + '%'
        GROUP BY GL_Accounts.AccountID
               , GL_Accounts.Code

        --SELECT Sum(Debit),Sum(Credit),Sum(Debit)-Sum(Credit),Count(1) FROM #All_Accounts
        -- Get Accounts_Balance_Hierarchy
        -- Get Accounts Related to @SubsidaryID

        SELECT *
        INTO #GL_Accounts
        FROM
        (
         SELECT *
         FROM GL_Accounts
         WHERE GL_Accounts.LevelNo <= 3
         UNION ALL
         SELECT *
         FROM GL_Accounts
         WHERE GL_Accounts.LevelNo >= 4
               AND (GL_Accounts.AccountID IN
         (
          SELECT AccountID
          FROM GL_AccountSubsidiary
          WHERE GL_AccountSubsidiary.AccountID = GL_Accounts.AccountID
                AND (@SubsidaryID IS NULL
                     OR GL_AccountSubsidiary.SubsidiaryID = @SubsidaryID)
         ))
        ) GL_Accounts_SubsidaryID

        SELECT Gl_Accounts.AccountID
             , GL_Accounts.Code
             , CASE
                   WHEN(Gl_Accounts.AccountID = @ReceivablesAccount_ID)
                       OR (Gl_Accounts.AccountID = @PayablesAccount_ID)
                   THEN 2
                   ELSE GL_Accounts.Type
               END              Type
             , GL_Accounts.Type Type2
             , GL_Accounts.LevelNo
             , GL_Accounts.Name
             , GL_Accounts.Name_AR
             , #All_Accounts.Debit
             , #All_Accounts.Credit
             , CASE
                   WHEN frtchar in (1,4)
                   THEN ISNULL(Debit , 00) - ISNULL(Credit , 00)
                   ELSE ISNULL(Credit , 00) - ISNULL(Debit , 00)
               END AS           [ActualAmount]
           , frtchar 
        INTO #All_Accounts_Final
        FROM #GL_Accounts GL_Accounts
             LEFT JOIN #All_Accounts
             ON #All_Accounts.AccountID = GL_Accounts.AccountID
			 Select * from #All_Accounts_Final
        --SELECT *
        --     , CASE
        --           WHEN(Type = 2)
        --           THEN ISNULL(CASE
        --                           WHEN ISNULL(Debit , 00) - ISNULL(Credit , 00) > 0
        --                           THEN ISNULL(Debit , 00) - ISNULL(Credit , 00)
        --                           ELSE 0
        --                       END , 0)
        --           ELSE 0
        --       END AS [Balance_Debit_Transaction]
        --     , CASE
        --           WHEN(Type = 2)
        --           THEN ISNULL(CASE
        --                           WHEN ISNULL(Credit , 00) - ISNULL(Debit , 00) > 0
        --                           THEN ISNULL(Credit , 00) - ISNULL(Debit , 00)
        --                           ELSE 0
        --                       END , 0)
        --           ELSE 0
        --       END AS [Balance_Credit_Transaction]
        --INTO #T
        --FROM #All_Accounts_Final
        --WHERE(@Type IS NULL
        --      OR Type = @Type)
        --     AND (@Level = 4
        --          OR @Level IS NULL
        --          OR LevelNo <= @Level)
        --     AND (LevelNo != 0)
        --     AND (@ClearZero IS NULL
        --          OR (@ClearZero = 1
        --              AND Debit - Credit <> 0))

        --SELECT *
        --FROM #t
        --ORDER BY Code
    END
GO
/****** Object:  StoredProcedure [dbo].[Report_Gl_Customer_Vendor_Balance]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Report_Gl_Customer_Vendor_Balance] @FromDate         DATETIME      = '2019-01-01'
                                            , @ToDate           DATETIME          = '2019-01-01'
                                            , @IsVendor         BIT          = 0
                                            , @SubsidaryID      INT          = 73
                                            , @Level            NVARCHAR(50) = NULL
                                            , @Type             INT          = NULL
                                            , @SalesMan         INT          = NULL
                                            , @Area             INT          = NULL
                                            , @CustomerCatID    INT          = NULL
                                            , @FromBalance      INT          = NULL
                                            , @ToBalance        INT          = NULL
                                            , @CustomerStatusID INT          = NULL
											, @TargetMoves INT  = NULL
											,@Payment_Type int =NULL
											,@BrachID int =NULL
											,@ClearZero int=NULL
AS
    BEGIN
        IF @Level = '4'
            SET @Type = 2;
	 if(@FromDate Is NOT NULL)
		  Set @FromDate = @FromDate + ' 00:00:00'
	 if(@ToDate Is NOT NULL)
		   Set @ToDate = @ToDate + ' 23:59:59'
	  IF OBJECT_ID('TblFinal_Select') IS NOT NULL
begin
        drop table TblFinal_Select
end
        --***************************************************************************************
        --	Get #All_Account_BeginBalance
        --***************************************************************************************

        SELECT GL_Accounts.AccountID
             , GL_Accounts.Code
             , Gl_Accounts.Name
			 ,(Select ISNULL(SUM(AV.Debit)   , 00) 
			 from AV_GL_TransactionDetails AV 
			 where  AV.VouhcerDate < @FromDate and AV.AccountNoID = GL_Accounts.AccountID 
			 AND (@BrachID IS NULL  OR AV.BranchID = @BrachID)
			   ANd (@TargetMoves IS NULL OR AV.Posted = @TargetMoves)
			 ) AS BeginBalance_Debit 
             , (Select ISNULL(SUM(AV.Credit)   , 00) 
			 from AV_GL_TransactionDetails AV  where  AV.VouhcerDate < @FromDate 
			 and AV.AccountNoID = GL_Accounts.AccountID and    
			   (@BrachID IS NULL  OR AV.BranchID = @BrachID)
			   ANd (@TargetMoves IS NULL OR AV.Posted = @TargetMoves)) AS BeginBalance_Credit
             , (Select ISNULL(SUM(AV.Debit)   , 00)-ISNULL(SUM(AV.Credit)   , 00)  
			 from AV_GL_TransactionDetails AV  where  AV.VouhcerDate < @FromDate
			 and AV.AccountNoID = GL_Accounts.AccountID and    
			( GL_Accounts.AccountID= ACCS.AccountID)  
			 
			 AND (@BrachID IS NULL  OR AV.BranchID = @BrachID)
			   ANd (@TargetMoves IS NULL OR AV.Posted = @TargetMoves) ) AS BeginBalance_Balance
			   ,accs.SubsidiaryID
        INTO #All_Account_BeginBalance
        FROM GL_Accounts,GL_AccountSubsidiary ACCS
        WHERE 		      
			( GL_Accounts.AccountID= ACCS.AccountID)   and 		 
			(@SubsidaryID IS NULL OR ACCS.SubsidiaryID =@SubsidaryID) and
			    isnull(Gl_accounts.IsVendor,0) = 0 
			   and  isnull(Gl_accounts.IsHidden,0) = 1 
             AND (@CustomerStatusID IS NULL
                  OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
		     -- and GL_Vouchers
				 
         
     --   HAVING ISNULL(SUM(GL_VoucherDetails.Debit) , 00) - ISNULL(SUM(GL_VoucherDetails.Credit) , 00) <> 0
        ORDER BY GL_Accounts.Code





		--sELECT * FROM #All_Account_BeginBalance
		--RETURN 

        --************************
        --	Get #All_Accounts
        --************************
		
        SELECT GL_Accounts.AccountID
             , GL_Accounts.Code
             , Gl_Accounts.Name
			 ,(Select ISNULL(SUM(AV.Debit)   , 00) 
			 from AV_GL_TransactionDetails AV 
			 where    (@FromDate IS NULL  OR av.VouhcerDate >= @FromDate)
             AND (@ToDate IS NULL    OR av.VouhcerDate <= @ToDate)  
			 and ( AV.AccountNoID = GL_Accounts.AccountID )
			AND (@BrachID IS NULL  OR AV.BranchID = @BrachID)
			   ANd (@TargetMoves IS NULL OR AV.Posted = @TargetMoves)
			 ) AS Debit 
			
             , (Select ISNULL(SUM(AV.Credit)   , 00) 
			 from AV_GL_TransactionDetails AV  where 
			 
			 AV.AccountNoID = GL_Accounts.AccountID 
			 AND (@FromDate IS NULL   OR av.VouhcerDate >= @FromDate)
             AND (@ToDate IS NULL  OR av.VouhcerDate < @ToDate) 
			and  (@BrachID IS NULL  OR AV.BranchID = @BrachID)
			   ANd (@TargetMoves IS NULL OR AV.Posted = @TargetMoves)) AS Credit
             , (Select ISNULL(SUM(AV.Debit)   , 00)-ISNULL(SUM(AV.Credit)   , 00)  
			 from AV_GL_TransactionDetails AV  where 
			   (@FromDate IS NULL
                  OR av.VouhcerDate >= @FromDate)
             AND (@ToDate IS NULL
			
                  OR av.VouhcerDate < @ToDate) 
			 and AV.AccountNoID = GL_Accounts.AccountID and    
			( GL_Accounts.AccountID= ACCS.AccountID)  
			 
			 AND (@BrachID IS NULL  OR AV.BranchID = @BrachID)
			   ANd (@TargetMoves IS NULL OR AV.Posted = @TargetMoves) ) AS Balance
			   ,accs.SubsidiaryID
        INTO #All_Accounts
        FROM GL_Accounts,GL_AccountSubsidiary ACCS             
        WHERE 		      
			( GL_Accounts.AccountID= ACCS.AccountID)   and 		 
			(@SubsidaryID IS NULL OR ACCS.SubsidiaryID =@SubsidaryID) and
			    isnull(Gl_accounts.IsVendor,0) = 0 
			   and  isnull(Gl_accounts.IsHidden,0) = 1 
			   
             AND (@CustomerStatusID IS NULL
                  OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
		      
				 
         
     --   HAVING ISNULL(SUM(GL_VoucherDetails.Debit) , 00) - ISNULL(SUM(GL_VoucherDetails.Credit) , 00) <> 0
        ORDER BY GL_Accounts.Code
		--select sum(Balance) from #All_Accounts
		--return
  --*****************************
        --	Get Accounts_Balance_Hierarchy
        --*****************************
		 SELECT mainSelect.Name
              , mainSelect.Name_AR
              , mainSelect.Code
              , All_Account_BeginBalance_AccountID
              , All_Accounts_AccountID
              , mainSelect.Level
              , mainSelect.Type
              , mainSelect.IsVendor
              , mainSelect.Opening_Balance_Debit
              , mainSelect.Opening_Balance_Credit
              , mainSelect.Debit
              , mainSelect.Credit
              , CASE
                    WHEN mainSelect.Opening_Balance_Debit - mainSelect.Opening_Balance_Credit + mainSelect.Debit - mainSelect.Credit > 0
                    THEN mainSelect.Opening_Balance_Debit - mainSelect.Opening_Balance_Credit + mainSelect.Debit - mainSelect.Credit
                    ELSE 0
                END AS Ending_Balance_Debit
              , CASE
                    WHEN mainSelect.Opening_Balance_Debit - mainSelect.Opening_Balance_Credit + mainSelect.Debit - mainSelect.Credit < 0
                    THEN mainSelect.Opening_Balance_Debit - mainSelect.Opening_Balance_Credit + mainSelect.Debit - mainSelect.Credit
                    ELSE 0
                END AS Ending_Balance_Credit
				,SubsidiaryID
				INTO TblFinal_Select
         FROM
         (
          SELECT GL_Accounts.Name
               , GL_Accounts.Name_AR
               , GL_Accounts.Code
               , GL_Accounts.LevelNo AS                 Level
               , GL_Accounts.Type
               , GL_Accounts.IsVendor
               , #All_Account_BeginBalance.AccountID AS All_Account_BeginBalance_AccountID
               , #All_Accounts.AccountID AS             All_Accounts_AccountID
               , ISNULL(CASE
                            WHEN ISNULL(#All_Account_BeginBalance.BeginBalance_Debit , 00) - ISNULL(#All_Account_BeginBalance.BeginBalance_Credit , 00) > 0
                            THEN ISNULL(#All_Account_BeginBalance.BeginBalance_Debit , 00) - ISNULL(#All_Account_BeginBalance.BeginBalance_Credit , 00)
                            ELSE 0
                        END , 0) AS                     Opening_Balance_Debit
			   --,(select   ISNULL(SUM(dbo.AV_AccountBalance.Credit),0),ISNULL(SUM(dbo.AV_AccountBalance.Debit),0) from dbo.AV_AccountBalance where dbo.AV_AccountBalance.AccountID=10149 and dbo.AV_AccountBalance.SubsidaryID=1)
               , ISNULL(CASE
                            WHEN ISNULL(#All_Account_BeginBalance.BeginBalance_Credit , 00) - ISNULL(#All_Account_BeginBalance.BeginBalance_Debit , 00) > 0
                            THEN ISNULL(#All_Account_BeginBalance.BeginBalance_Credit , 00) - ISNULL(#All_Account_BeginBalance.BeginBalance_Debit , 00)
                            ELSE 0
                        END , 0) AS                     Opening_Balance_Credit
               , ISNULL(#All_Accounts.Debit , 00) AS    Debit
               , ISNULL(#All_Accounts.Credit , 00) AS   Credit
			   ,#All_Accounts.SubsidiaryID
			   
          FROM GL_Accounts
               LEFT JOIN #All_Account_BeginBalance
               ON #All_Account_BeginBalance.AccountID = GL_Accounts.AccountID
               LEFT JOIN #All_Accounts
               ON #All_Accounts.AccountID = GL_Accounts.AccountID
          WHERE  isnull(Gl_accounts.IsHidden ,0)=1   and (@IsVendor IS NULL
                OR Gl_accounts.IsVendor = @IsVendor)
               AND (#All_Account_BeginBalance.AccountID IS NOT NULL
                    OR #All_Accounts.AccountID IS NOT NULL)
               AND (@SalesMan IS NULL
                    OR Gl_Accounts.SalesManID = @SalesMan)
               AND (@Area IS NULL
                    OR Gl_Accounts.AreaId = @Area)
               AND (@CustomerCatID IS NULL
                    OR Gl_Accounts.VendorCategoryID = @CustomerCatID)
				
         ) AS mainSelect
        

        SELECT *
        FROM
        TblFinal_Select AS Final_Select
        WHERE(@FromBalance IS NULL
              OR Final_Select.Ending_Balance_Debit >= @FromBalance
			  OR abs(Final_Select.Ending_Balance_Credit) >= @FromBalance
			  )
             AND (@ToBalance IS NULL
                  OR Final_Select.Ending_Balance_Debit <= @ToBalance
				  OR abs(Final_Select.Ending_Balance_Credit) <= @ToBalance)
            AND EXISTS (SELECT GLACCOUNT.AccountID, GLSUB.SubsidiaryID FROM   GL_Accounts GLACCOUNT INNER JOIN GL_AccountSubsidiary GLSUB ON GLACCOUNT.AccountID = GLSUB.AccountID Where GLACCOUNT.AccountID=Final_Select.All_Accounts_AccountID and  GLSUB.SubsidiaryID=@SubsidaryID)
			
        ORDER BY Final_Select.Code
		--Sum(Fields!Opening_Balance_Debit.Value)
		--Sum(Fields!Opening_Balance_Credit.Value)
		--Select  sum(Opening_Balance_Debit) OD,SUM(Debit) D, sum(Opening_Balance_Credit)OC ,SUM(Credit) C,
		--( sum(Opening_Balance_Debit)  + SUM(Debit))  TOTALD,( sum(Opening_Balance_Credit)  + SUM(Credit))  TOTALC 
		 
		--from  TblFinal_Select

    END;
GO
/****** Object:  StoredProcedure [dbo].[Report_Gl_Group_By_Analytical_Account_Account]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create PROC [dbo].[Report_Gl_Group_By_Analytical_Account_Account]
 @FromDate		Date 		=	NULL
,@ToDate		Date		=	NULL
,@CostCenterID	Int 		=	NULL
,@DepartMentID	Int 		=	NULL
,@LocationID	Int			=	NULL
,@ClassID		Int			=	NULL
,@AccountID		Int			=	NULL
,@CostCenterNo	Int			=	NULL
,@ParentCode	Nvarchar(max)		=	'4'
,@SubsidaryID   int				=	NULL
AS
BEGIN

    IF (
               EXISTS (
                  SELECT *
                  FROM   dbo.Split(@ParentCode,',')
                  WHERE  Item = -1
               )
           )
           SET @ParentCode = NULL
    ELSE 
        SELECT * INTO #ParentCode
        FROM   dbo.Split(@ParentCode,',')
    
    SELECT GL_Accounts.AccountID
           ,Code
           ,ParentID
           INTO #T
    FROM   #ParentCode
    LEFT JOIN   GL_Accounts
      ON   GL_Accounts.Code = #ParentCode.Item    
    
    
    
    SELECT A.Name AS [Name]
           ,Sum(D.Debit) AS [Debit]
           ,Sum(D.Credit) AS [Credit]
           ,Sum(D.Debit) - Sum(D.Credit) AS [Balance]
    FROM   GL_VoucherDetails D

    LEFT JOIN   GL_Vouchers H
      ON   H.ID = D.VoucherID
    LEFT JOIN   GL_Accounts A
      ON   D.AccountNoID = A.AccountID
           ,#T
    WHERE  
    (H.Posted = 1 )
        --AND  (C.IsActive = 1 )
        AND (
               @ParentCode IS NULL
           OR  A.Code LIKE #T.Code+'%'
           )
      AND  (
               @FromDate IS NULL
           OR  h.VouhcerDate >= @FromDate
           )
      AND  (
               @ToDate IS NULL
           OR  h.VouhcerDate <= @ToDate
           )
      AND  (
               @CostCenterID IS NULL
           OR  D.CostcenterID IN (@CostCenterID)
           )
      AND  (
               @DepartMentID IS NULL
           OR  D.DepartmentID IN (@DepartMentID)
           )
      AND  (
               @LocationID IS NULL
           OR  D.LocationID IN (@LocationID)
           )
      AND  (
               @ClassID IS NULL
           OR  D.ClassID IN (@ClassID)
           )
      AND  (
               @AccountID IS NULL
           OR  D.AccountNoID IN (@AccountID)
           )

      AND 
(@SubsidaryID IS NULL OR H.SubsidaryID IN (@SubsidaryID))
    GROUP BY
           A.Name

    ORDER BY
          A.Name
END
 
--go
--Report_Gl_Group_By_Analytical_Account_Account
GO
/****** Object:  StoredProcedure [dbo].[Report_Gl_Group_By_Analytical_Account_Classes]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Report_Gl_Group_By_Analytical_Account_Classes]
 @FromDate		Date 			=	NULL
,@ToDate		Date			=	NULL
,@CostCenterID	Int 			=	NULL
,@DepartMentID	Int 			=	NULL
,@LocationID	Int				=	NULL
,@ClassID		Int				=	NULL
,@AccountID		Int				=	NULL
,@CostCenterNo	Int				=	NULL
,@ParentCode	Nvarchar(max)	=	NULL
,@SubsidaryID   int				=	NULL
AS
BEGIN
    IF (
               EXISTS (
                  SELECT *
                  FROM   dbo.Split(@ParentCode,',')
                  WHERE  Item = -1
               )
           )
           SET @ParentCode = NULL
    ELSE 
        SELECT * INTO #ParentCode
        FROM   dbo.Split(@ParentCode,',')
    
    SELECT GL_Accounts.AccountID
           ,Code
           ,ParentID
           INTO #T
    FROM   #ParentCode
    LEFT JOIN   GL_Accounts
      ON   GL_Accounts.Code = #ParentCode.Item    
    
    
    
    SELECT C.Name AS [Name]
           ,Sum(D.Debit) AS [Debit]
           ,Sum(D.Credit) AS [Credit]
           ,Sum(D.Debit) - Sum(D.Credit) AS [Balance]
 
    FROM   mstr_Classes C
    LEFT JOIN   GL_VoucherDetails D
      ON   D.ClassID = c.ID
    LEFT JOIN   GL_Vouchers H
      ON   H.ID = D.VoucherID
    LEFT JOIN mstr_subsidaries
      ON mstr_subsidaries.ID = H.SubsidaryID
    LEFT JOIN   GL_Accounts A
      ON   D.AccountNoID = A.AccountID
           ,#T
    WHERE  
    (H.Posted = 1 )
        AND  (C.IsActive = 1 )
        AND (
               @ParentCode IS NULL
           OR  A.Code LIKE #T.Code+'%'
           )
      AND  (
               @FromDate IS NULL
           OR  h.VouhcerDate >= @FromDate
           )
      AND  (
               @ToDate IS NULL
           OR  h.VouhcerDate <= @ToDate
           )
      AND  (
               @CostCenterID IS NULL
           OR  D.CostcenterID IN (@CostCenterID)
           )
      AND  (
               @DepartMentID IS NULL
           OR  D.DepartmentID IN (@DepartMentID)
           )
      AND  (
               @LocationID IS NULL
           OR  D.LocationID IN (@LocationID)
           )
      AND  (
               @ClassID IS NULL
           OR  D.ClassID IN (@ClassID)
           )
      AND  (
               @AccountID IS NULL
           OR  D.AccountNoID IN (@AccountID)
           )
AND 
(@SubsidaryID IS NULL OR H.SubsidaryID IN (@SubsidaryID))
    GROUP BY
            C.Name

    ORDER BY
           c.Name
END



GO
/****** Object:  StoredProcedure [dbo].[Report_Gl_Group_By_Analytical_Account_CostCenter]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Report_Gl_Group_By_Analytical_Account_CostCenter]
 @FromDate		Date 		=	NULL
,@ToDate		Date		=	NULL
,@CostCenterID	Int 		=	NULL
,@DepartMentID	Int 		=	NULL
,@LocationID	Int			=	NULL
,@ClassID		Int			=	NULL
,@AccountID		Int			=	NULL
,@CostCenterNo	Int			=	NULL
,@ParentCode	Nvarchar(max)		=	NULL
,@SubsidaryID   int				=	NULL
AS
BEGIN
    IF (
               EXISTS (
                  SELECT *
                  FROM   dbo.Split(@ParentCode,',')
                  WHERE  Item = -1
               )
           )
           SET @ParentCode = NULL
    ELSE 
        SELECT * INTO #ParentCode
        FROM   dbo.Split(@ParentCode,',')
    
    SELECT GL_Accounts.AccountID
           ,Code
           ,ParentID
           INTO #T
    FROM   #ParentCode
    LEFT JOIN   GL_Accounts
      ON   GL_Accounts.Code = #ParentCode.Item    
    
    
    
    SELECT C.Name AS [Cost Center Name]
           ,C.ID
           ,c.ParentID
           ,Sum(D.Debit) AS [Debit]
           ,Sum(D.Credit) AS [Credit]
           ,Sum(D.Debit) - Sum(D.Credit) AS [Balance]
    FROM   mstr_Costcenter C
    LEFT JOIN   GL_VoucherDetails D
      ON   D.CostcenterID = c.ID
    LEFT JOIN   GL_Vouchers H
      ON   H.ID = D.VoucherID
    LEFT JOIN   GL_Accounts A
      ON   D.AccountNoID = A.AccountID
           ,#T
    WHERE  
    (H.Posted = 1 )
        AND  (C.IsActive = 1 )
        AND (
               @ParentCode IS NULL
           OR  A.Code LIKE #T.Code+'%'
           )
      AND  (
               @FromDate IS NULL
           OR  h.VouhcerDate >= @FromDate
           )
      AND  (
               @ToDate IS NULL
           OR  h.VouhcerDate <= @ToDate
           )
      AND  (
               @CostCenterID IS NULL
           OR  D.CostcenterID IN (@CostCenterID)
           )
      AND  (
               @DepartMentID IS NULL
           OR  D.DepartmentID IN (@DepartMentID)
           )
      AND  (
               @LocationID IS NULL
           OR  D.LocationID IN (@LocationID)
           )
      AND  (
               @ClassID IS NULL
           OR  D.ClassID IN (@ClassID)
           )
      AND  (
               @AccountID IS NULL
           OR  D.AccountNoID IN (@AccountID)
           )
      AND  (
               @CostCenterNo IS NULL
           OR  (
                   @CostCenterNo = 1
              AND  C.ParentID IS NULL
               )
           OR  (
                   @CostCenterNo = 2
              AND  C.ParentID IS NOT NULL
               )
      )
      AND 
(@SubsidaryID IS NULL OR H.SubsidaryID IN (@SubsidaryID))
    GROUP BY
           C.Name
           ,C.ID
           ,c.ParentID
    ORDER BY
           c.Name
END
 

 
GO
/****** Object:  StoredProcedure [dbo].[Report_Gl_Group_By_Analytical_Account_Department]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Report_Gl_Group_By_Analytical_Account_Department]
 @FromDate		Date 		=	NULL
,@ToDate		Date		=	NULL
,@CostCenterID	Int 		=	NULL
,@DepartMentID	Int 		=	NULL
,@LocationID	Int			=	NULL
,@ClassID		Int			=	NULL
,@AccountID		Int			=	NULL
,@CostCenterNo	Int			=	NULL
,@ParentCode	Nvarchar(max)		=	NULL
,@SubsidaryID   int				=	NULL
AS
BEGIN
    IF (
               EXISTS (
                  SELECT *
                  FROM   dbo.Split(@ParentCode,',')
                  WHERE  Item = -1
               )
           )
           SET @ParentCode = NULL
    ELSE 
        SELECT * INTO #ParentCode
        FROM   dbo.Split(@ParentCode,',')
    
    SELECT GL_Accounts.AccountID
           ,Code
           ,ParentID
           INTO #T
    FROM   #ParentCode
    LEFT JOIN   GL_Accounts
      ON   GL_Accounts.Code = #ParentCode.Item    
    
    SELECT C.Name AS [Name]
           ,Sum(D.Debit) AS [Debit]
           ,Sum(D.Credit) AS [Credit]
           ,Sum(D.Debit) - Sum(D.Credit) AS [Balance]
    FROM   mstr_Departments C
    LEFT JOIN   GL_VoucherDetails D
      ON   D.DepartmentID = c.ID
    LEFT JOIN   GL_Vouchers H
      ON   H.ID = D.VoucherID
    LEFT JOIN   GL_Accounts A
      ON   D.AccountNoID = A.AccountID
           ,#T
    WHERE  
    (H.Posted = 1 )
        AND  (C.IsActive = 1 )
        AND (
               @ParentCode IS NULL
           OR  A.Code LIKE #T.Code+'%'
           )
      AND  (
               @FromDate IS NULL
           OR  h.VouhcerDate >= @FromDate
           )
      AND  (
               @ToDate IS NULL
           OR  h.VouhcerDate <= @ToDate
           )
      AND  (
               @CostCenterID IS NULL
           OR  D.CostcenterID IN (@CostCenterID)
           )
      AND  (
               @DepartMentID IS NULL
           OR  D.DepartmentID IN (@DepartMentID)
           )
      AND  (
               @LocationID IS NULL
           OR  D.LocationID IN (@LocationID)
           )
      AND  (
               @ClassID IS NULL
           OR  D.ClassID IN (@ClassID)
           )
      AND  (
               @AccountID IS NULL
           OR  D.AccountNoID IN (@AccountID)
           )

      
AND 
(@SubsidaryID IS NULL OR H.SubsidaryID IN (@SubsidaryID))
    GROUP BY
           C.Name
 
 
    ORDER BY
           c.Name
END



GO
/****** Object:  StoredProcedure [dbo].[Report_Gl_Group_By_Analytical_Account_locations]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROC [dbo].[Report_Gl_Group_By_Analytical_Account_locations]
 @FromDate		Date 		=	NULL
,@ToDate		Date		=	NULL
,@CostCenterID	Int 		=	NULL
,@DepartMentID	Int 		=	NULL
,@LocationID	Int			=	NULL
,@ClassID		Int			=	NULL
,@AccountID		Int			=	NULL
,@CostCenterNo	Int			=	NULL
,@ParentCode	Nvarchar(max)		=	NULL
,@SubsidaryID   int				=	NULL
AS
BEGIN
    IF (
               EXISTS (
                  SELECT *
                  FROM   dbo.Split(@ParentCode,',')
                  WHERE  Item = -1
               )
           )
           SET @ParentCode = NULL
    ELSE 
        SELECT * INTO #ParentCode
        FROM   dbo.Split(@ParentCode,',')
    
    SELECT GL_Accounts.AccountID
           ,Code
           ,ParentID
           INTO #T
    FROM   #ParentCode
    LEFT JOIN   GL_Accounts
      ON   GL_Accounts.Code = #ParentCode.Item    
    
    SELECT C.Name AS [Name]
           ,Sum(D.Debit) AS [Debit]
           ,Sum(D.Credit) AS [Credit]
           ,Sum(D.Debit) - Sum(D.Credit) AS [Balance]
    FROM   mstr_Locations C
    LEFT JOIN   GL_VoucherDetails D
      ON   D.LocationID = c.ID
    LEFT JOIN   GL_Vouchers H
      ON   H.ID = D.VoucherID
    LEFT JOIN   GL_Accounts A
      ON   D.AccountNoID = A.AccountID
           ,#T
    WHERE  
    (H.Posted = 1 )
        AND  (C.IsActive = 1 )
        AND (
               @ParentCode IS NULL
           OR  A.Code LIKE #T.Code+'%'
           )
      AND  (
               @FromDate IS NULL
           OR  h.VouhcerDate >= @FromDate
           )
      AND  (
               @ToDate IS NULL
           OR  h.VouhcerDate <= @ToDate
           )
      AND  (
               @CostCenterID IS NULL
           OR  D.CostcenterID IN (@CostCenterID)
           )
      AND  (
               @DepartMentID IS NULL
           OR  D.DepartmentID IN (@DepartMentID)
           )
      AND  (
               @LocationID IS NULL
           OR  D.LocationID IN (@LocationID)
           )
      AND  (
               @ClassID IS NULL
           OR  D.ClassID IN (@ClassID)
           )
      AND  (
               @AccountID IS NULL
           OR  D.AccountNoID IN (@AccountID)
           )

AND 
(@SubsidaryID IS NULL OR H.SubsidaryID IN (@SubsidaryID))      
    GROUP BY
           C.Name
 
 
    ORDER BY
           c.Name
END
 


GO
/****** Object:  StoredProcedure [dbo].[Report_GL_Income_Statement]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Report_GL_Income_Statement] @FromDate         DATE         = NULL
                                     , @ToDate           DATE         = NULL
                                     , @SubsidaryID      INT          = NULL
                                     , @CostCenterID     INT          = NULL
                                     , @MainCostCenterID INT          = NULL
                                     , @DepartMentID     INT          = NULL
                                     , @LocationID       INT          = NULL
                                     , @ClassID          INT          = NULL
                                     , @AccountID        INT          = NULL
                                     , @Level            INT          = NULL
                                     , @Type             INT          = NULL
                                     , @Columns          NVARCHAR(50) = NULL

/* Total
											Cost Center
											Department
											Location
											Classes
											Period
										  */
AS
    BEGIN
        IF @Level = 4
            SET @Type = 2;

        IF @Columns = 'Total'
            BEGIN

                -- Get Account Level : #Accounts_Level;
                WITH Accounts_Level
                     AS (

/**********
 root level
**********/
                     SELECT GL_Accounts.AccountID
                          , GL_Accounts.ParentID
                          , 1 AS                                                                  Level
                          , CAST('-' + CAST(AccountID AS NVARCHAR(10)) + '-' AS NVARCHAR(100)) AS Hierarchy
                     FROM GL_Accounts
                     WHERE ParentID IS NULL
                     UNION ALL

/********************************************
 recursive join on parent, building hierarchy
********************************************/
                     SELECT CurrentLevel.AccountID
                          , CurrentLevel.ParentID
                          , ParentLevel.Level + 1 AS                                                                             Level
                          , CAST(ParentLevel.Hierarchy + CAST(CurrentLevel.AccountID AS NVARCHAR(10)) + '-' AS NVARCHAR(100)) AS Hierarchy
                     FROM GL_Accounts CurrentLevel
                          JOIN Accounts_Level ParentLevel
                          ON CurrentLevel.ParentID = ParentLevel.AccountID)
                     SELECT Accounts_Level.AccountID
                          , Accounts_Level.ParentID
                          , Accounts_Level.Level
                          , Accounts_Level.Hierarchy
                     INTO #Accounts_Level
                     FROM Accounts_Level

                -- ==> Get Account Level : #Accounts_Level
                ---------------------------------------------------------------------------------------------------
                -- Get Details :#Details
                SELECT GL_Accounts.AccountID
                     , GL_Accounts.Code
                     , #Accounts_Level.Hierarchy
                     , ISNULL(SUM(GL_VoucherDetails.Debit) , 00) - ISNULL(SUM(GL_VoucherDetails.Credit) , 00) AS [Balance]
                INTO #Details
                FROM GL_Accounts
                     LEFT JOIN GL_VoucherDetails
                     ON GL_VoucherDetails.AccountNoID = GL_Accounts.AccountID
                     LEFT JOIN GL_Vouchers
                     ON GL_Vouchers.ID = GL_VoucherDetails.VoucherID
                     LEFT JOIN mstr_Costcenter
                     ON GL_VoucherDetails.CostcenterID = mstr_Costcenter.ID
                     LEFT JOIN #Accounts_Level
                     ON #Accounts_Level.AccountID = GL_Accounts.AccountID
                WHERE(@FromDate IS NULL
                      OR CAST(GL_Vouchers.VouhcerDate AS DATE) >= @FromDate)
                     AND (@ToDate IS NULL
                          OR CAST(GL_Vouchers.VouhcerDate AS DATE) <= @ToDate)
                     AND (@SubsidaryID IS NULL
                          OR GL_Vouchers.SubsidaryID IN(@SubsidaryID))
                     AND (@CostCenterID IS NULL
                          OR GL_VoucherDetails.CostcenterID IN(@CostCenterID))
                AND (@MainCostCenterID IS NULL
                     OR mstr_Costcenter.ParentID = @MainCostCenterID)
                AND (@DepartMentID IS NULL
                     OR GL_VoucherDetails.DepartmentID IN(@DepartMentID))
                AND (@LocationID IS NULL
                     OR GL_VoucherDetails.LocationID IN(@LocationID))
                AND (@ClassID IS NULL
                     OR GL_VoucherDetails.ClassID IN(@ClassID))
            AND (@AccountID IS NULL
                 OR GL_VoucherDetails.AccountNoID IN(@AccountID))
        AND (Gl_Accounts.LevelNo != 0)
        AND (GL_Vouchers.Posted = 1)
        AND (GL_Accounts.Code LIKE '4%'
             OR GL_Accounts.Code LIKE '5%')
                GROUP BY GL_Accounts.AccountID
                       , GL_Accounts.Code
                       , #Accounts_Level.Hierarchy

                -- ==> Get Details :#Details
                ---------------------------------------------------------------------------------------------------  
                -- Get All Acounts With It's Value : #All_Accounts
                SELECT All_Accounts.AccountID
                     , All_Accounts.Code
                     , ISNULL(SUM(#Details.Balance) , 0) AS [Balance]
                INTO #All_Accounts
                FROM GL_Accounts All_Accounts
                     LEFT JOIN #Accounts_Level
                     ON #Accounts_Level.AccountID = All_Accounts.AccountID , 
                     #Details
                WHERE #Details.Hierarchy LIKE #Accounts_Level.Hierarchy + '%'
                GROUP BY All_Accounts.AccountID
                       , All_Accounts.Code

                -- ==> Get All Acounts With It's Value : #All_Accounts   
                ---------------------------------------------------------------------------------------------------
                -- Get Accounts_Balance_Hierarchy
                -- Get Accounts Related to @SubsidaryID

                SELECT *
                INTO #GL_Accounts
                FROM
                (
                 SELECT *
                 FROM GL_Accounts
                 WHERE GL_Accounts.LevelNo <= 3
                 UNION ALL
                 SELECT *
                 FROM GL_Accounts
                 WHERE GL_Accounts.LevelNo >= 4
                       AND (GL_Accounts.AccountID IN
                 (
                  SELECT AccountID
                  FROM GL_AccountSubsidiary
                  WHERE GL_AccountSubsidiary.AccountID = GL_Accounts.AccountID
                        AND (@SubsidaryID IS NULL
                             OR GL_AccountSubsidiary.SubsidiaryID = @SubsidaryID)
                 ))
                ) GL_Accounts_SubsidaryID

                SELECT GL_Accounts.Code
                     , #Accounts_Level.Level
                     , GL_Accounts.Name
                     , GL_Accounts.Name_AR
                     , ISNULL(#All_Accounts.Balance , 0) AS [Balance]
                     , CASE
                           WHEN GL_Accounts.Code LIKE '4%'
                           THEN 4
                           WHEN GL_Accounts.Code LIKE '5%'
                           THEN 5
                       END AS                               TypeCode
                     , GL_Accounts.Type
                     , NULL AS                              [Col_Name]
                     , NULL AS                              VouhcerDate
                FROM #GL_Accounts GL_Accounts
                     LEFT JOIN #All_Accounts
                     ON #All_Accounts.AccountID = GL_Accounts.AccountID
                     LEFT JOIN #Accounts_Level
                     ON #Accounts_Level.AccountID = GL_Accounts.AccountID
                WHERE(@Type IS NULL
                      OR GL_Accounts.Type = @Type)
                     AND ((@Level = 4
                           OR @Level IS NULL
                           OR #Accounts_Level.Level <= @Level))
                     AND (#All_Accounts.Balance <> 0)
                ORDER BY #All_Accounts.Code
        END

        -- ==> Get Accounts_Balance_Hierarchy   
        ---------------------------------------------------------------------------------------------------

        IF @Columns IN('Cost Center' , 'Department' , 'Location' , 'Classes' , 'Period')
            BEGIN

                DECLARE @Sql NVARCHAR(MAX)= NULL;

                DECLARE @TblName NVARCHAR(50)= CASE
                                                   WHEN @Columns = 'Cost Center'
                                                   THEN 'mstr_Costcenter'
                                                   WHEN @Columns = 'Department'
                                                   THEN 'mstr_Departments'
                                                   WHEN @Columns = 'Location'
                                                   THEN 'mstr_Locations'
                                                   WHEN @Columns = 'Classes'
                                                   THEN 'mstr_Classes'
                                               END;

                DECLARE @TblCol NVARCHAR(50)= CASE
                                                  WHEN @TblName = 'mstr_Costcenter'
                                                  THEN 'CostcenterID'
                                                  WHEN @TblName = 'mstr_Departments'
                                                  THEN 'DepartmentID'
                                                  WHEN @TblName = 'mstr_Locations'
                                                  THEN 'LocationID'
                                                  WHEN @TblName = 'mstr_Classes'
                                                  THEN 'ClassID'
                                              END;

                --SELECT @Columns Columns ,@tblName tblName ,@tblCol tblCol								

                SELECT @Sql = '		
SELECT GL_Accounts.Code
       ,GL_Accounts.Name
       ,GL_Accounts.Name_Ar       
       ,NULL AS Level
       ,Sum(IsNull(GL_VoucherDetails.Debit,0)) - Sum(IsNull(GL_VoucherDetails.Credit,0)) AS [Balance]
       ,CASE 
             WHEN GL_Accounts.Code LIKE ''4%'' THEN 4
             WHEN GL_Accounts.Code LIKE ''5%'' THEN 5
        END AS TypeCode
       ,GL_Accounts.Type AS Type
		' + CASE
                  WHEN @Columns != 'Period'
                  THEN ',tbl.Name as [Col_Name]'
                  WHEN @Columns = 'Period'
                  THEN ',SUBSTRING(DateName( month , DateAdd( month , Month(VouhcerDate), -1 ) ), 1, 3) + '' '' + Cast( Year(VouhcerDate) AS nvarchar(4) )  as [Col_Name]' 
              --WHEN @Columns  = 'Period' THEN ',Month(GL_Vouchers.VouhcerDate) '+'/'+' Year(GL_Vouchers.VouhcerDate) as [Col_Name]' 
              END + '

FROM   GL_Vouchers
LEFT JOIN   GL_VoucherDetails
  ON   GL_VoucherDetails.VoucherID = GL_Vouchers.ID
  ' + CASE
          WHEN @Columns != 'Period'
          THEN 'LEFT JOIN   ' + @TblName + ' tbl
									ON   tbl.ID = GL_VoucherDetails.' + @TblCol + ''
          ELSE ''
      END + '

  
LEFT JOIN   GL_Accounts
  ON   GL_Accounts.AccountID = GL_VoucherDetails.AccountNoID
					 LEFT JOIN mstr_Costcenter 
					 ON GL_VoucherDetails.CostcenterID= mstr_Costcenter.ID

WHERE  (
           @FromDate IS NULL
       OR  CAST(GL_Vouchers.VouhcerDate AS DATE) >= @FromDate
       )
  AND  (
           @ToDate IS NULL
       OR  CAST(GL_Vouchers.VouhcerDate AS DATE) <= @ToDate
       )
  AND  (
           @SubsidaryID IS NULL
       OR  GL_Vouchers.SubsidaryID IN (@SubsidaryID)
       )
                     AND (@CostCenterID IS NULL
                          OR GL_VoucherDetails.CostcenterID IN(@CostCenterID))
                AND (@MainCostCenterID IS NULL
                     OR mstr_Costcenter.ParentID = @MainCostCenterID)
  AND  (
           @DepartMentID IS NULL
       OR  GL_VoucherDetails.DepartmentID IN (@DepartMentID)
       )
  AND  (
           @LocationID IS NULL
       OR  GL_VoucherDetails.LocationID IN (@LocationID)
       )
  AND  (
           @ClassID IS NULL
       OR  GL_VoucherDetails.ClassID IN (@ClassID)
       )
  AND  (
           @AccountID IS NULL
       OR  GL_VoucherDetails.AccountNoID IN (@AccountID)
       )
  AND  (Gl_Accounts.LevelNo != 0 )
  AND  (GL_Vouchers.Posted = 1 )
  AND  (
           GL_Accounts.Code LIKE  ''4%''
       OR  GL_Accounts.Code LIKE ''5%''
       )

GROUP BY
       GL_Accounts.Code
       ,GL_Accounts.Name
       ,GL_Accounts.Name_Ar
       ,GL_Accounts.Type
       ' + CASE
               WHEN @Columns != 'Period'
               THEN ',tbl.Name'
               WHEN @Columns = 'Period'
               THEN ',SUBSTRING(DateName( month , DateAdd( month , Month(VouhcerDate), -1 ) ), 1, 3) + '' '' + Cast( Year(VouhcerDate) AS nvarchar(4) )'
           END + '

 
       '

                --            SELECT @sql
                --Return

                EXEC Sp_executesql 
                     @Sql , 
                     N'@FromDate			 Date	
        ,@ToDate			 Date	
        ,@SubsidaryID		 int	
        ,@CostCenterID		 Int	
		,@MainCostCenterID   INT         
        ,@DepartMentID		 Int	
        ,@LocationID		 Int	
        ,@ClassID			 Int	
        ,@AccountID			 Int' , 
                     @FromDate , 
                     @ToDate , 
                     @SubsidaryID , 
                     @CostCenterID , 
                     @MainCostCenterID , 
                     @DepartMentID , 
                     @LocationID , 
                     @ClassID , 
                     @AccountID
        END
    END
GO
/****** Object:  StoredProcedure [dbo].[Report_Gl_Matrix_Accounts_Monthly]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE  PROC [dbo].[Report_Gl_Matrix_Accounts_Monthly]
@Month			Int		=	NULL
,@Year			Int		=	NULL
,@AccountID		Int	=	Null
AS
BEGIN

	SELECT 
	GL_Accounts.Code
	,GL_Accounts.Name
	,MOnth(GL_Vouchers.VouhcerDate) AS Month
	,Year(GL_Vouchers.VouhcerDate)  AS Year
	,SuM(GL_VoucherDetails.Debit)- Sum(GL_VoucherDetails.Credit) AS Balance
	FROM 
	GL_VoucherDetails
	LEFT JOIN GL_Vouchers
	ON GL_Vouchers.ID = GL_VoucherDetails.VoucherID
	LEFT JOIN GL_Accounts
	ON GL_Accounts.AccountID = GL_VoucherDetails.AccountNoID
 
	WHERE
	(@Month IS NULL OR MOnth(GL_Vouchers.VouhcerDate) IN (@Month))
	AND
	(@Year IS NULL OR Year(GL_Vouchers.VouhcerDate) IN (@Year))
	AND 
	(@AccountID IS NULL OR GL_Accounts.AccountID IN (@AccountID))
	GROUP BY
		GL_Accounts.Code
	,GL_Accounts.Name
	,MOnth(GL_Vouchers.VouhcerDate)
	,Year(GL_Vouchers.VouhcerDate)
	
	ORDER BY GL_Accounts.Code
END
 
GO
/****** Object:  StoredProcedure [dbo].[Report_Gl_Matrix_CostCenters_Accounts]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Report_Gl_Matrix_CostCenters_Accounts]
@Month				Int		=	NULL
,@Year				Int		=	NULL
,@CostCenter		Int		=	NULL
,@AccountID			int		=	NULL
AS
BEGIN

	SELECT 
	Gl_Accounts.Code
	,mstr_Costcenter.Name AS [Cost Center Name]
	,SuM(GL_VoucherDetails.Debit)- Sum(GL_VoucherDetails.Credit) AS Balance
	,Gl_Accounts.Name AS [Account Name]
	FROM 
	GL_VoucherDetails
	LEFT JOIN GL_Vouchers
	ON GL_Vouchers.ID = GL_VoucherDetails.VoucherID
	LEFT JOIN mstr_Costcenter
	ON mstr_Costcenter.ID = GL_VoucherDetails.CostcenterID
	LEFT JOIN GL_Accounts
	ON Gl_Accounts.AccountID = GL_VoucherDetails.AccountNoID
 
	WHERE
	(@Month IS NULL OR MOnth(GL_Vouchers.VouhcerDate) IN (@Month))
	AND
	(@Year IS NULL OR Year(GL_Vouchers.VouhcerDate) IN (@Year))
	AND 
	(@CostCenter IS NULL OR mstr_Costcenter.ID IN (@CostCenter))
	AND
	(@AccountID IS NULL OR Gl_accounts.AccountID IN (@AccountID))
	AND
	(GL_VoucherDetails.CostcenterID is NOT null)
	GROUP BY
	Gl_Accounts.Code
	,mstr_Costcenter.Name
		,Gl_Accounts.Name
	
	ORDER BY Gl_Accounts.Code
END
 --go
 --Report_Gl_Matrix_CostCenters_Accounts
GO
/****** Object:  StoredProcedure [dbo].[Report_Gl_Matrix_CostCenters_Monthly]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE  PROC [dbo].[Report_Gl_Matrix_CostCenters_Monthly]
@Month				Int		=	NULL
,@Year				Int		=	NULL
,@CostCenterID		Int		=	Null
AS
BEGIN

	SELECT 
	mstr_Costcenter.Code
	,mstr_Costcenter.Name
	,MOnth(GL_Vouchers.VouhcerDate) AS Month
	,Year(GL_Vouchers.VouhcerDate)  AS Year
	,SuM(GL_VoucherDetails.Debit)- Sum(GL_VoucherDetails.Credit) AS Balance
	FROM 
	GL_VoucherDetails
	LEFT JOIN GL_Vouchers
	ON GL_Vouchers.ID = GL_VoucherDetails.VoucherID
	LEFT JOIN mstr_Costcenter
	ON mstr_Costcenter.ID = GL_VoucherDetails.CostcenterID
 
	WHERE
	(@Month IS NULL OR MOnth(GL_Vouchers.VouhcerDate) IN (@Month))
	AND
	(@Year IS NULL OR Year(GL_Vouchers.VouhcerDate) IN (@Year))
	AND 
	(@CostCenterID IS NULL OR mstr_Costcenter.ID IN (@CostCenterID))
		AND
	(GL_VoucherDetails.CostcenterID is NOT null)
	GROUP BY
	mstr_Costcenter.Code
	,mstr_Costcenter.Name
	,MOnth(GL_Vouchers.VouhcerDate)
	,Year(GL_Vouchers.VouhcerDate)
	
	ORDER BY mstr_Costcenter.Code
END
 
GO
/****** Object:  StoredProcedure [dbo].[Report_GL_Prints]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Report_GL_Prints] @ID          INT = NULL
                                   , @SubsidaryID INT = NULL
AS
       BEGIN
        SELECT mstr_Subsidaries.Name AS                        [mstr_Subsidaries Name]
             , mstr_Subsidaries.Name_Ar AS                     [mstr_Subsidaries Name AR]
             , GL_VoucherType.Name AS                          [GL_VoucherType Name]
             , GL_VoucherType.Name_AR AS                       [GL_VoucherType Name Ar]
			, mstr_Subsidaries.Name AS                        [mstr_SubsidariesName]
             , mstr_Subsidaries.Name_Ar AS                     [mstr_SubsidariesNameAR]
             , GL_VoucherType.Name AS                          [GL_VoucherTypeName]
             , GL_VoucherType.Name_AR AS                       [GL_VoucherTypeNameAr]
                        ,  pay.Name as PayType
 , pay.Name_AR  as PayTypeAr
			 , mstr_Subsidaries.ContactEn 
			 , mstr_Subsidaries.ContactAr 
			 , mstr_Subsidaries.AddressAr 
			 , mstr_Subsidaries.AddressEn 
			  -- Header
            ,GL_Vouchers.DueDate
		   , GL_Vouchers.VouhcerDate AS                      [Date]
             , GL_Vouchers.Code AS                             [Voucher #], 
			 GL_Vouchers.Code AS                             [VoucherNo]
             , GL_Vouchers.Memo AS                             [Memo]
             , mstr_Branch.Name AS                             [BranchName]
             , mstr_Branch.Name_AR AS                          [BranchName_AR]
             , GL_Vouchers.ReferanceNo AS                      [Referance No.] , 
			 GL_Vouchers.ReferanceNo AS                      [ReferanceNo]
             , GL_Vouchers.DueDate                             GL_Vouchers_DueDate
             , mstr_Currencies.CurrencyPrecision ,
						  (select SubsidaryCurrency.CurrencyPrecision from mstr_Currencies SubsidaryCurrency
						  inner join mstr_Subsidary_currency on
						  mstr_Subsidary_currency.CurrencyID=SubsidaryCurrency.ID
						  where mstr_Subsidary_currency.BaseCurrency=1
						  and mstr_Subsidary_currency.SubsidaryID=@SubsidaryID
						  )               as Subsidary_currencyPercesion     
			 , ISNULL(GL_Vouchers.Beneficiary ,
        (
         SELECT Gl_Accounts.Name
         FROM GL_Vouchers GV
              LEFT JOIN Crm_Invoice_Installments_Details
              ON Crm_Invoice_Installments_Details.ID = GV.InvoiceInstallmentsDetailsId
              LEFT JOIN Crm_Invoice_Installments
              ON Crm_Invoice_Installments.ID = Crm_Invoice_Installments_Details.InvoiceInstallmentsID
              LEFT JOIN Inv_Receipt_h
              ON Inv_Receipt_h.ID = Crm_Invoice_Installments.InvoiceID
              LEFT JOIN GL_Accounts
              ON GL_Accounts.AccountID = Inv_Receipt_h.SupplierAccount_ID
			 
         WHERE GV.ID = GL_Vouchers.id
        )) AS          [Received From]
             , GL_Vouchers.CheckNumber AS          [Check Number]
             , Gl_CheckBooks.Description AS        [Cheeck Book]
             , GL_Vouchers.BankName AS             [Bank Name]
			  , ISNULL(GL_Vouchers.Beneficiary ,
        (
         SELECT Gl_Accounts.Name
         FROM GL_Vouchers GV
              LEFT JOIN Crm_Invoice_Installments_Details
              ON Crm_Invoice_Installments_Details.ID = GV.InvoiceInstallmentsDetailsId
              LEFT JOIN Crm_Invoice_Installments
              ON Crm_Invoice_Installments.ID = Crm_Invoice_Installments_Details.InvoiceInstallmentsID
              LEFT JOIN Inv_Receipt_h
              ON Inv_Receipt_h.ID = Crm_Invoice_Installments.InvoiceID
              LEFT JOIN GL_Accounts
              ON GL_Accounts.AccountID = Inv_Receipt_h.SupplierAccount_ID
			 
         WHERE GV.ID = GL_Vouchers.id
        )) AS          [ReceivedFrom]
             , GL_Vouchers.CheckNumber AS          [CheckNumber]
             , Gl_CheckBooks.Description AS        [CheeckBook]
             , GL_Vouchers.BankName AS             [BankName]
             , CASE GL_Vouchers.Posted
                   WHEN 1
                   THEN 'Posted'
                   ELSE 'Not Posted'
               END AS                              [Posted]
             , CASE GL_Vouchers.Posted
                   WHEN 1
                   THEN N'مرحل'
                   ELSE N'لم يرحل'
               END AS                              [Posted_AR]
        -- Details
             , GL_Accounts.Code AS                 [GL_Accounts Code]
             , GL_Accounts.Name AS                 [GL_Accounts Name]
			 , GL_Accounts.Code AS                 [GL_AccountsCode]
             , GL_Accounts.Name AS                 [GL_AccountsName]
            ,(select top 1 ISNULL(SUM(GL_VoucherDetailsPrev.Debit) , 0) from GL_VoucherDetails GL_VoucherDetailsPrev 
			where GL_VoucherDetailsPrev.AccountNoID = GL_Accounts.AccountID ) as TotDebit
			 ,(select top 1 ISNULL(SUM(GL_VoucherDetailsPrev.Credit) , 0) from GL_VoucherDetails GL_VoucherDetailsPrev 
			where GL_VoucherDetailsPrev.AccountNoID = GL_Accounts.AccountID ) as TotCredit
			 , GL_Accounts.Name_AR AS                      [GL_Accounts Name_AR]
             , GL_VoucherDetails.Memo AS                [GL_VoucherDetails Memo]
			  , GL_Accounts.Name_AR AS                      [GL_AccountsName_AR]
             , GL_VoucherDetails.Memo AS                [GL_VoucherDetailsMemo]
            ,(select top 1 GLA.Name from  GL_Accounts GLA inner join GL_VoucherDetails GLD
			on GLD.AccountNoID=GLA.AccountID where Header=0
			and GLD.VoucherID=GL_Vouchers.id
			 ) as SuppName
			  ,(select top 1 GLA.Name_AR from  GL_Accounts GLA inner join GL_VoucherDetails GLD
			on GLD.AccountNoID=GLA.AccountID where Header=0
			and GLD.VoucherID=GL_Vouchers.id
			 ) as SuppNameAr
			 ,(select top 1 GLA.Name from  GL_Accounts GLA inner join GL_VoucherDetails GLD
			on GLD.AccountNoID=GLA.AccountID where gld.Debit>0
			and GLD.VoucherID=GL_Vouchers.id
			 ) as DebitAccountName
			  ,(select top 1 GLA.Name_AR from  GL_Accounts GLA inner join GL_VoucherDetails GLD
			on GLD.AccountNoID=GLA.AccountID where gld.Debit>0
			and GLD.VoucherID=GL_Vouchers.id
			 ) as DebitAccountNameAr
			  ,(select top 1 GLA.Code from  GL_Accounts GLA inner join GL_VoucherDetails GLD
			on GLD.AccountNoID=GLA.AccountID where gld.Debit>0
			and GLD.VoucherID=GL_Vouchers.id
			 ) as DebitAccountCode

		     ,  GL_VoucherDetails.Debit AS                                                   [GL_VoucherDetails Debit]
             ,  GL_VoucherDetails.Credit AS                                                 [GL_VoucherDetails Credit]
			  ,  GL_VoucherDetails.Debit AS                                                   [GL_VoucherDetailsDebit]
             ,  GL_VoucherDetails.Credit AS                                                 [GL_VoucherDetailsCredit]
             , SUBSTRING(PARSENAME(Tafkeet.Debit , 1) , 1 , 3) AS                                  [GL_VoucherDetails Debit_decimal]
             , SUBSTRING(PARSENAME(Tafkeet.Credit , 1) , 1 , 3) AS                                 [GL_VoucherDetails Credit_decimal]
			  , SUBSTRING(PARSENAME(Tafkeet.Debit , 1) , 1 , 3) AS                                  [GL_VoucherDetailsDebit_decimal]
             , SUBSTRING(PARSENAME(Tafkeet.Credit , 1) , 1 , 3) AS                                 [GL_VoucherDetailsCredit_decimal]
             , Tafkeet.Debit                                                                       Tafkeet_Debit_Num
             , Tafkeet.Credit                                                                      Tafkeet_Credit_Num
             ,
        (
         SELECT NumEn
         FROM [dbo].[Tafkeet](Tafkeet.Debit , GL_Vouchers.CurrencyID)
        )                                                                                          [Tafkeet_Debit]
             ,
        (
         SELECT NumAr
         FROM [dbo].[Tafkeet](Tafkeet.Debit , GL_Vouchers.CurrencyID)
        )                                                                                          [Tafkeet_Debit_Ar]
             ,
        (
         SELECT NumEn
         FROM [dbo].[Tafkeet](Tafkeet.Credit , GL_Vouchers.CurrencyID)
        )                                                                                       [Tafkeet_Credit]
             ,
        (
         SELECT NumAr
         FROM [dbo].[Tafkeet](Tafkeet.Credit , GL_Vouchers.CurrencyID)
        )                                                                                       [Tafkeet_Credit_Ar]
		,
		        (
         SELECT NumEn
         FROM [dbo].[Tafkeet]((select Sum(GL_VoucherDetails.Credit) as SumCredit from GL_VoucherDetails where GL_VoucherDetails.VoucherID=@ID) , GL_Vouchers.CurrencyID)
        )                                                                                       [Tafkeet_English]
             ,
               (
         SELECT NumAr
         FROM [dbo].[Tafkeet]((select Sum(GL_VoucherDetails.Credit) as SumCredit from GL_VoucherDetails where GL_VoucherDetails.VoucherID=@ID) , GL_Vouchers.CurrencyID)
        )                                                                                       [Tafkeet_Arabic]
             , ISNULL(mstr_Costcenter.Name , '') + '  ' + ISNULL(mstr_Departments.Name , '') + ' ' + ISNULL(mstr_Locations.Name , '') + '  ' + ISNULL(mstr_Classes.Name , '') AS             [LookUP]
             , ISNULL(mstr_Costcenter.Name_AR , '') + '  ' + ISNULL(mstr_Departments.Name_AR , '') + ' ' + ISNULL(mstr_Locations.Name_AR , '') + '  ' + ISNULL(mstr_Classes.Name_AR , '') AS [LookUP_AR]
             , mstr_Costcenter.Code                                                         [mstr_Costcenter_Code]
             , mstr_Costcenter.Name                                                         mstr_Costcenter_Name
             , mstr_Costcenter.Name_ar                                                      mstr_Costcenter_Name_ar
             , mstr_Country.CountryName                                                     mstr_Country_CountryName
             , mstr_Country.CountryName_AR                                                  mstr_Country_CountryName_AR
             , mstr_Subsidaries.CostCenterAlternativeText
             , Security_Users_CollecterId.Name                                              Security_Users_CollecterId_Name
             , Security_Users_CollecterId.Name_Ar                                           Security_Users_CollecterId_Name_Ar
      ,CollectionNumber
	  FROM GL_Vouchers
             LEFT JOIN mstr_Branch
             ON mstr_Branch.ID = GL_Vouchers.BranchID
             LEFT JOIN mstr_Subsidaries
             ON mstr_Subsidaries.ID = GL_Vouchers.SubsidaryID
             LEFT JOIN mstr_Country
             ON mstr_Country.ID = mstr_Subsidaries.countryID
             LEFT JOIN GL_VoucherType
             ON GL_VoucherType.ID = GL_Vouchers.VoucherTypeID
             LEFT JOIN Gl_CheckBooks
             ON Gl_CheckBooks.ID = GL_Vouchers.CheeckBookID
             LEFT JOIN Security_Users Security_Users_CollecterId
             ON Security_Users_CollecterId.Id = GL_Vouchers.CollecterId
             LEFT JOIN
        (
         SELECT VoucherID
              , SUM(Debit)  Debit
              , SUM(Credit) Credit
          FROM GL_VoucherDetails
         WHERE GL_VoucherDetails.Header = 1
         GROUP BY VoucherID
        ) Tafkeet
             ON Tafkeet.VoucherID = GL_Vouchers.ID
             -- Details
             LEFT JOIN GL_VoucherDetails
             ON GL_VoucherDetails.VoucherID = GL_Vouchers.ID
             LEFT JOIN GL_Accounts
             ON GL_VoucherDetails.AccountNoID = GL_Accounts.AccountID
             LEFT JOIN mstr_Costcenter
             ON mstr_Costcenter.ID = GL_VoucherDetails.CostcenterID
             LEFT JOIN mstr_Classes
             ON GL_VoucherDetails.ClassID = mstr_Classes.ID
             LEFT JOIN mstr_Locations
             ON GL_VoucherDetails.LocationID = mstr_Locations.ID
             LEFT JOIN mstr_Departments
             ON mstr_Departments.ID = GL_VoucherDetails.DepartmentID
			 left join mstr_Currencies on mstr_Currencies.ID=GL_Vouchers.CurrencyID
         left join Inv_PaymentType pay on
			  pay.id=GL_Vouchers.PaymentTypeId
		WHERE(@ID IS NULL
              OR GL_Vouchers.id = @ID)
             AND (@SubsidaryID IS NULL
                  OR GL_Vouchers.SubsidaryID = @SubsidaryID)
    END


	

	  
GO
/****** Object:  StoredProcedure [dbo].[Report_GL_Prints_Show]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 
 
CREATE PROC [dbo].[Report_GL_Prints_Show] @FromNo          INT = NULL
                                  ,@ToNo          INT = NULL
								  , @FromDate          date = NULL
								   ,@ToDate          date = NULL
								   ,@BranchID       Int=NULL
								    ,@VoucherTypeID       Int=NULL

AS
       BEGIN
        SELECT mstr_Subsidaries.Name AS                                                                                                                                                      [mstr_Subsidaries Name]
             , mstr_Subsidaries.Name_Ar AS                                                                                                                                                   [mstr_Subsidaries Name AR]
             , GL_VoucherType.Name AS                                                                                                                                                        [GL_VoucherType Name]
             , GL_VoucherType.Name_AR AS                                                                                                                                                     [GL_VoucherType Name Ar]
                        ,  case when GL_Vouchers.CheckTransfer is null then N'Cash'
when GL_Vouchers.CheckTransfer=0 then N'Bank Transfer'
when GL_Vouchers.CheckTransfer=1 then N'Cheque'
end as PayType
 ,  case when GL_Vouchers.CheckTransfer is null then N'كاش'
when GL_Vouchers.CheckTransfer=0 then N'تحويل بنكي '
when GL_Vouchers.CheckTransfer=1 then N'شيك'
end as PayTypeAr
			 , mstr_Subsidaries.ContactEn 
			 , mstr_Subsidaries.ContactAr 
			 , mstr_Subsidaries.AddressAr 
			 , mstr_Subsidaries.AddressEn 
			  -- Header
            ,GL_Vouchers.DueDate
		   , GL_Vouchers.VouhcerDate AS                                                                                                                                                    [Date]
             , GL_Vouchers.Code AS                                                                                                                                                           [Voucher #]
             , GL_Vouchers.Memo AS                                                                                                                                                           [Memo]
             , mstr_Branch.Name AS                                                                                                                                                           [BranchName]
             , mstr_Branch.Name_AR AS                                                                                                                                                        [BranchName_AR]
             , GL_Vouchers.ReferanceNo AS                                                                                                                                                    [Referance No.]
             , GL_Vouchers.DueDate                                                                                                                                                           GL_Vouchers_DueDate
             , mstr_Currencies.CurrencyPrecision ,
						  
			   ISNULL(GL_Vouchers.Beneficiary ,
        (
         SELECT Gl_Accounts.Name
         FROM GL_Vouchers GV
              LEFT JOIN Crm_Invoice_Installments_Details
              ON Crm_Invoice_Installments_Details.ID = GV.InvoiceInstallmentsDetailsId
              LEFT JOIN Crm_Invoice_Installments
              ON Crm_Invoice_Installments.ID = Crm_Invoice_Installments_Details.InvoiceInstallmentsID
              LEFT JOIN Inv_Receipt_h
              ON Inv_Receipt_h.ID = Crm_Invoice_Installments.InvoiceID
              LEFT JOIN GL_Accounts
              ON GL_Accounts.AccountID = Inv_Receipt_h.SupplierAccount_ID
         WHERE GV.ID = GL_Vouchers.id
        )) AS                                                                                                                                                                                [Received From]
             , GL_Vouchers.CheckNumber AS                                                                                                                                                    [Check Number]
             , Gl_CheckBooks.Description AS                                                                                                                                                  [Cheeck Book]
             , GL_Vouchers.BankName AS                                                                                                                                                       [Bank Name]
             , CASE GL_Vouchers.Posted
                   WHEN 1
                   THEN 'Posted'
                   ELSE 'Not Posted'
               END AS                                                                                                                                                                        [Posted]
             , CASE GL_Vouchers.Posted
                   WHEN 1
                   THEN N'مرحل'
                   ELSE N'لم يرحل'
               END AS                                                                                                                                                                        [Posted_AR]
        -- Details
             , GL_Accounts.Code AS                                                                                                                                                           [GL_Accounts Code]
             , GL_Accounts.Name AS                                                                                                                                                           [GL_Accounts Name]
            ,(select ISNULL(SUM(GL_VoucherDetailsPrev.Debit) , 0) from GL_VoucherDetails GL_VoucherDetailsPrev 
			where GL_VoucherDetailsPrev.AccountNoID = GL_Accounts.AccountID ) as TotDebit
			 ,(select ISNULL(SUM(GL_VoucherDetailsPrev.Credit) , 0) from GL_VoucherDetails GL_VoucherDetailsPrev 
			where GL_VoucherDetailsPrev.AccountNoID = GL_Accounts.AccountID ) as TotCredit
			 , GL_Accounts.Name_AR AS                                                                                                                                                        [GL_Accounts Name_AR]
             , GL_VoucherDetails.Memo AS                                                                                                                                                     [GL_VoucherDetails Memo]
             ,  GL_VoucherDetails.Debit AS                                                                                                                                             [GL_VoucherDetails Debit]
             ,  GL_VoucherDetails.Credit AS                                                                                                                                           [GL_VoucherDetails Credit]
             , SUBSTRING(PARSENAME(Tafkeet.Debit , 1) , 1 , 3) AS                                                                                                                            [GL_VoucherDetails Debit_decimal]
             , SUBSTRING(PARSENAME(Tafkeet.Credit , 1) , 1 , 3) AS                                                                                                                           [GL_VoucherDetails Credit_decimal]
             , Tafkeet.Debit                                                                                                                                                                 Tafkeet_Debit_Num
             , Tafkeet.Credit                                                                                                                                                                Tafkeet_Credit_Num
             ,
        (
         SELECT NumEn
         FROM [dbo].[Tafkeet](Tafkeet.Debit , GL_Vouchers.CurrencyID)
        )                                                                                                                                                                                    [Tafkeet_Debit]
             ,
        (
         SELECT NumAr
         FROM [dbo].[Tafkeet](Tafkeet.Debit , GL_Vouchers.CurrencyID)
        )                                                                                                                                                                                    [Tafkeet_Debit_Ar]
             ,
        (
         SELECT NumEn
         FROM [dbo].[Tafkeet](Tafkeet.Credit , GL_Vouchers.CurrencyID)
        )                                                                                                                                                                                    [Tafkeet_Credit]
             ,
        (
         SELECT NumAr
         FROM [dbo].[Tafkeet](Tafkeet.Credit , GL_Vouchers.CurrencyID)
        )                                                                                                                                                                                    [Tafkeet_Credit_Ar]
             , ISNULL(mstr_Costcenter.Name , '') + '  ' + ISNULL(mstr_Departments.Name , '') + ' ' + ISNULL(mstr_Locations.Name , '') + '  ' + ISNULL(mstr_Classes.Name , '') AS             [LookUP]
             , ISNULL(mstr_Costcenter.Name_AR , '') + '  ' + ISNULL(mstr_Departments.Name_AR , '') + ' ' + ISNULL(mstr_Locations.Name_AR , '') + '  ' + ISNULL(mstr_Classes.Name_AR , '') AS [LookUP_AR]
             , mstr_Costcenter.Code                                                                                                                                                          [mstr_Costcenter_Code]
             , mstr_Costcenter.Name                                                                                                                                                          mstr_Costcenter_Name
             , mstr_Costcenter.Name_ar                                                                                                                                                       mstr_Costcenter_Name_ar
             , mstr_Country.CountryName                                                                                                                                                      mstr_Country_CountryName
             , mstr_Country.CountryName_AR                                                                                                                                                   mstr_Country_CountryName_AR
             , mstr_Subsidaries.CostCenterAlternativeText
             , Security_Users_CollecterId.Name                                                                                                                                               Security_Users_CollecterId_Name
             , Security_Users_CollecterId.Name_Ar                                                                                                                                            Security_Users_CollecterId_Name_Ar
        FROM GL_Vouchers
             LEFT JOIN mstr_Branch
             ON mstr_Branch.ID = GL_Vouchers.BranchID
             LEFT JOIN mstr_Subsidaries
             ON mstr_Subsidaries.ID = GL_Vouchers.SubsidaryID
             LEFT JOIN mstr_Country
             ON mstr_Country.ID = mstr_Subsidaries.countryID
             LEFT JOIN GL_VoucherType
             ON GL_VoucherType.ID = GL_Vouchers.VoucherTypeID
             LEFT JOIN Gl_CheckBooks
             ON Gl_CheckBooks.ID = GL_Vouchers.CheeckBookID
             LEFT JOIN Security_Users Security_Users_CollecterId
             ON Security_Users_CollecterId.Id = GL_Vouchers.CollecterId
             LEFT JOIN
        (
         SELECT VoucherID
              , SUM(Debit)  Debit
              , SUM(Credit) Credit
          FROM GL_VoucherDetails
         WHERE GL_VoucherDetails.Header = 1
         GROUP BY VoucherID
        ) Tafkeet
             ON Tafkeet.VoucherID = GL_Vouchers.ID
             -- Details
             LEFT JOIN GL_VoucherDetails
             ON GL_VoucherDetails.VoucherID = GL_Vouchers.ID
             LEFT JOIN GL_Accounts
             ON GL_VoucherDetails.AccountNoID = GL_Accounts.AccountID
             LEFT JOIN mstr_Costcenter
             ON mstr_Costcenter.ID = GL_VoucherDetails.CostcenterID
             LEFT JOIN mstr_Classes
             ON GL_VoucherDetails.ClassID = mstr_Classes.ID
             LEFT JOIN mstr_Locations
             ON GL_VoucherDetails.LocationID = mstr_Locations.ID
             LEFT JOIN mstr_Departments
             ON mstr_Departments.ID = GL_VoucherDetails.DepartmentID
			 left join mstr_Currencies on mstr_Currencies.ID=GL_Vouchers.CurrencyID
        WHERE(@FromDate IS NULL
              OR GL_Vouchers.VouhcerDate >= @FromDate)
             AND (@ToDate IS NULL
                  OR GL_Vouchers.VouhcerDate <= @ToDate)
				  and 
				  (@FromNo IS NULL
              OR GL_Vouchers.Code >= @FromNo)
             AND (@ToNo IS NULL
                  OR GL_Vouchers.Code <= @ToNo)
				  and GL_Vouchers.BranchID=@BranchID
				  and GL_Vouchers.VoucherTypeID=@VoucherTypeID
    END




	  
GO
/****** Object:  StoredProcedure [dbo].[Report_GL_Statement_Of_Account]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Report_GL_Statement_Of_Account] @AccountID         INT  = NULL
                                         , @FromDate          DATE = NULL
                                         , @ToDate            DATE = NULL
                                         , @SubsidaryID       INT  = NULL
                                         , @IsRelatedCustomer BIT  = NULL
                                         , @CostcenterID      INT  = NULL
                                         , @BranchID          INT  = NULL
                                         , @IsPosted          INT  = NULL
AS
     BEGIN
	
        SELECT NULL AS                                                                              [GL_Vouchers_ID]
             , NULL AS                                                                              [VoucherType_ID]
             , NULL AS                                                                              [VoucherType_Code]
             , NULL AS                                                                              VouhcerDate
             , 'Previous Balance' AS                                                                [VoucherType_Name]
             , N'الرصيد السابق' AS                                                                  [VoucherType_Name_AR]
             , NULL                                                                                 [GL_Vouchers_Code]
             , NULL                                                                                 [GL_Vouchers.Memo]
             , NULL                                                                                 [GL_Vouchers.Memo_Reffrence]
             , NULL                                                                                 Inv_Receipt_h_Reference_No
             , NULL                                                                                 Inv_Receipt_h_Entry_No
             , ISNULL(SUM(GL_VoucherDetails.Debit) , 0)                                             [GL_VoucherDetails.Debit]
             , ISNULL(SUM(GL_VoucherDetails.Credit) , 0)                                            [GL_VoucherDetails.Credit]
             , ISNULL(SUM(GL_VoucherDetails.Debit) , 0) - ISNULL(SUM(GL_VoucherDetails.Credit) , 0) Balance
             , NULL                                                                                 Path
             , '1'                                                                                  GROUP_Sum
			, mstr_Subsidaries.ContactEn 							 
			 , mstr_Subsidaries.ContactAr 							 
			 , mstr_Subsidaries.AddressAr 							 
			 , mstr_Subsidaries.AddressEn 
			 ,null                                                                                 Code
			 ,null																				   Name
			 ,null																				   Name_AR
			-- ,GL_Accounts.Code                                                                     
			--,GL_Accounts.Name
			--,GL_Accounts.Name_AR
			,0  IsPosted
        FROM GL_VoucherDetails
             LEFT JOIN GL_Vouchers
             ON GL_Vouchers.ID = GL_VoucherDetails.VoucherID
			 left outer join mstr_Subsidaries
			 on GL_Vouchers.SubsidaryID=mstr_Subsidaries.ID
             LEFT JOIN GL_VoucherType
             ON GL_VoucherType.ID = GL_Vouchers.VoucherTypeID,GL_Accounts 
        WHERE GL_Accounts.AccountID = GL_VoucherDetails.AccountNoID and 
		((@AccountID IS NULL
              OR GL_VoucherDetails.AccountNoID IN(@AccountID)) OR (AccountNoID= @AccountID
              OR AccountNoID in (Select RelatedAccountID from GL_RelatedAccounts where AccountID = @accountId) And @IsRelatedCustomer=1))
             AND (@FromDate IS NULL
                  OR CAST(GL_Vouchers.VouhcerDate AS DATE) < @FromDate)
             AND (@SubsidaryID IS NULL
                  OR GL_Vouchers.SubsidaryID = @SubsidaryID)
             AND (@IsPosted IS NULL
                  OR GL_Vouchers.Posted = @IsPosted)
             AND (@CostcenterID IS NULL
                  OR GL_VoucherDetails.CostcenterID = @CostcenterID)
             AND (@BranchID IS NULL
                  OR GL_Vouchers.BranchID = @BranchID)
				  group by  mstr_Subsidaries.ContactEn 							 
			 , mstr_Subsidaries.ContactAr 							 
			 , mstr_Subsidaries.AddressAr 							 
			 , mstr_Subsidaries.AddressEn 
			-- , GL_Accounts.Code
			--,GL_Accounts.Name
			--,GL_Accounts.Name_AR
			--,isnull(GL_Vouchers.posted,0)
        UNION ALL
        SELECT GL_Vouchers.ID AS                                                                           [GL_Vouchers_ID]
             , GL_VoucherType.ID AS                                                                        [VoucherType_ID]
             , GL_VoucherType.Code AS                                                                      [VoucherType_Code]
             , GL_Vouchers.VouhcerDate AS                                                                  VouhcerDate
             , GL_VoucherType.Name AS                                                                      [VoucherType_Name]
             , GL_VoucherType.Name_AR AS                                                                   [VoucherType_Name_AR]
             , GL_Vouchers.Code AS                                                                         [GL_Vouchers_Code]
             , GL_VoucherDetails.Memo                                                                      [GL_Vouchers.Memo]
             , CASE
                   WHEN(GL_VoucherType.Code = 21
                        OR GL_VoucherType.Code = 22
                        OR GL_VoucherType.Code = 23
                        OR GL_VoucherType.Code = 24)
                       AND ReferanceNo IS NOT NULL
                   THEN Replace(GL_VoucherDetails.Memo , Inv_Receipt_h.Entry_No , Inv_Receipt_h.Reference_No)
                   ELSE GL_VoucherDetails.Memo
               END                                                                                         [GL_Vouchers.Memo_Reffrence]
             , Inv_Receipt_h.Reference_No                                                                  Inv_Receipt_h_Reference_No
             , Inv_Receipt_h.Entry_No                                                                      Inv_Receipt_h_Entry_No
             , ISNULL(GL_VoucherDetails.Debit , 0) AS                                                      [GL_VoucherDetails.Debit]
             , ISNULL(GL_VoucherDetails.Credit , 0) AS                                                     [GL_VoucherDetails.Credit]
             , ISNULL(GL_VoucherDetails.Debit , 0) - ISNULL(GL_VoucherDetails.Credit , 0)                 Balance
             , dbo.GetPath(GL_Vouchers.id , GL_VoucherType.ID , GL_VoucherType.Code , GL_VoucherType.Name) path
             , '2'                                                                                         GROUP_Sum
      , mstr_Subsidaries.ContactEn 							 
			 , mstr_Subsidaries.ContactAr 							 
			 , mstr_Subsidaries.AddressAr 							 
			 , mstr_Subsidaries.AddressEn 
			 ,GL_Accounts.Code
			 ,GL_Accounts.Name
			 ,GL_Accounts.Name_AR
			 ,isnull(GL_Vouchers.posted, -1)
	    FROM GL_VoucherDetails
             LEFT JOIN GL_Vouchers
             ON GL_Vouchers.ID = GL_VoucherDetails.VoucherID
			  left outer join mstr_Subsidaries
			 on GL_Vouchers.SubsidaryID=mstr_Subsidaries.ID
             LEFT JOIN GL_VoucherType
             ON GL_VoucherType.ID = GL_Vouchers.VoucherTypeID
             LEFT JOIN Inv_Receipt_H
             ON Inv_Receipt_H.ID = GL_Vouchers.ReceiptID,GL_Accounts
        WHERE GL_Accounts.AccountID = GL_VoucherDetails.AccountNoID and 
		(@AccountID IS NULL
              OR GL_VoucherDetails.AccountNoID IN(@AccountID))
             AND (@FromDate IS NULL
                  OR CAST(GL_Vouchers.VouhcerDate AS DATE) >= @FromDate)
             AND (@ToDate IS NULL
                  OR CAST(GL_Vouchers.VouhcerDate AS DATE) <= @ToDate)
             AND (@SubsidaryID IS NULL
                  OR GL_Vouchers.SubsidaryID = @SubsidaryID)
             AND (@IsPosted IS NULL
                  OR GL_Vouchers.Posted = @IsPosted)
             AND (@CostcenterID IS NULL
                  OR GL_VoucherDetails.CostcenterID = @CostcenterID)
             AND (@BranchID IS NULL
                  OR GL_Vouchers.BranchID = @BranchID) 
		     AND (ISNULL(GL_VoucherDetails.Debit , 0) > 0 or ISNULL(GL_VoucherDetails.Credit , 0) > 0)
        UNION ALL
        SELECT GL_Vouchers.ID AS                                                                           [GL_Vouchers_ID]
             , GL_VoucherType.ID AS                                                                        [VoucherType_ID]
             , GL_VoucherType.Code AS                                                                      [VoucherType_Code]
             , GL_Vouchers.VouhcerDate AS                                                                  VouhcerDate
             , GL_VoucherType.Name AS                                                                      [VoucherType_Name]
             , GL_VoucherType.Name_AR AS                                                                   [VoucherType_Name_AR]
             , GL_Vouchers.Code AS                                                                         [GL_Vouchers_Code]
             , GL_VoucherDetails.Memo AS                                                                   [GL_Vouchers.Memo]
             , CASE
                   WHEN GL_VoucherType.Code = 21
                        OR GL_VoucherType.Code = 22
                        OR GL_VoucherType.Code = 23
                        OR GL_VoucherType.Code = 24
                        AND ReferanceNo IS NOT NULL
                   THEN Replace(GL_VoucherDetails.Memo , Inv_Receipt_h.Entry_No , Inv_Receipt_h.Reference_No)
                   ELSE GL_VoucherDetails.Memo
               END                                                                                         [GL_Vouchers.Memo_Reffrence]
             , Inv_Receipt_h.Reference_No                                                                  Inv_Receipt_h_Reference_No
             , Inv_Receipt_h.Entry_No                                                                      Inv_Receipt_h_Entry_No
             , ISNULL(GL_VoucherDetails.Debit , 0) AS                                                      [GL_VoucherDetails.Debit]
             , ISNULL(GL_VoucherDetails.Credit , 0) AS                                                     [GL_VoucherDetails.Credit]
             , ISNULL(GL_VoucherDetails.Debit , 0) - ISNULL(GL_VoucherDetails.Credit , 0)                  Balance
             , dbo.GetPath(GL_Vouchers.id , GL_VoucherType.ID , GL_VoucherType.Code , GL_VoucherType.Name) Path
             , '2'                                                                                         GROUP_Sum
      , mstr_Subsidaries.ContactEn 							 
			 , mstr_Subsidaries.ContactAr 							 
			 , mstr_Subsidaries.AddressAr 							 
			 , mstr_Subsidaries.AddressEn 
			 ,GL_Accounts.code
			 ,GL_Accounts.Name
			 ,GL_Accounts.Name_AR
			 ,isnull(GL_Vouchers.posted,0)
	    FROM GL_VoucherDetails
             LEFT JOIN GL_Vouchers
             ON GL_Vouchers.ID = GL_VoucherDetails.VoucherID
			  left outer join mstr_Subsidaries
			 on GL_Vouchers.SubsidaryID=mstr_Subsidaries.ID
             LEFT JOIN GL_VoucherType
             ON GL_VoucherType.ID = GL_Vouchers.VoucherTypeID
             LEFT JOIN Inv_Receipt_H
             ON Inv_Receipt_H.ID = GL_Vouchers.ReceiptID , GL_Accounts 
        where  GL_VoucherDetails.AccountNoID = GL_accounts.AccountID and 
		   (@IsRelatedCustomer = 1
              and GL_VoucherDetails.AccountNoID IN
        (
         SELECT RelatedAccountID
         FROM GL_RelatedAccounts
         WHERE GL_RelatedAccounts.AccountID = @AccountID
        ))
             AND (@FromDate IS NULL
                  OR CAST(GL_Vouchers.VouhcerDate AS DATE) >= @FromDate)
             AND (@ToDate IS NULL
                  OR CAST(GL_Vouchers.VouhcerDate AS DATE) <= @ToDate)
             AND (@SubsidaryID IS NULL
                  OR GL_Vouchers.SubsidaryID = @SubsidaryID)
             AND (@IsPosted IS NULL
                  OR GL_Vouchers.Posted = @IsPosted)
             AND (@CostcenterID IS NULL
                  OR GL_VoucherDetails.CostcenterID = @CostcenterID)
             AND (@BranchID IS NULL
                  OR GL_Vouchers.BranchID = @BranchID)
    END
GO
/****** Object:  StoredProcedure [dbo].[Report_GL_Statement_Of_Account_Foreign_Currency]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Report_GL_Statement_Of_Account_Foreign_Currency] @AccountID         INT  = 9507
                                                          , @FromDate          DATE = '20190101'
                                                          , @ToDate            DATE = '20190616'
                                                          , @SubsidaryID       INT  = 63
                                                          , @IsRelatedCustomer BIT  = NULL
                                                          , @CostcenterID      INT  = NULL
                                                          , @BranchID          INT  = NULL
                                                          , @CurrencyID        INT  = 148
														   , @IsPosted          INT  = NULL
AS
    BEGIN

        DECLARE @BaseCurrency INT= NULL , @CheckCurrency INT= NULL , @IsLocalCurrency INT= NULL

        SELECT @BaseCurrency = CurrencyID
        FROM mstr_Subsidary_currency
        WHERE SubsidaryID = @SubsidaryID
              AND BaseCurrency = 1

        --SELECT @BaseCurrency
        -- Check If Account is used with more than currency in pervios balance
        SET @CheckCurrency =
        (
         SELECT TOP 1 COUNT(1) OVER() Count
         FROM GL_Vouchers
              LEFT JOIN GL_VoucherDetails
              ON GL_Vouchers.ID = GL_VoucherDetails.VoucherID
         WHERE AccountNoID IS NOT NULL
               AND AccountNoID = @AccountID
               AND GL_Vouchers.SubsidaryID = @SubsidaryID
               --AND GL_Vouchers.CurrencyID = @CurrencyID
                  AND (@IsPosted IS NULL
                  OR GL_Vouchers.Posted = @IsPosted)
               AND (@FromDate IS NULL
                    OR CAST(GL_Vouchers.VouhcerDate AS DATE) <= @FromDate)
               AND (@CostcenterID IS NULL
                    OR GL_VoucherDetails.CostcenterID = @CostcenterID)
               AND (@BranchID IS NULL
                    OR GL_Vouchers.BranchID = @BranchID)
         GROUP BY GL_Vouchers.SubsidaryID
                , GL_VoucherDetails.AccountNoID
                , GL_Vouchers.CurrencyID
        )
        --SELECT @CheckCurrency
        SELECT @CheckCurrency = CASE
                                    WHEN @CurrencyID IS NULL
                                         OR @FromDate IS NULL
                                    THEN 1
                                    ELSE @CheckCurrency
                                END

        SELECT @IsLocalCurrency = CASE
                                      WHEN(@BaseCurrency = @CurrencyID)
                                      THEN 1
                                      WHEN(@CurrencyID IS NULL)
                                      THEN 2
                                      ELSE 0
                                  END

        --SELECT @BaseCurrency
        --     , @CheckCurrency
        --     , @IsLocalCurrency
        --

        SELECT *
        INTO #Contxt
        FROM
        (
         SELECT NULL AS                                                                                            [GL_Vouchers_ID]
              , NULL AS                                                                                            [VoucherType_ID]
              , NULL AS                                                                                            [VoucherType_Code]
              , NULL AS                                                                                            VouhcerDate
              , 'Previous Balance' AS                                                                              [VoucherType_Name]
              , N'الرصيد السابق' AS                                                                                [VoucherType_Name_AR]
              , NULL                                                                                               [GL_Vouchers_Code]
              , NULL                                                                                               [GL_Vouchers.Memo]
              , NULL                                                                                               [GL_Vouchers.Memo_Reffrence]
              , NULL                                                                                               Inv_Receipt_h_Reference_No
              , NULL                                                                                               Inv_Receipt_h_Entry_No
              , ISNULL(SUM(GL_VoucherDetails.Debit) , 0)                                                           [GL_VoucherDetails.Debit]
              , ISNULL(SUM(GL_VoucherDetails.Credit) , 0)                                                          [GL_VoucherDetails.Credit]
              , ISNULL(SUM(GL_VoucherDetails.Debit) , 0) - ISNULL(SUM(GL_VoucherDetails.Credit) , 0)               Balance
              , ISNULL(SUM(GL_VoucherDetails.DebitForeign) , 0)                                                    [GL_VoucherDetails.DebitForeign]
              , ISNULL(SUM(GL_VoucherDetails.CreditForeign) , 0)                                                   [GL_VoucherDetails.CreditForeign]
              , ISNULL(SUM(GL_VoucherDetails.DebitForeign) , 0) - ISNULL(SUM(GL_VoucherDetails.CreditForeign) , 0) BalanceForeign
              , NULL                                                                                               [mstr_Currencies.ID]
              , NULL                                                                                               [mstr_Currencies.Code]
              , NULL                                                                                               [mstr_Currencies.Name]
              , NULL                                                                                               [mstr_Currencies.Name_AR]
              , NULL                                                                                               [GL_Vouchers.ExchangeRate]
              , NULL                                                                                               Path
              , '1'                                                                                                GROUP_Sum
              , @CheckCurrency                                                                                     CheckCurrency
              , @IsLocalCurrency                                                                                   IsLocalCurrency
         FROM GL_VoucherDetails
              LEFT JOIN GL_Vouchers
              ON GL_Vouchers.ID = GL_VoucherDetails.VoucherID
              LEFT JOIN GL_VoucherType
              ON GL_VoucherType.ID = GL_Vouchers.VoucherTypeID
         WHERE(@AccountID IS NULL
               OR GL_VoucherDetails.AccountNoID IN(@AccountID))
              AND (@FromDate IS NULL
                   OR CAST(GL_Vouchers.VouhcerDate AS DATE) < @FromDate)
              AND (@SubsidaryID IS NULL
                   OR GL_Vouchers.SubsidaryID = @SubsidaryID)
                AND (@IsPosted IS NULL
                  OR GL_Vouchers.Posted = @IsPosted)
              AND (@CostcenterID IS NULL
                   OR GL_VoucherDetails.CostcenterID = @CostcenterID)
              AND (@BranchID IS NULL
                   OR GL_Vouchers.BranchID = @BranchID)
              AND (@CurrencyID IS NULL
                   OR GL_Vouchers.CurrencyID = @CurrencyID)
         UNION ALL
         SELECT GL_Vouchers.ID AS                                                                           [GL_Vouchers_ID]
              , GL_VoucherType.ID AS                                                                        [VoucherType_ID]
              , GL_VoucherType.Code AS                                                                      [VoucherType_Code]
              , GL_Vouchers.VouhcerDate AS                                                                  VouhcerDate
              , GL_VoucherType.Name AS                                                                      [VoucherType_Name]
              , GL_VoucherType.Name_AR AS                                                                   [VoucherType_Name_AR]
              , GL_Vouchers.Code AS                                                                         [GL_Vouchers_Code]
              , GL_VoucherDetails.Memo                                                                      [GL_Vouchers.Memo]
              , CASE
                    WHEN(GL_VoucherType.Code = 21
                         OR GL_VoucherType.Code = 22
                         OR GL_VoucherType.Code = 23
                         OR GL_VoucherType.Code = 24)
                        AND ReferanceNo IS NOT NULL
                    THEN Replace(GL_VoucherDetails.Memo , Inv_Receipt_h.Entry_No , Inv_Receipt_h.Reference_No)
                    ELSE GL_VoucherDetails.Memo
                END                                                                                         [GL_Vouchers.Memo_Reffrence]
              , Inv_Receipt_h.Reference_No                                                                  Inv_Receipt_h_Reference_No
              , Inv_Receipt_h.Entry_No                                                                      Inv_Receipt_h_Entry_No
              , ISNULL(GL_VoucherDetails.Debit , 0) AS                                                      [GL_VoucherDetails.Debit]
              , ISNULL(GL_VoucherDetails.Credit , 0) AS                                                     [GL_VoucherDetails.Credit]
              , ISNULL(GL_VoucherDetails.Debit , 0) - ISNULL(GL_VoucherDetails.Credit , 0)                  Balance
              , CASE
                    WHEN @IsLocalCurrency = 0
                         OR @IsLocalCurrency = 2
                    THEN ISNULL(GL_VoucherDetails.DebitForeign , 0)
                    ELSE NULL
                END                                                                                         [GL_VoucherDetails.DebitForeign]
              , CASE
                    WHEN @IsLocalCurrency = 0
                         OR @IsLocalCurrency = 2
                    THEN ISNULL(GL_VoucherDetails.CreditForeign , 0)
                    ELSE NULL
                END                                                                                         [GL_VoucherDetails.CreditForeign]
              , CASE
                    WHEN @IsLocalCurrency = 0
                         OR @IsLocalCurrency = 2
                    THEN ISNULL(GL_VoucherDetails.DebitForeign , 0) - ISNULL(GL_VoucherDetails.CreditForeign , 0)
                    ELSE NULL
                END                                                                                         BalanceForeign
              , mstr_Currencies.ID                                                                          [mstr_Currencies.ID]
              , mstr_Currencies.Code                                                                        [mstr_Currencies.Code]
              , mstr_Currencies.Name                                                                        [mstr_Currencies.Name]
              , mstr_Currencies.Name_AR                                                                     [mstr_Currencies.Name_AR]
              , GL_Vouchers.ExchangeRate                                                                    [GL_Vouchers.ExchangeRate]
              , dbo.GetPath(GL_Vouchers.id , GL_VoucherType.ID , GL_VoucherType.Code , GL_VoucherType.Name) path
              , '2'                                                                                         GROUP_Sum
              , NULL                                                                                        CheckCurrency
              , @IsLocalCurrency                                                                            IsLocalCurrency
         FROM GL_VoucherDetails
              LEFT JOIN GL_Vouchers
              ON GL_Vouchers.ID = GL_VoucherDetails.VoucherID
              LEFT JOIN GL_VoucherType
              ON GL_VoucherType.ID = GL_Vouchers.VoucherTypeID
              LEFT JOIN Inv_Receipt_H
              ON Inv_Receipt_H.ID = GL_Vouchers.ReceiptID
              LEFT JOIN mstr_Currencies
              ON GL_Vouchers.CurrencyID = mstr_Currencies.ID
         WHERE(@AccountID IS NULL
               OR GL_VoucherDetails.AccountNoID IN(@AccountID))
              AND (@FromDate IS NULL
                   OR CAST(GL_Vouchers.VouhcerDate AS DATE) >= @FromDate)
              AND (@ToDate IS NULL
                   OR CAST(GL_Vouchers.VouhcerDate AS DATE) <= @ToDate)
              AND (@SubsidaryID IS NULL
                   OR GL_Vouchers.SubsidaryID = @SubsidaryID)
                AND (@IsPosted IS NULL
                  OR GL_Vouchers.Posted = @IsPosted)
              AND (@CostcenterID IS NULL
                   OR GL_VoucherDetails.CostcenterID = @CostcenterID)
              AND (@BranchID IS NULL
                   OR GL_Vouchers.BranchID = @BranchID)
              AND (@CurrencyID IS NULL
                   OR GL_Vouchers.CurrencyID = @CurrencyID)
         UNION ALL
         SELECT GL_Vouchers.ID AS                                                                           [GL_Vouchers_ID]
              , GL_VoucherType.ID AS                                                                        [VoucherType_ID]
              , GL_VoucherType.Code AS                                                                      [VoucherType_Code]
              , GL_Vouchers.VouhcerDate AS                                                                  VouhcerDate
              , GL_VoucherType.Name AS                                                                      [VoucherType_Name]
              , GL_VoucherType.Name_AR AS                                                                   [VoucherType_Name_AR]
              , GL_Vouchers.Code AS                                                                         [GL_Vouchers_Code]
              , GL_VoucherDetails.Memo AS                                                                   [GL_Vouchers.Memo]
              , CASE
                    WHEN GL_VoucherType.Code = 21
                         OR GL_VoucherType.Code = 22
                         OR GL_VoucherType.Code = 23
                         OR GL_VoucherType.Code = 24
                         AND ReferanceNo IS NOT NULL
                    THEN Replace(GL_VoucherDetails.Memo , Inv_Receipt_h.Entry_No , Inv_Receipt_h.Reference_No)
                    ELSE GL_VoucherDetails.Memo
                END                                                                                         [GL_Vouchers.Memo_Reffrence]
              , Inv_Receipt_h.Reference_No                                                                  Inv_Receipt_h_Reference_No
              , Inv_Receipt_h.Entry_No                                                                      Inv_Receipt_h_Entry_No
              , ISNULL(GL_VoucherDetails.Debit , 0) AS                                                      [GL_VoucherDetails.Debit]
              , ISNULL(GL_VoucherDetails.Credit , 0) AS                                                     [GL_VoucherDetails.Credit]
              , ISNULL(GL_VoucherDetails.Debit , 0) - ISNULL(GL_VoucherDetails.Credit , 0)                  Balance
              , CASE
                    WHEN @IsLocalCurrency = 0
                         OR @IsLocalCurrency = 2
                    THEN ISNULL(GL_VoucherDetails.DebitForeign , 0)
                    ELSE NULL
                END                                                                                         [GL_VoucherDetails.DebitForeign]
              , CASE
                    WHEN @IsLocalCurrency = 0
                         OR @IsLocalCurrency = 2
                    THEN ISNULL(GL_VoucherDetails.CreditForeign , 0)
                    ELSE NULL
                END                                                                                         [GL_VoucherDetails.CreditForeign]
              , CASE
                    WHEN @IsLocalCurrency = 0
                         OR @IsLocalCurrency = 2
                    THEN ISNULL(GL_VoucherDetails.DebitForeign , 0) - ISNULL(GL_VoucherDetails.CreditForeign , 0)
                    ELSE NULL
                END                                                                                         BalanceForeign
              , mstr_Currencies.ID                                                                          [mstr_Currencies.ID]
              , mstr_Currencies.Code                                                                        [mstr_Currencies.Code]
              , mstr_Currencies.Name                                                                        [mstr_Currencies.Name]
              , mstr_Currencies.Name_AR                                                                     [mstr_Currencies.Name_AR]
              , GL_Vouchers.ExchangeRate                                                                    [GL_Vouchers.ExchangeRate]
              , dbo.GetPath(GL_Vouchers.id , GL_VoucherType.ID , GL_VoucherType.Code , GL_VoucherType.Name) Path
              , '2'                                                                                         GROUP_Sum
              , NULL                                                                                        CheckCurrency
              , @IsLocalCurrency                                                                            IsLocalCurrency
         FROM GL_VoucherDetails
              LEFT JOIN GL_Vouchers
              ON GL_Vouchers.ID = GL_VoucherDetails.VoucherID
              LEFT JOIN GL_VoucherType
              ON GL_VoucherType.ID = GL_Vouchers.VoucherTypeID
              LEFT JOIN Inv_Receipt_H
              ON Inv_Receipt_H.ID = GL_Vouchers.ReceiptID
              LEFT JOIN mstr_Currencies
              ON GL_Vouchers.CurrencyID = mstr_Currencies.ID
         WHERE(@IsRelatedCustomer = 1
               AND GL_VoucherDetails.AccountNoID IN
         (
          SELECT RelatedAccountID
          FROM GL_RelatedAccounts
          WHERE GL_RelatedAccounts.AccountID = @AccountID
         ))
              AND (@FromDate IS NULL
                   OR CAST(GL_Vouchers.VouhcerDate AS DATE) >= @FromDate)
              AND (@ToDate IS NULL
                   OR CAST(GL_Vouchers.VouhcerDate AS DATE) <= @ToDate)
              AND (@SubsidaryID IS NULL
                   OR GL_Vouchers.SubsidaryID = @SubsidaryID)
                AND (@IsPosted IS NULL
                  OR GL_Vouchers.Posted = @IsPosted)
              AND (@CostcenterID IS NULL
                   OR GL_VoucherDetails.CostcenterID = @CostcenterID)
              AND (@BranchID IS NULL
                   OR GL_Vouchers.BranchID = @BranchID)
              AND (@CurrencyID IS NULL
                   OR GL_Vouchers.CurrencyID = @CurrencyID)
        ) AS Context

        DELETE #Contxt
        WHERE ISNULL(CheckCurrency , 0) > 1

        SELECT *
        FROM #Contxt
    END
GO
/****** Object:  StoredProcedure [dbo].[Report_GL_Statement_Of_Account_unitedco]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Report_GL_Statement_Of_Account_unitedco] @AccountID         INT  = NULL
                                         , @FromDate          DATE = NULL
                                         , @ToDate            DATE = NULL
                                         , @SubsidaryID       INT  = NULL
                                         , @IsRelatedCustomer BIT  = NULL
                                         , @CostcenterID      INT  = NULL
                                         , @BranchID          INT  = NULL
                                         , @IsPosted          INT  = NULL
AS
     BEGIN
        SELECT NULL AS                                                                              [GL_Vouchers_ID]
             , NULL AS                                                                              [VoucherType_ID]
             , NULL AS                                                                              [VoucherType_Code]
             , NULL AS                                                                              VouhcerDate
             , 'Previous Balance' AS                                                                [VoucherType_Name]
             , N'الرصيد السابق' AS                                                                  [VoucherType_Name_AR]
             , NULL                                                                                 [GL_Vouchers_Code]
             , NULL                                                                                 [GL_Vouchers.Memo]
             , NULL                                                                                 [GL_Vouchers.Memo_Reffrence]
             , NULL                                                                                 Inv_Receipt_h_Reference_No
             , NULL                                                                                 Inv_Receipt_h_Entry_No
             , ISNULL(SUM(GL_VoucherDetails.Debit) , 0)                                             [GL_VoucherDetails.Debit]
             , ISNULL(SUM(GL_VoucherDetails.Credit) , 0)                                            [GL_VoucherDetails.Credit]
             , ISNULL(SUM(GL_VoucherDetails.Debit) , 0) - ISNULL(SUM(GL_VoucherDetails.Credit) , 0) Balance
             , NULL                                                                                 Path
             , '1'                                                                                  GROUP_Sum
			, mstr_Subsidaries.ContactEn 							 
			 , mstr_Subsidaries.ContactAr 							 
			 , mstr_Subsidaries.AddressAr 							 
			 , mstr_Subsidaries.AddressEn 
			 ,GL_Accounts.Code
			,GL_Accounts.Name
			,GL_Accounts.Name_AR
			,0  IsPosted
        FROM GL_VoucherDetails
             LEFT JOIN GL_Vouchers
             ON GL_Vouchers.ID = GL_VoucherDetails.VoucherID
			 left outer join mstr_Subsidaries
			 on GL_Vouchers.SubsidaryID=mstr_Subsidaries.ID
             LEFT JOIN GL_VoucherType
             ON GL_VoucherType.ID = GL_Vouchers.VoucherTypeID,GL_Accounts 
        WHERE GL_Accounts.AccountID = GL_VoucherDetails.AccountNoID and 
		(@AccountID IS NULL
              OR GL_VoucherDetails.AccountNoID IN(@AccountID))
             AND (@FromDate IS NULL
                  OR CAST(GL_Vouchers.VouhcerDate AS DATE) < @FromDate)
             AND (@SubsidaryID IS NULL
                  OR GL_Vouchers.SubsidaryID = @SubsidaryID)
             AND (@IsPosted IS NULL
                  OR GL_Vouchers.Posted = @IsPosted)
             AND (@CostcenterID IS NULL
                  OR GL_VoucherDetails.CostcenterID = @CostcenterID)
             AND (@BranchID IS NULL
                  OR GL_Vouchers.BranchID = @BranchID)
				  group by  mstr_Subsidaries.ContactEn 							 
			 , mstr_Subsidaries.ContactAr 							 
			 , mstr_Subsidaries.AddressAr 							 
			 , mstr_Subsidaries.AddressEn , GL_Accounts.Code
			,GL_Accounts.Name
			,GL_Accounts.Name_AR
			--,isnull(GL_Vouchers.posted,0)
        UNION ALL
        SELECT GL_Vouchers.ID AS                                                                           [GL_Vouchers_ID]
             , GL_VoucherType.ID AS                                                                        [VoucherType_ID]
             , GL_VoucherType.Code AS                                                                      [VoucherType_Code]
             , GL_Vouchers.VouhcerDate AS                                                                  VouhcerDate
             , GL_VoucherType.Name AS                                                                      [VoucherType_Name]
             , GL_VoucherType.Name_AR AS                                                                   [VoucherType_Name_AR]
             , GL_Vouchers.Code AS                                                                         [GL_Vouchers_Code]
             , GL_VoucherDetails.Memo                                                                      [GL_Vouchers.Memo]
             , CASE
                   WHEN(GL_VoucherType.Code = 21
                        OR GL_VoucherType.Code = 22
                        OR GL_VoucherType.Code = 23
                        OR GL_VoucherType.Code = 24)
                       AND ReferanceNo IS NOT NULL
                   THEN Replace(GL_VoucherDetails.Memo , Inv_Receipt_h.Entry_No , Inv_Receipt_h.Reference_No)
                   ELSE GL_VoucherDetails.Memo
               END                                                                                         [GL_Vouchers.Memo_Reffrence]
             , Inv_Receipt_h.Reference_No                                                                  Inv_Receipt_h_Reference_No
             , Inv_Receipt_h.Entry_No                                                                      Inv_Receipt_h_Entry_No
             , ISNULL(GL_VoucherDetails.Debit , 0) AS                                                      [GL_VoucherDetails.Debit]
             , ISNULL(GL_VoucherDetails.Credit , 0) AS                                                     [GL_VoucherDetails.Credit]
             , ISNULL(GL_VoucherDetails.Debit , 0) - ISNULL(GL_VoucherDetails.Credit , 0)                  Balance
             , dbo.GetPath(GL_Vouchers.id , GL_VoucherType.ID , GL_VoucherType.Code , GL_VoucherType.Name) path
             , '2'                                                                                         GROUP_Sum
      , mstr_Subsidaries.ContactEn 							 
			 , mstr_Subsidaries.ContactAr 							 
			 , mstr_Subsidaries.AddressAr 							 
			 , mstr_Subsidaries.AddressEn 
			 ,GL_Accounts.Code
			 ,GL_Accounts.Name
			 ,GL_Accounts.Name_AR
			 ,isnull(GL_Vouchers.posted, -1)
	    FROM GL_VoucherDetails
             LEFT JOIN GL_Vouchers
             ON GL_Vouchers.ID = GL_VoucherDetails.VoucherID
			  left outer join mstr_Subsidaries
			 on GL_Vouchers.SubsidaryID=mstr_Subsidaries.ID
             LEFT JOIN GL_VoucherType
             ON GL_VoucherType.ID = GL_Vouchers.VoucherTypeID
             LEFT JOIN Inv_Receipt_H
             ON Inv_Receipt_H.ID = GL_Vouchers.ReceiptID,GL_Accounts
        WHERE GL_Accounts.AccountID = GL_VoucherDetails.AccountNoID and 
		(@AccountID IS NULL
              OR GL_VoucherDetails.AccountNoID IN(@AccountID))
             AND (@FromDate IS NULL
                  OR CAST(GL_Vouchers.VouhcerDate AS DATE) >= @FromDate)
             AND (@ToDate IS NULL
                  OR CAST(GL_Vouchers.VouhcerDate AS DATE) <= @ToDate)
             AND (@SubsidaryID IS NULL
                  OR GL_Vouchers.SubsidaryID = @SubsidaryID)
             AND (@IsPosted IS NULL
                  OR GL_Vouchers.Posted = @IsPosted)
             AND (@CostcenterID IS NULL
                  OR GL_VoucherDetails.CostcenterID = @CostcenterID)
             AND (@BranchID IS NULL
                  OR GL_Vouchers.BranchID = @BranchID) 
		    -- AND (ISNULL(GL_VoucherDetails.Debit , 0) > 0 or ISNULL(GL_VoucherDetails.Credit , 0) > 0)
        UNION ALL
        SELECT GL_Vouchers.ID AS                                                                           [GL_Vouchers_ID]
             , GL_VoucherType.ID AS                                                                        [VoucherType_ID]
             , GL_VoucherType.Code AS                                                                      [VoucherType_Code]
             , GL_Vouchers.VouhcerDate AS                                                                  VouhcerDate
             , GL_VoucherType.Name AS                                                                      [VoucherType_Name]
             , GL_VoucherType.Name_AR AS                                                                   [VoucherType_Name_AR]
             , GL_Vouchers.Code AS                                                                         [GL_Vouchers_Code]
             , GL_VoucherDetails.Memo AS                                                                   [GL_Vouchers.Memo]
             , CASE
                   WHEN GL_VoucherType.Code = 21
                        OR GL_VoucherType.Code = 22
                        OR GL_VoucherType.Code = 23
                        OR GL_VoucherType.Code = 24
                        AND ReferanceNo IS NOT NULL
                   THEN Replace(GL_VoucherDetails.Memo , Inv_Receipt_h.Entry_No , Inv_Receipt_h.Reference_No)
                   ELSE GL_VoucherDetails.Memo
               END                                                                                         [GL_Vouchers.Memo_Reffrence]
             , Inv_Receipt_h.Reference_No                                                                  Inv_Receipt_h_Reference_No
             , Inv_Receipt_h.Entry_No                                                                      Inv_Receipt_h_Entry_No
             , ISNULL(GL_VoucherDetails.Debit , 0) AS                                                      [GL_VoucherDetails.Debit]
             , ISNULL(GL_VoucherDetails.Credit , 0) AS                                                     [GL_VoucherDetails.Credit]
             , ISNULL(GL_VoucherDetails.Debit , 0) - ISNULL(GL_VoucherDetails.Credit , 0)                  Balance
             , dbo.GetPath(GL_Vouchers.id , GL_VoucherType.ID , GL_VoucherType.Code , GL_VoucherType.Name) Path
             , '2'                                                                                         GROUP_Sum
      , mstr_Subsidaries.ContactEn 							 
			 , mstr_Subsidaries.ContactAr 							 
			 , mstr_Subsidaries.AddressAr 							 
			 , mstr_Subsidaries.AddressEn 
			 ,GL_Accounts.code
			 ,GL_Accounts.Name
			 ,GL_Accounts.Name_AR
			 ,isnull(GL_Vouchers.posted,0)
	    FROM GL_VoucherDetails
             LEFT JOIN GL_Vouchers
             ON GL_Vouchers.ID = GL_VoucherDetails.VoucherID
			  left outer join mstr_Subsidaries
			 on GL_Vouchers.SubsidaryID=mstr_Subsidaries.ID
             LEFT JOIN GL_VoucherType
             ON GL_VoucherType.ID = GL_Vouchers.VoucherTypeID
             LEFT JOIN Inv_Receipt_H
             ON Inv_Receipt_H.ID = GL_Vouchers.ReceiptID,GL_Accounts
        WHERE  GL_VoucherDetails.AccountNoID = GL_accounts.AccountID and 
		   (@IsRelatedCustomer = 1
              AND GL_VoucherDetails.AccountNoID IN
        (
         SELECT RelatedAccountID
         FROM GL_RelatedAccounts
         WHERE GL_RelatedAccounts.AccountID = @AccountID
        ))
             AND (@FromDate IS NULL
                  OR CAST(GL_Vouchers.VouhcerDate AS DATE) >= @FromDate)
             AND (@ToDate IS NULL
                  OR CAST(GL_Vouchers.VouhcerDate AS DATE) <= @ToDate)
             AND (@SubsidaryID IS NULL
                  OR GL_Vouchers.SubsidaryID = @SubsidaryID)
             AND (@IsPosted IS NULL
                  OR GL_Vouchers.Posted = @IsPosted)
             AND (@CostcenterID IS NULL
                  OR GL_VoucherDetails.CostcenterID = @CostcenterID)
             AND (@BranchID IS NULL
                  OR GL_Vouchers.BranchID = @BranchID)
    END
GO
/****** Object:  StoredProcedure [dbo].[Report_GL_Trial_Balance_Sheet]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Report_GL_Trial_Balance_Sheet] @ToDate      DATE = '2019-12-31'
                                        , @Level       INT  = NULL
                                        , @SubsidaryID INT  = NULL
                                        , @Type        INT  = NULL
                                        , @TargetMoves INT  = NULL
                                        , @ClearZero   INT  = NULL
AS
    BEGIN
        IF @Level = 4
            SET @Type = 2;
        -- get account for customers
		declare @mainAccountCode nvarchar(50);
		set @mainAccountCode=(select top 1 ISNULL(GL_Accounts.Code,'') from GL_Accounts where GL_Accounts.AccountID =(select top 1  ISNULL(MIN(acc.Main_AccountID),0) from GL_Accounts as  acc where acc.IsVendor=0));
		declare @mainAccountId int;
		set @mainAccountId=(select top 1 ISNULL(GL_Accounts.AccountID,'') from GL_Accounts where GL_Accounts.Code=@mainAccountCode);
        -- Get Account Level : #Accounts_Level;
        WITH Accounts_Level
             AS (
             -- root level
             SELECT GL_Accounts.AccountID
                  , GL_Accounts.ParentID
                  , 1 AS                                                                  [Level]
                  , CAST('-' + CAST(AccountID AS NVARCHAR(10)) + '-' AS NVARCHAR(100)) AS Hierarchy -- build hierarchy in format -L0-L1-L2-...-Ln--
             FROM GL_Accounts
             WHERE ParentID IS NULL
             UNION ALL
             -- recursive join on parent, building hierarchy
             SELECT CurrentLevel.AccountID
                  , CurrentLevel.ParentID
                  , ParentLevel.[Level] + 1 AS                                                                           [Level]
                  , CAST(ParentLevel.Hierarchy + CAST(CurrentLevel.AccountID AS NVARCHAR(10)) + '-' AS NVARCHAR(100)) AS Hierarchy
             FROM GL_Accounts CurrentLevel
                  JOIN Accounts_Level ParentLevel
                  ON CurrentLevel.ParentID = ParentLevel.AccountID)
             SELECT Accounts_Level.AccountID
                  , Accounts_Level.ParentID
                  , Accounts_Level.Level
                  , Accounts_Level.Hierarchy
             INTO #AccountsLevel
             FROM Accounts_Level

        DECLARE @ReceivablesAccount_ID INT= NULL , @PayablesAccount_ID INT= NULL, @translevel int= 4   

        SELECT @ReceivablesAccount_ID = ReceivableAccount
             , @PayablesAccount_ID = PayableAccount ,@translevel = MinMainLevels
        FROM GL_Setup
        WHERE(ReceivableAccount IS NOT NULL
              OR PayableAccount IS NOT NULL)

			  IF @translevel is null set @translevel =4
        ---------------------------------------------------------------------------------------------------
        -- Get Details :#GL_VoucherDetails
        SELECT D.AccountNoID                                        AccountNoID
             , #AccountsLevel.Hierarchy                             Hierarchy
             , ISNULL(SUM(Debit) , 00)                              Debit
             , ISNULL(SUM(Credit) , 00)                             Credit
             , ISNULL(SUM(Debit) , 00) - ISNULL(SUM(D.Credit) , 00) Balance
			 
        INTO #GL_VoucherDetails
        FROM GL_VoucherDetails D
             LEFT JOIN #AccountsLevel
             ON #AccountsLevel.AccountID = D.AccountNoID
        WHERE(D.VoucherID IN
        (
         SELECT ID
         FROM GL_Vouchers H
         WHERE H.ID = D.VoucherID
               AND (@SubsidaryID IS NULL
                    OR H.SubsidaryID IN(@SubsidaryID))
         AND (@ToDate IS NULL
              OR CAST(H.VouhcerDate AS DATE) <= @ToDate)
         AND (@TargetMoves IS NULL
              OR H.Posted = @TargetMoves)
        ))
        GROUP BY D.AccountNoID
               , #AccountsLevel.Hierarchy
        ORDER BY AccountNoID

        -- Get All Acounts With It's Value : #All_Accounts
        SELECT GL_Accounts.AccountID
             , GL_Accounts.Code
             , SUM(Debit) AS  [Debit]
             , SUM(Credit) AS [Credit]

        INTO #All_Accounts
        FROM GL_Accounts
             LEFT JOIN #AccountsLevel
             ON #AccountsLevel.AccountID = GL_Accounts.AccountID , 
             #GL_VoucherDetails
        WHERE #GL_VoucherDetails.Hierarchy LIKE #AccountsLevel.Hierarchy + '%'
        GROUP BY GL_Accounts.AccountID
               , GL_Accounts.Code

        --SELECT Sum(Debit),Sum(Credit),Sum(Debit)-Sum(Credit),Count(1) FROM #All_Accounts
        -- Get Accounts_Balance_Hierarchy
        -- Get Accounts Related to @SubsidaryID

        SELECT *
        INTO #GL_Accounts
        FROM
        (
         SELECT *
         FROM GL_Accounts
         WHERE GL_Accounts.LevelNo <= 3
         UNION ALL
         SELECT *
         FROM GL_Accounts
         WHERE GL_Accounts.LevelNo >= 4
               AND (GL_Accounts.AccountID IN
         (
          SELECT AccountID
          FROM GL_AccountSubsidiary
          WHERE GL_AccountSubsidiary.AccountID = GL_Accounts.AccountID
                AND (@SubsidaryID IS NULL
                     OR GL_AccountSubsidiary.SubsidiaryID = @SubsidaryID)
         ))
        ) GL_Accounts_SubsidaryID

        SELECT Gl_Accounts.AccountID
             , GL_Accounts.Code
             , CASE
                   WHEN(Gl_Accounts.AccountID = @ReceivablesAccount_ID)
                       OR (Gl_Accounts.AccountID = @PayablesAccount_ID)
                   THEN 2
                   ELSE GL_Accounts.Type
               END              Type
             , GL_Accounts.Type Type2
             , GL_Accounts.LevelNo
             , GL_Accounts.Name
			 , GL_Accounts.ParentID
             , GL_Accounts.Name_AR
             , #All_Accounts.Debit
             , #All_Accounts.Credit
             , CASE
                   WHEN Type = 1
                   THEN ISNULL(CASE
                                   WHEN ISNULL(Debit , 00) - ISNULL(Credit , 00) > 0
                                   THEN ISNULL(Debit , 00) - ISNULL(Credit , 00)
                                   ELSE 0
                               END , 0)
                   ELSE 0
               END AS           [Balance_Debit]
             , CASE
                   WHEN Type = 1
                   THEN ISNULL(CASE
                                   WHEN ISNULL(Credit , 00) - ISNULL(Debit , 00) > 0
                                   THEN ISNULL(Credit , 00) - ISNULL(Debit , 00)
                                   ELSE 0
                               END , 0)
                   ELSE 0
               END AS           [Balance_Credit]
        INTO #All_Accounts_Final
        FROM #GL_Accounts GL_Accounts
             LEFT JOIN #All_Accounts
             ON #All_Accounts.AccountID = GL_Accounts.AccountID

        SELECT *
             , CASE
                   WHEN(Type >= 2 and LevelNo >= @translevel)
                   THEN ISNULL(CASE
                                   WHEN ISNULL(Debit , 00) - ISNULL(Credit , 00) > 0
                                   THEN ISNULL(Debit , 00) - ISNULL(Credit , 00)
                                   ELSE 0
                               END , 0)
                   ELSE 0
               END AS [Balance_Debit_Transaction]
             , CASE
                   WHEN(Type >= 2 and LevelNo >= @translevel)
                   THEN ISNULL(CASE
                                   WHEN ISNULL(Credit , 00) - ISNULL(Debit , 00) > 0
                                   THEN ISNULL(Credit , 00) - ISNULL(Debit , 00)
                                   ELSE 0
                               END , 0)
                   ELSE 0
               END AS [Balance_Credit_Transaction]
			   , CASE
                   WHEN(Type = 1 and LevelNo = 1)
                   THEN ISNULL(CASE
                                   WHEN ISNULL(Debit , 00) - ISNULL(Credit , 00) > 0
                                   THEN ISNULL(Debit , 00) - ISNULL(Credit , 00)
                                   ELSE 0
                               END , 0)
                   ELSE 0
               END AS [Balance_Debit_Transaction1]
             , CASE
                   WHEN(Type =1  and LevelNo = 1)
                   THEN ISNULL(CASE
                                   WHEN ISNULL(Credit , 00) - ISNULL(Debit , 00) > 0
                                   THEN ISNULL(Credit , 00) - ISNULL(Debit , 00)
                                   ELSE 0
                               END , 0)
                   ELSE 0
               END AS [Balance_Credit_Transaction1]
        INTO #T
        FROM #All_Accounts_Final
        WHERE(@Type IS NULL
              OR Type = @Type)
             AND (@Level = 4
                  OR @Level IS NULL
                  OR LevelNo <= @Level)
             AND (LevelNo != 0)
             AND (@ClearZero IS NULL
                  OR (@ClearZero = 1
                      AND Debit - Credit <> 0))
					--  Select sum([Balance_Debit_Transaction]),sum([Balance_Credit_Transaction]),sum([Balance_Debit_Transaction1]),sum([Balance_Credit_Transaction1]) from #t 
        SELECT #t.AccountID,
		--#t.Balance_Credit
		--,
		CASE
    WHEN #t.Code =@mainAccountCode or #t.ParentID = @mainAccountId
	THEN (
	select 
	CASE
    WHEN ISNULL(SUM(AV_accountBalance.Credit),0)  > ISNULL(SUM(AV_accountBalance.Debit),0)  THEN (ISNULL(SUM(AV_accountBalance.Credit),0) - ISNULL(SUM(AV_accountBalance.Debit),0))
    ELSE 0
    END
	from AV_accountBalance
   where 
   (
   AV_accountBalance.Main_AccountID=#t.AccountID)
   and AV_accountBalance.SubsidaryID=@SubsidaryID
   and  CAST(AV_accountBalance.VouhcerDate AS DATE) <= @ToDate 
	)
	WHEN #t.AccountID = (select accc.ParentID from GL_Accounts accc where accc.AccountID = @mainAccountId)
	THEN
	(
	select 
	CASE
    WHEN ISNULL(SUM(AV_accountBalance.Credit),0)  > ISNULL(SUM(AV_accountBalance.Debit),0)  THEN (ISNULL(SUM(AV_accountBalance.Credit),0) - ISNULL(SUM(AV_accountBalance.Debit),0))
    ELSE 0
END
	from AV_accountBalance
   where 
   ((AV_accountBalance.Main_AccountID in 
   (select accountid from GL_Accounts where ParentID=@mainAccountId) )
   or AV_accountBalance.Main_AccountID=@mainAccountId)
   and AV_accountBalance.SubsidaryID=@SubsidaryID
   and  CAST(AV_accountBalance.VouhcerDate AS DATE) <= @ToDate 
	)
    ELSE #t.Balance_Credit
END Balance_Credit
		,
		CASE
    WHEN #t.Code =@mainAccountCode 
	THEN (
	select 
	CASE
    WHEN ISNULL(SUM(AV_accountBalance.Credit),0)  > ISNULL(SUM(AV_accountBalance.Debit),0)  THEN (ISNULL(SUM(AV_accountBalance.Credit),0) - ISNULL(SUM(AV_accountBalance.Debit),0))
    ELSE 0
END
	from AV_accountBalance
   where 
   ((AV_accountBalance.Main_AccountID in 
   (select accountid from GL_Accounts where ParentID=@mainAccountId) )
   or AV_accountBalance.Main_AccountID=@mainAccountId)
   and AV_accountBalance.SubsidaryID=@SubsidaryID
   and  CAST(AV_accountBalance.VouhcerDate AS DATE) <= @ToDate 
	)
    ELSE #t.Balance_Credit_Transaction
END Balance_Credit_Transaction,
       --,#t.Balance_Credit_Transaction,
		#t.Balance_Credit_Transaction1,
	CASE
     WHEN #t.Code =@mainAccountCode  or #t.ParentID=@mainAccountId 
	THEN (
	select 
	CASE
    WHEN ISNULL(SUM(AV_accountBalance.debit),0)  > ISNULL(SUM(AV_accountBalance.credit),0)  THEN (ISNULL(SUM(AV_accountBalance.debit),0) - ISNULL(SUM(AV_accountBalance.credit),0))
    ELSE 0
    END
	from AV_accountBalance
   where 
   (
   AV_accountBalance.Main_AccountID=#t.AccountID)
   and AV_accountBalance.SubsidaryID=@SubsidaryID
   and  CAST(AV_accountBalance.VouhcerDate AS DATE) <= @ToDate 
	)
	WHEN #t.AccountID = (select accc.ParentID from GL_Accounts accc where accc.AccountID = @mainAccountId)
	THEN 
	(
	select 
	CASE
    WHEN ISNULL(SUM(AV_accountBalance.Debit),0)  > ISNULL(SUM(AV_accountBalance.Credit),0)  THEN (ISNULL(SUM(AV_accountBalance.Debit),0) - ISNULL(SUM(AV_accountBalance.Credit),0))
    ELSE 0
END
	from AV_accountBalance
   where 
   ((AV_accountBalance.Main_AccountID in 
   (select accountid from GL_Accounts where ParentID=@mainAccountId) )
   or AV_accountBalance.Main_AccountID=@mainAccountId)
   and AV_accountBalance.SubsidaryID=@SubsidaryID
   and  CAST(AV_accountBalance.VouhcerDate AS DATE) <= @ToDate 
	)
    ELSE #t.Balance_Debit
END Balance_Debit,
		CASE
    WHEN #t.Code =@mainAccountCode THEN 
	(
	select 
	CASE
    WHEN ISNULL(SUM(AV_accountBalance.Debit),0)  > ISNULL(SUM(AV_accountBalance.Credit),0)  THEN (ISNULL(SUM(AV_accountBalance.Debit),0) - ISNULL(SUM(AV_accountBalance.Credit),0))
    ELSE 0
END
	from AV_accountBalance
   where 
   ((AV_accountBalance.Main_AccountID in 
   (select accountid from GL_Accounts where ParentID=@mainAccountId) )
   or AV_accountBalance.Main_AccountID=@mainAccountId)
   and AV_accountBalance.SubsidaryID=@SubsidaryID
   and  CAST(AV_accountBalance.VouhcerDate AS DATE) <= @ToDate 
	)
    ELSE #t.Balance_Debit_Transaction
    END Balance_Debit_Transaction,
--#t.Balance_Debit_Transaction,
		#t.Balance_Debit_Transaction1,
		#t.Code,
		#t.Credit,
		#t.Debit
		,#t.LevelNo,
		#t.Name,
		#t.Name_AR,
		#t.Type,
		#t.Type2,
		#t.ParentID
-- SELECT #t.*
        FROM #t
        ORDER BY Code
    END


	--exec Report_GL_Trial_Balance_Sheet @subsidaryid=1,@todate='2020-11-28'
GO
/****** Object:  StoredProcedure [dbo].[Report_GL_Trial_Balance_Sheet_wtcft]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Report_GL_Trial_Balance_Sheet_wtcft] @ToDate      DATE = '2019-12-31'
                                        , @Level       INT  = NULL
                                        , @SubsidaryID INT  = NULL
                                        , @Type        INT  = NULL
                                        , @TargetMoves INT  = NULL
                                        , @ClearZero   INT  = NULL
AS
    BEGIN
        IF @Level = 4
            SET @Type = 2;
        -- get account for customers
		declare @mainAccountCode nvarchar(50);
		set @mainAccountCode=(select top 1 ISNULL(GL_Accounts.Code,'') from GL_Accounts where GL_Accounts.AccountID =(select  ISNULL(MIN(acc.Main_AccountID),0) from GL_Accounts as  acc where acc.IsVendor=0));
        -- Get Account Level : #Accounts_Level;
        WITH Accounts_Level
             AS (
             -- root level
             SELECT GL_Accounts.AccountID
                  , GL_Accounts.ParentID
                  , 1 AS                                                                  [Level]
                  , CAST('-' + CAST(AccountID AS NVARCHAR(10)) + '-' AS NVARCHAR(100)) AS Hierarchy -- build hierarchy in format -L0-L1-L2-...-Ln--
             FROM GL_Accounts
             WHERE ParentID IS NULL
             UNION ALL
             -- recursive join on parent, building hierarchy
             SELECT CurrentLevel.AccountID
                  , CurrentLevel.ParentID
                  , ParentLevel.[Level] + 1 AS                                                                           [Level]
                  , CAST(ParentLevel.Hierarchy + CAST(CurrentLevel.AccountID AS NVARCHAR(10)) + '-' AS NVARCHAR(100)) AS Hierarchy
             FROM GL_Accounts CurrentLevel
                  JOIN Accounts_Level ParentLevel
                  ON CurrentLevel.ParentID = ParentLevel.AccountID)
             SELECT Accounts_Level.AccountID
                  , Accounts_Level.ParentID
                  , Accounts_Level.Level
                  , Accounts_Level.Hierarchy
             INTO #AccountsLevel
             FROM Accounts_Level

        DECLARE @ReceivablesAccount_ID INT= NULL , @PayablesAccount_ID INT= NULL, @translevel int= 4   

        SELECT @ReceivablesAccount_ID = ReceivableAccount
             , @PayablesAccount_ID = PayableAccount ,@translevel = MinMainLevels
        FROM GL_Setup
        WHERE(ReceivableAccount IS NOT NULL
              OR PayableAccount IS NOT NULL)

			  IF @translevel is null set @translevel =4
        ---------------------------------------------------------------------------------------------------
        -- Get Details :#GL_VoucherDetails
        SELECT D.AccountNoID                                        AccountNoID
             , #AccountsLevel.Hierarchy                             Hierarchy
             , ISNULL(SUM(Debit) , 00)                              Debit
             , ISNULL(SUM(Credit) , 00)                             Credit
             , ISNULL(SUM(Debit) , 00) - ISNULL(SUM(D.Credit) , 00) Balance
			 
        INTO #GL_VoucherDetails
        FROM GL_VoucherDetails D
             LEFT JOIN #AccountsLevel
             ON #AccountsLevel.AccountID = D.AccountNoID
        WHERE(D.VoucherID IN
        (
         SELECT ID
         FROM GL_Vouchers H
         WHERE H.ID = D.VoucherID
               AND (@SubsidaryID IS NULL
                    OR H.SubsidaryID IN(@SubsidaryID))
         AND (@ToDate IS NULL
              OR CAST(H.VouhcerDate AS DATE) <= @ToDate)
         AND (@TargetMoves IS NULL
              OR H.Posted = @TargetMoves)
        ))
        GROUP BY D.AccountNoID
               , #AccountsLevel.Hierarchy
        ORDER BY AccountNoID

        -- Get All Acounts With It's Value : #All_Accounts
        SELECT GL_Accounts.AccountID
             , GL_Accounts.Code
             , SUM(Debit) AS  [Debit]
             , SUM(Credit) AS [Credit]

        INTO #All_Accounts
        FROM GL_Accounts
             LEFT JOIN #AccountsLevel
             ON #AccountsLevel.AccountID = GL_Accounts.AccountID , 
             #GL_VoucherDetails
        WHERE #GL_VoucherDetails.Hierarchy LIKE #AccountsLevel.Hierarchy + '%'
        GROUP BY GL_Accounts.AccountID
               , GL_Accounts.Code

        --SELECT Sum(Debit),Sum(Credit),Sum(Debit)-Sum(Credit),Count(1) FROM #All_Accounts
        -- Get Accounts_Balance_Hierarchy
        -- Get Accounts Related to @SubsidaryID

        SELECT *
        INTO #GL_Accounts
        FROM
        (
         SELECT *
         FROM GL_Accounts
         WHERE GL_Accounts.LevelNo <= 3
         UNION ALL
         SELECT *
         FROM GL_Accounts
         WHERE GL_Accounts.LevelNo >= 4
               AND (GL_Accounts.AccountID IN
         (
          SELECT AccountID
          FROM GL_AccountSubsidiary
          WHERE GL_AccountSubsidiary.AccountID = GL_Accounts.AccountID
                AND (@SubsidaryID IS NULL
                     OR GL_AccountSubsidiary.SubsidiaryID = @SubsidaryID)
         ))
        ) GL_Accounts_SubsidaryID

        SELECT Gl_Accounts.AccountID
             , GL_Accounts.Code
             , CASE
                   WHEN(Gl_Accounts.AccountID = @ReceivablesAccount_ID)
                       OR (Gl_Accounts.AccountID = @PayablesAccount_ID)
                   THEN 2
                   ELSE GL_Accounts.Type
               END              Type
             , GL_Accounts.Type Type2
             , GL_Accounts.LevelNo
             , GL_Accounts.Name
             , GL_Accounts.Name_AR
             , #All_Accounts.Debit
             , #All_Accounts.Credit
             , CASE
                   WHEN Type = 1
                   THEN ISNULL(CASE
                                   WHEN ISNULL(Debit , 00) - ISNULL(Credit , 00) > 0
                                   THEN ISNULL(Debit , 00) - ISNULL(Credit , 00)
                                   ELSE 0
                               END , 0)
                   ELSE 0
               END AS           [Balance_Debit]
             , CASE
                   WHEN Type = 1
                   THEN ISNULL(CASE
                                   WHEN ISNULL(Credit , 00) - ISNULL(Debit , 00) > 0
                                   THEN ISNULL(Credit , 00) - ISNULL(Debit , 00)
                                   ELSE 0
                               END , 0)
                   ELSE 0
               END AS           [Balance_Credit]
        INTO #All_Accounts_Final
        FROM #GL_Accounts GL_Accounts
             LEFT JOIN #All_Accounts
             ON #All_Accounts.AccountID = GL_Accounts.AccountID

        SELECT *
             , CASE
                   WHEN(Type >= 2 and LevelNo >= @translevel)
                   THEN ISNULL(CASE
                                   WHEN ISNULL(Debit , 00) - ISNULL(Credit , 00) > 0
                                   THEN ISNULL(Debit , 00) - ISNULL(Credit , 00)
                                   ELSE 0
                               END , 0)
                   ELSE 0
               END AS [Balance_Debit_Transaction]
             , CASE
                   WHEN(Type >= 2 and LevelNo >= @translevel)
                   THEN ISNULL(CASE
                                   WHEN ISNULL(Credit , 00) - ISNULL(Debit , 00) > 0
                                   THEN ISNULL(Credit , 00) - ISNULL(Debit , 00)
                                   ELSE 0
                               END , 0)
                   ELSE 0
               END AS [Balance_Credit_Transaction]
			   , CASE
                   WHEN(Type = 1 and LevelNo = 1)
                   THEN ISNULL(CASE
                                   WHEN ISNULL(Debit , 00) - ISNULL(Credit , 00) > 0
                                   THEN ISNULL(Debit , 00) - ISNULL(Credit , 00)
                                   ELSE 0
                               END , 0)
                   ELSE 0
               END AS [Balance_Debit_Transaction1]
             , CASE
                   WHEN(Type =1  and LevelNo = 1)
                   THEN ISNULL(CASE
                                   WHEN ISNULL(Credit , 00) - ISNULL(Debit , 00) > 0
                                   THEN ISNULL(Credit , 00) - ISNULL(Debit , 00)
                                   ELSE 0
                               END , 0)
                   ELSE 0
               END AS [Balance_Credit_Transaction1]
        INTO #T
        FROM #All_Accounts_Final
        WHERE(@Type IS NULL
              OR Type = @Type)
             AND (@Level = 4
                  OR @Level IS NULL
                  OR LevelNo <= @Level)
             AND (LevelNo != 0)
             AND (@ClearZero IS NULL
                  OR (@ClearZero = 1
                      AND Debit - Credit <> 0))
					--  Select sum([Balance_Debit_Transaction]),sum([Balance_Credit_Transaction]),sum([Balance_Debit_Transaction1]),sum([Balance_Credit_Transaction1]) from #t 
        SELECT #t.AccountID,
		#t.Balance_Credit,
		CASE
    WHEN #t.Code =@mainAccountCode THEN (SELECT        ISNULL(SUM(GL_VoucherDetails.Credit),0) FROM            GL_Accounts INNER JOIN GL_VoucherDetails ON GL_Accounts.AccountID = GL_VoucherDetails.AccountNoID INNER JOIN GL_Vouchers ON GL_VoucherDetails.VoucherID = GL_Vouchers.ID where GL_Accounts.Main_AccountID=(select GL_Accounts.AccountID from GL_Accounts where GL_Accounts.Code =#t.Code))
    ELSE #t.Balance_Credit_Transaction
END Balance_Credit_Transaction,
		#t.Balance_Credit_Transaction1,
		#t.Balance_Debit,
		CASE
    WHEN #t.Code =@mainAccountCode THEN (SELECT        ISNULL(SUM(GL_VoucherDetails.Debit),0) FROM            GL_Accounts INNER JOIN GL_VoucherDetails ON GL_Accounts.AccountID = GL_VoucherDetails.AccountNoID INNER JOIN GL_Vouchers ON GL_VoucherDetails.VoucherID = GL_Vouchers.ID where GL_Accounts.Main_AccountID=(select GL_Accounts.AccountID from GL_Accounts where GL_Accounts.Code =#t.Code))
    ELSE #t.Balance_Debit_Transaction
END Balance_Debit_Transaction,
		#t.Balance_Debit_Transaction1,
		#t.Code,
		#t.Credit,
		#t.Debit
		,#t.LevelNo,
		#t.Name,
		#t.Name_AR,
		#t.Type,
		#t.Type2
        FROM #t
        ORDER BY Code
    END
GO
/****** Object:  StoredProcedure [dbo].[Report_Gl_Vendor_Balance]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Report_Gl_Vendor_Balance] @FromDate         DATETIME      = '2020-01-01'
                                            , @ToDate           DATETIME          = '2020-12-01'
                                            , @IsVendor         BIT          = 1
                                            , @SubsidaryID      INT          = 71
                                            , @Level            NVARCHAR(50) = NULL
                                            , @Type             INT          = NULL
                                            , @SalesMan         INT          = NULL
                                            , @Area             INT          = NULL
                                            , @CustomerCatID    INT          = NULL
                                            , @FromBalance      INT          = NULL
                                            , @ToBalance        INT          = NULL
                                            , @CustomerStatusID INT          = NULL
											, @TargetMoves INT  = NULL
											,@Payment_Type int =NULL
											,@BrachID int =NULL
											,@ClearZero int=NULL
AS
    BEGIN
     set  @IsVendor=1;
	 if(@FromDate Is NOT NULL)
		  Set @FromDate = @FromDate + ' 00:00:00'
	 if(@ToDate Is NOT NULL)
		   Set @ToDate = @ToDate + ' 23:59:59'
	  IF OBJECT_ID('TblFinal_Select') IS NOT NULL
begin
        drop table TblFinal_Select
end
        --***************************************************************************************
        --	Get #All_Account_BeginBalance
        --***************************************************************************************

        SELECT GL_Accounts.AccountID
             , GL_Accounts.Code
             , Gl_Accounts.Name
			 ,(Select ISNULL(SUM(AV.Debit)   , 00) 
			 from AV_GL_TransactionDetails AV 
			 where  AV.VouhcerDate < @FromDate 
			 and AV.AccountNoID = GL_Accounts.AccountID 
			 AND (@BrachID IS NULL  OR AV.BranchID = @BrachID)
			   ANd (@TargetMoves IS NULL OR AV.Posted = @TargetMoves)
			 ) AS BeginBalance_Debit 
             , (Select ISNULL(SUM(AV.Credit)   , 00) 
			 from AV_GL_TransactionDetails AV  where  AV.VouhcerDate < @FromDate 
			 and AV.AccountNoID = GL_Accounts.AccountID and    
			   (@BrachID IS NULL  OR AV.BranchID = @BrachID)
			   ANd (@TargetMoves IS NULL OR AV.Posted = @TargetMoves)) AS BeginBalance_Credit
             , (Select ISNULL(SUM(AV.Debit)   , 00)-ISNULL(SUM(AV.Credit)   , 00)  
			 from AV_GL_TransactionDetails AV  where  AV.VouhcerDate < @FromDate
			 and AV.AccountNoID = GL_Accounts.AccountID and    
			( GL_Accounts.AccountID= ACCS.AccountID)  
			 
			 AND (@BrachID IS NULL  OR AV.BranchID = @BrachID)
			   ANd (@TargetMoves IS NULL OR AV.Posted = @TargetMoves) ) AS BeginBalance_Balance
			   ,accs.SubsidiaryID
        INTO #All_Account_BeginBalance
        FROM GL_Accounts,GL_AccountSubsidiary ACCS
        WHERE 		      
			( GL_Accounts.AccountID= ACCS.AccountID)   and 		 
			(@SubsidaryID IS NULL OR ACCS.SubsidiaryID =@SubsidaryID) and
			    isnull(Gl_accounts.IsVendor,0) = 1 
			   and  isnull(Gl_accounts.IsHidden,0) = 1 
             
        ORDER BY GL_Accounts.Code





		--sELECT * FROM #All_Account_BeginBalance
		--RETURN 

        --************************
        --	Get #All_Accounts
        --************************
		
        SELECT GL_Accounts.AccountID
             , GL_Accounts.Code
             , Gl_Accounts.Name
			 ,(Select ISNULL(SUM(AV.Debit)   , 00) 
			 from AV_GL_TransactionDetails AV 
			 where    (@FromDate IS NULL  OR av.VouhcerDate >= @FromDate)
             AND (@ToDate IS NULL    OR av.VouhcerDate <= @ToDate)  
			 and ( AV.AccountNoID = GL_Accounts.AccountID )
			AND (@BrachID IS NULL  OR AV.BranchID = @BrachID)
			   ANd (@TargetMoves IS NULL OR AV.Posted = @TargetMoves)
			 ) AS Debit 
			
             , (Select ISNULL(SUM(AV.Credit)   , 00) 
			 from AV_GL_TransactionDetails AV  where 
			 
			 AV.AccountNoID = GL_Accounts.AccountID 
			 AND (@FromDate IS NULL   OR av.VouhcerDate >= @FromDate)
             AND (@ToDate IS NULL  OR av.VouhcerDate < @ToDate) 
			 ) AS Credit
             , (Select ISNULL(SUM(AV.Debit)   , 00)-ISNULL(SUM(AV.Credit)   , 00)  
			 from AV_GL_TransactionDetails AV  where 
			   (@FromDate IS NULL
                  OR av.VouhcerDate >= @FromDate)
             AND (@ToDate IS NULL
                  OR av.VouhcerDate < @ToDate) 
			 and AV.AccountNoID = GL_Accounts.AccountID and    
			( GL_Accounts.AccountID= ACCS.AccountID)  
			  ) AS Balance
			   ,accs.SubsidiaryID
        INTO #All_Accounts
        FROM GL_Accounts,GL_AccountSubsidiary ACCS             
        WHERE 		      
			( GL_Accounts.AccountID= ACCS.AccountID)   and 		 
			(@SubsidaryID IS NULL OR ACCS.SubsidiaryID =@SubsidaryID) and
			    isnull(Gl_accounts.IsVendor,0) = 1 
			   and  isnull(Gl_accounts.IsHidden,0) = 1 
     --   HAVING ISNULL(SUM(GL_VoucherDetails.Debit) , 00) - ISNULL(SUM(GL_VoucherDetails.Credit) , 00) <> 0
        ORDER BY GL_Accounts.Code
		--select sum(Balance) from #All_Accounts
		--return
  --*****************************
        --	Get Accounts_Balance_Hierarchy
        --*****************************
		 SELECT mainSelect.Name
              , mainSelect.Name_AR
              , mainSelect.Code
              , All_Account_BeginBalance_AccountID
              , All_Accounts_AccountID
              , mainSelect.Level
              , mainSelect.Type
              , mainSelect.IsVendor
              , mainSelect.Opening_Balance_Debit
              , mainSelect.Opening_Balance_Credit
              , mainSelect.Debit
              , mainSelect.Credit
              , CASE
                    WHEN mainSelect.Opening_Balance_Debit - mainSelect.Opening_Balance_Credit + mainSelect.Debit - mainSelect.Credit > 0
                    THEN mainSelect.Opening_Balance_Debit - mainSelect.Opening_Balance_Credit + mainSelect.Debit - mainSelect.Credit
                    ELSE 0
                END AS Ending_Balance_Debit
              , CASE
                    WHEN mainSelect.Opening_Balance_Debit - mainSelect.Opening_Balance_Credit + mainSelect.Debit - mainSelect.Credit < 0
                    THEN mainSelect.Opening_Balance_Debit - mainSelect.Opening_Balance_Credit + mainSelect.Debit - mainSelect.Credit
                    ELSE 0
                END AS Ending_Balance_Credit
				,SubsidiaryID
				INTO TblFinal_Select
         FROM
         (
          SELECT GL_Accounts.Name
               , GL_Accounts.Name_AR
               , GL_Accounts.Code
               , GL_Accounts.LevelNo AS                 Level
               , GL_Accounts.Type
               , GL_Accounts.IsVendor
               , #All_Account_BeginBalance.AccountID AS All_Account_BeginBalance_AccountID
               , #All_Accounts.AccountID AS             All_Accounts_AccountID
               , ISNULL(CASE
                            WHEN ISNULL(#All_Account_BeginBalance.BeginBalance_Debit , 00) - ISNULL(#All_Account_BeginBalance.BeginBalance_Credit , 00) > 0
                            THEN ISNULL(#All_Account_BeginBalance.BeginBalance_Debit , 00) - ISNULL(#All_Account_BeginBalance.BeginBalance_Credit , 00)
                            ELSE 0
                        END , 0) AS                     Opening_Balance_Debit
			   --,(select   ISNULL(SUM(dbo.AV_AccountBalance.Credit),0),ISNULL(SUM(dbo.AV_AccountBalance.Debit),0) from dbo.AV_AccountBalance where dbo.AV_AccountBalance.AccountID=10149 and dbo.AV_AccountBalance.SubsidaryID=1)
               , ISNULL(CASE
                            WHEN ISNULL(#All_Account_BeginBalance.BeginBalance_Credit , 00) - ISNULL(#All_Account_BeginBalance.BeginBalance_Debit , 00) > 0
                            THEN ISNULL(#All_Account_BeginBalance.BeginBalance_Credit , 00) - ISNULL(#All_Account_BeginBalance.BeginBalance_Debit , 00)
                            ELSE 0
                        END , 0) AS                     Opening_Balance_Credit
               , ISNULL(#All_Accounts.Debit , 00) AS    Debit
               , ISNULL(#All_Accounts.Credit , 00) AS   Credit
			   ,#All_Accounts.SubsidiaryID
			   
          FROM GL_Accounts
               LEFT JOIN #All_Account_BeginBalance
               ON #All_Account_BeginBalance.AccountID = GL_Accounts.AccountID
               LEFT JOIN #All_Accounts
               ON #All_Accounts.AccountID = GL_Accounts.AccountID
          WHERE  isnull(Gl_accounts.IsHidden ,0)=1   and ( Gl_accounts.IsVendor = 1)
               AND (#All_Account_BeginBalance.AccountID IS NOT NULL
                    OR #All_Accounts.AccountID IS NOT NULL)
               AND (@SalesMan IS NULL
                    OR Gl_Accounts.SalesManID = @SalesMan)
         ) AS mainSelect
        

        SELECT *
        FROM
        TblFinal_Select AS Final_Select
        WHERE(@FromBalance IS NULL
              OR Final_Select.Ending_Balance_Debit >= @FromBalance
			  OR abs(Final_Select.Ending_Balance_Credit) >= @FromBalance
			  )
             AND (@ToBalance IS NULL
                  OR Final_Select.Ending_Balance_Debit <= @ToBalance
				  OR abs(Final_Select.Ending_Balance_Credit) <= @ToBalance)
            AND EXISTS (SELECT GLACCOUNT.AccountID, GLSUB.SubsidiaryID FROM   GL_Accounts GLACCOUNT INNER JOIN GL_AccountSubsidiary GLSUB ON GLACCOUNT.AccountID = GLSUB.AccountID Where GLACCOUNT.AccountID=Final_Select.All_Accounts_AccountID and  GLSUB.SubsidiaryID=@SubsidaryID)
			
        ORDER BY Final_Select.Code
		--Sum(Fields!Opening_Balance_Debit.Value)
		--Sum(Fields!Opening_Balance_Credit.Value)
		--Select  sum(Opening_Balance_Debit) OD,SUM(Debit) D, sum(Opening_Balance_Credit)OC ,SUM(Credit) C,
		--( sum(Opening_Balance_Debit)  + SUM(Debit))  TOTALD,( sum(Opening_Balance_Credit)  + SUM(Credit))  TOTALC 
		 
		--from  TblFinal_Select

    END;
GO
/****** Object:  StoredProcedure [dbo].[Report_GL_Vouchers]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Report_GL_Vouchers] @SubsidaryID      INT  = NULL
                                   , @GL_VoucherTypeID INT  = NULL
                                   , @BranchID         INT  = NULL
                                   , @FromDate         DATE = NULL
                                   , @ToDate           DATE = NULL
                                   , @FromInvoice      INT  = NULL
                                   , @ToInvoice        INT  = NULL
                                   , @CollecterId      INT  = NULL
AS
    BEGIN
        SELECT mstr_Subsidaries.Name AS           [mstr_Subsidaries Name]
             , mstr_Subsidaries.Name_Ar AS        [mstr_Subsidaries Name AR]
             , GL_VoucherType.Name AS             [GL_VoucherType Name]
             , GL_VoucherType.Name_AR AS          [GL_VoucherType Name Ar]
               -- Header
             , GL_Vouchers.Id                     GL_Vouchers_Id
             , GL_Vouchers.VouhcerDate AS         [Date]
             , GL_Vouchers.Code AS                GL_Vouchers_Code
             , GL_Vouchers.Memo AS                [Memo]
			 ,mstr_Branch.Code  AS                [BranchCode]                  
             , mstr_Branch.Name AS                [BranchName]
             , mstr_Branch.Name_AR AS             [BranchName_AR]
             , GL_Vouchers.ReferanceNo AS         [Referance No.]
             , GL_Vouchers.CheckNumber AS         [Check Number]
             , Gl_CheckBooks.Description AS       [Cheeck Book]
             , GL_Vouchers.BankName AS            [Bank Name]

               -- Details
             , GL_Accounts.Code AS                [GL_Accounts Code]
             , GL_Accounts.Name AS                [GL_Accounts Name]
             , GL_Accounts.Name_AR AS             [GL_Accounts Name_AR]
             , GL_VoucherDetails.Memo AS          [GL_VoucherDetails Memo]
             , GL_VoucherDetails.Debit AS  [GL_VoucherDetails Debit]
             , GL_VoucherDetails.Credit AS [GL_VoucherDetails Credit]
             , Security_Users.Name                Security_Users_Name
             , Security_Users.Name_Ar             Security_Users_Name_Ar
        FROM GL_Vouchers
             LEFT JOIN mstr_Branch
             ON mstr_Branch.ID = GL_Vouchers.BranchID
             LEFT JOIN mstr_Subsidaries
             ON mstr_Subsidaries.ID = GL_Vouchers.SubsidaryID
             LEFT JOIN GL_VoucherType
             ON GL_VoucherType.ID = GL_Vouchers.VoucherTypeID
             LEFT JOIN Gl_CheckBooks
             ON Gl_CheckBooks.ID = GL_Vouchers.CheeckBookID
             LEFT JOIN Security_Users
             ON Security_Users.ID = GL_Vouchers.CollecterId
             -- Details
             LEFT JOIN GL_VoucherDetails
             ON GL_VoucherDetails.VoucherID = GL_Vouchers.ID
             LEFT JOIN GL_Accounts
             ON GL_VoucherDetails.AccountNoID = GL_Accounts.AccountID
             LEFT JOIN mstr_Costcenter
             ON mstr_Costcenter.ID = GL_VoucherDetails.CostcenterID
             LEFT JOIN mstr_Classes
             ON GL_VoucherDetails.ClassID = mstr_Classes.ID
             LEFT JOIN mstr_Locations
             ON GL_VoucherDetails.LocationID = mstr_Locations.ID
             LEFT JOIN mstr_Departments
             ON mstr_Departments.ID = GL_VoucherDetails.DepartmentID
        WHERE(@SubsidaryID IS NULL
              OR GL_Vouchers.SubsidaryID = @SubsidaryID)
             AND (@GL_VoucherTypeID IS NULL
                  OR Gl_Vouchers.VoucherTypeID = @GL_VoucherTypeID)
             AND (@BranchID IS NULL
                  OR Gl_Vouchers.BranchID = @BranchID)
             AND (@FromDate IS NULL
                  OR CAST(gl_Vouchers.VouhcerDate AS DATE) >= @FromDate)
             AND (@ToDate IS NULL
                  OR CAST(gl_Vouchers.VouhcerDate AS DATE) <= @ToDate)
             AND (@FromInvoice IS NULL
                  OR gl_Vouchers.Code >= @FromInvoice)
             AND (@ToInvoice IS NULL
                  OR gl_Vouchers.Code <= @ToInvoice)
             AND (@CollecterId IS NULL
                  OR GL_Vouchers.CollecterId = @CollecterId)
    END
GO
/****** Object:  StoredProcedure [dbo].[Report_GL_Vouchers_Summery]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Report_GL_Vouchers_Summery] @SubsidaryID      INT  = NULL
                                           , @GL_VoucherTypeID INT  = NULL
                                           , @BranchID         INT  = NULL
                                           , @FromDate         DATE = NULL
                                           , @ToDate           DATE = NULL
                                           , @FromInvoice      INT  = NULL
                                           , @ToInvoice        INT  = NULL
                                           , @CollecterId      INT  = NULL
AS
    BEGIN
        SELECT mstr_Subsidaries.Name AS     [mstr_Subsidaries Name]
             , mstr_Subsidaries.Name_Ar AS  [mstr_Subsidaries Name AR]
             , GL_VoucherType.Code          GL_VoucherType_Code
             , GL_VoucherType.Name AS       [GL_VoucherType Name]
             , GL_VoucherType.Name_AR AS    [GL_VoucherType Name Ar]
               -- Header
             , GL_Vouchers.Id               GL_Vouchers_Id
             , GL_Vouchers.VouhcerDate AS   [Date]
             , GL_Vouchers.Code AS          [GL_Vouchers Code]
             , GL_Vouchers.Beneficiary AS   [GL_Vouchers Beneficiary]
             , GL_Vouchers.Memo AS          [Memo]
             , GL_Vouchers.ReferanceNo AS   [Referance No.]
             , GL_Vouchers.CheckNumber AS   [Check Number]
             , Gl_CheckBooks.Description AS [Cheeck Book]
             , GL_Vouchers.BankName AS      [Bank Name]
             ,
        (
         SELECT TOP 1 Debit
         FROM GL_VoucherDetails
         WHERE VoucherID = GL_Vouchers.ID
               AND GL_VoucherDetails.Debit IS NOT NULL
        )                                   GL_VoucherDetails_Debit
             ,
        (
         SELECT TOP 1 Credit
         FROM GL_VoucherDetails
         WHERE VoucherID = GL_Vouchers.ID
               AND GL_VoucherDetails.Credit IS NOT NULL
        )                                   GL_VoucherDetails_Debit
             , Security_Users.Name          Security_Users_Name
             , Security_Users.Name_Ar       Security_Users_Name_Ar
        FROM GL_Vouchers
             LEFT JOIN mstr_Subsidaries
             ON mstr_Subsidaries.ID = GL_Vouchers.SubsidaryID
             LEFT JOIN GL_VoucherType
             ON GL_VoucherType.ID = GL_Vouchers.VoucherTypeID
             LEFT JOIN Gl_CheckBooks
             ON Gl_CheckBooks.ID = GL_Vouchers.CheeckBookID
             LEFT JOIN Security_Users
             ON Security_Users.ID = GL_Vouchers.CollecterId
             -- Details
             LEFT JOIN GL_VoucherDetails
             ON GL_VoucherDetails.VoucherID = GL_Vouchers.ID
             LEFT JOIN GL_Accounts
             ON GL_VoucherDetails.AccountNoID = GL_Accounts.AccountID
             LEFT JOIN mstr_Costcenter
             ON mstr_Costcenter.ID = GL_VoucherDetails.CostcenterID
             LEFT JOIN mstr_Classes
             ON GL_VoucherDetails.ClassID = mstr_Classes.ID
             LEFT JOIN mstr_Locations
             ON GL_VoucherDetails.LocationID = mstr_Locations.ID
             LEFT JOIN mstr_Departments
             ON mstr_Departments.ID = GL_VoucherDetails.DepartmentID
        WHERE GL_VoucherType.Code <> 1
              AND (@SubsidaryID IS NULL
                   OR GL_Vouchers.SubsidaryID = @SubsidaryID)
              AND (@GL_VoucherTypeID IS NULL
                   OR Gl_Vouchers.VoucherTypeID = @GL_VoucherTypeID)
              AND (@BranchID IS NULL
                   OR Gl_Vouchers.BranchID = @BranchID)
              AND (@FromDate IS NULL
                   OR CAST(gl_Vouchers.VouhcerDate AS DATE) >= @FromDate)
              AND (@ToDate IS NULL
                   OR CAST(gl_Vouchers.VouhcerDate AS DATE) <= @ToDate)
              AND (@FromInvoice IS NULL
                   OR gl_Vouchers.Code >= @FromInvoice)
              AND (@ToInvoice IS NULL
                   OR gl_Vouchers.Code <= @ToInvoice)
              AND (@CollecterId IS NULL
                   OR GL_Vouchers.CollecterId = @CollecterId)
    END
GO
/****** Object:  StoredProcedure [dbo].[Report_inv_contract]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
CREATE PROC [dbo].[Report_inv_contract]    @FromDate          DATE = NULL
                                         , @ToDate            DATE = NULL
                                         , @SubsidaryID       INT  = NULL
                                          ,@SalesType         INT  =  NULL  
                                         , @ApprovalStatus      INT  = NULL
AS
     BEGIN
      
 
        select Inv_Receipt_h.id,SupplierAccount_ID, GL_Accounts.name,GL_Accounts.Name_AR ,ContractStartDate,ContractEndDate ,netvalue
		        ,SalesType_name = Inv_SalesTypes.Name
				,SalesType_namear = Inv_SalesTypes.Name_AR
				,ApprovalStat_name = Inv_Receipt_ApprovalStatus.Status_Name 
				,ApprovalStat_namear = Inv_Receipt_ApprovalStatus.Status_Name_Ar 
				, Paid = sum(ValuePaid) , SRemaining = Sum(Remaining),late = 0,
				STUFF((SELECT    ','+cast(Inv_Items.Name  as nvarchar(150))
    FROM Inv_Receipt_d inner join Inv_Items on 
	Inv_Receipt_d.Item_ID=Inv_Items.id
    WHERE  Inv_Receipt_d.Parent_ID = Inv_Receipt_h.id
    FOR XML PATH('')), 1, 1, '') Items,
		STUFF((SELECT    ','+cast(Inv_Items.Name_AR  as nvarchar(150))
    FROM Inv_Receipt_d inner join Inv_Items on 
	Inv_Receipt_d.Item_ID=Inv_Items.id
    WHERE  Inv_Receipt_d.Parent_ID = Inv_Receipt_h.id
    FOR XML PATH('')), 1, 1, '') ItemsAr
,
	CASE
                WHEN Inv_Receipt_ApprovalStatus.Status_Name='Open' 
                THEN
                    CASE 
                        WHEN (select top(1)date from Inv_ContractPayment
where ContractID
=Inv_Receipt_h.id and ValuePaid<Value
order by date)<getdate()
                        THEN 2 -- Late
                        ELSE 3 -- Not Late
                    END
                ELSE
                    CASE 
                        WHEN Inv_Receipt_ApprovalStatus.Status_Name='Expired'
                        THEN 0 --Expired
                        ELSE 1 -- Canceled
                    END
            END as Contract_Status,
			(select sum(value) from Inv_ContractPayment where ContractID=Inv_Receipt_h.id and ValuePaid<Value
and date<getdate()) as LateSum
		from Inv_Receipt_h 
		      Left outer join Inv_SalesTypes  on Inv_Receipt_h.SalesTypeID = Inv_SalesTypes.id 
			  Left outer join Inv_Receipt_ApprovalStatus  on Inv_Receipt_h.ApprovalStatus_ID = Inv_Receipt_ApprovalStatus.id 
			  Left outer join Inv_ContractPayment  on Inv_Receipt_h.ID = Inv_ContractPayment.ContractID ,
			  GL_Accounts  
		where 
		Inv_Receipt_h.code=87 and
		SupplierAccount_ID= GL_Accounts.AccountID and
		  (@FromDate IS NULL
                  OR CAST(Inv_Receipt_h.ContractStartDate AS DATE) >= @FromDate)
				   AND (@ToDate IS NULL
                  OR CAST(Inv_Receipt_h.ContractStartDate AS DATE) <= @ToDate)
             AND (@SubsidaryID IS NULL
                  OR Inv_Receipt_h.SubsidiaryID = @SubsidaryID)
             AND (@SalesType IS NULL
                  OR Inv_Receipt_h.SalesTypeID = @SalesType)
				     AND (@ApprovalStatus IS NULL
                  OR Inv_Receipt_h.ApprovalStatus_ID = @ApprovalStatus)
		Group by  Inv_Receipt_h.id,SupplierAccount_ID, GL_Accounts.name ,ContractStartDate,ContractEndDate ,netvalue 
		,Inv_SalesTypes.Name 
				,Inv_SalesTypes.Name_AR
				,Inv_Receipt_ApprovalStatus.Status_Name  
				,Inv_Receipt_ApprovalStatus.Status_Name_Ar ,GL_Accounts.Name_AR
				 ,GL_Accounts.Name_AR
				
     
				
     			
    END
GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Contract_Group_By_Contracts]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Report_INV_Contract_Group_By_Contracts] @FromDate DATE = '2020-03-23'
, @ToDate DATE =  '2020-03-23'
, @BrachID INT = NULL
, @CustomerID INT = NULL
, @CashCustomerID INT = NULL
, @CustomerCatID INT = NULL
, @FromInvoiceNumber INT = NULL
, @ToInvoiceNumber INT = NULL
, @TransactionType NVARCHAR(MAX) = NULL
, @ItemCategoryID NVARCHAR(MAX) = NULL
, @ItemId INT = NULL
, @Item_vendor INT = NULL
, @SalesManId INT = NULL
, @SubsidaryID INT = NULL
, @FromCustomerActualDeliverDate DATE = NULL
, @ToCustomerActualDeliverDate DATE = NULL
, @FromTime TIME = NULL
, @ToTime TIME = NULL
, @CustomerStatusID INT = NULL
, @Payment_Type INT = NULL
, @User_Role_Sale INT = NULL
, @SalesTypes INT = NULL
,@userId int =13
AS
--select distinct Branch_ID  from Inv_Receipt_h where    cast(Entry_Date as date) >='2020-03-23' and cast(Entry_Date as date) < '2020-03-24'
BEGIN
 
   
  IF OBJECT_ID('tbl') IS NOT NULL
begin
        drop table tbl
end
    if @FromTime is null set @FromTime = ' 00:00:00';
    if @ToTime is null set @ToTime = ' 23:59:59';

    IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@TransactionType, ',')
            WHERE Item = -1
        )
        SET @TransactionType = NULL

    IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@ItemCategoryID, ',')
            WHERE Item = -1
        )
        SET @ItemCategoryID = NULL
		
   select * Into #tbl from (
    SELECT H.ID						   ID
         , H.Entry_No                  Bilno
		 ,H.ApprovalStatus_ID    ApprovalStatus_ID
		  ,H.SalesTypeID    SalesTypeID
         , H.Entry_Date                [Date]
         , Inv_PaymentType.Name        Payment
         , Inv_PaymentType.Name_AR     Payment_Ar
         , case when @User_Role_Sale IS NULL
		 then
		   ISNULL(H.Value, 0)   
		   else
		    (
               SELECT top 1 sum(Inv_Receipt_D.Total)
               FROM Inv_Receipt_D
               WHERE Inv_Receipt_D.SalesManId = @User_Role_Sale
			   and Inv_Receipt_D.Parent_ID=h.ID
			   group by Inv_Receipt_D.SalesManId
           ) 
		   end       Total
         ,case when @User_Role_Sale IS NULL
		 then
		   ISNULL(H.Discount_Value, 0)   
		   else
		    0
		   end  [Invoice Discount]
         , case when @User_Role_Sale IS NULL
		 then
		  ISNULL(H.NetValue, 0)  
		   else
		    (
               SELECT top 1 sum(Inv_Receipt_D.Total)
               FROM Inv_Receipt_D
               WHERE Inv_Receipt_D.SalesManId = @User_Role_Sale
			   and Inv_Receipt_D.Parent_ID=h.ID
			   group by Inv_Receipt_D.SalesManId
           ) 
		   end      [Net Total]
         ,case when @User_Role_Sale IS NULL
		 then
		    ISNULL(H.DeliveryFees, 0)  
		   else
		    0
		   end
		   
		      DeliveryFees
		 ,H.CustomerDeliverDate as  CustomerActualDeliverDate
         , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN ''
               ELSE GL_Accounts.VendorCode
        END                            CustomerNo
         , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN Inv_CashCustomer.Name
               ELSE GL_Accounts.Name
        END                            CustomerName
         , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN Inv_CashCustomer.Name_Ar
               ELSE GL_Accounts.Name_Ar
        END                            CustomerName_Ar
         , H.Vendor_ID
         , H.CashCustomerID
         , GL_Accounts.AccountID
         , Gl_Accounts.VendorCode
         , Security_Users.Name         [S.Name]
         , Security_Users.Name_Ar      [S.Name_Ar]
         , C.Name                      C_Name
         , C.Name_Ar                   C_Name_Ar
         , C.Code                      C_Code
		 
		 ,avgcost = (SELECT top 1 Sum(D.Final_conv * D.AvgCost * d.Qty)  
               FROM Inv_Receipt_D d
               WHERE ( d.SalesManId = @User_Role_Sale or @User_Role_Sale is null) 
			   and d.Parent_ID=H.ID
			   group by d.SalesManId) 
		 ,    ( H.netvalue -  (SELECT top 1 Sum(D.Final_conv * D.AvgCost * d.Qty)  
							   FROM Inv_Receipt_D d
							   WHERE ( d.SalesManId = @User_Role_Sale or @User_Role_Sale is null) 
							   and d.Parent_ID=H.ID
							   group by d.SalesManId)  ) Profit
    -- cost and profit
    FROM Inv_Receipt_H H
             LEFT JOIN
         Inv_CashCustomer ON Inv_CashCustomer.id = H.CashCustomerID
        
		LEFT JOIN
         GL_Accounts ON GL_Accounts.AccountID = H.Vendor_ID
             LEFT JOIN
         Inv_Transaction_Codes C ON H.Code = C.Code
             LEFT JOIN
         Security_Users ON Security_Users.Id = H.Empoyee_ID
             LEFT JOIN
         Inv_PaymentType ON Inv_PaymentType.id = H.Payment_Type
    WHERE H.Code IN (87)
      AND (ISNULL(H.Is_Canceled, 0) <> 1)
      AND (ISNULL(H.IsHolded, 0) <> 1)
      AND (@User_Role_Sale IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
               WHERE Inv_Receipt_D.SalesManId = @User_Role_Sale
           ))
      AND EXISTS
        (
            SELECT Parent_ID
            FROM Inv_Receipt_D D
            WHERE D.Parent_ID = H.ID
        )
      AND (@SubsidaryID IS NULL
        OR H.SubsidiaryID = @SubsidaryID)
      AND (@FromDate IS NULL
        OR
           CAST(H.Entry_Date AS DATETIME) >= cast(@FromDate as datetime) + cast(@FromTime as datetime)
        )
      AND (@ToDate IS NULL
        OR
           CAST(H.Entry_Date AS DATETIME) <= cast(@ToDate as datetime) + cast(@ToTime as datetime)
        )
      AND (@ItemId IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
               WHERE (@ItemId is null or Inv_Receipt_D.Item_ID = @ItemId)
           ))

      AND (@Item_vendor IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
                        left join Inv_Items on Inv_Receipt_d.Item_ID = Inv_Items.ID
                        left join Inv_Items_Vendors on Inv_Items.ID = Inv_Items_Vendors.ItemID
               WHERE ( Inv_Items_Vendors.VendorID = @item_vendor)
           ))

      AND (@SalesManId IS NULL
        OR H.Empoyee_ID = @SalesManId)
      AND (@BrachID IS NULL
        OR H.Branch_ID IN (@BrachID))
		and H.Branch_ID in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId)
		 AND (@SalesTypes IS NULL
        OR H.SalesTypeID = @SalesTypes)
      AND (@CustomerID IS NULL
        OR H.Vendor_ID = @CustomerID)
      AND (@CashCustomerID IS NULL
        OR H.CashCustomerID = @CashCustomerID)
      AND (@CustomerCatID IS NULL
        OR Inv_CashCustomer.CategoryID IN (@CustomerCatID)
        OR Gl_Accounts.VendorCategoryID IN (@CustomerCatID))
      AND (@FromInvoiceNumber IS NULL
        OR H.Entry_No >= @FromInvoiceNumber)
      AND (@ToInvoiceNumber IS NULL
        OR H.Entry_No <= @ToInvoiceNumber)
      AND (@TransactionType IS NULL
        OR H.Code IN
           (
               SELECT item
               FROM dbo.Split(@TransactionType, ',')
           ))
      AND (@ItemCategoryID IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_d
                        LEFT JOIN
                    Inv_Items_Categories ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
               WHERE Inv_Receipt_d.Parent_ID = H.ID
                 AND Inv_Items_Categories.ItemCategory_ID IN
                     (
                         SELECT item
                         FROM dbo.Split(@ItemCategoryID, ',')
                     )
           ))
      AND (@FromDate IS not NULL
        OR CAST(Entry_Date AS TIME) >= @FromTime)
      AND (@ToDate IS not NULL
        OR CAST(Entry_Date AS TIME) <= @ToTime)
      AND (@FromCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) >= @FromCustomerActualDeliverDate)
      AND (@ToCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) <= @ToCustomerActualDeliverDate)
      AND (@CustomerStatusID IS NULL
        OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
      AND (@Payment_Type IS NULL
        OR H.Payment_Type = @Payment_Type)
		union 
		SELECT H.ID                     ID
         , H.Entry_No                  Bilno
		 ,H.ApprovalStatus_ID    ApprovalStatus_ID
		 ,H.SalesTypeID    SalesTypeID
         , H.Entry_Date                [Date]
         , Inv_PaymentType.Name        Payment
         , Inv_PaymentType.Name_AR     Payment_Ar
         , ISNULL(Inv_ReceiptMultiPayment .Amount, 0)          Total
         , 0 [Invoice Discount]
         ,  ISNULL(Inv_ReceiptMultiPayment .Amount, 0)       [Net Total]
         , ISNULL(H.DeliveryFees, 0)   DeliveryFees
         ,H.CustomerDeliverDate as CustomerActualDeliverDate
		 , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN ''
               ELSE GL_Accounts.VendorCode
        END                            CustomerNo
         , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN Inv_CashCustomer.Name
               ELSE GL_Accounts.Name
        END                            CustomerName
         , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN Inv_CashCustomer.Name_Ar
               ELSE GL_Accounts.Name_Ar
        END                            CustomerName_Ar
         , H.Vendor_ID
         , H.CashCustomerID
         , GL_Accounts.AccountID
         , Gl_Accounts.VendorCode
         , Security_Users.Name         [S.Name]
         , Security_Users.Name_Ar      [S.Name_Ar]
         , C.Name                      C_Name
         , C.Name_Ar                   C_Name_Ar
         , C.Code                      C_Code
    
		 ,avgcost = (SELECT top 1 Sum(D.Final_conv * D.AvgCost * d.Qty)  
               FROM Inv_Receipt_D d
               WHERE ( d.SalesManId = @User_Role_Sale or @User_Role_Sale is null) 
			   and d.Parent_ID=H.ID
			   group by d.SalesManId) 
		 ,    ( H.netvalue -  (SELECT top 1 Sum(D.Final_conv * D.AvgCost * d.Qty)  
							   FROM Inv_Receipt_D d
							   WHERE ( d.SalesManId = @User_Role_Sale or @User_Role_Sale is null) 
							   and d.Parent_ID=H.ID
							   group by d.SalesManId)  ) Profit
    FROM Inv_Receipt_H H
	inner join Inv_ReceiptMultiPayment on Inv_ReceiptMultiPayment.ReceiptId=H.id
             LEFT JOIN
         Inv_CashCustomer ON Inv_CashCustomer.id = H.CashCustomerID
            
             LEFT JOIN
         GL_Accounts ON GL_Accounts.AccountID = H.Vendor_ID
             LEFT JOIN
         Inv_Transaction_Codes C ON H.Code = C.Code
             LEFT JOIN
         Security_Users ON Security_Users.Id = H.Empoyee_ID
             LEFT JOIN
         Inv_PaymentType ON Inv_PaymentType.id = H.Payment_Type
    WHERE H.Payment_Type=51 
	and  Inv_ReceiptMultiPayment.PaymentTypeId=@Payment_Type 
	and
	H.Code IN (87)
      AND (ISNULL(H.Is_Canceled, 0) <> 1)
      AND (ISNULL(H.IsHolded, 0) <> 1)
      AND (@User_Role_Sale IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
               WHERE Inv_Receipt_D.SalesManId = @User_Role_Sale
           ))
      AND EXISTS
        (
            SELECT Parent_ID
            FROM Inv_Receipt_D D
            WHERE D.Parent_ID = H.ID
        )
      AND (@SubsidaryID IS NULL
        OR H.SubsidiaryID = @SubsidaryID)
      AND (@FromDate IS NULL
        OR
           CAST(H.Entry_Date AS DATETIME) >= cast(@FromDate as datetime) + cast(@FromTime as datetime)
        )
      AND (@ToDate IS NULL
        OR
           CAST(H.Entry_Date AS DATETIME) <= cast(@ToDate as datetime) + cast(@ToTime as datetime)
        )
      AND (@ItemId IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
               WHERE (@ItemId is null or Inv_Receipt_D.Item_ID = @ItemId)
           ))

      AND (@Item_vendor IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
                        left join Inv_Items on Inv_Receipt_d.Item_ID = Inv_Items.ID
                        left join Inv_Items_Vendors on Inv_Items.ID = Inv_Items_Vendors.ItemID
               WHERE (Inv_Items_Vendors.VendorID = @item_vendor)
           ))

      AND (@SalesManId IS NULL
        OR H.Empoyee_ID = @SalesManId)
      AND (@BrachID IS NULL
        OR H.Branch_ID IN (@BrachID))
			 AND (@SalesTypes IS NULL
        OR H.SalesTypeID = @SalesTypes)
		--	and H.Branch_ID in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId)
      AND (@CustomerID IS NULL
        OR H.Vendor_ID = @CustomerID)
      AND (@CashCustomerID IS NULL
        OR H.CashCustomerID = @CashCustomerID)
      AND (@CustomerCatID IS NULL
        OR Inv_CashCustomer.CategoryID IN (@CustomerCatID)
        OR Gl_Accounts.VendorCategoryID IN (@CustomerCatID))
      AND (@FromInvoiceNumber IS NULL
        OR H.Entry_No >= @FromInvoiceNumber)
      AND (@ToInvoiceNumber IS NULL
        OR H.Entry_No <= @ToInvoiceNumber)
      AND (@TransactionType IS NULL
        OR H.Code IN
           (
               SELECT item
               FROM dbo.Split(@TransactionType, ',')
           ))
      AND (@ItemCategoryID IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_d
                        LEFT JOIN
                    Inv_Items_Categories ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
               WHERE Inv_Receipt_d.Parent_ID = H.ID
                 AND Inv_Items_Categories.ItemCategory_ID IN
                     (
                         SELECT item
                         FROM dbo.Split(@ItemCategoryID, ',')
                     )
           ))
      AND (@FromDate IS not NULL
        OR CAST(Entry_Date AS TIME) >= @FromTime)
      AND (@ToDate IS not NULL
        OR CAST(Entry_Date AS TIME) <= @ToTime)
      AND (@FromCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) >= @FromCustomerActualDeliverDate)
      AND (@ToCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) <= @ToCustomerActualDeliverDate)
      AND (@CustomerStatusID IS NULL
        OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
      
		) as Q;
  

    SELECT *,( SELECT  Sum(D.Qty) as Qty
            FROM Inv_Receipt_D D
            WHERE D.Parent_ID = #tbl.ID ) as Qty
			,(select  top 1 Inv_SalesTypes.Name_AR from Inv_SalesTypes where Inv_SalesTypes.ID=#tbl.SalesTypeID) as salesTypeNameAr
			,(select  top 1 Inv_SalesTypes.Name from Inv_SalesTypes where Inv_SalesTypes.ID=#tbl.SalesTypeID) as salesTypeName
			,(select  top 1 Inv_Receipt_ApprovalStatus.Status_Name_Ar from Inv_Receipt_ApprovalStatus where Inv_Receipt_ApprovalStatus.ID=#tbl.ApprovalStatus_ID) as StatusNameAr
			,(select  top 1 Inv_Receipt_ApprovalStatus.Status_Name from Inv_Receipt_ApprovalStatus where Inv_Receipt_ApprovalStatus.ID=#tbl.ApprovalStatus_ID) as StatusName
    FROM #tbl  ORDER BY #tbl.Date
           , #tbl.Bilno
   -- SELECT  Sum( #tbl.[Net Total]  ) FROM #tbl where #tbl.C_Code in (51,52)
END
GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Contract_Return_Group_By_Items]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROC [dbo].[Report_INV_Contract_Return_Group_By_Items] @FromDate DATE ='2020-07-01'
, @ToDate DATE ='2020-07-31'
, @BrachID INT = NULL
, @CustomerID INT = NULL
, @CashCustomerID INT = NULL
, @CustomerCatID INT = NULL
, @FromInvoiceNumber INT = NULL
, @ToInvoiceNumber INT = NULL
, @ItemCategoryID NVARCHAR(MAX) = -1
, @SubsidaryID INT = NULL
, @ItemId INT = NULL
, @Item_vendor INT = NULL
, @SalesManId INT = NULL
, @FromCustomerActualDeliverDate DATE = NULL
, @ToCustomerActualDeliverDate DATE = NULL
, @FromTime TIME = NULL
, @ToTime TIME = NULL
, @CustomerStatusID INT = NULL
, @Payment_Type INT = NULL
, @User_Role_Sale INT = NULL
,@userId int =13
,@TransactionType nvarchar(max)=null
AS
BEGIN

    IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@ItemCategoryID, ',')
            WHERE Item = -1
        )
        SET @ItemCategoryID = NULL
		 IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@TransactionType, ',')
            WHERE Item = -1
        )
        SET @TransactionType = NULL

    if @FromTime is null set @FromTime = ' 00:00:00';
    if @ToTime is null set @ToTime = ' 23:59:59';

    declare
        @fromDateTime DATETIME = null
        , @toDateTime DATETIME = null

    set @fromDateTime = cast(@FromDate as datetime) + cast(@FromTime as datetime)
    set @toDateTime = cast(@ToDate as datetime) + cast(@ToTime as datetime)


    SELECT I_Code                 = I.Code
         , I_Name                 = I.Name
         , I_Name_Ar              = I.Name_AR
         , I_Unit_Ar              = Inv_Unit.Name_AR
         , I_Unit                 = Inv_Unit.Name
         ,                          COUNT(DISTINCT H.ID) Count_All
         ,                          SUM(H.DeliveryFees)  inv_Receipt_H_DeliveryFees
         , C_S_Sum_Qty            = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN D.qty*d.Final_conv
                                            ELSE 0
        END)
         , C_R_Sum_Qty            = SUM(CASE
                                            WHEN H.CODE IN (53, 54)
                                                THEN D.qty*d.Final_conv
                                            ELSE 0
        END)
         , Net_QTY                = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN D.qty*d.Final_conv
                                            ELSE 0
        END) - SUM(CASE
                       WHEN H.CODE IN (53, 54)
                           THEN D.qty*d.Final_conv
                       ELSE 0
        END)
         , C_S_Sum_Price          = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN (D.Total / ISNULL(H.Currency_Rate, 1))
                                            ELSE 0
        END)
         , C_R_Sum_Price          = SUM(CASE
                                            WHEN H.CODE IN (53, 54)
                                                THEN (D.Total / ISNULL(H.Currency_Rate, 1))
                                            ELSE 0
        END)
         , NetSale                = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN (D.Total / ISNULL(H.Currency_Rate, 1))
                                            ELSE 0
        END) - SUM(CASE
                       WHEN H.CODE IN (53, 54)
                           THEN (D.Total / ISNULL(H.Currency_Rate, 1))
                       ELSE 0
        END)
         , D_H_Discount_Value     = MIN(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN ISNULL( D.H_Discount_Value,0) 
                                            ELSE 0
        END)
		,Discount_Value     = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN ISNULL(D.H_Discount_Value,0) * (D.qty*d.Final_conv)
                                            ELSE 0

        END)
		,Return_Discount_Value     = SUM(CASE
                                            WHEN H.CODE IN (53, 54)
                                                THEN ISNULL(D.H_Discount_Value,0) * (D.qty*d.Final_conv)
                                            ELSE 0

        END)
         , C_R_Sum_Discount_Value = SUM(CASE
                                            WHEN H.CODE IN (53, 54)
                                                THEN D.Price / ISNULL(H.Currency_Rate, 1)
                                            ELSE 0
        END)
         , C_S_Sum_Total          = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN D.Total
                                            ELSE 0
        END)
         , C_R_Sum_Total          = SUM(CASE
                                            WHEN H.CODE IN (53, 54)
                                                THEN D.Total 
                                            ELSE 0
        END)
         , Sales_Cost             = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN d.AvgCost * d.QTY *
                                                     d.final_Conv
                                            ELSE 0
        END)
         , Returns_Cost           = SUM(CASE
                                            WHEN H.CODE IN (53, 54)
                                                THEN d.AvgCost * d.QTY *
                                                     d.final_Conv
                                            ELSE 0
        END)
		,item_profit = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN D.Total
                                            ELSE 0
        END) +SUM(CASE
                                            WHEN H.CODE IN (53, 54)
                                                THEN D.Total - ISNULL(D.H_Discount_Value,0)
                                            ELSE 0
        END) - SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN d.AvgCost * d.QTY *
                                                     d.final_Conv
                                            ELSE 0
        END) + SUM(CASE
                                            WHEN H.CODE IN (53, 54)
                                                THEN d.AvgCost * d.QTY *
                                                     d.final_Conv
                                            ELSE 0
        END)
    FROM Inv_Receipt_H H
             LEFT JOIN Inv_Receipt_d D
                       ON D.Parent_ID = H.ID
             LEFT JOIN Inv_Items I
                       ON I.ID = D.Item_ID
             LEFT JOIN Inv_CashCustomer
                       ON Inv_CashCustomer.id = H.CashCustomerID
             LEFT JOIN GL_Accounts
                       ON GL_Accounts.AccountID = H.Vendor_ID
             LEFT JOIN Inv_Unit
                       ON Inv_Unit.ID = I.Selling_UnitId
           
    WHERE D.Item_ID IS NOT NULL
      AND (@SubsidaryID IS NULL
        OR H.SubsidiaryID = @SubsidaryID)
      AND (ISNULL(H.Is_Canceled, 0) <> 1)
      AND (ISNULL(H.IsHolded, 0) <> 1)
      AND (@User_Role_Sale IS NULL
        OR D.SalesManId IN (@User_Role_Sale))
      AND (@ItemId IS NULL
        OR D.Item_ID = @ItemId)
      AND (@Item_vendor IS NULL
        OR D.Item_ID IN
           (
               SELECT Inv_Items_Vendors.ItemID
               FROM Inv_Items_Vendors
               WHERE (@item_vendor is null or Inv_Items_Vendors.VendorID = @item_vendor)
           ))

      AND D.FinishedProductID IS NULL
      AND (@SalesManId IS NULL
        OR H.Empoyee_ID = @SalesManId)
      AND H.Code IN (87)
      AND (@FromDate IS NULL
        OR CAST(H.Entry_Date AS DATETIME) >= @fromDateTime)
      AND (@ToDate IS NULL
        OR CAST(H.Entry_Date AS DATETIME) <= @toDateTime)
      AND (@BrachID IS NULL
        OR H.Branch_ID IN (@BrachID))
		and H.Branch_ID in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId)
      AND (@CustomerID IS NULL
        OR H.Vendor_ID = @CustomerID)
      AND (@CashCustomerID IS NULL
        OR H.CashCustomerID = @CashCustomerID)
      AND (@CustomerCatID IS NULL
        OR Inv_CashCustomer.CategoryID IN (@CustomerCatID)
        OR Gl_Accounts.VendorCategoryID IN (@CustomerCatID))
      AND (@FromInvoiceNumber IS NULL
        OR H.Entry_No >= @FromInvoiceNumber)
      AND (@ToInvoiceNumber IS NULL
        OR H.Entry_No <= @ToInvoiceNumber)
      AND (@ItemCategoryID IS NULL
        OR D.Item_ID IN
           (
               SELECT Inv_Receipt_d.Item_ID
               FROM Inv_Receipt_d
                        LEFT JOIN Inv_Items_Categories
                                  ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
               WHERE Inv_Receipt_d.Parent_ID = H.ID
                 AND Inv_Items_Categories.ItemCategory_ID IN
                     (
                         SELECT item
                         FROM dbo.Split(@ItemCategoryID, ',')
                     )
           ))
		    AND (@TransactionType IS NULL or @TransactionType='-1'
        OR H.Code IN
           (
               SELECT item
               FROM dbo.Split(@TransactionType, ',')
           ))
      AND (@FromTime IS NULL
        OR CAST(H.Entry_Date AS TIME) >= @FromTime)
      AND (@ToTime IS NULL
        OR CAST(H.Entry_Date AS TIME) <= @ToTime)
      AND (@FromCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) >= @FromCustomerActualDeliverDate)
      AND (@ToCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) <= @ToCustomerActualDeliverDate)
      AND (@CustomerStatusID IS NULL
        OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
      AND (@Payment_Type IS NULL
        OR H.Payment_Type = @Payment_Type)
    GROUP BY I.Code
           , I.Name
           , I.Name_AR
           , Inv_Unit.Name_AR
           , I.ID
           , Inv_Unit.Name
    ORDER BY I.Name
END
GO
/****** Object:  StoredProcedure [dbo].[Report_Inv_Invetory_Details]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--Select * from AV_INV_TransactionDetails where  item_id = 5208 and code  = 81 order by Entry_Date
CREATE PROC [dbo].[Report_Inv_Invetory_Details] @FromDate          DATE = '2020-05-09'
                                      , @ToDate            DATE = '2020-05-10'
                                      , @BrachID           INT  = NULL
                                      , @CustomerID        INT  = NULL
                                      , @CustomerCatID     INT  = NULL
                                      , @FromInvoiceNumber INT  = NULL
                                      , @ToInvoiceNumber   INT  = NULL
                                      , @TransactionType   INT  = 61
                                      , @ItemCategoryID    INT  = NULL
                                      , @SubsidaryID       INT  = NULL
                                      , @ItemId            INT  = null
                                      , @SalesManId        INT  = NULL
                                      , @StoreID           INT  = NULL
                                      , @VendorID          INT  = NULL
                                      , @CostCenterID      INT  = NULL
                                      , @FromStore         INT  = NULL
                                      , @ToStore           INT  = NULL
AS
    BEGIN

        SELECT  I.ID, I_Code = I.Code
             , I_Name = I.Name
             , I_Name_Ar = I.Name_AR
             , I_Unit_Ar = Inv_Unit.Name_AR
             , I_Unit = Inv_Unit.Name
             , CASE
                   WHEN H.Code = 81 OR H.Code = 80
                   THEN FromStore.Name
                   ELSE NULL
               END FromStore_Name
             , CASE
                   WHEN H.Code = 81 OR H.Code = 80
                   THEN FromStore.Name_Ar
                   ELSE NULL
               END FromStore_Name_Ar
             , CASE
                   WHEN H.Code = 81 OR H.Code = 80
                   THEN ToStore.Name
                   ELSE NULL
               END ToStore_Name
             , CASE
                   WHEN H.Code = 81 OR H.Code = 80
                   THEN ToStore.Name_Ar
                   ELSE NULL
               END ToStore_Name_Ar
             , C_S_Sum_Qty = SUM(CASE
                                     WHEN H.CODE IN(82 , 63 , 3 , 83 , 81,80)
                                     THEN D.qty
                                     ELSE 0
                                 END)
             , C_R_Sum_Qty = SUM(CASE
                                     WHEN H.CODE IN(60 , 61)
                                     THEN D.qty
                                     ELSE 0
                                 END)
             , Net_QTY =cAST( SUM(CASE
                                 WHEN H.CODE IN(82 , 63 , 3 , 83 ,80) OR (H.CODE = 81 AND D.Transaction_move = 1 ) THEN 
                                      D.qty * d.Final_conv   
                                 ELSE 0
                             END) - SUM(CASE
                                            WHEN H.CODE IN(60 , 61)
                                             THEN D.qty * d.Final_conv 
                                            ELSE 0
                                        END) AS FLOAT)
             , C_S_Sum_Price = SUM(CASE
                                       WHEN H.CODE IN(82 , 63 , 3 , 83 , 81,80)
                                       THEN D.Total / ISNULL(H.Currency_Rate , 1) - D.H_Discount_Value / ISNULL(H.Currency_Rate , 1)
                                       ELSE 0
                                   END)
             , C_R_Sum_Price = SUM(CASE
                                       WHEN H.CODE IN(60 , 61)
                                       THEN D.Total / ISNULL(H.Currency_Rate , 1) - D.H_Discount_Value / ISNULL(H.Currency_Rate , 1)
                                       ELSE 0
                                   END)
             , NetSale = SUM(CASE
                                 WHEN H.CODE IN(82 , 63 , 3 , 83 , 81,80)
                                 THEN D.Total / ISNULL(H.Currency_Rate , 1) - D.H_Discount_Value / ISNULL(H.Currency_Rate , 1)
                                 ELSE 0
                             END) - SUM(CASE
                                            WHEN H.CODE IN(60 , 61)
                                            THEN D.Total / ISNULL(H.Currency_Rate , 1) - D.H_Discount_Value / ISNULL(H.Currency_Rate , 1)
                                            ELSE 0
                                        END)
             , C_S_Sum_Discount_Value = SUM(CASE
                                                WHEN H.CODE IN(82 , 63 , 3 , 83 , 81,80)
                                                THEN D.Discount_Value / ISNULL(H.Currency_Rate , 1)
                                                ELSE 0
                                            END)
             , C_R_Sum_Discount_Value = SUM(CASE
                                                WHEN H.CODE IN(60 , 61)
                                                THEN D.Price / ISNULL(H.Currency_Rate , 1)
                                                ELSE 0
                                            END)
             , C_S_Sum_Total = SUM(CASE
                                       WHEN H.CODE IN(82 , 63 , 3 , 83 , 81,80)
                                       THEN D.Total
                                       ELSE 0
                                   END)
             , C_R_Sum_Total = SUM(CASE
                                       WHEN H.CODE IN(60 , 61)
                                       THEN D.Total
                                       ELSE 0
                                   END) 
			   ,Cost = cAST( SUM(CASE
                                 WHEN H.CODE IN(82 , 63 , 3 , 83 ,80) OR (H.CODE = 81 AND D.Transaction_move = 1 ) THEN 
                                      D.qty * d.Final_conv   * D.AvgCost
                                 ELSE 0
                             END) - SUM(CASE
                                            WHEN H.CODE IN(60 , 61)
                                             THEN D.qty * d.Final_conv    * D.AvgCost
                                            ELSE 0
                                        END) AS FLOAT) / CAST(Inv_Items_Units.FinalConv AS float)
    
					 ,CAST(Inv_Items_Units.FinalConv AS float)  
					  ,NewQTY = cAST( SUM(CASE
                                 WHEN H.CODE IN(82 , 63 , 3 , 83 ,80) OR (H.CODE = 81 AND D.Transaction_move = 1 ) THEN 
                                      D.qty * d.Final_conv   
                                 ELSE 0
                             END) - SUM(CASE
                                            WHEN H.CODE IN(60 , 61)
                                             THEN D.qty * d.Final_conv 
                                            ELSE 0
                                        END) AS FLOAT) / CAST(Inv_Items_Units.FinalConv AS float)


				,lastCost = (
					 select max(a.AvgCost) from AV_INV_TransactionDetails a 
					 where a.id  = (select max(id)
											from AV_INV_TransactionDetails d
											where  d.item_id = i.ID and d.Entry_Date <=@ToDate  and  d.item_id = a.item_id  ) ) * CAST(Inv_Items_Units.FinalConv AS float)  * (cAST( SUM(CASE
																																	 WHEN H.CODE IN(82 , 63 , 3 , 83 ,80) OR (H.CODE = 81 AND D.Transaction_move = 1 ) THEN 
																																		  D.qty * d.Final_conv   
																																	 ELSE 0
																																 END) - SUM(CASE
																																				WHEN H.CODE IN(60 , 61)
																																				 THEN D.qty * d.Final_conv 
																																				ELSE 0
																																			END) AS FLOAT) / CAST(Inv_Items_Units.FinalConv AS float))
				,sum(d.Total	)   sum_D_total																															
			FROM dbo.Inv_Receipt_H H
             LEFT JOIN Inv_Store FromStore
             ON FromStore.ID = H.FromStoreID
             LEFT JOIN Inv_Store ToStore
             ON ToStore.ID = H.ToStoreID
             LEFT JOIN dbo.Inv_Receipt_d D
             ON D.Parent_ID = H.ID
             LEFT JOIN dbo.Inv_Items I
             ON I.ID = D.Item_ID
             LEFT JOIN dbo.Inv_CashCustomer
             ON Inv_CashCustomer.id = H.CashCustomerID
             LEFT JOIN dbo.GL_Accounts
             ON GL_Accounts.AccountID = H.Vendor_ID
             LEFT JOIN dbo.Inv_Unit
             ON Inv_Unit.ID = I.Inventory_UnitId
             LEFT JOIN AV_Inv_items_store
             ON AV_Inv_items_store.item_id = D.Item_ID
                AND AV_Inv_items_store.store_id = D.Store_ID,Inv_Items_Units 
        WHERE  Inv_Items_Units.Item_ID =I.ID  AND Inv_Items_Units.Unit_id = I.Inventory_UnitId AND 
		
		D.Item_ID IS NOT NULL
              AND (@SubsidaryID IS NULL
                   OR H.SubsidiaryID = @SubsidaryID)
              AND (@ItemId IS NULL
                   OR D.Item_ID = @ItemId)
              AND D.FinishedProductID IS NULL
              AND (@SalesManId IS NULL
                   OR H.Empoyee_ID = @SalesManId)
              AND H.Code IN(82 , 60 , 63 , 3 , 61 , 83 , 81 , 4 , 85 , 80)
             AND (@FromDate IS NULL
                  OR CAST(H.Entry_Date AS DATE) >= @FromDate)
             AND (@ToDate IS NULL
                  OR CAST(H.Entry_Date AS DATE) <= @ToDate)
             AND (@BrachID IS NULL
                  OR H.Branch_ID IN(@BrachID))
        AND (@CustomerID IS NULL
             OR H.CashCustomerID = @CustomerID
             OR H.Vendor_ID = @CustomerID)
        AND (@VendorID IS NULL
             OR H.CashCustomerID = @VendorID
             OR H.Vendor_ID = @VendorID)
        AND (@StoreID IS NULL
             OR D.Store_ID IN(@StoreID))
        AND (@CustomerCatID IS NULL
             OR Inv_CashCustomer.CategoryID IN(@CustomerCatID)
    OR Gl_Accounts.VendorCategoryID IN(@CustomerCatID))
     AND (@FromInvoiceNumber IS NULL
          OR H.Entry_No >= @FromInvoiceNumber)
     AND (@ToInvoiceNumber IS NULL
          OR H.Entry_No <= @ToInvoiceNumber)
     AND (@TransactionType IS NULL
          OR H.Code = @TransactionType)
     AND (@ItemCategoryID IS NULL
          OR H.ID IN
        (
         SELECT Inv_Receipt_d.Parent_ID
         FROM dbo.Inv_Receipt_d
              LEFT JOIN dbo.Inv_Items_Categories
              ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
         WHERE D.Parent_ID = H.ID
               AND Inv_Items_Categories.ItemCategory_ID IN(@ItemCategoryID)
        ))
AND (@CostCenterID IS NULL
     OR H.CostCenterID IN(@CostCenterID))
AND (@FromStore IS NULL
     OR H.FromStoreID = @FromStore)
AND (@ToStore IS NULL
     OR H.ToStoreID = @ToStore)
        GROUP BY I.ID,I.Code
               , I.Name
               , I.Name_AR
               , Inv_Unit.Name_AR
               , Inv_Unit.Name
               , H.Code ,FromStore.Name
               , FromStore.Name_Ar
               , ToStore.Name_Ar,ToStore.Name
				 ,INV_ITEMS_UNITS.FinalConv
        ORDER BY I.Name;
    END
	
GO
/****** Object:  StoredProcedure [dbo].[Report_Inv_Invetory_Details_Test_tarek]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROC [dbo].[Report_Inv_Invetory_Details_Test_tarek] @FromDate          DATE = NULL
                                      , @ToDate            DATE = NULL
                                      , @BrachID           INT  = NULL
                                      , @CustomerID        INT  = NULL
                                      , @CustomerCatID     INT  = NULL
                                      , @FromInvoiceNumber INT  = NULL
                                      , @ToInvoiceNumber   INT  = NULL
                                      , @TransactionType   INT  = NULL
                                      , @ItemCategoryID    INT  = NULL
                                      , @SubsidaryID       INT  = NULL
                                      , @ItemId            INT  = NULL
                                      , @SalesManId        INT  = NULL
                                      , @StoreID           INT  = NULL
                                      , @VendorID          INT  = NULL
                                      , @CostCenterID      INT  = NULL
                                      , @FromStore         INT  = NULL
                                      , @ToStore           INT  = NULL
AS
    BEGIN

        SELECT I_Code = I.Code,
		H_ID=H.ID,
		I_InvUnit=I.Inventory_UnitId
             , I_Name = I.Name
             , I_Name_Ar = I.Name_AR
             , I_Unit_Ar = Inv_Unit.Name_AR
             , I_Unit = Inv_Unit.Name
             , CASE
                   WHEN H.Code = 81 OR H.Code = 80
                   THEN FromStore.Name
                   ELSE NULL
               END FromStore_Name
             , CASE
                   WHEN H.Code = 81 OR H.Code = 80
                   THEN FromStore.Name_Ar
                   ELSE NULL
               END FromStore_Name_Ar
             , CASE
                   WHEN H.Code = 81 OR H.Code = 80
                   THEN ToStore.Name
                   ELSE NULL
               END ToStore_Name
             , CASE
                   WHEN H.Code = 81 OR H.Code = 80
                   THEN ToStore.Name_Ar
                   ELSE NULL
               END ToStore_Name_Ar
             , C_S_Sum_Qty = SUM(CASE
                                     WHEN H.CODE IN(82 , 63 , 3 , 83 , 81,80)
                                     THEN D.qty
                                     ELSE 0
                                 END)
             , C_R_Sum_Qty = SUM(CASE
                                     WHEN H.CODE IN(60 , 61)
                                     THEN D.qty
                                     ELSE 0
                                 END),
			 Inventory_Qty = ISNULL((select top 1 *
    FROM dbo.CalcTotalItemsForInventoryUnitId(H.ID,I.Inventory_UnitId,I.ID)),0)
             , Net_QTY = SUM(CASE
                                 WHEN H.CODE IN(82 , 63 , 3 , 83 , 81,80)
                                 THEN D.qty
                                 ELSE 0
                             END) - SUM(CASE
                                            WHEN H.CODE IN(60 , 61)
                                            THEN D.qty
                                            ELSE 0
                                        END)
             , C_S_Sum_Price = SUM(CASE
                                       WHEN H.CODE IN(82 , 63 , 3 , 83 , 81,80)
                                       THEN D.Total / ISNULL(H.Currency_Rate , 1) - D.H_Discount_Value / ISNULL(H.Currency_Rate , 1)
                                       ELSE 0
                                   END)
             , C_R_Sum_Price = SUM(CASE
                                       WHEN H.CODE IN(60 , 61)
                                       THEN D.Total / ISNULL(H.Currency_Rate , 1) - D.H_Discount_Value / ISNULL(H.Currency_Rate , 1)
                                       ELSE 0
                                   END)
             , NetSale = SUM(CASE
                                 WHEN H.CODE IN(82 , 63 , 3 , 83 , 81,80)
                                 THEN D.Total / ISNULL(H.Currency_Rate , 1) - D.H_Discount_Value / ISNULL(H.Currency_Rate , 1)
                                 ELSE 0
                             END) - SUM(CASE
                                            WHEN H.CODE IN(60 , 61)
                                            THEN D.Total / ISNULL(H.Currency_Rate , 1) - D.H_Discount_Value / ISNULL(H.Currency_Rate , 1)
                                            ELSE 0
                                        END)
             , C_S_Sum_Discount_Value = SUM(CASE
                                                WHEN H.CODE IN(82 , 63 , 3 , 83 , 81,80)
                                                THEN D.Discount_Value / ISNULL(H.Currency_Rate , 1)
                                                ELSE 0
                                            END)
             , C_R_Sum_Discount_Value = SUM(CASE
                                                WHEN H.CODE IN(60 , 61)
                                                THEN D.Price / ISNULL(H.Currency_Rate , 1)
                                                ELSE 0
                                            END)
             , C_S_Sum_Total = SUM(CASE
                                       WHEN H.CODE IN(82 , 63 , 3 , 83 , 81,80)
                                       THEN D.Total
                                       ELSE 0
                                   END)
             , C_R_Sum_Total = SUM(CASE
                                       WHEN H.CODE IN(60 , 61)
                                       THEN D.Total
                                       ELSE 0
                                   END)
               --, Sales_Cost = SUM(Case
               --                       When H.CODE In(51, 52)
               --                       Then  D.Avr_Cost * D.qty * D.Conv
               --                       Else 0
               --                   End)
               --, Returns_Cost = SUM(Case
               --                         When H.CODE In(53, 54)
               --                         Then  D.Avr_Cost * D.qty * D.Conv
               --                         Else 0
               --                     End)
             , Cost = SUM(CASE
                              WHEN H.CODE IN(82 , 63 , 3 , 83 , 81)
                              THEN AV_Inv_items_store.AvgCost
                              ELSE 0
                          END) - SUM(CASE
                                         WHEN H.CODE IN(60 , 61)
                                         THEN AV_Inv_items_store.AvgCost
                                         ELSE 0
                                     END)
        FROM dbo.Inv_Receipt_H H
             LEFT JOIN Inv_Store FromStore
             ON FromStore.ID = H.FromStoreID
             LEFT JOIN Inv_Store ToStore
             ON ToStore.ID = H.ToStoreID
             LEFT JOIN dbo.Inv_Receipt_d D
             ON D.Parent_ID = H.ID
             LEFT JOIN dbo.Inv_Items I
             ON I.ID = D.Item_ID
             LEFT JOIN dbo.Inv_CashCustomer
             ON Inv_CashCustomer.id = H.CashCustomerID
             LEFT JOIN dbo.GL_Accounts
             ON GL_Accounts.AccountID = H.Vendor_ID
             LEFT JOIN dbo.Inv_Unit
             ON Inv_Unit.ID = I.Inventory_UnitId
             LEFT JOIN AV_Inv_items_store
             ON AV_Inv_items_store.item_id = D.Item_ID
                AND AV_Inv_items_store.store_id = D.Store_ID
        WHERE D.Item_ID IS NOT NULL
              AND (@SubsidaryID IS NULL
                   OR H.SubsidiaryID = @SubsidaryID)
              AND (@ItemId IS NULL
                   OR D.Item_ID = @ItemId)
              AND D.FinishedProductID IS NULL
              AND (@SalesManId IS NULL
                   OR H.Empoyee_ID = @SalesManId)
              AND H.Code IN(82 , 60 , 63 , 3 , 61 , 83 , 81 , 4 , 85 , 80)
             AND (@FromDate IS NULL
                  OR CAST(H.Entry_Date AS DATE) >= @FromDate)
             AND (@ToDate IS NULL
                  OR CAST(H.Entry_Date AS DATE) <= @ToDate)
             AND (@BrachID IS NULL
                  OR H.Branch_ID IN(@BrachID))
        AND (@CustomerID IS NULL
             OR H.CashCustomerID = @CustomerID
             OR H.Vendor_ID = @CustomerID)
        AND (@VendorID IS NULL
             OR H.CashCustomerID = @VendorID
             OR H.Vendor_ID = @VendorID)
        AND (@StoreID IS NULL
             OR D.Store_ID IN(@StoreID))
        AND (@CustomerCatID IS NULL
             OR Inv_CashCustomer.CategoryID IN(@CustomerCatID)
    OR Gl_Accounts.VendorCategoryID IN(@CustomerCatID))
     AND (@FromInvoiceNumber IS NULL
          OR H.Entry_No >= @FromInvoiceNumber)
     AND (@ToInvoiceNumber IS NULL
          OR H.Entry_No <= @ToInvoiceNumber)
     AND (@TransactionType IS NULL
          OR H.Code = @TransactionType)
     AND (@ItemCategoryID IS NULL
          OR H.ID IN
        (
         SELECT Inv_Receipt_d.Parent_ID
         FROM dbo.Inv_Receipt_d
              LEFT JOIN dbo.Inv_Items_Categories
              ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
         WHERE D.Parent_ID = H.ID
               AND Inv_Items_Categories.ItemCategory_ID IN(@ItemCategoryID)
        ))
AND (@CostCenterID IS NULL
     OR H.CostCenterID IN(@CostCenterID))
AND (@FromStore IS NULL
     OR H.FromStoreID = @FromStore)
AND (@ToStore IS NULL
     OR H.ToStoreID = @ToStore)
        GROUP BY I.Code
               , I.Name,
			   H.ID,
			   I.ID,
			   I.Inventory_UnitId
               , I.Name_AR
               , Inv_Unit.Name_AR
               , Inv_Unit.Name
               , CASE
                     WHEN H.Code = 81 OR H.Code = 80
                     THEN FromStore.Name
                 END
               , CASE
                     WHEN H.Code = 81 OR H.Code = 80
                     THEN FromStore.Name_Ar
                 END
               , CASE
                     WHEN H.Code = 81 OR H.Code = 80
                     THEN ToStore.Name
                 END
               , CASE
                     WHEN H.Code = 81 OR H.Code = 80
                     THEN ToStore.Name_Ar
                 END
        ORDER BY I.Name;
    END


-- SELECT   Inv_Receipt_d.Qty,Inv_Receipt_d.Conv,Inv_Receipt_d.Final_conv, Inv_Receipt_h.Code,Inv_Receipt_d.Unit_ID,(Inv_Receipt_d.Qty * Inv_Receipt_d.Final_conv / (SELECT   Inv_Receipt_d.Final_conv FROM     Inv_Receipt_h INNER JOIN Inv_Receipt_d ON Inv_Receipt_h.ID = Inv_Receipt_d.Parent_ID INNER JOIN Inv_Items ON Inv_Receipt_d.Item_ID = Inv_Items.ID where Inv_Receipt_d.Unit_ID=170 and Inv_Receipt_h.ID = 201884))
--FROM     Inv_Receipt_h INNER JOIN
--             Inv_Receipt_d ON Inv_Receipt_h.ID = Inv_Receipt_d.Parent_ID
--WHERE   Inv_Receipt_h.ID = 201884
----and Inv_Receipt_d.Unit_ID=170

--SELECT   Inv_Receipt_d.Qty,Inv_Receipt_d.Conv, Inv_Receipt_h.Code,Inv_Receipt_d.Unit_ID
--FROM     Inv_Receipt_h INNER JOIN
--             Inv_Receipt_d ON Inv_Receipt_h.ID = Inv_Receipt_d.Parent_ID
--			 INNER JOIN
--             Inv_Items ON Inv_Receipt_d.Item_ID = Inv_Items.ID
--WHERE   Inv_Receipt_h.ID = 201884


--select * from Inv_Unit


--SELECT   Inv_Receipt_d.Final_conv
--FROM     Inv_Receipt_h INNER JOIN
--             Inv_Receipt_d ON Inv_Receipt_h.ID = Inv_Receipt_d.Parent_ID
--			 INNER JOIN
--             Inv_Items ON Inv_Receipt_d.Item_ID = Inv_Items.ID
--			 where Inv_Receipt_d.Unit_ID=170
--			 and Inv_Receipt_h.ID = 201884
			 --and 
GO
/****** Object:  StoredProcedure [dbo].[Report_Inv_Item_Card]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Report_Inv_Item_Card] @StoreID INT = 57
, @Move INT = NULL
, @ItemID INT   = 41  
, @FromDate DATETime = NULL
, @ToDate DATETime = '20231017'
, @SubsidaryID INT = NULL
AS
BEGIN

    --Get Item Transaction
	Set @FromDate = @FromDate + ' 00:00:00'
	Set @ToDate = @ToDate + ' 23:59:59'
    SELECT H.ID                          Parent_VoucherID
         , d.id AS                       VoucherID
         , H.FromStoreID                 FromStoreID
         , H.ToStoreID                   ToStoreID
         , D.Store_ID                    Store_ID
         , D.Item_ID                     Item_ID
         , H.Entry_Date                  Entry_Date
         , tc.Code                       TC_Code
         , CASE
               WHEN tc.Code = 81
                   AND D.Transaction_move = -1
                   THEN 'Transfer To Store No ' + Inv_Store_To.Code
               WHEN tc.Code = 81
                   AND D.Transaction_move = 1
                   THEN 'Transfer From Store No ' + Inv_Store_From.Code
               ELSE TC.Name
        END                              Tc_Name
         , CASE
               WHEN tc.Code = 81
                   AND D.Transaction_move = -1
                  THEN N'تحويل الي مخزن ' + Inv_Store_To.Code
               WHEN tc.Code = 81
                   AND D.Transaction_move = 1
                   THEN N'تحويل من مخزن ' + Inv_Store_From.Code
               ELSE TC.Name_AR
        END                              Tc_Name_Ar
         , H.Entry_No                    Entry_No
         , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN CAST(Inv_CashCustomer.id AS NVARCHAR(200))
               ELSE CAST(GL_Accounts.Code AS NVARCHAR(200))
        END                              [Customer_No_Vendor_NO]
         , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN Inv_CashCustomer.Name
               ELSE GL_Accounts.Name
        END                              [Customer_Name_Vendor_Name]
         , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN Inv_CashCustomer.Name_AR
               ELSE GL_Accounts.Name_AR
        END                              [Customer_Name_Ar_Vendor_Name_Ar]
         , 
		      CASE
               WHEN tc.Code = 83
                   AND ISNULL(D.Qty, 0) < 0
                   THEN ISNULL(D.Qty, 0)  --* -1 * ISNULL(D.Conv, 0)
               ELSE ISNULL(D.Qty, 0)
        END                              QTY
         , Inv_Unit.Name                 Unit_Name
         , D.Conv                        package
         ,CAST( ISNULL(IIU.FinalConv, 1)  AS FLOAT)     Final_conv
         , CAST(IIU.Conv     AS FLOAT)                 IIU_Conv
		  , CAST(ISNULL(IIU2.FinalConv, 1) AS fLOAT)      InvFinal_conv
         , CAST(IIU2.Conv          AS fLOAT )            InvIIU_Conv
         , CAST(d.AvgCost AS fLOAT )     Cost
         ,  cast((D.price   - d.Discount_Value) / ISNULL(h.Costing_Rate,1)    as float    )  -   ISNULL(D.H_Discount_Value,0)     Price
        --  , (D.price - d.Discount_Value) / ISNULL(h.Costing_Rate,1)             transPrice   
	--	,CAST(d.AvgCost AS fLOAT ) * D.Final_conv        transPrice   
	 , --cast((D.price +ISNULL(D.ProductionUnitExpense,0) - d.Discount_Value) / ISNULL(h.Costing_Rate,1)    as float    )  -   ISNULL(D.H_Discount_Value,0)      
	 case  when  d.Transaction_move = -1 /*and h.code = 82 */ then CAST(d.AvgCost AS fLOAT ) * CAST(d.Final_conv AS fLOAT )
			--ELSE   cast((D.price +ISNULL(D.ProductionUnitExpense,0) - d.Discount_Value) / ISNULL(h.Costing_Rate,1)    as float    )  -   ISNULL(D.H_Discount_Value,0)     
			ELSE   cast(D.price    as float    )      
	 --when  d.Transaction_move = -1 and h.code = 82 then CAST(d.AvgCost AS fLOAT ) * CAST(d.Final_conv AS fLOAT )
		--	when   d.Transaction_move =  1 then  cast((D.price +ISNULL(D.ProductionUnitExpense,0) - d.Discount_Value) / ISNULL(h.Costing_Rate,1)    as float    )  -   ISNULL(D.H_Discount_Value,0)     
			
			  end 
			
			transPrice
		--  , (D.price - d.Discount_Value) * ISNULL(h.Costing_Rate,1)            transPrice   
		  ,h.Costing_Rate
         , CASE
               WHEN tc.Code = 83
                   AND ISNULL(D.Qty, 0) < 0
                   THEN (ISNULL(D.Qty, 0) * -1 * ISNULL(D.Final_conv, 0)) * -1
               ELSE ISNULL(D.Qty, 0) * ISNULL(D.Final_conv, 0)
           END                              Balance
        -- , CASE
        --       WHEN tc.Code = 83
        --           AND ISNULL(D.Qty, 0) < 0
        --           THEN ((ISNULL(D.Qty, 0) * ISNULL(D.Final_conv, 0)) / IIU2.FinalConv) * -1
        --       ELSE (ISNULL(D.Qty, 0) * ISNULL(D.Final_conv, 0)) / IIU2.FinalConv
        --END                              InventoryBalance
		   , CASE
               WHEN tc.Code = 83
                   AND ISNULL(D.Qty, 0) < 0
                   THEN ((ISNULL(D.Qty, 0) ) / IIU2.FinalConv) * -1
                   ELSE (ISNULL(D.Qty, 0) * ISNULL(D.Final_conv, 0)) / IIU2.FinalConv
        END                              InventoryBalance
         , CASE
               WHEN tc.Code = 83
                   AND ISNULL(D.Qty, 0) < 0
                   THEN   -1
               ELSE D.Transaction_move
        END                              [MOVE]
		, d.totalQTy totalQTy
		,d.AllStoresQty  * d.AvgCost  balancecost
		,IIU.BarCode Barcode
    INTO #Item_Transaction
    FROM dbo.Inv_Receipt_H AS H
             LEFT JOIN dbo.Inv_Transaction_Codes AS TC
                       ON H.Code = TC.Code
             LEFT JOIN dbo.Inv_CashCustomer
                       ON H.CashCustomerID = Inv_CashCustomer.id
             LEFT JOIN dbo.GL_Accounts
                       ON H.Vendor_ID = GL_Accounts.AccountID
             LEFT JOIN dbo.Inv_Receipt_d AS D
                       ON H.ID = D.Parent_ID
             LEFT JOIN dbo.Inv_Store Inv_Store_From
                       ON H.FromStoreID = Inv_Store_From.ID
             LEFT JOIN dbo.Inv_Store Inv_Store_To
                       ON H.ToStoreID = Inv_Store_To.ID
             LEFT JOIN dbo.Inv_Unit
                       ON D.Unit_ID = Inv_Unit.ID
             LEFT JOIN dbo.Inv_Items AS I
                       ON D.Item_ID = I.ID
             LEFT JOIN dbo.Inv_Items_Units AS IIU
                       ON D.Unit_ID = IIU.Unit_id
                           AND d.Item_ID = iiu.Item_ID
             LEFT JOIN dbo.Inv_Items_Units AS IIU2
                       ON i.Inventory_UnitId = IIU2.Unit_id
                           AND i.Id = iiu2.Item_ID
    WHERE (@StoreID IS NULL
        OR D.Store_ID IN (@StoreID))
      AND (@ItemID IS NULL
        OR D.Item_ID IN (@ItemID))
      AND (@SubsidaryID IS NULL
        OR h.SubsidiaryID = @SubsidaryID)
      AND (D.Transaction_move != 0)
	 and (h.Entry_No<>0  )
	--and   (ISNULL(h.Is_Canceled, 0) <> 1) AND (ISNULL(h.IsHolded, 0) <> 1)
	
    --Get openning Balance

    SELECT NULL                                                       Parent_VoucherID
         , IIS.ID                                                     VoucherID
         , NULL                                                       FromStoreID
         , NULL                                                       ToStoreID
         , IIS.Store_ID                                               Store_ID
         , IIS.Item_ID                                                Item_ID
         , CAST(NULL AS DATE)                                         Entry_Date
         , NULL                                                       TC_Code
         , 'openning Balance'                                         Tc_Name
         , N'رصيد افتتاحي'                                        Tc_Name_Ar
		 , NULL                                                       Entry_No
         , ''                                                         [Customer_No_Vendor_NO ]
		 , ''                                                         [Customer_Name_Vendor_Name]
		 , ''                                                        [Customer_Name_Ar_Vendor_Name_Ar]
         , ISNULL(IIS.first_Qty, 0)                                   Qty
         , IU.Name                                                    Unit_Name
         , IIS.First_Conv                                             package
         , ISNULL(IIS.FinalConv, 1)                                   Final_conv
         , IIU.Conv                                                   IIU_Conv
		  , ISNULL(IIU.FinalConv, 1)                                   InvFinal_conv
         , IIU.Conv                                                   InvIIU_Conv
         ,CAST( IIS.First_Cost AS FLOAT) /CAST(IIS.FinalConv   AS FLOAT)                                           Cost
         , NULL                                                       Price
		 ,Null														 transPrice		
		 , 1 costingrate
         , cast(ISNULL(IIS.first_Qty, 0) as float) * cast(IIS.FinalConv   as float)                Balance
         , CAST( ((cast(ISNULL(IIS.first_Qty, 0) as float) *cast(IIS.FinalConv   as float)  ) /cast(IIU.FinalConv   as float)  )   AS FLOAT)   InventoryBalance
         , 1                                                          [MOVE]
		 , IIS.First_Qty totalQTy
		 ,ISNULL(IIS.First_Cost, 0) * ISNULL(IIS.first_Qty, 0) balancecost
		 ,IIU.BarCode
    INTO #Opeening_Balance
    FROM dbo.Inv_Items_Store IIS
             LEFT JOIN dbo.Inv_Items AS I
                       ON IIS.Item_ID = I.ID
             LEFT JOIN dbo.Inv_Unit AS IU
                       ON IU.ID = iis.First_Unit
            LEFT JOIN dbo.Inv_Items_Units AS IIU
                       ON i.Inventory_UnitId = IIU.Unit_id
                           AND i.ID = iiu.Item_ID
    WHERE (@StoreID IS NULL
        OR IIS.Store_ID IN (@StoreID))
      AND (@ItemID IS NULL
        OR IIS.Item_ID IN (@ItemID))
      AND (@SubsidaryID IS NULL
        OR I.Subsidiary_ID = @SubsidaryID)
      AND ISNULL(IIS.first_Qty, 0) != 0
	 
/**********
    Main Select
    **********/

    SELECT MainSelect.Parent_VoucherID
         , MainSelect.VoucherID
         , MainSelect.FromStoreID
         , MainSelect.ToStoreID
         , MainSelect.Store_ID Store_ID
         , Inv_Store.Code      Inv_Store_Code
		 , Inv_Store.Name      Inv_Store_Name
		 , Inv_Store.Name_Ar      Inv_Store_Name_Ar
         , MainSelect.Item_ID
         , inv_items.Code
         , inv_items.Item_Type
         , MainSelect.Entry_Date
         , MainSelect.TC_Code
         , MainSelect.Tc_Name
         , MainSelect.Tc_Name_AR
         , MainSelect.Entry_No
         , Customer_No_Vendor_NO
         , Customer_Name_Vendor_Name
         , Customer_Name_Ar_Vendor_Name_Ar
         , ( CASE 
               WHEN  (MainSelect.Qty) < 0  
                   THEN MainSelect.Qty  *   -1
               ELSE  MainSelect.Qty
        END ) Qty
         , MainSelect.Unit_Name
         , MainSelect.package
         , MainSelect.Final_conv
         , MainSelect.IIU_Conv
		 , MainSelect.InvFinal_conv
         , MainSelect.InvIIU_Conv
         , MainSelect.Cost
         , MainSelect.Price
		 ,MainSelect.transPrice
		 ,MainSelect.Costing_Rate
         , --Balance = (IF  MainSelect.Balance < 0 THEN MainSelect.Balance * -1 else MainSelect.Balance end IF)
		( CASE 
               WHEN  (MainSelect.Balance) < 0  
                   THEN  MainSelect.Balance  *   -1
               ELSE  MainSelect.Balance
        END ) Balance
         ,--MainSelect.totalQTy Balance_R
		 SUM(CAST(MainSelect.InventoryBalance AS FLOAT) * MainSelect.Move * CAST(MainSelect.InvFinal_conv AS FLOAT)) 
		 OVER (
        ORDER BY MainSelect.Item_ID
            , Entry_Date
            , VoucherID)      
			
			Balance_R
         , ROW_NUMBER() OVER (PARTITION BY MainSelect.Item_ID
        ORDER BY Entry_Date ASC
            , VoucherID ASC)       RowNumber
         , MainSelect.InventoryBalance
         , SUM(MainSelect.InventoryBalance * MainSelect.Move) OVER (PARTITION BY MainSelect.Item_ID
        ORDER BY Entry_Date
            , VoucherID)       InventoryBalance_R
         , MainSelect.move
		 , MainSelect.balancecost,MainSelect.Barcode
    INTO #MainSelect
    FROM (
             SELECT *
             FROM dbo.#Item_Transaction
             UNION ALL
             SELECT *
             FROM dbo.#Opeening_Balance
         ) AS MainSelect
             LEFT JOIN dbo.Inv_Store
                       ON Inv_Store.ID = MainSelect.Store_ID
             JOIN dbo.Inv_Items
                  ON Inv_Items.ID = MainSelect.Item_id
    WHERE
        (@ToDate IS NULL
            OR CAST(ISNULL(MainSelect.Entry_Date, '19990101') AS DATE) <= @ToDate)
      AND (@Move IS NULL
        OR MainSelect.move IN (@Move))
		
	 sELECT * FROM #MainSelect 
	 where
	  (@FromDate IS NULL
            OR #MainSelect.Entry_Date >= @FromDate)
			and
	 (@ToDate IS NULL
            OR #MainSelect.Entry_Date  <= @ToDate)
			
	     ORDER BY #MainSelect.Entry_Date
           , #MainSelect.VoucherID;
	 RETURN 

    SELECT *
         , (Cost / Final_Conv) * Balance Total_Cost
    INTO #Final
    FROM dbo.#MainSelect
    ORDER BY #MainSelect.Entry_Date
           , #MainSelect.VoucherID  ;

    -- BackLog No :  2995
    IF (@FromDate IS NULL)
        SELECT *
        FROM dbo.#Final
        ORDER BY #Final.Entry_Date
               , #Final.VoucherID;
    ELSE
        BEGIN
            -- Handel PerviousBalance:
            SELECT TOP 1 *
            INTO #PerviousBalance
            FROM dbo.#Final
            WHERE (@FromDate IS NULL
                OR CAST(ISNULL(#Final.Entry_Date, '19990101') AS DATE) < @FromDate)
            ORDER BY ISNULL(#Final.Entry_Date, '19990101') DESC

            UPDATE #PerviousBalance
            SET Entry_Date                     = NULL,
                Entry_No                       = NULL,
                Tc_Name                        = 'Previous Balance',
            Tc_Name_Ar   = N'رصيد افتتاحي'                                        
			  , Customer_No_Vendor_NO          = NULL,
                Customer_Name_Vendor_Name= NULL,
                Customer_Name_Ar_Vendor_Name_Ar= NULL,
               Qty                          = 0,
                Unit_Name                      = NULL,
                package                        = NULL,
                Cost                           = NULL,
                Move                           = CASE
                                                     WHEN InventoryBalance_R > 0
                                                         THEN 1
                                                     ELSE
                                                         -1
                    END
            SELECT *
            FROM dbo.#PerviousBalance
            UNION ALL
            SELECT *
            FROM dbo.#Final
            WHERE (@FromDate IS NULL
                OR CAST(#Final.Entry_Date AS DATE) >= @FromDate)
              AND (@ToDate IS NULL
                OR CAST(#Final.Entry_Date AS DATE) <= @ToDate)
        END
END 
 
 
GO
/****** Object:  StoredProcedure [dbo].[Report_Inv_Item_Card_Old]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Report_Inv_Item_Card_Old]
     @StoreID     INT =57--SELECT * FROM Inv_Store 
   , @Move        INT =NULL
   , @ItemID      INT =2873 -- SELECT * FROM inv_items WHERE Code = N'435'
   , @FromDate    DATE=NULL
   , @ToDate      DATE=NULL--'20180725'
   , @SubsidaryID INT =NULL
AS
BEGIN
    /***************************************************
    /Get Item Transaction 
    H.Transaction_Code != 0
    And (H.FromStoreID Is Null)
    And (h.ToStoreID Is Null);
    ***************************************************/
    
    SELECT H.ID                           Parent_VoucherID
          ,d.id                        AS VoucherID
          ,H.FromStoreID                  FromStoreID
          ,H.ToStoreID                    ToStoreID
          ,D.Store_ID                     Store_ID
          ,D.Item_ID                      Item_ID
          ,CAST(H.Entry_Date AS DATE)     Entry_Date
          ,TC.Name                        Tc_Name
          ,TC.Name_AR                     Tc_Name_Ar
          ,H.Entry_No                     Entry_No
          ,CASE 
                WHEN GL_Accounts.AccountID IS NULL THEN CAST(Inv_CashCustomer.id AS NVARCHAR(200))
                ELSE CAST(GL_Accounts.Code AS NVARCHAR(200))
           END [Customer_No_Vendor_NO ]
          ,ISNULL(D.Qty ,0)               Qty
          ,Inv_Unit.Name                  Unit_Name
          ,D.Conv                         package
          ,IIU.Conv                       IIU_Conv
          
          --, CASE WHEN H.Code = 1 THEN 
          --ISNULL(D.Price ,0)*ISNULL(H.Costing_Rate ,1) /ISNULL(H.Currency_Rate ,1) /ISNULL(H.Currency_Rate ,1)
          --ELSE 
          --	ISNULL(D.Price ,0)/ISNULL(H.Currency_Rate ,1)
          -- End Cost
		  ,AV_TransactionDetails.AvgCost Cost
          ,ISNULL(D.Qty ,0)*ISNULL(D.Conv ,0) Balance
          ,ISNULL(D.Qty ,0)*ISNULL(IIU.Conv ,0) InventoryBalance
          ,D.Transaction_move             MOVE 
		  INTO   #Item_Transaction
    FROM   dbo.Inv_Receipt_H AS H
           LEFT JOIN dbo.Inv_Transaction_Codes AS TC
                ON  H.Code = TC.Code
           LEFT JOIN dbo.Inv_CashCustomer
                ON  H.CashCustomerID = Inv_CashCustomer.id
           LEFT JOIN dbo.GL_Accounts
                ON  H.Vendor_ID = GL_Accounts.AccountID
           LEFT JOIN dbo.Inv_Receipt_d AS D
                ON  H.ID = D.Parent_ID
           LEFT JOIN dbo.Inv_Unit
                ON  D.Unit_ID = Inv_Unit.ID
           LEFT JOIN dbo.Inv_Items AS I
                ON  D.Item_ID = I.ID
           LEFT JOIN dbo.Inv_Items_Units AS IIU
                ON  i.Inventory_UnitId = IIU.Unit_id
                    AND i.Id = iiu.Item_ID
			Left Join AV_INV_TransactionDetails  AV_TransactionDetails
				On AV_TransactionDetails.ID= D.ID
				and AV_TransactionDetails.Parent_ID = H.ID
    WHERE  D.Transaction_move!= 0
           AND H.FromStoreID IS NULL
           AND h.ToStoreID IS NULL
           AND (@SubsidaryID IS NULL OR h.SubsidiaryID=@SubsidaryID)
    
	SELECT * FROM #Item_Transaction
	return 
    /******************************************************
    Get Item Trnsfer
    (H.FromStoreID Is Not Null)
    And (h.ToStoreID Is Not Null);
    ******************************************************/
    
	SELECT *
    INTO   #Item_Transfer
    FROM   (
               SELECT H.ID                   Parent_VoucherID
                     ,d.id                AS VoucherID
                     ,H.FromStoreID          FromStoreID
                     ,H.ToStoreID            ToStoreID
                     ,D.Store_ID             Store_ID
                     ,D.Item_ID              Item_ID
                     ,CAST(H.Entry_Date AS DATE) Entry_Date
                     ,'Transfer From Store No '+Inv_Store.Code Tc_Name
                     ,N'تحويل من مخزن '+Inv_Store.Code Tc_Name_Ar
                     ,H.Entry_No             Entry_No
                     ,CASE 
                           WHEN GL_Accounts.AccountID IS NULL THEN CAST(Inv_CashCustomer.id AS NVARCHAR(200))
                           ELSE CAST(GL_Accounts.Code AS NVARCHAR(200))
                      END [Customer_No_Vendor_NO ]
                     ,ISNULL(D.Qty ,0)       Qty
                     ,Inv_Unit.Name          Unit_Name
                     ,D.Conv                 package
                     ,IIU.Conv               IIU_Conv
          --, CASE WHEN H.Code = 1 THEN 
          --ISNULL(D.Price ,0)*ISNULL(H.Costing_Rate ,1) /ISNULL(H.Currency_Rate ,1) /ISNULL(H.Currency_Rate ,1)
          --ELSE 
          --	ISNULL(D.Price ,0)/ISNULL(H.Currency_Rate ,1)
          -- End Cost
		  ,AV_TransactionDetails.AvgCost Cost
                     ,ISNULL(D.Qty ,0)*ISNULL(D.Conv ,0) Balance
                     ,ISNULL(D.Qty ,0)*ISNULL(IIU.Conv ,0) InventoryBalance
                     ,D.Transaction_move     MOVE
               FROM   dbo.Inv_Receipt_H   AS H
                      LEFT JOIN dbo.Inv_Transaction_Codes AS TC
                           ON  H.Code = TC.Code
                      LEFT JOIN dbo.Inv_CashCustomer
                           ON  H.CashCustomerID = Inv_CashCustomer.id
                      LEFT JOIN dbo.GL_Accounts
                           ON  H.Vendor_ID = GL_Accounts.AccountID
                      LEFT JOIN dbo.Inv_Store
                           ON  h.FromStoreID = Inv_Store.ID
                      LEFT JOIN dbo.Inv_Receipt_d AS D
                           ON  H.ID = D.Parent_ID
                      LEFT JOIN dbo.Inv_Unit
                           ON  D.Unit_ID = Inv_Unit.ID
                      LEFT JOIN dbo.Inv_Items AS I
                           ON  D.Item_ID = I.ID
                      LEFT JOIN dbo.Inv_Items_Units AS IIU
                           ON  i.Inventory_UnitId = IIU.Unit_id
                               AND i.Id = iiu.Item_ID
			Left Join AV_INV_TransactionDetails  AV_TransactionDetails
				On AV_TransactionDetails.ID= D.ID
				and AV_TransactionDetails.Parent_ID = H.ID

               WHERE  H.FromStoreID IS NOT NULL
                      AND h.ToStoreID IS NOT NULL
                      AND (@SubsidaryID IS NULL OR H.SubsidiaryID=@SubsidaryID) 
               UNION
               SELECT H.ID                  Parent_VoucherID
                     ,d.id               AS VoucherID
                     ,H.FromStoreID         FromStoreID
                     ,D.Store_ID            ToStoreID
                     ,H.ToStoreID           Store_ID
                     ,D.Item_ID             Item_ID
                     ,CAST(H.Entry_Date AS DATE) Entry_Date
                     ,'Transfer To Store No'+Inv_Store.Code Tc_Name
                     ,N'تحويل إلى مخزن '+Inv_Store.Code Tc_Name_Ar
                     ,H.Entry_No            Entry_No
                     ,CASE 
                           WHEN GL_Accounts.AccountID IS NULL THEN CAST(Inv_CashCustomer.id AS NVARCHAR(200))
                           ELSE CAST(GL_Accounts.Code AS NVARCHAR(200))
                      END [Customer_No_Vendor_NO ]
                     ,ISNULL(D.Qty ,0)      Qty
                     ,Inv_Unit.Name         Unit_Name
                     ,D.Conv                package
                     ,IIU.Conv              IIU_Conv
          --, CASE WHEN H.Code = 1 THEN 
          --ISNULL(D.Price ,0)*ISNULL(H.Costing_Rate ,1) /ISNULL(H.Currency_Rate ,1) /ISNULL(H.Currency_Rate ,1)
          --ELSE 
          --	ISNULL(D.Price ,0)/ISNULL(H.Currency_Rate ,1)
          -- End Cost
		  ,AV_TransactionDetails.AvgCost Cost
                     ,ISNULL(D.Qty ,0)*ISNULL(D.Conv ,0) Balance
                     ,ISNULL(D.Qty ,0)*ISNULL(IIU.Conv ,0) InventoryBalance
                     ,ISNULL(D.Transaction_move ,0)*-1 MOVE
               FROM   dbo.Inv_Receipt_H  AS H
                      LEFT JOIN dbo.Inv_Transaction_Codes AS TC
                           ON  H.Code = TC.Code
                      LEFT JOIN dbo.Inv_CashCustomer
                           ON  H.CashCustomerID = Inv_CashCustomer.id
                      LEFT JOIN dbo.GL_Accounts
                           ON  H.Vendor_ID = GL_Accounts.AccountID
                      LEFT JOIN dbo.Inv_Store
                           ON  H.ToStoreID = Inv_Store.ID
                      LEFT JOIN dbo.Inv_Receipt_d AS D
                           ON  H.ID = D.Parent_ID
                      LEFT JOIN dbo.Inv_Unit
                           ON  D.Unit_ID = Inv_Unit.ID
                      LEFT JOIN dbo.Inv_Items AS I
                           ON  D.Item_ID = I.ID
                      LEFT JOIN dbo.Inv_Items_Units AS IIU
                           ON  i.Inventory_UnitId = IIU.Unit_id
                               AND i.Id = iiu.Item_ID
			Left Join AV_INV_TransactionDetails  AV_TransactionDetails
				On AV_TransactionDetails.ID= D.ID
				and AV_TransactionDetails.Parent_ID = H.ID
               WHERE  H.FromStoreID IS NOT NULL
                      AND h.ToStoreID IS NOT NULL
                      AND (@SubsidaryID IS NULL OR H.SubsidiaryID=@SubsidaryID)
           ) AS Item_Transfer
    ORDER BY
           Item_Transfer.VoucherID;
    
    -- Product Back Log Num : 2751
    IF @StoreID IS NULL
        DELETE 
        FROM   #Item_Transfer;
    
    /*********************
    Get openning Balance 
    *********************/
    
    SELECT NULL                         Parent_VoucherID
          ,NULL                         VoucherID
          ,NULL                         FromStoreID
          ,NULL                         ToStoreID
          ,IIS.Store_ID                 Store_ID
          ,IIS.Item_ID                  Item_ID
          ,CAST(NULL AS DATE)           Entry_Date
          ,'openning Balance'           Tc_Name
          ,N'الرصيد الافتتاحى'          Tc_Name_Ar
          ,NULL                         Entry_No
          ,'' [Customer_No_Vendor_NO ]
          ,ISNULL(IIS.first_Qty ,0)     Qty
          ,IU.Name                      Unit_Name
          ,IIS.First_Conv               package
          ,IIU.Conv                         IIU_Conv
          ,IIS.First_Cost               Cost
          ,ISNULL(IIS.first_Qty ,0)*ISNULL(IIS.first_conv ,0) Balance
          ,ISNULL(IIS.first_Qty ,0)*ISNULL(IIU.Conv ,0) InventoryBalance
          ,1                            MOVE
    INTO   #Opeening_Balance
    FROM   dbo.Inv_Items_Store IIS
           LEFT JOIN dbo.Inv_Items AS I
                ON  IIS.Item_ID = I.ID
           LEFT JOIN dbo.Inv_Unit AS IU
                ON  IU.ID = iis.First_Unit
            LEFT JOIN dbo.Inv_Items_Units AS IIU
                ON  i.Inventory_UnitId = IIU.Unit_id
                    AND i.Id = iiu.Item_ID                

    WHERE  (@SubsidaryID IS NULL OR I.Subsidiary_ID=@SubsidaryID)
               AND ISNULL(IIS.first_Qty ,0) != 0
    
    /**********
    Main Select
    **********/
    
    
    SELECT MainSelect.Parent_VoucherID
          ,MainSelect.VoucherID
          ,MainSelect.FromStoreID
          ,MainSelect.ToStoreID
          ,Store_ID     Store_ID
          ,Inv_Store.Code    Inv_Store_Code
          ,MainSelect.Item_ID
          ,inv_items.Code
          ,inv_items.Item_Type
          ,MainSelect.Entry_Date
          ,MainSelect.Tc_Name
          ,MainSelect.Tc_Name_AR
          ,MainSelect.Entry_No
          ,Customer_No_Vendor_NO
          ,MainSelect.Qty
          ,MainSelect.Unit_Name
          ,MainSelect.package
          ,MainSelect.IIU_Conv
          ,MainSelect.Cost
          ,MainSelect.Balance
          ,SUM(MainSelect.Balance*MainSelect.Move) OVER(
               PARTITION BY 
               CASE 
                                 WHEN MainSelect.Tc_Name LIKE 'Transfer From Store%' THEN MainSelect.ToStoreID
                                 ELSE MainSelect.Store_ID
                            END
              ,MainSelect.Item_ID 
               ORDER BY 
               Store_ID
              ,item_ID
              ,Entry_Date
              ,MOVE
              ,Entry_No
              ,VoucherID
              
              
           )            Balance_R
          ,ROW_NUMBER() OVER(
               PARTITION BY CASE 
                                 WHEN MainSelect.Tc_Name LIKE 'Transfer From Store%' THEN MainSelect.Store_ID
                                 ELSE MainSelect.Store_ID
                            END
              ,MainSelect.Item_ID 
               ORDER BY 
               Store_ID
              ,item_ID
              ,Entry_Date
              ,MOVE
           )            RowNumber
          ,MainSelect.InventoryBalance
          ,SUM(MainSelect.InventoryBalance*MainSelect.Move) OVER(
               PARTITION BY 
               CASE 
                                 WHEN MainSelect.Tc_Name LIKE 'Transfer From Store%' THEN MainSelect.Store_ID
                                 ELSE MainSelect.Store_ID
                            END
              ,MainSelect.Item_ID 
               ORDER BY 
           Store_ID
          ,item_ID
          ,Entry_Date
          ,MOVE
           )            InventoryBalance_R
          ,MainSelect.move
          INTO #MainSelect
    FROM   (
               SELECT *
               FROM   dbo.#Item_Transaction
               UNION ALL
               SELECT *
               FROM   dbo.#Item_Transfer
               UNION ALL 
               SELECT *
               FROM   dbo.#Opeening_Balance
           )         AS MainSelect
           LEFT JOIN Inv_Store
           ON Inv_Store.ID = MainSelect.Store_ID
           JOIN Inv_Items
           ON Inv_Items.ID = MainSelect.Item_id
    WHERE  (@StoreID IS NULL OR mainSelect.Store_ID IN (@StoreID))
           AND (@ItemID IS NULL OR MainSelect.Item_ID IN (@ItemID))
           AND (@Move IS NULL OR MainSelect.move IN (@Move))
           --AND (
           --        @FromDate IS NULL
           --        OR CAST(ISNULL(MainSelect.Entry_Date ,'19990101') AS DATE)>=@FromDate
           --    )
           AND (
                   @ToDate IS NULL
                   OR CAST(ISNULL(MainSelect.Entry_Date ,'19990101') AS DATE)<=@ToDate
               )
    ORDER BY
           Store_ID
          ,item_ID
          ,Entry_Date
          ,MOVE;
          
          
-- BackLog No :  2995          
          IF (@FromDate IS NULL )
          SELECT * FROM #MainSelect
       ORDER BY
           Store_ID
          ,item_ID
          ,Entry_Date
          ,MOVE;
          ELSE
          	BEGIN 
-- Handel PerviousBalance:
          SELECT TOP 1*
          INTO   #PerviousBalance
          FROM   #MainSelect
          WHERE  (
                     @FromDate IS NULL
                     OR CAST(ISNULL(#MainSelect.Entry_Date ,'19990101') AS DATE)<@FromDate
                 )
          ORDER BY
                 CAST(ISNULL(#MainSelect.Entry_Date ,'19990101') AS DATE) DESC 
          
          
          UPDATE #PerviousBalance
          SET    Entry_Date                = NULL
                ,Entry_No                  = NULL
                ,Tc_Name                   = 'Previous Balance'
                ,Tc_Name_AR                = N'الرصيد السابق'
                ,Customer_No_Vendor_NO     = NULL
                ,Qty                       = 0
                ,Unit_Name                 = NULL
                ,package                   = NULL
                ,Cost                      = NULL
          
          SELECT *
          FROM   #PerviousBalance
          UNION  ALL 
          SELECT *
          FROM   #MainSelect
          WHERE  (
                     @FromDate IS NULL
                     OR CAST(#MainSelect.Entry_Date AS DATE)>=@FromDate
                 )
                 AND (
                         @ToDate IS NULL
                         OR CAST(#MainSelect.Entry_Date AS DATE)<=@ToDate
                     )
  END 
END
GO
/****** Object:  StoredProcedure [dbo].[Report_Inv_Item_Card_Old_2]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Report_Inv_Item_Card_Old_2] @StoreID     INT  = NULL--SELECT * FROM Inv_Store 
                                   , @Move        INT  = NULL
                                   , @ItemID      INT  = 2975	 -- SELECT * FROM inv_items WHERE Code = N'150'
                                   , @FromDate    DATE = NULL
                                   , @ToDate      DATE = NULL--'20180725'
                                   , @SubsidaryID INT  = 1
AS
    BEGIN
        --Get Item Transaction

        SELECT H.ID                          Parent_VoucherID
             , d.id AS                       VoucherID
             , H.FromStoreID                 FromStoreID
             , H.ToStoreID                   ToStoreID
             , D.Store_ID                    Store_ID
             , D.Item_ID                     Item_ID
             , H.Entry_Date                  Entry_Date
             , tc.Code                       TC_Code
             , CASE
                   WHEN tc.Code = 81
                        AND D.Transaction_move = -1
                   THEN 'Transfer To Store No ' + Inv_Store.Code
                   WHEN tc.Code = 81
                        AND D.Transaction_move = 1
                   THEN 'Transfer From Store No ' + Inv_Store.Code
                   ELSE TC.Name
               END                           Tc_Name
             , CASE
                   WHEN tc.Code = 81
                        AND D.Transaction_move = -1
                   THEN N'تحويل الى مخزن ' + Inv_Store.Code
                   WHEN tc.Code = 81
                        AND D.Transaction_move = 1
                   THEN N'تحويل من مخزن ' + Inv_Store.Code
                   ELSE TC.Name_AR
               END                           Tc_Name_Ar
             , H.Entry_No                    Entry_No
             , CASE
                   WHEN GL_Accounts.AccountID IS NULL
                   THEN CAST(Inv_CashCustomer.id AS NVARCHAR(200))
                   ELSE CAST(GL_Accounts.Code AS NVARCHAR(200))
               END                           [Customer_No_Vendor_NO ]
             , CASE
                   WHEN tc.Code = 83
                        AND ISNULL(D.Qty , 0) < 0
                   THEN ISNULL(D.Qty , 0) * -1
                   ELSE ISNULL(D.Qty , 0)
               END                           QTY
             , Inv_Unit.Name                 Unit_Name
             , D.Conv                        package
             , IIU.Conv                      IIU_Conv
             , AV_TransactionDetails.AvgCost Cost
             , CASE
                   WHEN tc.Code = 83
                        AND ISNULL(D.Qty , 0) < 0
                   THEN ISNULL(D.Qty , 0) * -1 * ISNULL(D.Conv , 0)
                   ELSE ISNULL(D.Qty , 0) * ISNULL(D.Conv , 0)
               END                           Balance
             , CASE
                   WHEN tc.Code = 83
                        AND ISNULL(D.Qty , 0) < 0
                   THEN ISNULL(D.Qty , 0) * -1 * ISNULL(IIU.Conv , 0)
                   ELSE ISNULL(D.Qty , 0) * ISNULL(IIU.Conv , 0)
               END                           InventoryBalance
             , CASE
                   WHEN tc.Code = 83
                        AND ISNULL(D.Qty , 0) < 0
                   THEN-1
                   ELSE D.Transaction_move
               END                           [MOVE]
        INTO #Item_Transaction
        FROM dbo.Inv_Receipt_H AS H
             LEFT JOIN dbo.Inv_Transaction_Codes AS TC
             ON H.Code = TC.Code
             LEFT JOIN dbo.Inv_CashCustomer
             ON H.CashCustomerID = Inv_CashCustomer.id
             LEFT JOIN dbo.GL_Accounts
             ON H.Vendor_ID = GL_Accounts.AccountID
             LEFT JOIN dbo.Inv_Receipt_d AS D
             ON H.ID = D.Parent_ID
             LEFT JOIN Inv_Store
             ON D.Store_ID = Inv_Store.ID
             LEFT JOIN dbo.Inv_Unit
             ON D.Unit_ID = Inv_Unit.ID
             LEFT JOIN dbo.Inv_Items AS I
             ON D.Item_ID = I.ID
             LEFT JOIN dbo.Inv_Items_Units AS IIU
             ON i.Inventory_UnitId = IIU.Unit_id
                AND i.Id = iiu.Item_ID
             LEFT JOIN AV_INV_TransactionDetails AV_TransactionDetails
             ON AV_TransactionDetails.ID = D.ID
                AND AV_TransactionDetails.Parent_ID = H.ID
        WHERE(@StoreID IS NULL
              OR D.Store_ID IN(@StoreID))
             AND (@ItemID IS NULL
                  OR D.Item_ID IN(@ItemID))

        AND (@SubsidaryID IS NULL
             OR h.SubsidiaryID = @SubsidaryID)

        --Get openning Balance 

        SELECT NULL                                                   Parent_VoucherID
             , NULL                                                   VoucherID
             , NULL                                                   FromStoreID
             , NULL                                                   ToStoreID
             , IIS.Store_ID                                           Store_ID
             , IIS.Item_ID                                            Item_ID
             , CAST(NULL AS DATE)                                     Entry_Date
             , NULL                                                   TC_Code
             , 'openning Balance'                                     Tc_Name
             , N'الرصيد الافتتاحى'                                    Tc_Name_Ar
             , NULL                                                   Entry_No
             , ''                                                     [Customer_No_Vendor_NO ]
             , ISNULL(IIS.first_Qty , 0)                              Qty
             , IU.Name                                                Unit_Name
             , IIS.First_Conv                                         package
             , IIU.Conv                                               IIU_Conv
             , IIS.First_Cost                                         Cost
             , ISNULL(IIS.first_Qty , 0) * ISNULL(IIS.first_conv , 0) Balance
             , ISNULL(IIS.first_Qty , 0) * ISNULL(IIU.Conv , 0)       InventoryBalance
             , 1                                                      [MOVE]
        INTO #Opeening_Balance
        FROM dbo.Inv_Items_Store IIS
             LEFT JOIN dbo.Inv_Items AS I
             ON IIS.Item_ID = I.ID
             LEFT JOIN dbo.Inv_Unit AS IU
             ON IU.ID = iis.First_Unit
             LEFT JOIN dbo.Inv_Items_Units AS IIU
             ON i.Inventory_UnitId = IIU.Unit_id
                AND i.Id = iiu.Item_ID
        WHERE(@StoreID IS NULL
              OR IIS.Store_ID IN(@StoreID))
             AND (@ItemID IS NULL
                  OR IIS.Item_ID IN(@ItemID))
        AND (@SubsidaryID IS NULL
             OR I.Subsidiary_ID = @SubsidaryID)
        AND ISNULL(IIS.first_Qty , 0) != 0

/**********
    Main Select
    **********/

        SELECT MainSelect.Parent_VoucherID
             , MainSelect.VoucherID
             , MainSelect.FromStoreID
             , MainSelect.ToStoreID
             , Store_ID            Store_ID
             , Inv_Store.Code      Inv_Store_Code
             , MainSelect.Item_ID
             , inv_items.Code
             , inv_items.Item_Type
             , MainSelect.Entry_Date
             , MainSelect.TC_Code
             , MainSelect.Tc_Name
             , MainSelect.Tc_Name_AR
             , MainSelect.Entry_No
             , Customer_No_Vendor_NO
             , MainSelect.Qty
             , MainSelect.Unit_Name
             , MainSelect.package
             , MainSelect.IIU_Conv
             , MainSelect.Cost
             , MainSelect.Balance
             , SUM(MainSelect.Balance * MainSelect.Move) OVER(PARTITION BY MainSelect.Store_ID
                                                                         , MainSelect.Item_ID
               ORDER BY Store_ID
                      , item_ID
                      , Entry_Date
                      , MOVE
                      , Entry_No
                      , VoucherID) Balance_R
             , ROW_NUMBER() OVER(PARTITION BY MainSelect.Store_ID
                                            , MainSelect.Item_ID
               ORDER BY Store_ID
                      , item_ID
                      , Entry_Date
                      , MOVE
                      , Entry_No
                      , VoucherID) RowNumber
             , MainSelect.InventoryBalance
             , SUM(MainSelect.InventoryBalance * MainSelect.Move) OVER(PARTITION BY MainSelect.Store_ID
                                                                                  , MainSelect.Item_ID
               ORDER BY Store_ID
                      , item_ID
                      , Entry_Date
                      , MOVE
                      , Entry_No
                      , VoucherID) InventoryBalance_R
             , MainSelect.move
        INTO #MainSelect
        FROM
        (
         SELECT *
         FROM dbo.#Item_Transaction
         UNION ALL
         SELECT *
         FROM dbo.#Opeening_Balance
        ) AS MainSelect
        LEFT JOIN Inv_Store
        ON Inv_Store.ID = MainSelect.Store_ID
        JOIN Inv_Items
        ON Inv_Items.ID = MainSelect.Item_id
        WHERE  
        --AND (
        --        @FromDate IS NULL
        --        OR CAST(ISNULL(MainSelect.Entry_Date ,'19990101') AS DATE)>=@FromDate
        --    )
        (@ToDate IS NULL
         OR CAST(ISNULL(MainSelect.Entry_Date , '19990101') AS DATE) <= @ToDate)
		         AND (@Move IS NULL
             OR MainSelect.move IN(@Move))
        ORDER BY Store_ID
               , item_ID
               , Entry_Date
               , MOVE;

        -- BackLog No :  2995          
        IF(@FromDate IS NULL)
            SELECT *
            FROM #MainSelect
            ORDER BY Store_ID
                   , item_ID
                   , Entry_Date
                   , MOVE;
            ELSE
            BEGIN 
                -- Handel PerviousBalance:
                SELECT TOP 1 *
                INTO #PerviousBalance
                FROM #MainSelect
                WHERE(@FromDate IS NULL
                      OR CAST(ISNULL(#MainSelect.Entry_Date , '19990101') AS DATE) < @FromDate)
                ORDER BY CAST(ISNULL(#MainSelect.Entry_Date , '19990101') AS DATE) DESC

                UPDATE #PerviousBalance
                  SET 
                      Entry_Date = NULL , 
                      Entry_No = NULL , 
                      Tc_Name = 'Previous Balance' , 
                      Tc_Name_AR = N'الرصيد السابق' , 
                      Customer_No_Vendor_NO = NULL , 
                      Qty = 0 , 
                      Unit_Name = NULL , 
                      package = NULL , 
                      Cost = NULL,
					  Move = case when InventoryBalance_R > 0 THEN 1 ELSE -1 end 
                SELECT *
                FROM #PerviousBalance
                UNION ALL
                SELECT *
                FROM #MainSelect
                WHERE(@FromDate IS NULL
                      OR CAST(#MainSelect.Entry_Date AS DATE) >= @FromDate)
                     AND (@ToDate IS NULL
                          OR CAST(#MainSelect.Entry_Date AS DATE) <= @ToDate)
        END
    END;
GO
/****** Object:  StoredProcedure [dbo].[Report_Inv_ItemsAging]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[Report_Inv_ItemsAging]
@StoreID INT = Null
, @VendorID INT = NULL
, @ItemType INT = NULL
, @ItemCategoryID nvarchar(max) = NULL
, @SubsidaryID INT = NULL 
, @ItemId INT = Null 
, @ToDate DATE = '2020-04-30' 
, @ItemCode NVARCHAR(50) = NULL 
,@PeriodNumber int = 1
 
AS
Begin

IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@ItemCategoryID, ',')
            WHERE Item = -1
        )
        SET @ItemCategoryID = NULL

Declare @Period30Date date = DATEADD(month, -(1*(@PeriodNumber  )), CONVERT(datetime, @ToDate))
Declare @Period60Date date = DATEADD(month, - (2*(@PeriodNumber)), CONVERT(datetime, @ToDate))
Declare @Period90Date date = DATEADD(month, -(3*(@PeriodNumber)), CONVERT(datetime, @ToDate))
Declare @Period120Date date = DATEADD(month, -(4*(@PeriodNumber )), CONVERT(datetime, @ToDate))
--Declare @PeriodAbove120Date date = DATEADD(DAY, -1, @Period120Date)
--Select @PeriodAbove120Date
--Select @Period30Date
--Select @Period60Date
--Select @Period90Date
--Select @Period120Date
--Select Count(1) from inv_items
  
Select i.ID ,
					  Sum(d.qty* Final_conv ) 
						   AS QtyPeriod1   
Into #Tbl1
from inv_items i,Inv_Receipt_d d,Inv_Receipt_h h 
						where h.Entry_Date >@Period30Date and h.Entry_Date < dateadd(day,1,@ToDate)
							AND  i.id = d.Item_ID and d.Transaction_move = 1 
							and h.id = d.Parent_ID
							AND  (@SubsidaryID IS NULL  OR I.Subsidiary_ID = @SubsidaryID)
							  AND ( I.Item_Type  = 1 or  I.Item_Type =  4) 
							  AND (@StoreID IS NULL   OR D.Store_ID = @StoreID)
							  AND (@ItemId IS NULL   OR I.ID = @ItemId)
							  AND (@ItemType IS NULL  OR I.Item_Type = @ItemType)
							 AND (@ItemCategoryID IS NULL or @ItemCategoryID='-1'
								OR i.ID IN
								   (
									   SELECT Inv_Items_Categories.Item_ID
									   FROM Inv_Items_Categories
									   WHERE ( Inv_Items_Categories.ItemCategory_ID  in (
												 SELECT item
												 FROM dbo.Split(@ItemCategoryID, ',')
											 ))
								   ))
							 AND (@VendorID IS NULL OR i.ID IN
													   (
														   SELECT Inv_Items_Vendors.ItemID
														   FROM Inv_Items_Vendors
														   WHERE Inv_Items_Vendors.ItemID = I.ID
															 AND Inv_Items_Vendors.VendorID =@VendorID
													   ))
							  AND (@StoreID IS NULL   OR d.Store_ID = @StoreID)	      
 Group by i.ID
		--	Select * from #Tbl1			
		Select i.ID ,
					  Sum(d.qty* Final_conv * d.Transaction_move) 
						   AS QtyPeriod2   
Into #Tbl2
from inv_items i,Inv_Receipt_d d,Inv_Receipt_h h 
where h.Entry_Date >@Period60Date and h.Entry_Date <dateadd(day,1,@Period30Date)
AND  i.id = d.Item_ID
and h.id = d.Parent_ID and d.Transaction_move = 1 
AND  (@SubsidaryID IS NULL  OR I.Subsidiary_ID = @SubsidaryID)
	AND ( I.Item_Type  = 1 or  I.Item_Type =  4) 
	AND (@StoreID IS NULL   OR D.Store_ID = @StoreID)
	AND (@ItemId IS NULL   OR I.ID = @ItemId)
	AND (@ItemType IS NULL  OR I.Item_Type = @ItemType)
	AND (@ItemCategoryID IS NULL or @ItemCategoryID='-1'
	OR i.ID IN
		(
			SELECT Inv_Items_Categories.Item_ID
			FROM Inv_Items_Categories
			WHERE ( Inv_Items_Categories.ItemCategory_ID  in (
						SELECT item
						FROM dbo.Split(@ItemCategoryID, ',')
					))
		))
	AND (@VendorID IS NULL OR i.ID IN
							(
								SELECT Inv_Items_Vendors.ItemID
								FROM Inv_Items_Vendors
								WHERE Inv_Items_Vendors.ItemID = I.ID
									AND Inv_Items_Vendors.VendorID =@VendorID
							))
	AND (@StoreID IS NULL   OR d.Store_ID = @StoreID)	      
 Group by i.ID

 Select i.ID ,
					  Sum(d.qty* Final_conv * d.Transaction_move) 
						   AS QtyPeriod3   
Into #Tbl3
from inv_items i,Inv_Receipt_d d,Inv_Receipt_h h 
						where h.Entry_Date > @Period90Date and h.Entry_Date < dateadd(day,1,@Period60Date)
							AND  i.id = d.Item_ID
							and h.id = d.Parent_ID and d.Transaction_move = 1 
							AND  (@SubsidaryID IS NULL  OR I.Subsidiary_ID = @SubsidaryID)
							  AND ( I.Item_Type  = 1 or  I.Item_Type =  4) 
							  AND (@StoreID IS NULL   OR D.Store_ID = @StoreID)
							  AND (@ItemId IS NULL   OR I.ID = @ItemId)
							  AND (@ItemType IS NULL  OR I.Item_Type = @ItemType)
							 AND (@ItemCategoryID IS NULL or @ItemCategoryID='-1'
								OR i.ID IN
								   (
									   SELECT Inv_Items_Categories.Item_ID
									   FROM Inv_Items_Categories
									   WHERE ( Inv_Items_Categories.ItemCategory_ID  in (
												 SELECT item
												 FROM dbo.Split(@ItemCategoryID, ',')
											 ))
								   ))
							 AND (@VendorID IS NULL OR i.ID IN
													   (
														   SELECT Inv_Items_Vendors.ItemID
														   FROM Inv_Items_Vendors
														   WHERE Inv_Items_Vendors.ItemID = I.ID
															 AND Inv_Items_Vendors.VendorID =@VendorID
													   ))
							  AND (@StoreID IS NULL   OR d.Store_ID = @StoreID)	      
 Group by i.ID

 Select i.ID ,
					  Sum(d.qty* Final_conv * d.Transaction_move) 
						   AS QtyPeriod4   
Into #Tbl4
from inv_items i,Inv_Receipt_d d,Inv_Receipt_h h 
where h.Entry_Date > @Period120Date and h.Entry_Date <dateadd(day,1,@Period90Date)
							AND  i.id = d.Item_ID
							and h.id = d.Parent_ID and d.Transaction_move = 1 
							AND  (@SubsidaryID IS NULL  OR I.Subsidiary_ID = @SubsidaryID)
							  AND ( I.Item_Type  = 1 or  I.Item_Type =  4) 
							  AND (@StoreID IS NULL   OR D.Store_ID = @StoreID)
							  AND (@ItemId IS NULL   OR I.ID = @ItemId)
							  AND (@ItemType IS NULL  OR I.Item_Type = @ItemType)
							 AND (@ItemCategoryID IS NULL or @ItemCategoryID='-1'
								OR i.ID IN
								   (
									   SELECT Inv_Items_Categories.Item_ID
									   FROM Inv_Items_Categories
									   WHERE ( Inv_Items_Categories.ItemCategory_ID  in (
												 SELECT item
												 FROM dbo.Split(@ItemCategoryID, ',')
											 ))
								   ))
							 AND (@VendorID IS NULL OR i.ID IN
													   (
														   SELECT Inv_Items_Vendors.ItemID
														   FROM Inv_Items_Vendors
														   WHERE Inv_Items_Vendors.ItemID = I.ID
															 AND Inv_Items_Vendors.VendorID =@VendorID
													   ))
							  AND (@StoreID IS NULL   OR d.Store_ID = @StoreID)	      
 Group by i.ID
  

 Select i.ID , Sum(d.qty* Final_conv * d.Transaction_move)   AS QtyPeriod5   
Into #Tbl5
from inv_items i,Inv_Receipt_d d,Inv_Receipt_h h 
						where h.Entry_Date <dateadd(day,1,@Period120Date) -- and h.Entry_Date <=@ToDate
							AND  i.id = d.Item_ID
							and h.id = d.Parent_ID
							AND  (@SubsidaryID IS NULL  OR I.Subsidiary_ID = @SubsidaryID)
							  AND ( I.Item_Type  = 1 or  I.Item_Type =  4) 
							  AND (@StoreID IS NULL   OR D.Store_ID = @StoreID)
							  AND (@ItemId IS NULL   OR I.ID = @ItemId)
							  AND (@ItemType IS NULL  OR I.Item_Type = @ItemType)
							 AND (@ItemCategoryID IS NULL or @ItemCategoryID='-1'
								OR i.ID IN
								   (
									   SELECT Inv_Items_Categories.Item_ID
									   FROM Inv_Items_Categories
									   WHERE ( Inv_Items_Categories.ItemCategory_ID  in (
												 SELECT item
												 FROM dbo.Split(@ItemCategoryID, ',')
											 ))
								   ))
							 AND (@VendorID IS NULL OR i.ID IN
													   (
														   SELECT Inv_Items_Vendors.ItemID
														   FROM Inv_Items_Vendors
														   WHERE Inv_Items_Vendors.ItemID = I.ID
															 AND Inv_Items_Vendors.VendorID =@VendorID
													   ))
							  AND (@StoreID IS NULL   OR d.Store_ID = @StoreID)	      
 Group by i.ID

	


 Select i.ID ,
					  Sum(d.qty* Final_conv *d.Transaction_move) 
						   AS SalesQty   
Into #TblSales
from inv_items i,Inv_Receipt_d d,Inv_Receipt_h h 
						where h.Entry_Date <dateadd (day,1,@Period120Date )
							AND  i.id = d.Item_ID
							and h.id = d.Parent_ID and d.Transaction_move = -1 
							AND  (@SubsidaryID IS NULL  OR I.Subsidiary_ID = @SubsidaryID)
							  AND ( I.Item_Type  = 1 or  I.Item_Type =  4) 
							  AND (@StoreID IS NULL   OR D.Store_ID = @StoreID)
							  AND (@ItemId IS NULL   OR I.ID = @ItemId)
							  AND (@ItemType IS NULL  OR I.Item_Type = @ItemType)
							 AND (@ItemCategoryID IS NULL or @ItemCategoryID='-1'
								OR i.ID IN
								   (
									   SELECT Inv_Items_Categories.Item_ID
									   FROM Inv_Items_Categories
									   WHERE ( Inv_Items_Categories.ItemCategory_ID  in (
												 SELECT item
												 FROM dbo.Split(@ItemCategoryID, ',')
											 ))
								   ))
							 AND (@VendorID IS NULL OR i.ID IN
													   (
														   SELECT Inv_Items_Vendors.ItemID
														   FROM Inv_Items_Vendors
														   WHERE Inv_Items_Vendors.ItemID = I.ID
															 AND Inv_Items_Vendors.VendorID =@VendorID
													   ))
							  AND (@StoreID IS NULL   OR d.Store_ID = @StoreID)	      
 Group by i.ID

 Select i.ID ,i.code, i.name,i.name_ar ,
  
 (case When (#Tbl2.QtyPeriod2 - (#TblSales.SalesQty -  #Tbl5.QtyPeriod5 - #Tbl4.QtyPeriod4 - #Tbl3.QtyPeriod3 )) > 0 THEN #Tbl1.QtyPeriod1
	 WHEN     (#TblSales.SalesQty -  #Tbl5.QtyPeriod5 - #Tbl4.QtyPeriod4 - #Tbl3.QtyPeriod3 -#Tbl2.QtyPeriod2 )  > 0 THEN #Tbl1.QtyPeriod1 - (#TblSales.SalesQty -  #Tbl5.QtyPeriod5 - #Tbl4.QtyPeriod4 - #Tbl3.QtyPeriod3 -#Tbl2.QtyPeriod2 ) 
 END )Qty1 ,
 (case  WHEN     (#Tbl3.QtyPeriod3 - ((#TblSales.SalesQty -  #Tbl5.QtyPeriod5 - #Tbl4.QtyPeriod4  ))) > 0 THEN #Tbl2.QtyPeriod2
		When     (#TblSales.SalesQty -  #Tbl5.QtyPeriod5 - #Tbl4.QtyPeriod4 - #Tbl3.QtyPeriod3 ) > 0 THEN (#Tbl2.QtyPeriod2 - (#TblSales.SalesQty -  #Tbl5.QtyPeriod5 - #Tbl4.QtyPeriod4 - #Tbl3.QtyPeriod3 ))
	
 END)QTY2 ,
 (case When (#Tbl3.QtyPeriod3 - ((#TblSales.SalesQty -  #Tbl5.QtyPeriod5 - #Tbl4.QtyPeriod4  ))) > 0 THEN  #Tbl3.QtyPeriod3 
	 WHEN     (#Tbl4.QtyPeriod4  - (#TblSales.SalesQty -  #Tbl5.QtyPeriod5 ) ) > 0 THEN #Tbl3.QtyPeriod3 -  (#Tbl4.QtyPeriod4  - (#TblSales.SalesQty -  #Tbl5.QtyPeriod5 ) )
 END ) Qty3 ,
( Case When    #TblSales.SalesQty <=  #Tbl5.QtyPeriod5  THEN #Tbl4.QtyPeriod4 
	  When    (#TblSales.SalesQty -  #Tbl5.QtyPeriod5 )  > 0 THEN (#Tbl4.QtyPeriod4  - (#TblSales.SalesQty -  #Tbl5.QtyPeriod5 ) )
	  ELSE 0
 END ) As Qty4
  ,
 (
 Case When    #TblSales.SalesQty >=  #Tbl5.QtyPeriod5  THEN 0 
	  ELSE #Tbl5.QtyPeriod5 - #TblSales.SalesQty   END) Q5  --,#TblSales.SalesQty
	from Inv_Items as i 
			Left JOIN #Tbl1  ON i.id = #Tbl1.ID
			Left JOIN #Tbl2  ON i.id = #Tbl2.ID
			Left JOIN #Tbl3  ON i.id = #Tbl3.ID
			Left JOIN #Tbl4  ON i.id = #Tbl4.ID
			Left JOIN #Tbl5  ON i.id = #Tbl5.ID
			Left JOIN #TblSales  ON i.id = #TblSales.ID

			Select Sum(qty * final_conv * Transaction_move )from AV_INV_TransactionDetails
			where Item_ID = 2811 and entry_date <'2020-01-01'

END
GO
/****** Object:  StoredProcedure [dbo].[Report_INV_PaymentTypes]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Report_INV_PaymentTypes]  

 @SubsidaryID INT = NULL
,@FromDate DATE = '2020-01-01'
, @ToDate DATE = '2020-04-02'
, @BrachID INT = NULL
, @CustomerID INT = NULL
, @Payment_Type INT = Null
,@userId int =157
 --, @Source INT = NULL
--, @CustomerCatID INT = NULL
--, @FromInvoiceNumber INT = NULL
--, @ToInvoiceNumber INT = NULL
--, @TransactionType NVARCHAR(MAX) = NULL
--, @ItemCategoryID NVARCHAR(MAX) = NULL
--, @ItemId INT = NULL
--, @Item_vendor INT = NULL
--, @SalesManId INT = NULL
--, @FromCustomerActualDeliverDate DATE = NULL
--, @ToCustomerActualDeliverDate DATE = NULL
--, @FromTime TIME = NULL
--, @ToTime TIME = NULL
--, @CustomerStatusID INT = NULL
, @Source INT = NULL
AS

BEGIN
 
   
  IF OBJECT_ID('newtbl') IS NOT NULL
begin
        drop table newtbl
end
Declare  @FromTime TIME = NULL
, @ToTime TIME = NULL
    if @FromTime is null set @FromTime = ' 00:00:00';
    if @ToTime is null set @ToTime = ' 23:59:59';

    --IF EXISTS
    --    (
    --        SELECT *
    --        FROM dbo.Split(@TransactionType, ',')
    --        WHERE Item = -1
    --    )
    --    SET @TransactionType = NULL

    --IF EXISTS
    --    (
    --        SELECT *
    --        FROM dbo.Split(@ItemCategoryID, ',')
    --        WHERE Item = -1
    --    )
    --    SET @ItemCategoryID = NULL
	--delete  from  tbl;
	--drop table tbl;
   select * Into #newtbl from (
    SELECT H.ID
         , H.Entry_No                  Code
         , H.Entry_Date                voucherdate
		 , B.Name                  BranchName
         , B.Name_AR                  BranchNameAr
		 , Inv_PaymentType.ID      PayTypeID
		 , Inv_PaymentType.Code      PayTypeCode
         , Inv_PaymentType.Name        PayTypename
         , Inv_PaymentType.Name_AR     PayTypenamear
         , case when @Source IS NULL
		 then
		   ISNULL(H.Value, 0)   
		   else
		    (
               SELECT sum(Inv_Receipt_D.Total)
               FROM Inv_Receipt_D
               WHERE Inv_Receipt_D.SalesManId = @Source
			   and Inv_Receipt_D.Parent_ID=h.ID
			   group by Inv_Receipt_D.SalesManId
           ) 
		   end       Total
         ,case when @Source IS NULL
		 then
		   ISNULL(H.Discount_Value, 0)   
		   else
		    0
		   end  [Invoice Discount]
         , case when @Source IS NULL
		 then
		  ISNULL(H.NetValue, 0)  
		   else
		    (
               SELECT sum(Inv_Receipt_D.Total)
               FROM Inv_Receipt_D
               WHERE Inv_Receipt_D.SalesManId = @Source
			   and Inv_Receipt_D.Parent_ID=h.ID
			   group by Inv_Receipt_D.SalesManId
           ) 
		   end      totvalue
         ,case when @Source IS NULL
		 then
		    ISNULL(H.DeliveryFees, 0)  
		   else
		    0
		   end
		   
		      DeliveryFees
		 ,H.CustomerDeliverDate as  CustomerActualDeliverDate
         , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN ''
               ELSE GL_Accounts.VendorCode
        END                            CustCode
         , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN Inv_CashCustomer.Name
               ELSE GL_Accounts.Name
        END                            CustName
         , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN Inv_CashCustomer.Name_Ar
               ELSE GL_Accounts.Name_Ar
        END                            CustNameAr

         , H.Vendor_ID
         , H.CashCustomerID
         , GL_Accounts.AccountID
         , Gl_Accounts.VendorCode
         , Security_Users.Name         [S.Name]
         , Security_Users.Name_Ar      [S.Name_Ar]
         , C.Name                      VoucherName
         , C.Name_Ar                   VoucherName_Ar
         , C.Code                      vouchercode
    
    FROM Inv_Receipt_H H
             LEFT JOIN
         Inv_CashCustomer ON Inv_CashCustomer.id = H.CashCustomerID
             LEFT JOIN
         mstr_Branch B ON B.id = H.Branch_ID
             LEFT JOIN
         GL_Accounts ON GL_Accounts.AccountID = H.Vendor_ID
             LEFT JOIN
         Inv_Transaction_Codes C ON H.Code = C.Code
             LEFT JOIN
         Security_Users ON Security_Users.Id = H.Empoyee_ID
             LEFT JOIN
         Inv_PaymentType ON Inv_PaymentType.id = H.Payment_Type
    WHERE H.Code IN (51, 52, 53, 54)
      AND (ISNULL(H.Is_Canceled, 0) <> 1)
      AND (ISNULL(H.IsHolded, 0) <> 1)
      AND (@Source IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
               WHERE Inv_Receipt_D.SalesManId = @Source
           ))
      AND EXISTS
        (
            SELECT Parent_ID
            FROM Inv_Receipt_D D
            WHERE D.Parent_ID = H.ID
        )
      AND (@SubsidaryID IS NULL
        OR H.SubsidiaryID = @SubsidaryID)
      AND (@FromDate IS NULL
        OR
           CAST(H.Entry_Date AS DATETIME) >= cast(@FromDate as datetime) + cast(@FromTime as datetime)
        )
      AND (@ToDate IS NULL
        OR
           CAST(H.Entry_Date AS DATETIME) <= cast(@ToDate as datetime) + cast(@ToTime as datetime)
        )
      --AND (@ItemId IS NULL
      --  OR H.ID IN
      --     (
      --         SELECT Parent_ID
      --         FROM Inv_Receipt_D
      --         WHERE (@ItemId is null or Inv_Receipt_D.Item_ID = @ItemId)
      --     ))

      --AND (@Item_vendor IS NULL
      --  OR H.ID IN
      --     (
      --         SELECT Parent_ID
      --         FROM Inv_Receipt_D
      --                  left join Inv_Items on Inv_Receipt_d.Item_ID = Inv_Items.ID
      --                  left join Inv_Items_Vendors on Inv_Items.ID = Inv_Items_Vendors.ItemID
      --         WHERE ( Inv_Items_Vendors.VendorID = @item_vendor)
      --     ))

      --AND (@SalesManId IS NULL
      --  OR H.Empoyee_ID = @SalesManId)
      AND (@BrachID IS NULL
        OR H.Branch_ID IN (@BrachID))
		and H.Branch_ID in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId)
      AND (@CustomerID IS NULL
        OR H.Vendor_ID = @CustomerID)
      --AND (@CashCustomerID IS NULL
      --  OR H.CashCustomerID = @CashCustomerID)
      --AND (@CustomerCatID IS NULL
      --  OR Inv_CashCustomer.CategoryID IN (@CustomerCatID)
      --  OR Gl_Accounts.VendorCategoryID IN (@CustomerCatID))
      --AND (@FromInvoiceNumber IS NULL
      --  OR H.Entry_No >= @FromInvoiceNumber)
      --AND (@ToInvoiceNumber IS NULL
      --  OR H.Entry_No <= @ToInvoiceNumber)
      --AND (@TransactionType IS NULL
      --  OR H.Code IN
      --     (
      --         SELECT item
      --         FROM dbo.Split(@TransactionType, ',')
      --     ))
      --AND (@ItemCategoryID IS NULL
      --  OR H.ID IN
      --     (
      --         SELECT Parent_ID
      --         FROM Inv_Receipt_d
      --                  LEFT JOIN
      --              Inv_Items_Categories ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
      --         WHERE Inv_Receipt_d.Parent_ID = H.ID
      --           AND Inv_Items_Categories.ItemCategory_ID IN
      --               (
      --                   SELECT item
      --                   FROM dbo.Split(@ItemCategoryID, ',')
      --               )
      --     ))
      AND (@FromDate IS not NULL
        OR CAST(Entry_Date AS TIME) >= @FromTime)
      AND (@ToDate IS not NULL
        OR CAST(Entry_Date AS TIME) <= @ToTime)
      --AND (@FromCustomerActualDeliverDate IS NULL
      --  OR CAST(H.CustomerDeliverDate AS DATE) >= @FromCustomerActualDeliverDate)
      --AND (@ToCustomerActualDeliverDate IS NULL
      --  OR CAST(H.CustomerDeliverDate AS DATE) <= @ToCustomerActualDeliverDate)
      --AND (@CustomerStatusID IS NULL
      --  OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
      AND (@Payment_Type IS NULL
        OR H.Payment_Type = @Payment_Type)
		union 
		SELECT H.ID
         , H.Entry_No                  code
         , H.Entry_Date                voucherdate ,
		 B.Name                  BranchName
         , B.Name_AR                  BranchNameAr
		 , Inv_PaymentType.ID      PayTypeID
		 , Inv_PaymentType.Code      PayTypeCode
         , Inv_PaymentType.Name        Payment
         , Inv_PaymentType.Name_AR     Payment_Ar
         , ISNULL(Inv_ReceiptMultiPayment .Amount, 0)          Total
         , 0 [Invoice Discount]
         ,  ISNULL(Inv_ReceiptMultiPayment .Amount, 0)       [Net Total]
         , ISNULL(H.DeliveryFees, 0)   DeliveryFees
         ,H.CustomerDeliverDate as CustomerActualDeliverDate
		 , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN ''
               ELSE GL_Accounts.VendorCode
        END                            CustomerNo
         , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN Inv_CashCustomer.Name
               ELSE GL_Accounts.Name
        END                            CustomerName
         , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN Inv_CashCustomer.Name_Ar
               ELSE GL_Accounts.Name_Ar
        END                            CustomerName_Ar
         , H.Vendor_ID
         , H.CashCustomerID
         , GL_Accounts.AccountID
         , Gl_Accounts.VendorCode
         , Security_Users.Name         [S.Name]
         , Security_Users.Name_Ar      [S.Name_Ar]
         , C.Name                      C_Name
         , C.Name_Ar                   C_Name_Ar
         , C.Code                      C_Code
    
    FROM Inv_Receipt_H H
	inner join Inv_ReceiptMultiPayment on Inv_ReceiptMultiPayment.ReceiptId=H.id
             LEFT JOIN
         Inv_CashCustomer ON Inv_CashCustomer.id = H.CashCustomerID
             LEFT JOIN
         mstr_Branch B ON B.id = H.Branch_ID
             LEFT JOIN
         GL_Accounts ON GL_Accounts.AccountID = H.Vendor_ID
             LEFT JOIN
         Inv_Transaction_Codes C ON H.Code = C.Code
             LEFT JOIN
         Security_Users ON Security_Users.Id = H.Empoyee_ID
             LEFT JOIN
         Inv_PaymentType ON Inv_PaymentType.id = H.Payment_Type
    WHERE H.Payment_Type=51 and 
	Inv_ReceiptMultiPayment.PaymentTypeId=@Payment_Type and
	H.Code IN (51, 52, 53, 54)
      AND (ISNULL(H.Is_Canceled, 0) <> 1)
      AND (ISNULL(H.IsHolded, 0) <> 1)
      AND (@Source IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
               WHERE Inv_Receipt_D.SalesManId = @Source
           ))
      AND EXISTS
        (
            SELECT Parent_ID
            FROM Inv_Receipt_D D
            WHERE D.Parent_ID = H.ID
        )
      AND (@SubsidaryID IS NULL
        OR H.SubsidiaryID = @SubsidaryID)
      AND (@FromDate IS NULL
        OR
           CAST(H.Entry_Date AS DATETIME) >= cast(@FromDate as datetime) + cast(@FromTime as datetime)
        )
      AND (@ToDate IS NULL
        OR
           CAST(H.Entry_Date AS DATETIME) <= cast(@ToDate as datetime) + cast(@ToTime as datetime)
        )
      --AND (@ItemId IS NULL
      --  OR H.ID IN
      --     (
      --         SELECT Parent_ID
      --         FROM Inv_Receipt_D
      --         WHERE (@ItemId is null or Inv_Receipt_D.Item_ID = @ItemId)
      --     ))

      --AND (@Item_vendor IS NULL
      --  OR H.ID IN
      --     (
      --         SELECT Parent_ID
      --         FROM Inv_Receipt_D
      --                  left join Inv_Items on Inv_Receipt_d.Item_ID = Inv_Items.ID
      --                  left join Inv_Items_Vendors on Inv_Items.ID = Inv_Items_Vendors.ItemID
      --         WHERE (Inv_Items_Vendors.VendorID = @item_vendor)
      --     ))

      --AND (@SalesManId IS NULL
      --  OR H.Empoyee_ID = @SalesManId)
      AND (@BrachID IS NULL
        OR H.Branch_ID IN (@BrachID))
			and H.Branch_ID in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId)
      AND (@CustomerID IS NULL
        OR H.Vendor_ID = @CustomerID)
      --AND (@CashCustomerID IS NULL
      --  OR H.CashCustomerID = @CashCustomerID)
      --AND (@CustomerCatID IS NULL
      --  OR Inv_CashCustomer.CategoryID IN (@CustomerCatID)
      --  OR Gl_Accounts.VendorCategoryID IN (@CustomerCatID))
      --AND (@FromInvoiceNumber IS NULL
      --  OR H.Entry_No >= @FromInvoiceNumber)
      --AND (@ToInvoiceNumber IS NULL
      --  OR H.Entry_No <= @ToInvoiceNumber)
      --AND (@TransactionType IS NULL
      --  OR H.Code IN
      --     (
      --         SELECT item
      --         FROM dbo.Split(@TransactionType, ',')
      --     ))
      --AND (@ItemCategoryID IS NULL
      --  OR H.ID IN
      --     (
      --         SELECT Parent_ID
      --         FROM Inv_Receipt_d
      --                  LEFT JOIN
      --              Inv_Items_Categories ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
      --         WHERE Inv_Receipt_d.Parent_ID = H.ID
      --           AND Inv_Items_Categories.ItemCategory_ID IN
      --               (
      --                   SELECT item
      --                   FROM dbo.Split(@ItemCategoryID, ',')
      --               )
      --     ))
      AND (@FromDate IS not NULL
        OR CAST(Entry_Date AS TIME) >= @FromTime)
      AND (@ToDate IS not NULL
        OR CAST(Entry_Date AS TIME) <= @ToTime)
      --AND (@FromCustomerActualDeliverDate IS NULL
      --  OR CAST(H.CustomerDeliverDate AS DATE) >= @FromCustomerActualDeliverDate)
      --AND (@ToCustomerActualDeliverDate IS NULL
      --  OR CAST(H.CustomerDeliverDate AS DATE) <= @ToCustomerActualDeliverDate)
      --AND (@CustomerStatusID IS NULL
      --  OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
      
		) as Q;



		------FOr Customer voucher
   select  GL_Vouchers.Code as code
,GL_Vouchers.VouhcerDate as voucherdate
, GL_Accounts.Code as CustCode
,GL_Accounts.Name as CustName
,GL_Accounts.Name_AR as CustNameAr
, GL_Vouchers.Memo as memo
 ,  mstr_Branch.Name as BranchName
 ,mstr_Branch.Name_AR as BranchNameAr
,GL_VoucherType.Name as VoucherName
,GL_VoucherType.Name_AR as VoucherNameAr,
GL_VoucherType.Code as VoucherCode, Inv_PaymentType.id as PayTypeID,
Inv_PaymentType.Name as PayTypeName,Inv_PaymentType.Name_AR as PayTypeNameAr
,Inv_PaymentType.Code as payTypeCode,
 GL_VoucherDetails.Debit  as TotValue
 into #CustVoucher
from GL_Vouchers
inner join GL_VoucherType on GL_Vouchers.VoucherTypeID=GL_VoucherType.ID
inner join mstr_Branch on mstr_Branch.ID=GL_Vouchers.BranchID
inner join GL_VoucherDetails on GL_Vouchers.id=GL_VoucherDetails.VoucherID
inner join Inv_PaymentType on GL_Vouchers.PaymentTypeId=Inv_PaymentType.id
inner join GL_Accounts on GL_VoucherDetails.AccountNoID=GL_Accounts.AccountID
where GL_VoucherType.code=11 and Inv_PaymentType.Code<>0
and GL_VoucherDetails.Header=0  and GL_VoucherDetails.SetupAccountType=0
 AND (@CustomerID IS NULL
                  OR GL_VoucherDetails.AccountNoID = @CustomerID)
    AND (@SubsidaryID IS NULL
                  OR GL_Vouchers.SubsidaryID = @SubsidaryID)
    --AND (@Source IS NULL
    --              OR @Source = 1)
             AND (@FromDate IS NULL
                  OR CAST(GL_Vouchers.VouhcerDate AS DATE) >= @FromDate)
             AND (@ToDate IS NULL
                  OR CAST(GL_Vouchers.VouhcerDate AS DATE) <= @ToDate)
             AND (@BrachID IS NULL
                  OR GL_Vouchers.BranchID IN(@BrachID))
				  and GL_Vouchers.BranchID 
				  in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId);

				  Select    code
,     voucherdate
,   CustCode
,  CustName
,  CustNameAr 
,'' as memo
 ,    BranchName
 ,  BranchNameAr
,  VoucherName
,  VoucherName_Ar,
 VoucherCode,   PayTypeID,
  PayTypeName,  PayTypeNameAr
,  payTypeCode,
   TotValue
   From #newtbl
   Union All
 Select    code
,  voucherdate
,   CustCode
,  CustName
,  CustNameAr
,  memo
 ,    BranchName
 ,  BranchNameAr
,  VoucherName
,  VoucherNameAr,
 VoucherCode,   PayTypeID,
  PayTypeName,  PayTypeNameAr
,  payTypeCode,
   TotValue
   From #CustVoucher
    
    SELECT *
    FROM #newtbl 
	ORDER BY #newtbl.voucherdate  
           , #newtbl.code
    --SELECT  Sum(CASE WHEN C_Code = 51 OR C_Code =52 Then #T.[Net Total] End) FROM #T
END
GO
/****** Object:  StoredProcedure [dbo].[Report_INV_PaymentTypes_Detail]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
CREATE PROC [dbo].[Report_INV_PaymentTypes_Detail]
  @SubsidaryID                     INT = null
, @FromDate                      DATE = '2019-01-01'
, @ToDate                        DATE = '2020-03-31'
, @BrachID                       INT = Null
, @CustomerID                    INT = NULL
, @Payment_Type                  INT = NULL                                                            
,@userId						 int =157
,@Source					     int=nULL
AS
    BEGIN

/*
-1	Unpaid		 Select * from security_users
 0	Multi		
 1	ßÇÔ		
 2	ÈÇáÍÓÇÈ	
*/

           declare
        @fromDateTime DATETIME = null
        , @toDateTime DATETIME = null, @paymentypeid4Code0 int = null
		Select top 1 @paymentypeid4Code0 = id from Inv_PaymentType where code = 0 

    set @fromDateTime = cast(@FromDate as datetime)  +' ' +'00:00:00'
    set @toDateTime = cast(@ToDate as datetime)  +' ' + '23:59:59'

select  GL_Vouchers.Code as code
,GL_Vouchers.VouhcerDate as VouhcerDate
, GL_Accounts.Code as CustCode
,GL_Accounts.Name as CustName
,GL_Accounts.Name_AR as CustNameAr
, GL_Vouchers.Memo as memo
 ,  mstr_Branch.Name as BranchName
 ,mstr_Branch.Name_AR as BranchNameAr
,GL_VoucherType.Name as VoucherName
,GL_VoucherType.Name_AR as VoucherNameAr,
GL_VoucherType.Code as VoucherCode, Inv_PaymentType.id as PayTypeID,
Inv_PaymentType.Name as PayTypeName,Inv_PaymentType.Name_AR as PayTypeNameAr
,Inv_PaymentType.Code as payTypeCode,
 GL_VoucherDetails.Debit  as TotValue
 into #PaymentTypeamountsh
from GL_Vouchers
inner join GL_VoucherType on GL_Vouchers.VoucherTypeID=GL_VoucherType.ID
inner join mstr_Branch on mstr_Branch.ID=GL_Vouchers.BranchID
inner join GL_VoucherDetails on GL_Vouchers.id=GL_VoucherDetails.VoucherID
inner join Inv_PaymentType on GL_Vouchers.PaymentTypeId=Inv_PaymentType.id
inner join GL_Accounts on GL_VoucherDetails.AccountNoID=GL_Accounts.AccountID
where GL_VoucherType.code=11 and Inv_PaymentType.Code<>0
and GL_VoucherDetails.Header=0  and GL_VoucherDetails.SetupAccountType=0
 AND (@CustomerID IS NULL
                  OR GL_VoucherDetails.AccountNoID = @CustomerID)
    AND (@SubsidaryID IS NULL
                  OR GL_Vouchers.SubsidaryID = @SubsidaryID)
    --AND (@Source IS NULL
    --              OR @Source = 1)
             AND (@FromDate IS NULL
                  OR CAST(GL_Vouchers.VouhcerDate AS DATE) >= @FromDate)
             AND (@ToDate IS NULL
                  OR CAST(GL_Vouchers.VouhcerDate AS DATE) <= @ToDate)
             AND (@BrachID IS NULL
                  OR GL_Vouchers.BranchID IN(@BrachID))
				  and GL_Vouchers.BranchID 
				  in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId)
 
--union      
        SELECT
			 Inv_Receipt_h.Entry_No as Entry_No,
			 Inv_Receipt_h.Entry_Date as Entry_Date,
			 GL_Accounts.Code as CustCode
,GL_Accounts.Name as CustName,
GL_Accounts.Name_AR as CustNameAr,
 Inv_Receipt_h.Memo as Memo,
mstr_Branch.Name as br_name,
mstr_Branch.Name_AR as br_namear,(case when Inv_Receipt_h.code = 51 then  'Cash Sales' when Inv_Receipt_h.code = 52 then 'Credit Sales'  when  Inv_Receipt_h.code=53 then 'Cash Return' else 'Credit Return'  end ) as vchr_name,
(case when Inv_Receipt_h.code = 51 then  N'مبيعات نقدية' when Inv_Receipt_h.code = 52 then N'مبيعات بالحساب'  when  Inv_Receipt_h.code=53 then N'مردود نقدى' else N'مردود بالحساب'  end ) as vchr_namear,
0 as zeron,
Inv_PaymentType.id as PayTypeID,
Inv_PaymentType.Name as PayTypeName
,Inv_PaymentType.Name_AR as PayTypeNamear
,Inv_PaymentType.Code as PayTypecode
 ,  Inv_Receipt_h.NetValue  as Valuen
 into #PaymentTypeamountsa
     --   INTO #context
        FROM Inv_Receipt_h
             LEFT JOIN Inv_PaymentType
             ON Inv_Receipt_h.Payment_Type = Inv_PaymentType.id
             LEFT JOIN GL_Accounts
             ON GL_Accounts.AccountID = Inv_Receipt_h.Vendor_ID
             LEFT JOIN mstr_Branch
             ON Inv_Receipt_h.Branch_ID = mstr_Branch.ID 
        WHERE 
		Inv_Receipt_h.Code IN(51 , 53 )
		and Inv_Receipt_h.Branch_ID in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId)
             AND (ISNULL(Inv_Receipt_h.Is_Canceled , 0) <> 1)
             AND (ISNULL(Inv_Receipt_h.IsHolded , 0) <> 1)
             
             AND (@SubsidaryID IS NULL
                  OR Inv_Receipt_h.SubsidiaryID = @SubsidaryID)
             AND (@FromDate IS NULL
                  OR CAST(Inv_Receipt_h.Entry_Date AS DATETIME) >= @fromDateTime)
             AND (@ToDate IS NULL
                  OR CAST(Inv_Receipt_h.Entry_Date AS DATETIME) <= @toDateTime)
             AND (@BrachID IS NULL
                  OR (Inv_Receipt_h.Branch_ID IN(@BrachID) and
					  Inv_Receipt_h.Branch_ID in(select UserBranch.BranchID 
												 from UserBranch 
												 where UserBranch.UserID=@userId)))
				  			  
    
         AND (@CustomerID IS NULL
             OR Inv_Receipt_h.Vendor_ID = @CustomerID)
           AND (@Payment_Type IS NULL
         OR Inv_Receipt_h.Payment_Type = @Payment_Type)
		 --AND (@Source IS NULL
   --               OR @Source = 2)
		and Inv_Receipt_h.Payment_Type <> @paymentypeid4Code0
  
--union      
        SELECT
			 Inv_Receipt_h.Entry_No as Entry_No,
			 Inv_Receipt_h.Entry_Date as Entry_Date,
			 GL_Accounts.Code as CustCode
,GL_Accounts.Name as CustName,
GL_Accounts.Name_AR as CustNameAr,
 Inv_Receipt_h.Memo as Memo,
mstr_Branch.Name as br_name,
mstr_Branch.Name_AR as br_namear,(case when Inv_Receipt_h.code = 51 then  'Cash Sales' when Inv_Receipt_h.code = 52 then 'Credit Sales'  when  Inv_Receipt_h.code=53 then 'Cash Return' else 'Credit Return'  end ) as vchr_name,
(case when Inv_Receipt_h.code = 51 then  N'مبيعات نقدية' when Inv_Receipt_h.code = 52 then N'مبيعات بالحساب'  when  Inv_Receipt_h.code=53 then N'مردود نقدى' else N'مردود بالحساب'  end ) as vchr_namear,
0 as zeron,
Inv_PaymentType.id as PayTypeID,
Inv_PaymentType.Name as PayTypeName
,Inv_PaymentType.Name_AR as PayTypeNamear
,Inv_PaymentType.Code as PayTypecode
 ,  Inv_receiptmultipayment.Amount   as Valuen
     --   INTO #context
	 into #PaymentTypeamountsf
        FROM Inv_PaymentType,Inv_receiptmultipayment,Inv_Receipt_h
           
             LEFT JOIN GL_Accounts
             ON GL_Accounts.AccountID = Inv_Receipt_h.Vendor_ID
             LEFT JOIN mstr_Branch
             ON Inv_Receipt_h.Branch_ID = mstr_Branch.ID
              
        WHERE 
			Inv_Receipt_h.id = Inv_receiptmultipayment.ReceiptId
			and Inv_receiptmultipayment.PaymentTypeId = Inv_PaymentType.id
			and Inv_Receipt_h.Code IN(51 ,52, 53,54 )
			and Inv_Receipt_h.Branch_ID in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId)
             AND (ISNULL(Inv_Receipt_h.Is_Canceled , 0) <> 1)
             AND (ISNULL(Inv_Receipt_h.IsHolded , 0) <> 1)
             
             AND (@SubsidaryID IS NULL
                  OR Inv_Receipt_h.SubsidiaryID = @SubsidaryID)
             AND (@FromDate IS NULL
                  OR CAST(Inv_Receipt_h.Entry_Date AS DATETIME) >= @fromDateTime)
             AND (@ToDate IS NULL
                  OR CAST(Inv_Receipt_h.Entry_Date AS DATETIME) <= @toDateTime)
             AND (@BrachID IS NULL
                  OR (Inv_Receipt_h.Branch_ID IN(@BrachID) and
					  Inv_Receipt_h.Branch_ID in(select UserBranch.BranchID 
												 from UserBranch 
												 where UserBranch.UserID=@userId)))   
         AND (@CustomerID IS NULL
             OR Inv_Receipt_h.Vendor_ID = @CustomerID)
           AND (@Payment_Type IS NULL
         OR Inv_Receipt_h.Payment_Type = @Payment_Type)
		 --AND (@Source IS NULL
   --               OR @Source = 2)
		and Inv_Receipt_h.Payment_Type = @paymentypeid4Code0 --)
		 SELECT      code,VouhcerDate, CustCode   
, CustName  
, CustNameAr   
, Memo   
 ,  BranchName   
 , BranchNameAr  
,  VoucherName   
,  VoucherNameAr   ,
  VoucherCode ,   PayTypeID  ,
  PayTypeName   , PayTypeNameAr  
, payTypeCode   , 
 SUM(TotValue  ) as TotValue from  (
Select * from #PaymentTypeamountsh
union Select * from #PaymentTypeamountsa 
union Select * from #PaymentTypeamountsf ) as #UT1
group by 
  code,VouhcerDate,
  CustCode   
, CustName  
, CustNameAr   
, Memo   
 ,  BranchName   
 , BranchNameAr  
,  VoucherName   
,  VoucherNameAr   ,
  VoucherCode ,   PayTypeID  ,
  PayTypeName   , PayTypeNameAr  
, payTypeCode 
;
--Select sum(TotValue ) from #deletetabl
--Select * from #UT
 
 END
GO
/****** Object:  StoredProcedure [dbo].[Report_Inv_Prints]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Report_Inv_Prints] @ID          INT=  198545
                            , @SubsidaryID INT = 1
							,@userId int=null
AS

    BEGIN
        DECLARE @BaseCurrencies INT;
	CREATE TABLE #ERPstatusTemp
	(

	ID int NOT NULL,

	StatusName nvarchar(200),

	StatusName_AR nvarchar(200)

	)
	insert into #ERPstatusTemp
	values (1,N'New',N'جديد' )
	insert into #ERPstatusTemp
	values (2,N'PartiallyReceived',N'الاستلام الجزئي')
	insert into #ERPstatusTemp
	values (3,N'Received',N'تم الاستلام')
        SELECT @BaseCurrencies = CurrencyID
        FROM mstr_Subsidary_currency
        WHERE SubsidaryID = @SubsidaryID
              AND BaseCurrency = 1;

        --SELECT @BaseCurrencies
        SELECT   
        --Inv_Receipt_h
        H.id                                          HId
      ,(select AllowPack from mstr_InventroySettings where mstr_InventroySettings.SubsidiaryID = @SubsidaryID) as AllowPack
	  ,H.DeliveryFeesForeign as H_DeliveryFeesForeign
	  , H.Entry_Date                                  Entry_Date
	  , H.CustomerDeliverDate                                  CustomerDeliverDate
      , H.Entry_No                                    Entry_No
      , H.Notes                                       H_Notes
      ,d.Discount_Percent as D_Discount_Per
     
	 , H.Schedule_Date                                       H_Schedule_Date
	   ,H.ERPStatus                                         ERPStatusID
      , ERPStatus.StatusName                            ERPStatus_StatusName
      , ERPStatus.StatusName_Ar                         ERPStatus_StatusName_Ar
	 ,H.QuotationEndDate
      , H.PaymentAndConditions                        H_PaymentAndConditions
      , H.Currency_ID
      , H.ValueForeign                                HForeginValue
      , H.Discount_ForeignValue                       HForeginDiscountValue
      , H.Discount_ForeignPercent                     HDiscount_ForeignPercent
      , H.NetValueForeign+H.DeliveryFees                             HForeginNet
      , H.Currency_Rate                               Currency_Rate
      , H.[Value]                                     H_Value
      , H.Discount_Value                              H_Discount_Value
      , H.Discount_Percent                            HDiscount_Percent
      , H.NetValue                                    H_NetValue
      , H.DeliveryFees                                H_DeliveryFees
      , H.SubsidiaryID
      , h.PaymentAndConditions                        PaymentAndConditions
	, DefaultItemCost
	,DefaultItemQty
	 ,AvgCost
	 ,Avr_Cost
	  , H.Memo                                        Memo
      , H.Notes                                       Notes
      , H.Reference_No                                Reference_No
      , H.PlannedDeliveryDate                         H_PlannedDeliveryDate
	  ,H.SurchargeValue                               SurchargeValue  
      ,
	  -----------------------------------------------------------------------------
	  (
		select ShowCostPrice from Security_Users
        where id=@userId
	  ) as ShowCostPrice
	  ,
	  (
	  select PrintPriceInReceivingVoucher from mstr_InventroySettings
      where SubsidiaryID=@SubsidaryID
	  )as PrintPriceInReceivingVoucher
	  ,
	  (
	  select SalesPercentage from mstr_TaxSetting
	   where H.SubsidiaryID=@SubsidaryID
	  ) Mstr_taxSetting_SalesPercentage
	  ,
	  (
	  select PurchasePercentage from mstr_TaxSetting
	   where H.SubsidiaryID=@SubsidaryID
	  ) Mstr_taxSetting_PurchasePercentage
	  ,
	  -------------------------------------------------------------------------------
        (
         SELECT TermName
         FROM GL_paymentTerms p
              JOIN Inv_Receipt_h Ih
              ON p.ID = Ih.PaymentTerm_ID
         WHERE p.ID = H.PaymentTerm_ID
        )                                             TermName
      ,
        (
         SELECT cc.Name
         FROM mstr_Costcenter cc
              JOIN Inv_Receipt_h Ih
              ON cc.ID = Ih.CostCenterID
         WHERE p.ID = H.PaymentTerm_ID
        )                                             CostCenterName
      ,
        (
         SELECT cc.Name_AR
         FROM mstr_Costcenter cc
              JOIN Inv_Receipt_h Ih
              ON cc.ID = Ih.CostCenterID
         WHERE p.ID = H.PaymentTerm_ID
        )                                             CostCenterNameAr
      ,
        (
         SELECT TOP 1 s.SerialFrom
         FROM Inv_Receipt_d D
              LEFT JOIN Inv_Receipt_d_Serial S
              ON D.ID = S.Inv_Receipt_d_ID
         WHERE D.Parent_ID = H.Id
        )                                             GETMachinNumber_Serial
      ,
        (
         SELECT numEn
         FROM dbo.Tafkeet(Convert(DECIMAL(18, 3),REPLACE(Convert(nvarchar(50),ISNULL(H.NetValue,0)),'-','')) , H.Currency_ID)
        ) AS                                          [Tafkeet_EN]
      ,
        (
         SELECT numAr
         FROM dbo.Tafkeet(Convert(DECIMAL(18, 3),REPLACE(Convert(nvarchar(50),ISNULL(H.NetValue,0)),'-',''))  , H.Currency_ID)
        ) AS                                          [Tafkeet_Ar]
      ,
        (
         SELECT numEn
         FROM dbo.Tafkeet(Convert(DECIMAL(18, 3),REPLACE(Convert(nvarchar(50),ISNULL(H.NetValue,0)),'-','')) , H.Currency_ID)
        ) AS                                          [TafkeetEN]
      ,
        (
         SELECT numEn
         FROM dbo.Tafkeet(Convert(DECIMAL(18, 3),REPLACE(Convert(nvarchar(50),ISNULL(H.ValueForeign,0)),'-','')) , H.Currency_ID)
        ) AS                                          [TotalTafkeet_EN]
      ,
        (
         SELECT NumAr
         FROM dbo.Tafkeet(Convert(DECIMAL(18, 3),REPLACE(Convert(nvarchar(50),ISNULL(H.ValueForeign,0)),'-','')) , H.Currency_ID)
        ) AS                                          [TotalTafkeet_AR]
        --GL_Accounts LC_Gl_Accounts
      , LC_Gl_Accounts.AccountID                      LC_Gl_Accounts_AccountID
      , LC_Gl_Accounts.Code                           LC_Gl_Accounts_Code
      , LC_Gl_Accounts.Name                           LC_Gl_Accounts_Name
      , LC_Gl_Accounts.Name_Ar                        LC_Gl_Accounts_Name_Ar
        --Inv_Receipt_H Related_Voucher
      --, Related_Voucher.ID                            Related_Voucher_ID
      --, Related_Voucher.Entry_No                      Related_Voucher_Entry_No
      , Related_Voucher_Inv_Transaction_Codes.Code    Related_Voucher_Inv_Transaction_Codes_Code
      , Related_Voucher_Inv_Transaction_Codes.Name    Related_Voucher_Inv_Transaction_Codes_Name
      , Related_Voucher_Inv_Transaction_Codes.Name_Ar Related_Voucher_Inv_Transaction_Codes_Name_Ar
        --GL_Accounts Related_Voucher_Gl_Accounts
      , Related_Voucher_Gl_Accounts.AccountID         Related_Voucher_Gl_Accounts_Gl_Accounts_AccountID
      , Related_Voucher_Gl_Accounts.Code              Related_Voucher_Gl_Accounts_Gl_Accounts_Code
      , Related_Voucher_Gl_Accounts.Name              Related_Voucher_Gl_AccountsGl_Accounts_Name
      , Related_Voucher_Gl_Accounts.Name_Ar           Related_Voucher_Gl_Accounts_Gl_Accounts_Name_Ar
        -- Get_Inv_ReceiptExpenses
      , Get_Inv_ReceiptExpenses.LocalValue            Get_Inv_ReceiptExpenses_LocalValue
        --Inv_Transaction_Codes TC
      , TC.Code                                       TcCode
      , LTRIM(RTRIM(TC.name))                         TCNameEn
      , LTRIM(RTRIM(TC.Name_AR))                      TcNameAr
        -- Inv_Store ToStore
      , ToStore.Name AS                               [ToStore_Name]
      , ToStore.Name_AR AS                            [ToStore_Name_AR]
        --Inv_Store fromStore
      , FromStore.Name AS                             [FromStore_Name]
      , FromStore.Name_Ar AS                          [FromStore_Name_Ar]
        --mstr_Branch B
      , B.Name                                        BranchNameEn
      , B.Name_AR                                     BranchNameAr
        -- Security_Users Su
      , SU.Name                                       SalesNameEn
      , SU.Name_ar                                    SalesNameAr
	  , SU.Code                                    SalesId
        -- Security_Users Su_CreatedByID
      , Su_CreatedByID.Name                             Su_CreatedByID_Name
      , Su_CreatedByID.Name_ar                          Su_CreatedByID_Name_Ar
        --Inv_PaymentType P
		,p.Code as PaymentTypeCode
      , P.Name                                        PaymentNameEn
      , P.Name_AR                                     PaymentNameAr
        -- Customer -- Vendor -- Gl_Accounts
      , CustomerName = CASE
                           WHEN GL_Accounts.AccountID IS NULL
                           THEN Inv_CashCustomer.Name
                           ELSE GL_Accounts.Name
                       END
      , CustomerName_Ar = CASE
                              WHEN GL_Accounts.AccountID IS NULL
                              THEN Inv_CashCustomer.Name_Ar
                              ELSE GL_Accounts.Name_Ar
                          END
      , Customer_Code = GL_Accounts.vendorCode
      , GL_Accounts.Phone AS                          [CustomerPhone]
      , GL_Accounts.Fax AS                            [CustomerFax]
      , GL_Accounts.Address AS                        [CustomerAddress]
      , GL_Accounts.Email                             [Customer.Email]
	    ,mstr_Subsidaries.AddressAr as CompAddressAr
	  ,mstr_Subsidaries.AddressEn as CompAddressEn
	  ,mstr_Subsidaries.ContactAr as CompContactAr
	    ,mstr_Subsidaries.ContactEn as CompContactEn
      , ISNULL(
        (
         SELECT BarCode
         FROM Inv_CustomerPriceList
         WHERE ItemId = II.ID
               AND CustomerId = GL_Accounts.AccountID
        ) , '') AS                               Customer_BarCode
        --mstr_Currencies
      , mstr_Currencies.CurrencySymbol                H_Currency_ID_CurrencySymbol
      , mstr_Currencies.Code                          mstr_Currencies_Code
      , mstr_Currencies.Name                          mstr_Currencies_Name
      , mstr_Currencies.Name_AR                       mstr_Currencies_Name_Ar
      , @BaseCurrencies                               BaseCurrencies
      ,
        (
         SELECT ISNULL(CurrencySymbol , '')
         FROM mstr_Currencies
         WHERE ID = @BaseCurrencies
        ) AS                                          BaseCurrencies_CurrencySymbol
        --mstr_Subsidaries
      , mstr_Subsidaries.Name                         mstr_Subsidaries_Name
      , mstr_Subsidaries.Name_AR                      mstr_Subsidaries_Name_Ar
      , mstr_Subsidaries.ImagePath                    mstr_Subsidaries_ImagePath
	  ,mstr_Subsidaries.AddressAr                     mstr_Subsidaries_AddressAr
	  ,mstr_Subsidaries.AddressEn                     mstr_Subsidaries_AddressEn
      , II.Code                                       ItemCode
        -- Inv_Receipt_D D
	  --------------------------------------------------------------------------
	  ,D.Transaction_move                             Transaction_move
	  ----------------------------------------------------------------------------
      , D.Qty                                         Qty
	  ---------------------------------------------------------------------------
	  ,D.FinishedReceipt_dID                          FinishedReceipt_dID 
	  ,D.FinishedProductID                            FinishedProductID                    
	  ---------------------------------------------------------------------------

      , D.Price                                       price
      , D.Discount_Value                              Discount
      , D.Total                                       Total
      , ISNULL(D.Conv , 1)                            Package
      , ISNULL(D.DetailsHTML , II.Name) AS            DetailsHTML
      , D.DetailsHTML AS                              DetailsHTML_2
        -- Inv_Items II
        --D_Inv_Store
      , D_Inv_Store.Code                              D_Inv_Store_Code
      , D_Inv_Store.Name                              D_Inv_Store_Name
      , D_Inv_Store.Name_Ar                           D_Inv_Store_Name_Ar
      , ISNULL(D.CustomItemName , II.Name)            ItemNameEn
      , II.Name_Ar                                    ItemNameAr
      , II.ImagePath                                  [Item_ImagePath]
      , II.Notes                                      [Item_Note]
	  
        --Inv_Units IU
      , IU.Name                                       UnitNameEn
      , Iu.Name_Ar                                    unitNameAr

        --Security_Users SU_Approved
      , SU_Approved.Name                              SU_Approved_Name
      , SU_Approved.Name_Ar                           SU_Approved_Name_AR
        --Inv_Receipt_ApprovalStatus INV_R_Approval
      , INV_R_Approval.Status_Name                                                               INV_R_Approval_Status_Name

        --Inv_Receipt_Status
        , Inv_Receipt_Status.StatusName    AS                                                    Inv_Receipt_Status_StatusName
        , Inv_Receipt_Status.StatusName_Ar AS                                                    Inv_Receipt_Status_StatusName_Ar
        , Inv_Items_Vendors.VendorItemCode
        , IIF(H.ReplenshimentType = 3 or H.ReplenshimentType is null, 'Direct', 'Replenishment') H_Entry_Type_En
        , IIF(H.ReplenshimentType = 3 or H.ReplenshimentType is null, N'مباشرة', N'الاستعاضة')   H_Entry_Type_Ar
        , isnull(H.ReplenshimentType,2)                                                          H_ReplenshimentType
        , case H.ReplenshimentType
              when 1 then 'Net sales'
              when 2 then 'Reorder Point and minimum' end                                        H_ReplenshimentType_En
        , case H.ReplenshimentType
              when 1 then N'صافى المبيعات'
              when 2 then N'رصيد إعادة الطلب والحد الأدنى' end                                   H_ReplenshimentType_Ar
        ,H.ReplenshimentFromDate                                                               H_ReplenshimentFromDate
        ,H.ReplenshimentToDate                                                                 H_ReplenshimentToDate
	   ,
	   inv_rec_rec.Entry_No as contractNO
	    ,h.CPNO,
		case D.Transaction_move 
		when 1 then (select sum(INVD.Price * INVD.Qty) from Inv_Receipt_d  INVD where INVD.Parent_ID = @id and INVD.Transaction_move = -1 and INVD.FinishedProductID=D.Item_ID )
		when -1 then (D.Price * D.Qty) end  DTotal,
		case D.Transaction_move 
		when 1 then (select sum(INVD.AvgCost * INVD.Final_conv) from Inv_Receipt_d  INVD where INVD.Parent_ID = @id and INVD.Transaction_move = -1 and INVD.FinishedProductID=D.Item_ID)
		when -1 then (AvgCost * Final_conv) end  DAvgCoast
			  , D.WarrantyDate                                      WarrantyDate
	  , (SELECT CASE WHEN EXISTS ( SELECT INVD.id FROM Inv_Receipt_d INVD WHERE INVD.WarrantyDate is not null and INVD.Parent_ID= @ID ) THEN CAST(1 AS INT) ELSE CAST(0 AS INT) END) as HasWarranty
		--(AvgCost * Final_conv) Avr_Cost
      ,(select top 1 Inv_Item_Vw.Barcode from Inv_Item_Vw where Inv_Item_Vw.ID=II.ID ) as Barcode
	  , Su_CreatedByID.Id                          Su_CreatedByID_ID
	    FROM Inv_Receipt_h H
             LEFT JOIN Inv_Store ToStore
             ON ToStore.ID = H.ToStoreID
             LEFT JOIN Inv_Store fromStore
             ON fromStore.ID = H.FromStoreID
             LEFT JOIN Inv_Transaction_Codes TC
             ON H.Code = TC.Code
             LEFT JOIN mstr_Branch B
             ON H.Branch_ID = B.ID
             LEFT JOIN Security_Users Su
             ON H.Empoyee_ID = Su.Id
             LEFT JOIN Security_Users Su_CreatedByID
             ON H.CreatedByID = Su_CreatedByID.Id
             LEFT JOIN Inv_PaymentType P
             ON H.Payment_Type = P.id
             LEFT JOIN Inv_CashCustomer
             ON Inv_CashCustomer.id = H.CashCustomerID
             LEFT JOIN GL_Accounts
             ON GL_Accounts.AccountID = H.Vendor_ID
             LEFT JOIN mstr_Currencies
             ON mstr_Currencies.ID = H.Currency_ID
             LEFT JOIN mstr_Subsidaries
             ON mstr_Subsidaries.ID = H.SubsidiaryID
             LEFT JOIN Inv_ReceiptReceipts
             ON Inv_ReceiptReceipts.ParentReceiptID = H.id
			 left outer join Inv_Receipt_h inv_rec_rec
			 on Inv_ReceiptReceipts.ReceiptID = inv_rec_rec.id
             LEFT JOIN Inv_Receipt_H Related_Voucher
             ON Inv_ReceiptReceipts.ReceiptID = Related_Voucher.id
             LEFT JOIN GL_Accounts Related_Voucher_Gl_Accounts
             ON Related_Voucher_Gl_Accounts.AccountID = Related_Voucher.LCAccountID
             LEFT JOIN Inv_Transaction_Codes Related_Voucher_Inv_Transaction_Codes
             ON Related_Voucher_Inv_Transaction_Codes.Code = Related_Voucher.Code
             LEFT JOIN GL_Accounts LC_Gl_Accounts
             ON LC_Gl_Accounts.AccountID = H.LCAccountID
             LEFT JOIN
        (
         SELECT ReceiptID
              , SUM(ISNULL(LocalValue , 0)) LocalValue
         FROM Inv_ReceiptExpenses
         WHERE RelatedToLC = 1
         GROUP BY ReceiptID
        ) Get_Inv_ReceiptExpenses
             ON Get_Inv_ReceiptExpenses.ReceiptID = H.Id
             LEFT JOIN #ERPstatusTemp  ERPStatus
             ON ERPStatus.ID = H.ERPStatus
             -- inv_receipt_d D
             LEFT JOIN inv_receipt_d D
             ON H.ID = D.Parent_ID
             LEFT JOIN Inv_Store D_Inv_Store
             ON D_Inv_Store.ID = D.Store_ID
             LEFT JOIN Inv_Items II
             ON D.Item_ID = II.ID
             LEFT JOIN Inv_Unit IU
             ON D.Unit_ID = IU.ID
             LEFT JOIN Security_Users SU_Approved
             ON SU_Approved.ID = H.ApprovedBy_ID
             LEFT JOIN Inv_Receipt_ApprovalStatus INV_R_Approval
             ON INV_R_Approval.Id = H.ApprovalStatus_ID
             LEFT JOIN Inv_Receipt_Status
             ON Inv_Receipt_Status.id = H.Status_ID
			 left outer join Inv_Items_Vendors on Inv_Items_Vendors.ItemID=D.Item_ID
			 and Inv_Items_Vendors.VendorID=h.Vendor_ID
        WHERE(@ID IS NULL
              OR H.ID IN(@ID))
             AND (@SubsidaryID IS NULL
                  OR H.SubsidiaryID IN(@SubsidaryID))

        AND (D.Transaction_move = CASE
                                      WHEN H.Code IN(81)
                                      THEN 1
                                      ELSE D.Transaction_move
                                  END)
	  --order by II.Code 
    END
GO
/****** Object:  StoredProcedure [dbo].[Report_Inv_Prints_Inquery]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROC [dbo].[Report_Inv_Prints_Inquery] @ID         INT -- 198545
                            , @SubsidaryID INT = 1
							,@userId int=null
							,@BranchId int=null
AS

    BEGIN
        DECLARE @BaseCurrencies INT;
	CREATE TABLE #ERPstatusTemp
	(

	ID int NOT NULL,

	StatusName nvarchar(200),

	StatusName_AR nvarchar(200)

	)
	insert into #ERPstatusTemp
	values (1,N'New',N'جديد' )
	insert into #ERPstatusTemp
	values (2,N'PartiallyReceived',N'الاستلام الجزئي')
	insert into #ERPstatusTemp
	values (3,N'Received',N'تم الاستلام')
        SELECT @BaseCurrencies = CurrencyID
        FROM mstr_Subsidary_currency
        WHERE SubsidaryID = @SubsidaryID
              AND BaseCurrency = 1;

        --SELECT @BaseCurrencies
        SELECT   
        --Inv_Receipt_h
        H.id                                          HId
      ,(select AllowPack from mstr_InventroySettings where mstr_InventroySettings.SubsidiaryID = @SubsidaryID) as AllowPack
	  ,H.DeliveryFeesForeign as H_DeliveryFeesForeign
	  , H.Entry_Date                                  Entry_Date
	  , H.CustomerDeliverDate                                  CustomerDeliverDate
      , H.Entry_No                                    Entry_No
      , H.Notes                                       H_Notes
      ,d.Discount_Percent as D_Discount_Per
     
	 , H.Schedule_Date                                       H_Schedule_Date
	   ,H.ERPStatus                                         ERPStatusID
      , ERPStatus.StatusName                            ERPStatus_StatusName
      , ERPStatus.StatusName_Ar                         ERPStatus_StatusName_Ar
	 ,H.QuotationEndDate
      , H.PaymentAndConditions                        H_PaymentAndConditions
      , H.Currency_ID
      , H.ValueForeign                                HForeginValue
      , H.Discount_ForeignValue                       HForeginDiscountValue
      , H.Discount_ForeignPercent                     HDiscount_ForeignPercent
      , H.NetValueForeign+H.DeliveryFees                             HForeginNet
      , H.Currency_Rate                               Currency_Rate
      , H.[Value]                                     H_Value
      , H.Discount_Value                              H_Discount_Value
      , H.Discount_Percent                            HDiscount_Percent
      , H.NetValue                                    H_NetValue
      , H.DeliveryFees                                H_DeliveryFees
      , H.SubsidiaryID
      , h.PaymentAndConditions                        PaymentAndConditions
    , FinishedProductID
	, DefaultItemCost
	,DefaultItemQty
	 ,AvgCost
	 ,Avr_Cost
	  , H.Memo                                        Memo
      , H.Notes                                       Notes
      , H.Reference_No                                Reference_No
      , H.PlannedDeliveryDate                         H_PlannedDeliveryDate
	  ,H.SurchargeValue                               SurchargeValue  
      ,
	  -----------------------------------------------------------------------------
	  (
		select ShowCostPrice from Security_Users
        where id=@userId
	  ) as ShowCostPrice
	  ,
	  (
	  select PrintPriceInReceivingVoucher from mstr_InventroySettings
      where SubsidiaryID=@SubsidaryID
	  )as PrintPriceInReceivingVoucher
	  ,
	  (
	  select SalesPercentage from mstr_TaxSetting
	   where H.SubsidiaryID=@SubsidaryID
	  ) Mstr_taxSetting_SalesPercentage
	  ,
	  (
	  select PurchasePercentage from mstr_TaxSetting
	   where H.SubsidiaryID=@SubsidaryID
	  ) Mstr_taxSetting_PurchasePercentage
	  ,
	  -------------------------------------------------------------------------------
        (
         SELECT TermName
         FROM GL_paymentTerms p
              JOIN Inv_Receipt_h Ih
              ON p.ID = Ih.PaymentTerm_ID
         WHERE p.ID = H.PaymentTerm_ID
        )                                             TermName
      ,
        (
         SELECT cc.Name
         FROM mstr_Costcenter cc
              JOIN Inv_Receipt_h Ih
              ON cc.ID = Ih.CostCenterID
         WHERE p.ID = H.PaymentTerm_ID
        )                                             CostCenterName
      ,
        (
         SELECT cc.Name_AR
         FROM mstr_Costcenter cc
              JOIN Inv_Receipt_h Ih
              ON cc.ID = Ih.CostCenterID
         WHERE p.ID = H.PaymentTerm_ID
        )                                             CostCenterNameAr
      ,
        (
         SELECT TOP 1 s.SerialFrom
         FROM Inv_Receipt_d D
              LEFT JOIN Inv_Receipt_d_Serial S
              ON D.ID = S.Inv_Receipt_d_ID
         WHERE D.Parent_ID = H.Id
        )                                             GETMachinNumber_Serial
      ,
        (
         SELECT numEn
         FROM dbo.Tafkeet(H.NetValue , H.Currency_ID)
        ) AS                                          [Tafkeet_EN]
      ,
        (
         SELECT numAr
         FROM dbo.Tafkeet(H.NetValue  , H.Currency_ID)
        ) AS                                          [Tafkeet_Ar]
      ,
        (
         SELECT numEn
         FROM dbo.Tafkeet( H.NetValue , H.Currency_ID)
        ) AS                                          [TafkeetEN]
      ,
        (
         SELECT numEn
         FROM dbo.Tafkeet(H.ValueForeign , H.Currency_ID)
        ) AS                                          [TotalTafkeet_EN]
      ,
        (
         SELECT NumAr
         FROM dbo.Tafkeet(H.ValueForeign , H.Currency_ID)
        ) AS                                          [TotalTafkeet_AR]
        --GL_Accounts LC_Gl_Accounts
      , LC_Gl_Accounts.AccountID                      LC_Gl_Accounts_AccountID
      , LC_Gl_Accounts.Code                           LC_Gl_Accounts_Code
      , LC_Gl_Accounts.Name                           LC_Gl_Accounts_Name
      , LC_Gl_Accounts.Name_Ar                        LC_Gl_Accounts_Name_Ar
        --Inv_Receipt_H Related_Voucher
      --, Related_Voucher.ID                            Related_Voucher_ID
      --, Related_Voucher.Entry_No                      Related_Voucher_Entry_No
      , Related_Voucher_Inv_Transaction_Codes.Code    Related_Voucher_Inv_Transaction_Codes_Code
      , Related_Voucher_Inv_Transaction_Codes.Name    Related_Voucher_Inv_Transaction_Codes_Name
      , Related_Voucher_Inv_Transaction_Codes.Name_Ar Related_Voucher_Inv_Transaction_Codes_Name_Ar
        --GL_Accounts Related_Voucher_Gl_Accounts
      , Related_Voucher_Gl_Accounts.AccountID         Related_Voucher_Gl_Accounts_Gl_Accounts_AccountID
      , Related_Voucher_Gl_Accounts.Code              Related_Voucher_Gl_Accounts_Gl_Accounts_Code
      , Related_Voucher_Gl_Accounts.Name              Related_Voucher_Gl_AccountsGl_Accounts_Name
      , Related_Voucher_Gl_Accounts.Name_Ar           Related_Voucher_Gl_Accounts_Gl_Accounts_Name_Ar
        -- Get_Inv_ReceiptExpenses
      , Get_Inv_ReceiptExpenses.LocalValue            Get_Inv_ReceiptExpenses_LocalValue
        --Inv_Transaction_Codes TC
      , TC.Code                                       TcCode
      , LTRIM(RTRIM(TC.name))                         TCNameEn
      , LTRIM(RTRIM(TC.Name_AR))                      TcNameAr
        -- Inv_Store ToStore
      , ToStore.Name AS                               [ToStore_Name]
      , ToStore.Name_AR AS                            [ToStore_Name_AR]
        --Inv_Store fromStore
      , FromStore.Name AS                             [FromStore_Name]
      , FromStore.Name_Ar AS                          [FromStore_Name_Ar]
        --mstr_Branch B
      , B.Name                                        BranchNameEn
      , B.Name_AR                                     BranchNameAr
        -- Security_Users Su
      , SU.Name                                       SalesNameEn
      , SU.Name_ar                                    SalesNameAr
	  , SU.Code                                    SalesId
        -- Security_Users Su_CreatedByID
      , Su_CreatedByID.Name                             Su_CreatedByID_Name
      , Su_CreatedByID.Name_ar                          Su_CreatedByID_Name_Ar
        --Inv_PaymentType P
		,p.Code as PaymentTypeCode
      , P.Name                                        PaymentNameEn
      , P.Name_AR                                     PaymentNameAr
        -- Customer -- Vendor -- Gl_Accounts
      , CustomerName = CASE
                           WHEN GL_Accounts.AccountID IS NULL
                           THEN Inv_CashCustomer.Name
                           ELSE GL_Accounts.Name
                       END
      , CustomerName_Ar = CASE
                              WHEN GL_Accounts.AccountID IS NULL
                              THEN Inv_CashCustomer.Name_Ar
                              ELSE GL_Accounts.Name_Ar
                          END
      , Customer_Code = GL_Accounts.vendorCode
      , GL_Accounts.Phone AS                          [CustomerPhone]
      , GL_Accounts.Fax AS                            [CustomerFax]
      , GL_Accounts.Address AS                        [CustomerAddress]
      , GL_Accounts.Email                             [Customer.Email]
	    ,mstr_Subsidaries.AddressAr as CompAddressAr
	  ,mstr_Subsidaries.AddressEn as CompAddressEn
	  ,mstr_Subsidaries.ContactAr as CompContactAr
	    ,mstr_Subsidaries.ContactEn as CompContactEn
      , ISNULL(
        (
         SELECT BarCode
         FROM Inv_CustomerPriceList
         WHERE ItemId = II.ID
               AND CustomerId = GL_Accounts.AccountID
        ) , '') AS                               Customer_BarCode
        --mstr_Currencies
      , mstr_Currencies.CurrencySymbol                H_Currency_ID_CurrencySymbol
      , mstr_Currencies.Code                          mstr_Currencies_Code
      , mstr_Currencies.Name                          mstr_Currencies_Name
      , mstr_Currencies.Name_AR                       mstr_Currencies_Name_Ar
      , @BaseCurrencies                               BaseCurrencies
      ,
        (
         SELECT ISNULL(CurrencySymbol , '')
         FROM mstr_Currencies
         WHERE ID = @BaseCurrencies
        ) AS                                          BaseCurrencies_CurrencySymbol
        --mstr_Subsidaries
      , mstr_Subsidaries.Name                         mstr_Subsidaries_Name
      , mstr_Subsidaries.Name_AR                      mstr_Subsidaries_Name_Ar
      , mstr_Subsidaries.ImagePath                    mstr_Subsidaries_ImagePath
      , II.Code                                       ItemCode
        -- Inv_Receipt_D D
	  --------------------------------------------------------------------------
	 ,(case D.Transaction_move
	  when 0 then 0
	  when -1 then 0
	  else D.IssueQty
	  end) IssueQty	
	  ,D.Transaction_move                             Transaction_move
	  ----------------------------------------------------------------------------
      , D.Qty                                         Qty
	  ,((D.Qty-(case D.Transaction_move
	  when 0 then 0
	  when -1 then 0
	  else D.IssueQty
	  end) )*D.Price)-D.Discount_Value                     TotalIssuePrice
	  ---------------------------------------------------------------------------
	  ,D.FinishedReceipt_dID                          FinishedReceipt_dID 
	  ,D.FinishedProductID                            FinishedProductID                    
	  ---------------------------------------------------------------------------

      , D.Price                                       price
      , D.Discount_Value                              Discount
      , D.Total                                       Total
      , ISNULL(D.Conv , 1)                            Package
      , ISNULL(D.DetailsHTML , II.Name) AS            DetailsHTML
      , D.DetailsHTML AS                              DetailsHTML_2
        -- Inv_Items II
        --D_Inv_Store
      , D_Inv_Store.Code                              D_Inv_Store_Code
      , D_Inv_Store.Name                              D_Inv_Store_Name
      , D_Inv_Store.Name_Ar                           D_Inv_Store_Name_Ar
      , ISNULL(D.CustomItemName , II.Name)            ItemNameEn
      , II.Name_Ar                                    ItemNameAr
      , II.ImagePath                                  [Item_ImagePath]
      , II.Notes                                      [Item_Note]
	  
        --Inv_Units IU
      , IU.Name                                       UnitNameEn
      , Iu.Name_Ar                                    unitNameAr

        --Security_Users SU_Approved
      , SU_Approved.Name                              SU_Approved_Name
      , SU_Approved.Name_Ar                           SU_Approved_Name_AR
        --Inv_Receipt_ApprovalStatus INV_R_Approval
      , INV_R_Approval.Status_Name                                                               INV_R_Approval_Status_Name

        --Inv_Receipt_Status
        , Inv_Receipt_Status.StatusName    AS                                                    Inv_Receipt_Status_StatusName
        , Inv_Receipt_Status.StatusName_Ar AS                                                    Inv_Receipt_Status_StatusName_Ar
        , Inv_Items_Vendors.VendorItemCode
        , IIF(H.ReplenshimentType = 3 or H.ReplenshimentType is null, 'Direct', 'Replenishment') H_Entry_Type_En
        , IIF(H.ReplenshimentType = 3 or H.ReplenshimentType is null, N'مباشرة', N'الاستعاضة')   H_Entry_Type_Ar
        , isnull(H.ReplenshimentType,2)                                                          H_ReplenshimentType
        , case H.ReplenshimentType
              when 1 then 'Net sales'
              when 2 then 'Reorder Point and minimum' end                                        H_ReplenshimentType_En
        , case H.ReplenshimentType
              when 1 then N'صافى المبيعات'
              when 2 then N'رصيد إعادة الطلب والحد الأدنى' end                                   H_ReplenshimentType_Ar
        ,H.ReplenshimentFromDate                                                               H_ReplenshimentFromDate
        ,H.ReplenshimentToDate                                                                 H_ReplenshimentToDate
	   ,
	   inv_rec_rec.Entry_No as contractNO
	    ,h.CPNO
      ,(select top 1 Inv_Item_Vw.Barcode from Inv_Item_Vw where Inv_Item_Vw.ID=II.ID ) as Barcode
	  , Su_CreatedByID.Id                          Su_CreatedByID_ID
	    FROM Inv_Receipt_h H
             LEFT JOIN Inv_Store ToStore
             ON ToStore.ID = H.ToStoreID
             LEFT JOIN Inv_Store fromStore
             ON fromStore.ID = H.FromStoreID
             LEFT JOIN Inv_Transaction_Codes TC
             ON H.Code = TC.Code
             LEFT JOIN mstr_Branch B
             ON H.Branch_ID = B.ID
             LEFT JOIN Security_Users Su
             ON H.Empoyee_ID = Su.Id
             LEFT JOIN Security_Users Su_CreatedByID
             ON H.CreatedByID = Su_CreatedByID.Id
             LEFT JOIN Inv_PaymentType P
             ON H.Payment_Type = P.id
             LEFT JOIN Inv_CashCustomer
             ON Inv_CashCustomer.id = H.CashCustomerID
             LEFT JOIN GL_Accounts
             ON GL_Accounts.AccountID = H.Vendor_ID
             LEFT JOIN mstr_Currencies
             ON mstr_Currencies.ID = H.Currency_ID
             LEFT JOIN mstr_Subsidaries
             ON mstr_Subsidaries.ID = H.SubsidiaryID
             LEFT JOIN Inv_ReceiptReceipts
             ON Inv_ReceiptReceipts.ParentReceiptID = H.id
			 left outer join Inv_Receipt_h inv_rec_rec
			 on Inv_ReceiptReceipts.ReceiptID = inv_rec_rec.id
             LEFT JOIN Inv_Receipt_H Related_Voucher
             ON Inv_ReceiptReceipts.ReceiptID = Related_Voucher.id
             LEFT JOIN GL_Accounts Related_Voucher_Gl_Accounts
             ON Related_Voucher_Gl_Accounts.AccountID = Related_Voucher.LCAccountID
             LEFT JOIN Inv_Transaction_Codes Related_Voucher_Inv_Transaction_Codes
             ON Related_Voucher_Inv_Transaction_Codes.Code = Related_Voucher.Code
             LEFT JOIN GL_Accounts LC_Gl_Accounts
             ON LC_Gl_Accounts.AccountID = H.LCAccountID
             LEFT JOIN
        (
         SELECT ReceiptID
              , SUM(ISNULL(LocalValue , 0)) LocalValue
         FROM Inv_ReceiptExpenses
         WHERE RelatedToLC = 1
         GROUP BY ReceiptID
        ) Get_Inv_ReceiptExpenses
             ON Get_Inv_ReceiptExpenses.ReceiptID = H.Id
             LEFT JOIN #ERPstatusTemp  ERPStatus
             ON ERPStatus.ID = H.ERPStatus
             -- inv_receipt_d D
             LEFT JOIN inv_receipt_d D
             ON H.ID = D.Parent_ID
             LEFT JOIN Inv_Store D_Inv_Store
             ON D_Inv_Store.ID = D.Store_ID
             LEFT JOIN Inv_Items II
             ON D.Item_ID = II.ID
             LEFT JOIN Inv_Unit IU
             ON D.Unit_ID = IU.ID
             LEFT JOIN Security_Users SU_Approved
             ON SU_Approved.ID = H.ApprovedBy_ID
             LEFT JOIN Inv_Receipt_ApprovalStatus INV_R_Approval
             ON INV_R_Approval.Id = H.ApprovalStatus_ID
             LEFT JOIN Inv_Receipt_Status
             ON Inv_Receipt_Status.id = H.Status_ID
			 left outer join Inv_Items_Vendors on Inv_Items_Vendors.ItemID=D.Item_ID
			 and Inv_Items_Vendors.VendorID=h.Vendor_ID
        WHERE(@ID IS NULL
              OR H.ID = (select id from Inv_Receipt_h where Entry_No=@id and Code=11))
             AND (@SubsidaryID IS NULL
                  OR H.SubsidiaryID IN(@SubsidaryID))

        AND (D.Transaction_move = CASE
                                      WHEN H.Code IN(81)
                                      THEN 1
                                      ELSE D.Transaction_move
                                  END)
	  --order by II.Code 
    END
GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Purchase_Group_By_Customer]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Report_INV_Purchase_Group_By_Customer] @FromDate DATE = NULL
, @ToDate DATE = NULL
, @BrachID INT = NULL
, @CustomerID INT = NULL
, @CustomerCatID INT = NULL
, @FromInvoiceNumber INT = NULL
, @ToInvoiceNumber INT = NULL
, @ItemCategoryID INT = NULL
, @SubsidaryID INT = NULL
, @Payment_Type INT = NULL
, @IsFree INT = 0
, @ItemId INT = NULL
, @TransactionType INT = NULL
,@StatusId INT =NULL
AS
BEGIN
	IF OBJECT_ID('#ERPstatusTemp', 'U') IS NOT NULL 
      DROP TABLE #ERPstatusTemp; 
		CREATE TABLE #ERPstatusTemp

	(
	ID int NOT NULL,
	StatusName nvarchar(200),
	StatusName_AR nvarchar(200)
	)
	insert into #ERPstatusTemp
	values (1,N'Draft',N'قيد الانتظار"' )
	insert into #ERPstatusTemp
	values (2,N'Open',N'مفتوح')
	insert into #ERPstatusTemp
	values (3,N'Disapproved',N'مرفوض')
		insert into #ERPstatusTemp
	values (4,N'Received',N'تم الاستلام')
		insert into #ERPstatusTemp
	values (5,N'Invoiced',N'فاتورة')
		insert into #ERPstatusTemp
	values (6,N'Close',N'مغلق')
    Declare @transStr nvarchar(max)=NULL;
    IF @TransactionType IS NULL
	BEGIN
	SET @transStr='1,2';
	SET @StatusId=NULL;
	END
	ELSE
	BEGIN
	SET @transStr=CONVERT(nvarchar(max),@TransactionType);
	END
    SELECT CustomerNo      = CASE
                                 WHEN GL_Accounts.AccountID IS NULL
                                     THEN CAST(Inv_CashCustomer.id AS NVARCHAR(50))
                                 ELSE CAST(GL_Accounts.Code AS NVARCHAR(100))
                                 END
         , CustomerName    = CASE
                                 WHEN GL_Accounts.AccountID IS NULL
                                     THEN Inv_CashCustomer.Name
                                 ELSE GL_Accounts.Name
                                 END
         , CustomerName_Ar = CASE
                                 WHEN GL_Accounts.AccountID IS NULL
                                     THEN Inv_CashCustomer.Name_AR
                                 ELSE GL_Accounts.Name_AR
                                 END
         , C_S_Sum_Qty     = SUM(CASE
		                             WHEN @TransactionType = 11 THEN D.qty
									 WHEN @TransactionType = 12 THEN D.qty
                                     WHEN H.CODE IN (1)
                                         THEN D.qty
                                     ELSE 0
        END)
         , C_R_Sum_Qty     = SUM(CASE
		                             WHEN @TransactionType = 11 THEN 0
									 WHEN @TransactionType = 12 THEN 0
                                     WHEN H.CODE IN (2)
                                         THEN D.qty
                                     ELSE 0
        END)
         , Net_QTY         = SUM(CASE
		                             WHEN @TransactionType = 11 THEN D.qty
									 WHEN @TransactionType = 12 THEN D.qty
                                     WHEN H.CODE IN (1)
                                         THEN D.qty
                                     ELSE 0
        END) - SUM(CASE
                       WHEN H.CODE IN (2)
                           THEN D.qty
                       ELSE 0
        END)
         , C_S_Sum_Price   = SUM(CASE
		                             WHEN @TransactionType = 11 THEN (D.Total / ISNULL(H.Currency_Rate, 1)) -
                                              (D.H_Discount_Value / ISNULL(H.Currency_Rate, 1))
									 WHEN @TransactionType = 12 THEN (D.Total / ISNULL(H.Currency_Rate, 1)) -
                                              (D.H_Discount_Value / ISNULL(H.Currency_Rate, 1))
                                     WHEN H.CODE IN (1)
                                         THEN (D.Total / ISNULL(H.Currency_Rate, 1)) -
                                              (D.H_Discount_Value / ISNULL(H.Currency_Rate, 1))
                                     ELSE 0
        END)
         , C_R_Sum_Price   = SUM(CASE
                                     WHEN H.CODE IN (2)
                                         THEN (D.Total / ISNULL(H.Currency_Rate, 1)) -
                                              (D.H_Discount_Value / ISNULL(H.Currency_Rate, 1))
                                     ELSE 0
        END)
         , NetSale         = SUM(CASE
		                             WHEN @TransactionType = 11 THEN (D.Total / ISNULL(H.Currency_Rate, 1)) -
                                              (D.H_Discount_Value / ISNULL(H.Currency_Rate, 1))
									 WHEN @TransactionType = 12 THEN (D.Total / ISNULL(H.Currency_Rate, 1)) -
                                              (D.H_Discount_Value / ISNULL(H.Currency_Rate, 1))
                                     WHEN H.CODE IN (1)
                                         THEN (D.Total / ISNULL(H.Currency_Rate, 1)) -
                                              (D.H_Discount_Value / ISNULL(H.Currency_Rate, 1))
                                     ELSE 0
        END) - SUM(CASE
                       WHEN H.CODE IN (2)
                           THEN (D.Total / ISNULL(H.Currency_Rate, 1)) -
                                (D.H_Discount_Value / ISNULL(H.Currency_Rate, 1))
                       ELSE 0
        END)
	,
	'' as TransactionName
		,
	'' as TransactionNameEN
	   , (CASE 
	   WHEN @transStr='11'
	   THEN (select top 1 INVS.StatusName_AR from #ERPstatusTemp INVS where INVS.ID =MIN(H.PurchaseOrderStatusId)) 
	   WHEN @transStr='12'
	   THEN (select top 1 INVS.StatusName_AR from #ERPstatusTemp INVS where INVS.ID =MIN(H.PurchaseRequestStatusId)) 
	   ELSE ''
	   END )  as StatusName_Ar
	   ,(CASE 
	   WHEN @transStr='11'
	   THEN (select top 1 INVS.StatusName from #ERPstatusTemp INVS where INVS.ID =MIN(H.PurchaseOrderStatusId)) 
	   WHEN @transStr='12'
	   THEN (select top 1 INVS.StatusName from #ERPstatusTemp INVS where INVS.ID =MIN(H.PurchaseRequestStatusId)) 
	   ELSE ''
	   END )   as StatusName
    FROM dbo.Inv_Receipt_H H
             LEFT JOIN
         dbo.Inv_Receipt_d D ON D.Parent_ID = H.ID
             LEFT JOIN
         dbo.Inv_Items I ON I.ID = D.Item_ID
             LEFT JOIN
         dbo.Inv_CashCustomer ON Inv_CashCustomer.id = H.CashCustomerID
             LEFT JOIN
         dbo.GL_Accounts ON GL_Accounts.AccountID = H.Vendor_ID
             LEFT JOIN
         dbo.Inv_Unit ON Inv_Unit.ID = I.Selling_UnitId
             LEFT JOIN
         dbo.Inv_Items_Units ON Inv_Items_Units.Item_ID = I.ID
             AND Inv_Items_Units.Unit_id = Inv_Unit.ID
    WHERE (@SubsidaryID IS NULL
        OR H.SubsidiaryID = @SubsidaryID)
      AND D.Item_ID IS NOT NULL
      AND D.FinishedProductID IS NULL
      AND H.Code IN (
	  SELECT item
               FROM dbo.Split(@transStr, ',')
	  )
	AND (@StatusId IS NULL
		OR
		  H.PurchaseOrderStatusId=@StatusId
		OR
		H.PurchaseRequestStatusId=@StatusId
		)
      AND (GL_Accounts.AccountID IS NOT NULL
        OR H.CashCustomerID IS NOT NULL)
      AND (@Payment_Type IS NULL
        OR H.Payment_Type = @Payment_Type)
      AND (@FromDate IS NULL
        OR CAST(H.Entry_Date AS DATE) >= @FromDate)
      AND (@ToDate IS NULL
        OR CAST(H.Entry_Date AS DATE) <= @ToDate)
      AND (@BrachID IS NULL
        OR H.Branch_ID IN (@BrachID))
      AND (@CustomerID IS NULL
        OR H.CashCustomerID = @CustomerID
        OR H.Vendor_ID = @CustomerID)
      AND (@CustomerCatID IS NULL
        OR Inv_CashCustomer.CategoryID IN (@CustomerCatID)
        OR Gl_Accounts.VendorCategoryID IN (@CustomerCatID))
      AND (@FromInvoiceNumber IS NULL
        OR H.Entry_No >= @FromInvoiceNumber)
      AND (@ToInvoiceNumber IS NULL
        OR H.Entry_No <= @ToInvoiceNumber)
      AND (@ItemCategoryID IS NULL
        OR H.ID IN
           (
               SELECT Inv_Receipt_d.Parent_ID
               FROM dbo.Inv_Receipt_d
                        LEFT JOIN
                    dbo.Inv_Items_Categories ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
               WHERE D.Parent_ID = H.ID
                 AND Inv_Items_Categories.ItemCategory_ID IN (@ItemCategoryID)
           ))
     -- AND ((@IsFree is null or @IsFree =0 and D.Total > 0) or (@IsFree =1 and D.Total = 0))
	  AND ((@IsFree is null or @IsFree =0) or (@IsFree =1 and D.Total = 0))
      AND (@ItemId IS NULL
        OR D.Item_ID = @ItemId)
    GROUP BY GL_Accounts.AccountID
           , Inv_CashCustomer.id
           , GL_Accounts.Code
           , Inv_CashCustomer.Name
           , GL_Accounts.Name
           , Inv_CashCustomer.Name_Ar
           , GL_Accounts.Name_Ar
    ORDER BY Inv_CashCustomer.Name
           , GL_Accounts.Name
END
GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Purchase_Group_By_Date_Day]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Report_INV_Purchase_Group_By_Date_Day] @FromDate          DATE = NULL
                                                , @ToDate            DATE = NULL
                                                , @BrachID           INT  = NULL
                                                , @CustomerID        INT  = NULL
                                                , @CustomerCatID     INT  = NULL
                                                , @FromInvoiceNumber INT  = NULL
                                                , @ToInvoiceNumber   INT  = NULL
                                                , @ItemCategoryID    INT  = NULL
                                                , @SubsidaryID       INT  = NULL
                                                , @Payment_Type      INT  = NULL
                                                , @IsFree            INT  = NULL
                                                , @ItemId            INT  = NULL
AS
    BEGIN

        SELECT Date = CAST(H.Entry_Date AS DATE)
             , C_S_Sum_Qty = SUM(CASE
                                     WHEN H.CODE IN(1)
                                     THEN D.qty
                                     ELSE 0
                                 END)
             , C_R_Sum_Qty = SUM(CASE
                                     WHEN H.CODE IN(2)
                                     THEN D.qty
                                     ELSE 0
                                 END)
             , Net_QTY = SUM(CASE
                                 WHEN H.CODE IN(1)
                                 THEN D.qty
                                 ELSE 0
                             END) - SUM(CASE
                                            WHEN H.CODE IN(2)
                                            THEN D.qty
                                            ELSE 0
                                        END)
             , C_S_Sum_Price = SUM(CASE
                                       WHEN H.CODE IN(1)
                                       THEN(D.Total / ISNULL(H.Currency_Rate , 1)) - (D.H_Discount_Value / ISNULL(H.Currency_Rate , 1))
                                       ELSE 0
                                   END)
             , C_R_Sum_Price = SUM(CASE
                                       WHEN H.CODE IN(2)
                                       THEN(D.Total / ISNULL(H.Currency_Rate , 1)) - (D.H_Discount_Value / ISNULL(H.Currency_Rate , 1))
                                       ELSE 0
                                   END)
             , NetSale = SUM(CASE
                                 WHEN H.CODE IN(1)
                                 THEN(D.Total / ISNULL(H.Currency_Rate , 1)) - (D.H_Discount_Value / ISNULL(H.Currency_Rate , 1))
                                 ELSE 0
                             END) - SUM(CASE
                                            WHEN H.CODE IN(2)
                                            THEN(D.Total / ISNULL(H.Currency_Rate , 1)) - (D.H_Discount_Value / ISNULL(H.Currency_Rate , 1))
                                            ELSE 0
                                        END)
        FROM
             Inv_Receipt_H H
        LEFT JOIN
        Inv_Receipt_d D ON D.Parent_ID = H.ID
        LEFT JOIN
        Inv_Items I ON I.ID = D.Item_ID
        LEFT JOIN
        Inv_CashCustomer ON Inv_CashCustomer.id = H.CashCustomerID
        LEFT JOIN
        GL_Accounts ON GL_Accounts.AccountID = H.Vendor_ID
        LEFT JOIN
        Inv_Unit ON Inv_Unit.ID = I.Selling_UnitId
        LEFT JOIN
        Inv_Items_Units ON Inv_Items_Units.Item_ID = I.ID
                           AND Inv_Items_Units.Unit_id = Inv_Unit.ID
        WHERE D.Item_ID IS NOT NULL
              AND D.FinishedProductID IS NULL
              AND H.Code IN(1 , 2)
        AND (@FromDate IS NULL
             OR CAST(H.Entry_Date AS DATE) >= @FromDate)
        AND (@ToDate IS NULL
             OR CAST(H.Entry_Date AS DATE) <= @ToDate)
        AND (@Payment_Type IS NULL
             OR H.Payment_Type = @Payment_Type)
        AND (@BrachID IS NULL
             OR H.Branch_ID IN(@BrachID))
        AND (@CustomerID IS NULL
             OR H.CashCustomerID = @CustomerID
             OR H.Vendor_ID = @CustomerID)
        AND (@CustomerCatID IS NULL
             OR Inv_CashCustomer.CategoryID IN(@CustomerCatID)
        OR Gl_Accounts.VendorCategoryID IN(@CustomerCatID))
             AND (@FromInvoiceNumber IS NULL
                  OR H.Entry_No >= @FromInvoiceNumber)
             AND (@ToInvoiceNumber IS NULL
                  OR H.Entry_No <= @ToInvoiceNumber)
             AND (@ItemCategoryID IS NULL
                  OR H.ID IN
        (
         SELECT Parent_ID
         FROM
              Inv_Receipt_d
         LEFT JOIN
         Inv_Items_Categories ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
         WHERE D.Parent_ID = H.ID
               AND Inv_Items_Categories.ItemCategory_ID IN(@ItemCategoryID)
        ))
     -- AND ((@IsFree is null or @IsFree =0 and D.Total > 0) or (   @IsFree =1 and D.Total = 0))
	  AND ((@IsFree is null or @IsFree =0) or (@IsFree =1 and D.Total = 0))
             AND (@ItemId IS NULL
                  OR D.Item_ID = @ItemId)
        AND (@SubsidaryID IS NULL
        OR H.SubsidiaryID = @SubsidaryID)
        GROUP BY CAST(H.Entry_Date AS DATE)
        ORDER BY CAST(H.Entry_Date AS DATE)
    END
GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Purchase_Group_By_Date_Month_Year]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Report_INV_Purchase_Group_By_Date_Month_Year] @FromDate          DATE = NULL
                                                       , @ToDate            DATE = NULL
                                                       , @BrachID           INT  = NULL
                                                       , @CustomerID        INT  = NULL
                                                       , @CustomerCatID     INT  = NULL
                                                       , @FromInvoiceNumber INT  = NULL
                                                       , @ToInvoiceNumber   INT  = NULL
                                                       , @ItemCategoryID    INT  = NULL
                                                       , @SubsidaryID       INT  = NULL
                                                       , @Payment_Type      INT  = NULL
                                                       , @IsFree            INT  = NULL
                                                       , @ItemId            INT  = NULL
AS
    BEGIN

        SELECT Date = CAST(MONTH(H.Entry_Date) AS NVARCHAR(50)) + ' / ' + CAST(YEAR(H.Entry_Date) AS NVARCHAR(50))
             , C_S_Sum_Qty = SUM(CASE
                                     WHEN H.CODE IN(1)
                                     THEN D.qty
                                     ELSE 0
                                 END)
             , C_R_Sum_Qty = SUM(CASE
                                     WHEN H.CODE IN(2)
                                     THEN D.qty
                                     ELSE 0
                                 END)
             , Net_QTY = SUM(CASE
                                 WHEN H.CODE IN(1)
                                 THEN D.qty
                                 ELSE 0
                             END) - SUM(CASE
                                            WHEN H.CODE IN(2)
                                            THEN D.qty
                                            ELSE 0
                                        END)
             , C_S_Sum_Price = SUM(CASE
                                       WHEN H.CODE IN(1)
                                       THEN(D.Total / ISNULL(H.Currency_Rate , 1)) - (D.H_Discount_Value / ISNULL(H.Currency_Rate , 1))
                                       ELSE 0
                                   END)
             , C_R_Sum_Price = SUM(CASE
                                       WHEN H.CODE IN(2)
                                       THEN(D.Total / ISNULL(H.Currency_Rate , 1)) - (D.H_Discount_Value / ISNULL(H.Currency_Rate , 1))
                                       ELSE 0
                                   END)
             , NetSale = SUM(CASE
                                 WHEN H.CODE IN(1)
                                 THEN(D.Total / ISNULL(H.Currency_Rate , 1)) - (D.H_Discount_Value / ISNULL(H.Currency_Rate , 1))
                                 ELSE 0
                             END) - SUM(CASE
                                            WHEN H.CODE IN(2)
                                            THEN(D.Total / ISNULL(H.Currency_Rate , 1)) - (D.H_Discount_Value / ISNULL(H.Currency_Rate , 1))
                                            ELSE 0
                                        END)
        FROM
             Inv_Receipt_H H
        LEFT JOIN
        Inv_Receipt_d D ON D.Parent_ID = H.ID
        LEFT JOIN
        Inv_Items I ON I.ID = D.Item_ID
        LEFT JOIN
        Inv_CashCustomer ON Inv_CashCustomer.id = H.CashCustomerID
        LEFT JOIN
        GL_Accounts ON GL_Accounts.AccountID = H.Vendor_ID
        LEFT JOIN
        Inv_Unit ON Inv_Unit.ID = I.Selling_UnitId
        LEFT JOIN
        Inv_Items_Units ON Inv_Items_Units.Item_ID = I.ID
                           AND Inv_Items_Units.Unit_id = Inv_Unit.ID
        WHERE(@SubsidaryID IS NULL
              OR H.SubsidiaryID = @SubsidaryID)
             AND (@SubsidaryID IS NULL
                  OR H.SubsidiaryID = @SubsidaryID)
             AND D.Item_ID IS NOT NULL
             AND D.FinishedProductID IS NULL
             AND H.Code IN(1 , 2)
        AND (@FromDate IS NULL
             OR CAST(H.Entry_Date AS DATE) >= @FromDate)
        AND (@ToDate IS NULL
             OR CAST(H.Entry_Date AS DATE) <= @ToDate)
        AND (@Payment_Type IS NULL
             OR H.Payment_Type = @Payment_Type)
        AND (@BrachID IS NULL
             OR H.Branch_ID IN(@BrachID))
        AND (@CustomerID IS NULL
             OR H.CashCustomerID = @CustomerID
             OR H.Vendor_ID = @CustomerID)
        AND (@CustomerCatID IS NULL
             OR Inv_CashCustomer.CategoryID IN(@CustomerCatID)
        OR Gl_Accounts.VendorCategoryID IN(@CustomerCatID))
             AND (@FromInvoiceNumber IS NULL
                  OR H.Entry_No >= @FromInvoiceNumber)
             AND (@ToInvoiceNumber IS NULL
                  OR H.Entry_No <= @ToInvoiceNumber)
             AND (@ItemCategoryID IS NULL
                  OR H.ID IN
        (
         SELECT Parent_ID
         FROM
              Inv_Receipt_d
         LEFT JOIN
         Inv_Items_Categories ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
         WHERE D.Parent_ID = H.ID
               AND Inv_Items_Categories.ItemCategory_ID IN(@ItemCategoryID)
        ))
     -- AND ((@IsFree is null or @IsFree =0 and D.Total > 0) or (   @IsFree =1 and D.Total = 0))
	  AND ((@IsFree is null or @IsFree =0) or (@IsFree =1 and D.Total = 0))
             AND (@ItemId IS NULL
                  OR D.Item_ID = @ItemId)
        GROUP BY MONTH(H.Entry_Date)
               , YEAR(H.Entry_Date)
        ORDER BY MONTH(H.Entry_Date)
               , YEAR(H.Entry_Date)
    END
GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Purchase_Group_By_Invoices]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Report_INV_Purchase_Group_By_Invoices] @FromDate          DATE          = NULL
                                                , @ToDate            DATE          = NULL
                                                , @BrachID           INT           = NULL
                                                , @CustomerID        INT           = NULL
                                                , @CustomerCatID     INT           = NULL
                                                , @FromInvoiceNumber INT           = NULL
                                                , @ToInvoiceNumber   INT           = NULL
                                                , @TransactionType   INT = NULL
                                                , @ItemCategoryID    INT           = NULL
                                                , @SubsidaryID       INT           = NULL
                                                , @Payment_Type      INT           = NULL
                                                , @IsFree            INT           = NULL
                                                , @ItemId            INT           = NULL
												, @StatusId            INT           = NULL
AS
    BEGIN
	IF OBJECT_ID('#ERPstatusTemp', 'U') IS NOT NULL 
      DROP TABLE #ERPstatusTemp; 
		CREATE TABLE #ERPstatusTemp

	(
	ID int NOT NULL,
	StatusName nvarchar(200),
	StatusName_AR nvarchar(200)
	)
	insert into #ERPstatusTemp
	values (1,N'Draft',N'قيد الانتظار"' )
	insert into #ERPstatusTemp
	values (2,N'Open',N'مفتوح')
	insert into #ERPstatusTemp
	values (3,N'Disapproved',N'مرفوض')
		insert into #ERPstatusTemp
	values (4,N'Received',N'تم الاستلام')
		insert into #ERPstatusTemp
	values (5,N'Invoiced',N'فاتورة')
		insert into #ERPstatusTemp
	values (6,N'Close',N'مغلق')

	    Declare @transStr nvarchar(max)=NULL;
    IF @TransactionType IS NULL
	BEGIN
	SET @transStr='1,2';
	SET @StatusId=NULL;
	END
	ELSE
	BEGIN
	SET @transStr=CONVERT(nvarchar(max),@TransactionType);
	END
        IF EXISTS
        (
         SELECT *
         FROM dbo.Split(@TransactionType , ',')
         WHERE Item = -1
        )
            SET @TransactionType = NULL

        SELECT Inv_Receipt_h.ID
             , Inv_Receipt_h.Entry_No       Bilno
             , Inv_Receipt_h.Entry_Date     [Date]
             , Inv_PaymentType.Name         Payment
             , Inv_PaymentType.Name_AR      Payment_AR
             , Inv_Receipt_h.Value          Total
             , Inv_Receipt_h.Discount_Value [Invoice Discount]
             , Inv_Receipt_h.NetValue       [Net Total]
             , CASE
                   WHEN GL_Accounts.AccountID IS NULL
                   THEN Cast(Inv_CashCustomer.id as nvarchar(50))
                   ELSE Cast(GL_Accounts.Code as Nvarchar(50))
               END                          CustomerNo
             , CASE
                   WHEN GL_Accounts.AccountID IS NULL
                   THEN Inv_CashCustomer.Name
                   ELSE GL_Accounts.Name
               END                          CustomerName
             , CASE
                   WHEN GL_Accounts.AccountID IS NULL
                   THEN Inv_CashCustomer.Name_Ar
                   ELSE GL_Accounts.Name_Ar
               END                          CustomerName_Ar
             , Inv_Receipt_h.Vendor_ID
             , Inv_Receipt_h.CashCustomerID
             , GL_Accounts.AccountID
             , Gl_Accounts.VendorCode
             , Security_Users.Name          [S.Name]
             , Security_Users.Name_AR       [S.Name_Ar]
             , C.Name                       C_Name
             , C.Name_Ar                    C_Name_Ar
             , C.Code                       C_Code
   , (CASE 
	   WHEN @transStr='11'
	   THEN (select top 1 INVS.StatusName_AR from #ERPstatusTemp INVS where INVS.ID =Inv_Receipt_h.PurchaseOrderStatusId) 
	   WHEN @transStr='12'
	   THEN (select top 1 INVS.StatusName_AR from #ERPstatusTemp INVS where INVS.ID =Inv_Receipt_h.PurchaseRequestStatusId) 
	   ELSE ''
	   END )  as StatusName_Ar
	   ,(CASE 
	   WHEN @transStr='11'
	   THEN (select top 1 INVS.StatusName from #ERPstatusTemp INVS where INVS.ID =Inv_Receipt_h.PurchaseOrderStatusId) 
	   WHEN @transStr='12'
	   THEN (select top 1 INVS.StatusName from #ERPstatusTemp INVS where INVS.ID =Inv_Receipt_h.PurchaseRequestStatusId) 
	   ELSE ''
	   END )   as StatusName
        FROM
             Inv_Receipt_h
        LEFT JOIN
        Inv_CashCustomer ON Inv_CashCustomer.id = Inv_Receipt_h.CashCustomerID
        LEFT JOIN
        GL_Accounts ON GL_Accounts.AccountID = Inv_Receipt_h.Vendor_ID
        LEFT JOIN
        Inv_Transaction_Codes C ON Inv_Receipt_h.Code = C.Code
        LEFT JOIN
        Security_Users ON Security_Users.Id = Inv_Receipt_h.Empoyee_ID
        LEFT JOIN
        Inv_PaymentType ON Inv_PaymentType.id = Inv_Receipt_h.Payment_Type
        WHERE(@SubsidaryID IS NULL
              OR Inv_Receipt_h.SubsidiaryID = @SubsidaryID)
             -- AND Inv_Receipt_h.Code IN(1 , 2)
	    AND Inv_Receipt_h.Code IN(SELECT item
               FROM dbo.Split(@transStr, ','))
        AND (@StatusId IS NULL
		OR
		  Inv_Receipt_h.PurchaseOrderStatusId=@StatusId
		OR
		Inv_Receipt_h.PurchaseRequestStatusId=@StatusId
		)
        AND (@FromDate IS NULL
             OR CAST(Inv_Receipt_h.Entry_Date AS DATE) >= @FromDate)
        AND (@ToDate IS NULL
             OR CAST(Inv_Receipt_h.Entry_Date AS DATE) <= @ToDate)
        AND (@BrachID IS NULL
             OR inv_Receipt_H.Branch_ID IN(@BrachID))
        AND (@Payment_Type IS NULL
             OR Inv_Receipt_h.Payment_Type = @Payment_Type)
        AND (@CustomerID IS NULL
             OR Inv_Receipt_H.CashCustomerID = @CustomerID
             OR Inv_Receipt_H.Vendor_ID = @CustomerID)
        AND (@CustomerCatID IS NULL
             OR Inv_CashCustomer.CategoryID IN(@CustomerCatID)
        OR Gl_Accounts.VendorCategoryID IN(@CustomerCatID))
        AND (@FromInvoiceNumber IS NULL
             OR inv_Receipt_H.Entry_No >= @FromInvoiceNumber)
        AND (@ToInvoiceNumber IS NULL
             OR inv_Receipt_H.Entry_No <= @ToInvoiceNumber)
        AND (@ItemCategoryID IS NULL
             OR Inv_Receipt_h.ID IN
        (
         SELECT Parent_ID
         FROM
              Inv_Receipt_d
         LEFT JOIN
         Inv_Items_Categories ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
         WHERE Inv_Receipt_d.Parent_ID = Inv_Receipt_H.ID
               AND Inv_Items_Categories.ItemCategory_ID IN(@ItemCategoryID)
        ))
        AND (@IsFree IS NULL
             OR Inv_Receipt_H.ID IN
        (
         SELECT Parent_ID
         FROM Inv_Receipt_D D
         WHERE D.Parent_ID = Inv_Receipt_h.ID
              --AND ((@IsFree is null or @IsFree =0 and D.Total > 0) or (   @IsFree =1 and D.Total = 0))
			   AND ((@IsFree is null or @IsFree =0) or (@IsFree =1 and D.Total = 0))
        ))
        AND (@ItemId IS NULL
             OR Inv_Receipt_H.ID IN
        (
         SELECT Parent_ID
         FROM Inv_Receipt_D D
         WHERE D.Parent_ID = Inv_Receipt_h.ID
               AND D.Item_ID = @ItemId
        ))

        ORDER BY Inv_Receipt_h.Entry_Date
               , Inv_Receipt_h.Entry_No
    END
GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Purchase_Group_By_Item_Category]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Report_INV_Purchase_Group_By_Item_Category] @FromDate          DATE = NULL
                                                     , @ToDate            DATE = NULL
                                                     , @BrachID           INT  = NULL
                                                     , @CustomerID        INT  = NULL
                                                     , @CustomerCatID     INT  = NULL
                                                     , @FromInvoiceNumber INT  = NULL
                                                     , @ToInvoiceNumber   INT  = NULL
                                                     , @ItemCategoryID    INT  = NULL
                                                     , @SubsidaryID       INT  = NULL
                                                     , @Payment_Type      INT  = NULL
                                                     , @IsFree            INT  = NULL
                                                     , @ItemId            INT  = NULL
AS
    BEGIN

        SELECT Item_Category = Inv_ProductCategories.Name
             , C_S_Sum_Qty = SUM(CASE
                                     WHEN H.CODE IN(1)
                                     THEN D.qty
                                     ELSE 0
                                 END)
             , C_R_Sum_Qty = SUM(CASE
                                     WHEN H.CODE IN(2)
                                     THEN D.qty
                                     ELSE 0
                                 END)
             , Net_QTY = SUM(CASE
                                 WHEN H.CODE IN(1)
                                 THEN D.qty
                                 ELSE 0
                             END) - SUM(CASE
                                            WHEN H.CODE IN(2)
                                            THEN D.qty
                                            ELSE 0
                                        END)
             , C_S_Sum_Price = SUM(CASE
                                       WHEN H.CODE IN(1)
                                       THEN(D.Total / ISNULL(H.Currency_Rate , 1)) - (D.H_Discount_Value / ISNULL(H.Currency_Rate , 1))
                                       ELSE 0
                                   END)
             , C_R_Sum_Price = SUM(CASE
                                       WHEN H.CODE IN(2)
                                       THEN(D.Total / ISNULL(H.Currency_Rate , 1)) - (D.H_Discount_Value / ISNULL(H.Currency_Rate , 1))
                                       ELSE 0
                                   END)
             , NetSale = SUM(CASE
                                 WHEN H.CODE IN(1)
                                 THEN(D.Total / ISNULL(H.Currency_Rate , 1)) - (D.H_Discount_Value / ISNULL(H.Currency_Rate , 1))
                                 ELSE 0
                             END) - SUM(CASE
                                            WHEN H.CODE IN(2)
                                            THEN(D.Total / ISNULL(H.Currency_Rate , 1)) - (D.H_Discount_Value / ISNULL(H.Currency_Rate , 1))
                                            ELSE 0
                                        END)
        FROM
             Inv_Receipt_H H
        LEFT JOIN
        Inv_Receipt_d D ON D.Parent_ID = H.ID
        LEFT JOIN
        Inv_Items I ON I.ID = D.Item_ID
        LEFT JOIN
        Inv_CashCustomer ON Inv_CashCustomer.id = H.CashCustomerID
        LEFT JOIN
        GL_Accounts ON GL_Accounts.AccountID = H.Vendor_ID
        LEFT JOIN
        Inv_Unit ON Inv_Unit.ID = I.Selling_UnitId
        LEFT JOIN
        Inv_Items_Units ON Inv_Items_Units.Item_ID = I.ID
                           AND Inv_Items_Units.Unit_id = Inv_Unit.ID
        LEFT JOIN
        Inv_Items_Categories ON Inv_Items_Categories.Item_ID = I.ID
        LEFT JOIN
        Inv_ProductCategories ON Inv_ProductCategories.ID = Inv_Items_Categories.ItemCategory_ID
        WHERE(@SubsidaryID IS NULL
              OR H.SubsidiaryID = @SubsidaryID)
             AND D.Item_ID IS NOT NULL
             AND H.Code IN(1 , 2)
        AND D.FinishedProductID IS NULL
        AND (@FromDate IS NULL
             OR CAST(H.Entry_Date AS DATE) >= @FromDate)
        AND (@ToDate IS NULL
             OR CAST(H.Entry_Date AS DATE) <= @ToDate)
        AND (@Payment_Type IS NULL
             OR H.Payment_Type = @Payment_Type)
        AND (@BrachID IS NULL
             OR H.Branch_ID IN(@BrachID))
        AND (@CustomerID IS NULL
             OR H.CashCustomerID = @CustomerID
             OR H.Vendor_ID = @CustomerID)
        AND (@CustomerCatID IS NULL
             OR Inv_CashCustomer.CategoryID IN(@CustomerCatID)
        OR Gl_Accounts.VendorCategoryID IN(@CustomerCatID))
        AND (@FromInvoiceNumber IS NULL
             OR H.Entry_No >= @FromInvoiceNumber)
        AND (@ToInvoiceNumber IS NULL
             OR H.Entry_No <= @ToInvoiceNumber)
        AND (@ItemCategoryID IS NULL
             OR Inv_Items_Categories.ItemCategory_ID IN(@ItemCategoryID))
     -- AND ((@IsFree is null or @IsFree =0 and D.Total > 0) or (   @IsFree =1 and D.Total = 0))
	  AND ((@IsFree is null or @IsFree =0) or (@IsFree =1 and D.Total = 0))
             AND (@ItemId IS NULL
                  OR D.Item_ID = @ItemId)
        GROUP BY Inv_ProductCategories.Name
        ORDER BY Inv_ProductCategories.Name
    END
GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Purchase_Group_By_Items]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Report_INV_Purchase_Group_By_Items] @FromDate          DATE = NULL
                                             , @ToDate            DATE = NULL
                                             , @BrachID           INT  = NULL
                                             , @CustomerID        INT  = NULL
                                             , @CustomerCatID     INT  = NULL
                                             , @FromInvoiceNumber INT  = NULL
                                             , @ToInvoiceNumber   INT  = NULL
                                             , @ItemCategoryID    INT  = NULL
                                             , @SubsidaryID       INT  = NULL
                                             , @Payment_Type      INT  = NULL
                                             , @IsFree            INT  = NULL
                                             , @ItemId            INT  = NULL
AS
    BEGIN

        SELECT I_Code = I.Code
             , I_Name = I.Name
             , I_Name_Ar = I.Name_AR
             , I_Unit = Inv_Unit.Name
             , I_Unit_Ar = Inv_Unit.Name_AR
             , Inv_Items_Units.Conv I_Conv
             , C_S_Sum_Qty = SUM(CASE
                                     WHEN H.CODE IN(1)
                                     THEN D.qty
                                     ELSE 0
                                 END)
             , C_R_Sum_Qty = SUM(CASE
                                     WHEN H.CODE IN(2)
                                     THEN D.qty
                                     ELSE 0
                                 END)
             , Net_QTY = SUM(CASE
                                 WHEN H.CODE IN(1)
                                 THEN D.qty
                                 ELSE 0
                             END) - SUM(CASE
                                            WHEN H.CODE IN(2)
                                            THEN D.qty
                                            ELSE 0
                                        END)
             , C_S_Sum_Price = SUM(CASE
                                       WHEN H.CODE IN(1)
                                       THEN(D.Total / ISNULL(H.Currency_Rate , 1)) - (D.H_Discount_Value / ISNULL(H.Currency_Rate , 1))
                                       ELSE 0
                                   END)
             , C_R_Sum_Price = SUM(CASE
                                       WHEN H.CODE IN(2)
                                       THEN(D.Total / ISNULL(H.Currency_Rate , 1)) - (D.H_Discount_Value / ISNULL(H.Currency_Rate , 1))
                                       ELSE 0
                                   END)
             , NetSale = SUM(CASE
                                 WHEN H.CODE IN(1)
                                 THEN(D.Total / ISNULL(H.Currency_Rate , 1)) - (D.H_Discount_Value / ISNULL(H.Currency_Rate , 1))
                                 ELSE 0
                             END) - SUM(CASE
                                            WHEN H.CODE IN(2)
                                            THEN(D.Total / ISNULL(H.Currency_Rate , 1)) - (D.H_Discount_Value / ISNULL(H.Currency_Rate , 1))
                                            ELSE 0
                                        END)
        FROM
             Inv_Receipt_H H
        LEFT JOIN
        Inv_Receipt_d D ON D.Parent_ID = H.ID
        LEFT JOIN
        Inv_Items I ON I.ID = D.Item_ID
        LEFT JOIN
        Inv_CashCustomer ON Inv_CashCustomer.id = H.CashCustomerID
        LEFT JOIN
        GL_Accounts ON GL_Accounts.AccountID = H.Vendor_ID
        LEFT JOIN
        Inv_Unit ON Inv_Unit.ID = I.Selling_UnitId
        LEFT JOIN
        Inv_Items_Units ON Inv_Items_Units.Item_ID = I.ID
                           AND Inv_Items_Units.Unit_id = Inv_Unit.ID
        WHERE(@SubsidaryID IS NULL
              OR H.SubsidiaryID = @SubsidaryID)
             AND D.Item_ID IS NOT NULL
             AND D.FinishedProductID IS NULL
             AND H.Code IN(1 , 2)
        AND (@FromDate IS NULL
             OR CAST(H.Entry_Date AS DATE) >= @FromDate)
        AND (@ToDate IS NULL
             OR CAST(H.Entry_Date AS DATE) <= @ToDate)
        AND (@BrachID IS NULL
             OR H.Branch_ID IN(@BrachID))
        AND (@Payment_Type IS NULL
             OR H.Payment_Type = @Payment_Type)
        AND (@CustomerID IS NULL
             OR H.CashCustomerID = @CustomerID
             OR H.Vendor_ID = @CustomerID)
        AND (@CustomerCatID IS NULL
             OR Inv_CashCustomer.CategoryID IN(@CustomerCatID)
        OR Gl_Accounts.VendorCategoryID IN(@CustomerCatID))
             AND (@FromInvoiceNumber IS NULL
                  OR H.Entry_No >= @FromInvoiceNumber)
             AND (@ToInvoiceNumber IS NULL
                  OR H.Entry_No <= @ToInvoiceNumber)
             AND (@ItemCategoryID IS NULL
                  OR H.ID IN
        (
         SELECT Parent_ID
         FROM
              Inv_Receipt_d
         LEFT JOIN
         Inv_Items_Categories ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
         WHERE D.Parent_ID = H.ID
               AND Inv_Items_Categories.ItemCategory_ID IN(@ItemCategoryID)
        ))
     --AND ((@IsFree is null or @IsFree =0 and D.Total > 0) or (   @IsFree =1 and D.Total = 0))
	  AND ((@IsFree is null or @IsFree =0) or (@IsFree =1 and D.Total = 0))
             AND (@ItemId IS NULL
                  OR D.Item_ID = @ItemId)
        GROUP BY I.Name
               , I.Name_Ar
               , I.Code
               , Inv_Unit.Name
               , Inv_Unit.Name_Ar
               , Inv_Items_Units.Conv
        ORDER BY I.Name
    END
GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Purchase_Group_By_Items_ABC]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Report_INV_Purchase_Group_By_Items_ABC] @FromDate          DATE = '2019-03-25'
                                             , @ToDate            DATE = '2020-4-08'
                                             , @BrachID           INT  = NULL
                                             , @CustomerID        INT  = NULL
                                             , @CustomerCatID     INT  = NULL
                                             , @FromInvoiceNumber INT  = NULL
                                             , @ToInvoiceNumber   INT  = NULL
                                             , @ItemCategoryID    INT  = NULL
                                             , @SubsidaryID       INT  = 1
                                             , @Payment_Type      INT  = NULL
                                             , @IsFree            INT  = NULL
                                             , @ItemId            INT  = NULL
                                             


AS
    BEGIN

	Declare @A float = 20 ,@B Float = 30 ,@C Float = 50 ,@AValue float = 0 ,@BValue Float = 0 ,@CValue Float = 0 ,@SumSales  Float = 0

	--Select @A =A_Perc,@B = B_Perc ,@C = C_Perc from  gl_setup
	Set @A = 20 
	Set @B = 30 
	Set @C = 50
        SELECT  I.ID
		,I_Code = I.Code
             , I_Name = I.Name
             , I_Name_Ar = I.Name_AR
             , I_Unit = Inv_Unit.Name
             , I_Unit_Ar = Inv_Unit.Name_AR
             , Inv_Items_Units.Conv I_Conv 
             , C_S_Sum_Qty = SUM(CASE
                                     WHEN H.CODE IN(1)
                                     THEN D.qty
                                     ELSE 0
                                 END)
             , C_R_Sum_Qty = SUM(CASE
                                     WHEN H.CODE IN(2)
                                     THEN D.qty
                                     ELSE 0
                                 END)
             , Net_QTY = SUM(CASE
                                 WHEN H.CODE IN(1)
                                 THEN D.qty
                                 ELSE 0
                             END) - SUM(CASE
                                            WHEN H.CODE IN(2)
                                            THEN D.qty
                                            ELSE 0
                                        END)
             , C_S_Sum_Price = SUM(CASE
                                       WHEN H.CODE IN(1)
                                       THEN(D.Total / ISNULL(H.Currency_Rate , 1)) - (D.H_Discount_Value / ISNULL(H.Currency_Rate , 1))
                                       ELSE 0
                                   END)
             , C_R_Sum_Price = SUM(CASE
                                       WHEN H.CODE IN(2)
                                       THEN(D.Total / ISNULL(H.Currency_Rate , 1)) - (D.H_Discount_Value / ISNULL(H.Currency_Rate , 1))
                                       ELSE 0
                                   END)
             , NetSale = SUM(CASE
                                 WHEN H.CODE IN(1)
                                 THEN(D.Total / ISNULL(H.Currency_Rate , 1)) - (D.H_Discount_Value / ISNULL(H.Currency_Rate , 1))
                                 ELSE 0
                             END) - SUM(CASE
                                            WHEN H.CODE IN(2)
                                            THEN(D.Total / ISNULL(H.Currency_Rate , 1)) - (D.H_Discount_Value / ISNULL(H.Currency_Rate , 1))
                                            ELSE 0
                                        END)
		INto #TBL_ReportData
        FROM
             Inv_Receipt_H H
        LEFT JOIN
        Inv_Receipt_d D ON D.Parent_ID = H.ID
        LEFT JOIN
        Inv_Items I ON I.ID = D.Item_ID
        LEFT JOIN
        Inv_CashCustomer ON Inv_CashCustomer.id = H.CashCustomerID
        LEFT JOIN
        GL_Accounts ON GL_Accounts.AccountID = H.Vendor_ID
        LEFT JOIN
        Inv_Unit ON Inv_Unit.ID = I.Selling_UnitId
        LEFT JOIN
        Inv_Items_Units ON Inv_Items_Units.Item_ID = I.ID
                           AND Inv_Items_Units.Unit_id = Inv_Unit.ID
        WHERE(@SubsidaryID IS NULL
              OR H.SubsidiaryID = @SubsidaryID)
             AND D.Item_ID IS NOT NULL
             AND D.FinishedProductID IS NULL
             AND H.Code IN(1 , 2)
        AND (@FromDate IS NULL
             OR CAST(H.Entry_Date AS DATE) >= @FromDate)
        AND (@ToDate IS NULL
             OR CAST(H.Entry_Date AS DATE) <= @ToDate)
        AND (@BrachID IS NULL
             OR H.Branch_ID IN(@BrachID))
        AND (@Payment_Type IS NULL
             OR H.Payment_Type = @Payment_Type)
        AND (@CustomerID IS NULL
             OR H.CashCustomerID = @CustomerID
             OR H.Vendor_ID = @CustomerID)
        AND (@CustomerCatID IS NULL
             OR Inv_CashCustomer.CategoryID IN(@CustomerCatID)
        OR Gl_Accounts.VendorCategoryID IN(@CustomerCatID))
             AND (@FromInvoiceNumber IS NULL
                  OR H.Entry_No >= @FromInvoiceNumber)
             AND (@ToInvoiceNumber IS NULL
                  OR H.Entry_No <= @ToInvoiceNumber)
             AND (@ItemCategoryID IS NULL
                  OR H.ID IN
        (
         SELECT Parent_ID
         FROM
              Inv_Receipt_d
         LEFT JOIN
         Inv_Items_Categories ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
         WHERE D.Parent_ID = H.ID
               AND Inv_Items_Categories.ItemCategory_ID IN(@ItemCategoryID)
        ))
      AND ((@IsFree is null or @IsFree =0 and D.Total > 0) or (   @IsFree =1 and D.Total = 0))
             AND (@ItemId IS NULL
                  OR D.Item_ID = @ItemId)
        GROUP BY I.Name,I.ID
               , I.Name_Ar
               , I.Code
               , Inv_Unit.Name
               , Inv_Unit.Name_Ar
               , Inv_Items_Units.Conv
        ORDER BY I.Name
		Select * ,SUM(#TBL_ReportData.NetSale) OVER(ORDER BY ID ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS Acumlated	
		Into #TBL_Acumlated
		from #TBL_ReportData order by NetSale ASC
		Select @SumSales = Sum(NetSale) From #TBL_ReportData 
		
		Select  @AValue =  @SumSales * @A / 100 ,@BValue =  @SumSales * @B / 100 ,@CValue = @SumSales * @C / 100  From #TBL_ReportData
		Select *, ABC = (case when (Acumlated <= @AValue) Then 'A' when (Acumlated > @AValue  AND  Acumlated <= @BValue ) Then 'B' when Acumlated > @BValue   Then 'C' END) 
		From #TBL_Acumlated    --where Acumlated > 65314.0295686836  AND  Acumlated <= 97971.0443530254 
		--Select  @AValue  ,@BValue  ,@CValue  
    END

GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Purchase_Return_Group_By_Items]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 
CREATE PROC [dbo].[Report_INV_Purchase_Return_Group_By_Items] @FromDate DATE ='2020-01-01'
, @ToDate DATE ='2020-04-04'
, @BrachID INT = NULL
, @CustomerID INT = NULL
, @CashCustomerID INT = NULL
, @CustomerCatID INT = NULL
, @FromInvoiceNumber INT = NULL
, @ToInvoiceNumber INT = NULL
, @ItemCategoryID NVARCHAR(MAX) = NULL
, @SubsidaryID INT = NULL
, @ItemId INT = NULL
, @Item_vendor INT = NULL
, @SalesManId INT = NULL
, @FromCustomerActualDeliverDate DATE = NULL
, @ToCustomerActualDeliverDate DATE = NULL
, @FromTime TIME = NULL
, @ToTime TIME = NULL
, @CustomerStatusID INT = NULL
, @Payment_Type INT = NULL
, @User_Role_Sale INT = NULL
,@userId int =157
,@TransactionType nvarchar(max)=null
AS
BEGIN

    IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@ItemCategoryID, ',')
            WHERE Item = -1
        )
        SET @ItemCategoryID = NULL
		 IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@TransactionType, ',')
            WHERE Item = -1
        )
        SET @TransactionType = NULL

    if @FromTime is null set @FromTime = ' 00:00:00';
    if @ToTime is null set @ToTime = ' 23:59:59';

    declare
        @fromDateTime DATETIME = null
        , @toDateTime DATETIME = null

    set @fromDateTime = cast(@FromDate as datetime) + cast(@FromTime as datetime)
    set @toDateTime = cast(@ToDate as datetime) + cast(@ToTime as datetime)


    SELECT I_Code                 = I.Code
         , I_Name                 = I.Name
         , I_Name_Ar              = I.Name_AR
         , I_Unit_Ar              = Inv_Unit.Name_AR
         , I_Unit                 = Inv_Unit.Name
         ,                          COUNT(DISTINCT H.ID) Count_All
         ,                          SUM(H.DeliveryFees)  inv_Receipt_H_DeliveryFees
         , C_S_Sum_Qty            = SUM(CASE
                                            WHEN H.CODE = 1
                                                THEN D.qty*d.Final_conv
                                            ELSE 0
        END)
         , C_R_Sum_Qty            = SUM(CASE
                                            WHEN H.CODE =2
                                                THEN D.qty*d.Final_conv
                                            ELSE 0
        END)
         , Net_QTY                = SUM(CASE
                                            WHEN H.CODE = 1
                                                THEN D.qty*d.Final_conv
                                            ELSE 0
        END) - SUM(CASE
                       WHEN H.CODE IN (53, 54)
                           THEN D.qty*d.Final_conv
                       ELSE 0
        END)
         , C_S_Sum_Price          = SUM(CASE
                                            WHEN H.CODE = 1
                                                THEN (D.Total / ISNULL(H.Currency_Rate, 1))
                                            ELSE 0
        END)
         , C_R_Sum_Price          = SUM(CASE
                                            WHEN H.CODE = 2
                                                THEN (D.Total / ISNULL(H.Currency_Rate, 1))
                                            ELSE 0
        END)
         , NetSale                = SUM(CASE
                                            WHEN H.CODE = 1
                                                THEN (D.Total / ISNULL(H.Currency_Rate, 1))
                                            ELSE 0
        END) - SUM(CASE
                       WHEN H.CODE = 2 
                           THEN (D.Total / ISNULL(H.Currency_Rate, 1))
                       ELSE 0
        END)
         , D_H_Discount_Value     = SUM(CASE
                                            WHEN H.CODE = 1
                                                THEN D.H_Discount_Value / ISNULL(H.Currency_Rate, 1)
                                            ELSE 0
        END)
         , C_R_Sum_Discount_Value = SUM(CASE
                                            WHEN H.CODE  = 2
                                                THEN D.Price / ISNULL(H.Currency_Rate, 1)
                                            ELSE 0
        END)
         , C_S_Sum_Total          = SUM(CASE
                                            WHEN H.CODE IN (1)
                                                THEN D.Total
                                            ELSE 0
        END)
         , C_R_Sum_Total          = SUM(CASE
                                            WHEN H.CODE IN (2)
                                                THEN D.Total
                                            ELSE 0
        END)
         , Sales_Cost             = SUM(CASE
                                            WHEN H.CODE = 1
                                                THEN d.AvgCost * d.QTY *
                                                     d.final_Conv
                                            ELSE 0
        END)
         , Returns_Cost           = SUM(CASE
                                            WHEN H.CODE = 2
                                                THEN d.AvgCost * d.QTY *
                                                     d.final_Conv
                                            ELSE 0
        END)
    FROM Inv_Receipt_H H
             LEFT JOIN Inv_Receipt_d D
                       ON D.Parent_ID = H.ID
             LEFT JOIN Inv_Items I
                       ON I.ID = D.Item_ID
             LEFT JOIN Inv_CashCustomer
                       ON Inv_CashCustomer.id = H.CashCustomerID
             LEFT JOIN GL_Accounts
                       ON GL_Accounts.AccountID = H.Vendor_ID
             LEFT JOIN Inv_Unit
                       ON Inv_Unit.ID = I.Selling_UnitId
           
    WHERE D.Item_ID IS NOT NULL
      AND (@SubsidaryID IS NULL
        OR H.SubsidiaryID = @SubsidaryID)
      AND (ISNULL(H.Is_Canceled, 0) <> 1)
      AND (ISNULL(H.IsHolded, 0) <> 1)
      AND (@User_Role_Sale IS NULL
        OR D.SalesManId IN (@User_Role_Sale))
      AND (@ItemId IS NULL
        OR D.Item_ID = @ItemId)
      AND (@Item_vendor IS NULL
        OR D.Item_ID IN
           (
               SELECT Inv_Items_Vendors.ItemID
               FROM Inv_Items_Vendors
               WHERE (@item_vendor is null or Inv_Items_Vendors.VendorID = @item_vendor)
           ))

      AND D.FinishedProductID IS NULL
      AND (@SalesManId IS NULL
        OR H.Empoyee_ID = @SalesManId)
      AND H.Code IN (1,2)
      AND (@FromDate IS NULL
        OR CAST(H.Entry_Date AS DATETIME) >= @fromDateTime)
      AND (@ToDate IS NULL
        OR CAST(H.Entry_Date AS DATETIME) <= @toDateTime)
      AND (@BrachID IS NULL
        OR H.Branch_ID IN (@BrachID))
		and H.Branch_ID in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId)
      AND (@CustomerID IS NULL
        OR H.Vendor_ID = @CustomerID)
      AND (@CashCustomerID IS NULL
        OR H.CashCustomerID = @CashCustomerID)
      AND (@CustomerCatID IS NULL
        OR Inv_CashCustomer.CategoryID IN (@CustomerCatID)
        OR Gl_Accounts.VendorCategoryID IN (@CustomerCatID))
      AND (@FromInvoiceNumber IS NULL
        OR H.Entry_No >= @FromInvoiceNumber)
      AND (@ToInvoiceNumber IS NULL
        OR H.Entry_No <= @ToInvoiceNumber)
      AND (@ItemCategoryID IS NULL
        OR D.Item_ID IN
           (
               SELECT Inv_Receipt_d.Item_ID
               FROM Inv_Receipt_d
                        LEFT JOIN Inv_Items_Categories
                                  ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
               WHERE Inv_Receipt_d.Parent_ID = H.ID
                 AND Inv_Items_Categories.ItemCategory_ID IN
                     (
                         SELECT item
                         FROM dbo.Split(@ItemCategoryID, ',')
                     )
           ))
		    AND (@TransactionType IS NULL or @TransactionType='-1'
        OR H.Code IN
           (
               SELECT item
               FROM dbo.Split(@TransactionType, ',')
           ))
      AND (@FromTime IS NULL
        OR CAST(H.Entry_Date AS TIME) >= @FromTime)
      AND (@ToTime IS NULL
        OR CAST(H.Entry_Date AS TIME) <= @ToTime)
      AND (@FromCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) >= @FromCustomerActualDeliverDate)
      AND (@ToCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) <= @ToCustomerActualDeliverDate)
      AND (@CustomerStatusID IS NULL
        OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
      AND (@Payment_Type IS NULL
        OR H.Payment_Type = @Payment_Type)
    GROUP BY I.Code
           , I.Name
           , I.Name_AR
           , Inv_Unit.Name_AR
           , I.ID
           , Inv_Unit.Name
    ORDER BY I.Name
END

GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Sales_Amounts_Discharged_From_Sales_Invoices]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Report_INV_Sales_Amounts_Discharged_From_Sales_Invoices] @SubsidaryID              INT          = NULL
                                                                  , @FromDate                 DATE         = NULL
                                                                  , @ToDate                   DATE         = NULL
                                                                  , @BrachID                  INT          = NULL
                                                                  , @VoucherType              INT          = NULL -- Cash / Credit
                                                                  , @CustomerID               INT          = NULL
                                                                  , @CashCustomerID           INT          = NULL
                                                                  , @Quantity_Disposal_Option INT          = 3
                                                                  , @ReportType               NVARCHAR(50) = 'voucher' -- voucher / item

/*
	-- كل الفواتير الغير مكتملة الصرف
	-- الفواتير الغير منصرفة كمياتها كلياً
	-- الفواتير المنصرفة كمياتها جزئياً	
	-- الفواتير المنصرفة كمياتها كلياً
	-- كل الفواتير الغير مكتملة الصرف ...
*/
AS
    BEGIN
        -- Get Voucher Cash / Credit
        SELECT  
        -- Inv_Receipt_h
        H.ID                                              H_ID
      , H.Entry_No                                        H_Entry_No
      , H.Entry_Date                                      H_Entry_Date
      , mstr_Branch.ID                                    mstr_Branch_ID
      , mstr_Branch.Code                                  mstr_Branch_Code
      , mstr_Branch.Name                                  mstr_Branch_Name
      , mstr_Branch.Name_Ar                               mstr_Branch_Name_Ar
      , Inv_Transaction_Codes.Code                        Inv_Transaction_Codes_Code
      , Inv_Transaction_Codes.Name                        Inv_Transaction_Codes_Name
      , Inv_Transaction_Codes.Name_Ar                     Inv_Transaction_Codes_Name_Ar
      , GL_Accounts.Name                                  GL_Accounts_Name
      , GL_Accounts.Name_Ar                               GL_Accounts_Name_AR
      , H.NetValue                                        H_NetValue
        --Inv_Receipt_d
      , Inv_Store.ID                                      Inv_Store_ID
      , Inv_Store.Code                                    Inv_Store_Code
      , Inv_Items.Code                                    Inv_Items_Code
      , Inv_Items.ID                                      Inv_Items_ID
      , Inv_Items.Name                                    Inv_Items_Name
      , Inv_Items.Name_Ar                                 Inv_Items_Name_Ar
      , Inv_Unit.Name                                     Inv_Unit_Name
      , Inv_Unit.Name_AR                                  Inv_Unit_Name_Ar
      , D.Conv                                            D_Conv
      , D.Final_conv                                      D_Final_conv
      , SUM(ISNULL(D.Qty , 0))                            D_Qty
      , SUM(ISNULL(D.Qty , 0) * ISNULL(D.Final_conv , 1)) D_Qty_D_Final_conv
      , COUNT(1) OVER(PARTITION BY H.ID)                  H_Count
        INTO #Context
        FROM Inv_Receipt_h H
             LEFT JOIN mstr_Branch
             ON H.Branch_ID = mstr_Branch.ID
             LEFT JOIN Inv_Transaction_Codes
             ON H.Code = Inv_Transaction_Codes.Code
             LEFT JOIN Gl_Accounts
             ON H.Vendor_ID = GL_Accounts.AccountID
             -- Inv_Receipt_d
             LEFT JOIN Inv_Receipt_d D
             ON H.id = D.Parent_ID
             LEFT JOIN Inv_Store
             ON D.Store_ID = Inv_Store.ID
             LEFT JOIN Inv_Items
             ON D.Item_ID = Inv_Items.ID
             LEFT JOIN Inv_Unit
             ON D.Unit_ID = Inv_Unit.ID
        WHERE(Inv_Transaction_Codes.Code IN(51 , 52))
             --     AND EXISTS
             --(
             -- SELECT 1
             -- FROM Inv_ReceiptReceipts R
             -- WHERE R.ReceiptID = H.ID
             --)
             AND (@SubsidaryID IS NULL
                  OR H.SubsidiaryID = @SubsidaryID)
             AND (@FromDate IS NULL
                  OR CAST(H.Entry_Date AS DATE) >= @FromDate)
             AND (@ToDate IS NULL
                  OR CAST(H.Entry_Date AS DATE) <= @ToDate)
             AND (@BrachID IS NULL
                  OR H.Branch_ID = @BrachID)
             AND (@VoucherType IS NULL
                  OR (@VoucherType = 1
                      AND H.Code = 51)
                  OR (@VoucherType = 2
                      AND H.Code = 52))
             AND (@CashCustomerID IS NULL
                  OR H.CashCustomerID = @CashCustomerID)
             AND (@CustomerID IS NULL
                  OR (H.Vendor_ID = @CustomerID)
                  OR (H.CashCustomerID = @CustomerID))
        GROUP BY H.ID
               , H.Entry_No
               , H.Entry_Date
               , mstr_Branch.Code
               , mstr_Branch.ID
               , mstr_Branch.Name
               , mstr_Branch.Name_Ar
               , Inv_Transaction_Codes.Code
               , Inv_Transaction_Codes.Name
               , Inv_Transaction_Codes.Name_Ar
               , GL_Accounts.Name
               , GL_Accounts.Name_Ar
               , H.NetValue                     
                 --Inv_Receipt_d
               , Inv_Store.ID
               , Inv_Store.Code
               , Inv_Items.Code
               , Inv_Items.ID
               , Inv_Items.Name
               , Inv_Items.Name_Ar
               , Inv_Unit.Name
               , Inv_Unit.Name_AR
               , D.Conv
               , D.Final_conv
        ORDER BY H.Entry_No

        SELECT  
        -- Inv_Receipt_h
        R.ParentReceiptID                            R_ParentReceiptID
      , R.ReceiptID                                  R_ReceiptID
      , H.Code                                       R_H_Code
      , H.Entry_Date                                 R_H_Entry_Date
      , Inv_Transaction_Codes.Name                   R_Inv_Transaction_Codes_Name
      , Inv_Transaction_Codes.Name_Ar                R_Inv_Transaction_Codes_Name_Ar
      , H.Entry_No                                   R_H_Entry_No
      , H.Branch_ID                                  R_H_Branch_ID
      , mstr_Branch.Name                             R_mstr_Branch_Name
      , mstr_Branch.Name_AR                          R_mstr_Branch_Name_AR
      , D.Store_ID                                   R_D_Store_ID
      , D.Item_ID                                    R_D_Item_ID
      , D.Final_conv                                 R_D_Final_conv
      , D.Qty                                        R_D_Qty
      , ISNULL(D.Qty , 0) * ISNULL(D.Final_conv , 1) R_D_Qty_D_Final_conv
      , COUNT(1) OVER(PARTITION BY R.ReceiptID)      R_Count
        INTO #Inv_ReceiptReceipts
        FROM Inv_ReceiptReceipts R
             LEFT JOIN Inv_Receipt_h H
             ON H.ID = R.ParentReceiptID
             LEFT JOIN mstr_Branch
             ON H.Branch_ID = mstr_Branch.ID
             LEFT JOIN Inv_Transaction_Codes
             ON H.Code = Inv_Transaction_Codes.Code 
             -- Inv_Receipt_d
             LEFT JOIN Inv_Receipt_d D
             ON H.id = D.Parent_ID
        WHERE(H.Code IN(60 , 63 , 53 , 54))
        ORDER BY H.Entry_No

        -- Get Code = 60 = سند الصرف
        SELECT *
        INTO #Inv_ReceiptReceipts_60
        FROM #Inv_ReceiptReceipts
        WHERE R_H_Code = 60
        --Get Code = 63 مرتجع الصرف
        SELECT *
        INTO #Inv_ReceiptReceipts_63
        FROM #Inv_ReceiptReceipts
        WHERE R_H_Code = 63
        --Get Code = 53 مرتجع نقدى
        SELECT *
        INTO #Inv_ReceiptReceipts_53
        FROM #Inv_ReceiptReceipts
        WHERE R_H_Code = 53

        --Get Code = 54 مرتجع آجل
        SELECT *
        INTO #Inv_ReceiptReceipts_54
        FROM #Inv_ReceiptReceipts
        WHERE R_H_Code = 54

        --SELECT *
        --FROM #Context
        --ORDER BY H_ID
        --SELECT *
        --FROM #Inv_ReceiptReceipts
        --ORDER BY R_ReceiptID
        SELECT *
             , (R_D_Qty_D_Final_conv / #Context.D_Conv) Qty_Converted
        INTO #Context_Final
        FROM #Context
             LEFT JOIN #Inv_ReceiptReceipts R
             ON #Context.H_ID = R.R_ReceiptID
                AND #Context.Inv_Items_ID = R.R_D_Item_ID
        WHERE(@Quantity_Disposal_Option IS NULL
              OR (@Quantity_Disposal_Option = 1
                  AND (R.R_ReceiptID IS NULL
                       OR #Context.D_Qty_D_Final_conv > R.R_D_Qty_D_Final_conv))
              OR (@Quantity_Disposal_Option = 2
                  AND R.R_ReceiptID IS NULL)
              OR (@Quantity_Disposal_Option = 3
                  AND (#Context.D_Qty_D_Final_conv > R.R_D_Final_conv
                       OR #Context.H_Count > R.R_Count))
              OR (@Quantity_Disposal_Option = 4
                  AND #Context.D_Qty_D_Final_conv = R.R_D_Final_conv
                  AND #Context.H_Count = R.R_Count))
        --AND #Context.H_ID = 2768
        ORDER BY #Context.H_ID
               , R.R_ParentReceiptID

        --SELECT *
        --FROM #Context
        --WHERE #Context.H_ID = 2768
        --SELECT *
        --FROM #Inv_ReceiptReceipts
        --WHERE #Inv_ReceiptReceipts.R_ReceiptID = 2768
        --SELECT *
        --FROM #Context_Final
        --WHERE H_ID = 2768
        --RETURN
        ----------------Gey Voucher -------------------

        IF(@ReportType = 'voucher')
            BEGIN
                SELECT DISTINCT 
                       H_ID
                     , H_Entry_No
                     , H_Entry_Date
                     , mstr_Branch_ID
                     , mstr_Branch_Code
                     , mstr_Branch_Name
                     , mstr_Branch_Name_Ar
                     , Inv_Transaction_Codes_Code
                     , Inv_Transaction_Codes_Name
                     , Inv_Transaction_Codes_Name_Ar
                     , GL_Accounts_Name
                     , GL_Accounts_Name_Ar
                     , H_NetValue
                     , R_ReceiptID
                     , R_H_Entry_Date
                     , R_H_Code
                     , R_Inv_Transaction_Codes_Name
                     , R_Inv_Transaction_Codes_Name_Ar
                     , R_H_Entry_No
                     , R_H_Branch_ID
                     , R_mstr_Branch_Name
                     , R_mstr_Branch_Name_AR
                FROM #Context_Final
                --WHERE #Context_Final.R_ReceiptID IS NOT NULL
                ORDER BY mstr_Branch_Code
                       , Inv_Transaction_Codes_Code
                       , H_Entry_Date
                       , R_H_Entry_Date
        END
                ----------------Gey Items -------------------
            ELSE
            IF(@ReportType = 'item')
                BEGIN
                    SELECT DISTINCT 
                           H_ID
                         , H_Entry_No
                         , H_Entry_Date
                         , mstr_Branch_ID
                         , mstr_Branch_Code
                         , mstr_Branch_Name
                         , mstr_Branch_Name_Ar
                         , Inv_Transaction_Codes_Code
                         , Inv_Transaction_Codes_Name
                         , Inv_Transaction_Codes_Name_Ar
                         , H_NetValue
                         , Inv_Store_ID
                         , Inv_Store_Code
                         , Inv_Items_Code
                         , Inv_Items_ID
                         , Inv_Items_Name
                         , Inv_Items_Name_Ar
                         , Inv_Unit_Name
                         , Inv_Unit_Name_Ar
                         , ISNULL(D_Conv , 0)                                                                                                                                                                                                                                                          D_Conv
                         , ISNULL(D_Final_conv , 0)                                                                                                                                                                                                                                                    D_Final_conv
                         , ISNULL(D_Qty , 0)                                                                                                                                                                                                                                                           D_Qty
                         , ISNULL(D_Qty_D_Final_conv , 0)                                                                                                                                                                                                                                              D_Qty_D_Final_conv
                           --, ISNULL(Qty_Converted , 0)                                Voucher_Qty_Converted
                         , ISNULL(R_60.R_D_Qty_D_Final_conv / #Context_Final.D_Conv , 0)                                                                                                                                                                                                               R_60_Qty_Converted
                         , ISNULL(R_63.R_D_Qty_D_Final_conv / #Context_Final.D_Conv , 0)                                                                                                                                                                                                               R_61_Qty_Converted
                         , ISNULL(R_53.R_D_Qty_D_Final_conv / #Context_Final.D_Conv , 0) + ISNULL(R_54.R_D_Qty_D_Final_conv / #Context_Final.D_Conv , 0)                                                                                                                                               R_53_Qty_Converted
                         , (D_Qty - (ISNULL(R_53.R_D_Qty_D_Final_conv / #Context_Final.D_Conv , 0) + ISNULL(R_54.R_D_Qty_D_Final_conv / #Context_Final.D_Conv , 0))) - (ISNULL(R_60.R_D_Qty_D_Final_conv / #Context_Final.D_Conv , 0) - ISNULL(R_63.R_D_Qty_D_Final_conv / #Context_Final.D_Conv , 0)) Remain_QTY
                    FROM #Context_Final
                         LEFT JOIN #Inv_ReceiptReceipts_60 R_60
                         ON #Context_Final.H_ID = R_60.R_ReceiptID
                            AND #Context_Final.Inv_Items_ID = R_60.R_D_Item_ID
                         LEFT JOIN #Inv_ReceiptReceipts_63 R_63
                         ON #Context_Final.H_ID = R_63.R_ReceiptID
                            AND #Context_Final.Inv_Items_ID = R_63.R_D_Item_ID
                         LEFT JOIN #Inv_ReceiptReceipts_53 R_53
                         ON #Context_Final.H_ID = R_53.R_ReceiptID
                            AND #Context_Final.Inv_Items_ID = R_53.R_D_Item_ID
                         LEFT JOIN #Inv_ReceiptReceipts_54 R_54
                         ON #Context_Final.H_ID = R_54.R_ReceiptID
                            AND #Context_Final.Inv_Items_ID = R_54.R_D_Item_ID
                    ORDER BY mstr_Branch_Code
                           , Inv_Transaction_Codes_Code
                           , H_Entry_Date
            END
    END
GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Sales_GET_H_DeliveryFees]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Report_INV_Sales_GET_H_DeliveryFees] @FromDate                      DATE          = NULL
                                              , @ToDate                        DATE          = NULL
                                              , @BrachID                       INT           = NULL
                                              , @CustomerID                    INT           = NULL
                                              , @CashCustomerID                INT           = NULL
                                              , @CustomerCatID                 INT           = NULL
                                              , @FromInvoiceNumber             INT           = NULL
                                              , @ToInvoiceNumber               INT           = NULL
                                              , @TransactionType               NVARCHAR(MAX) = '51'
                                              , @ItemCategoryID                NVARCHAR(MAX) = NULL
                                              , @SubsidaryID                   INT           = NULL
                                              , @ItemId                        INT           = NULL
                                              , @SalesManId                    INT           = NULL
                                              , @FromCustomerActualDeliverDate DATE          = NULL
                                              , @ToCustomerActualDeliverDate   DATE          = NULL
                                              , @FromTime                      TIME          = NULL
                                              , @ToTime                        TIME          = NULL
                                              , @CustomerStatusID              INT           = NULL
                                              , @Payment_Type                  INT           = NULL
                                              , @User_Role_Sale                INT           = NULL
AS
  
    BEGIN
        IF EXISTS
        (
         SELECT Split.Item
         FROM dbo.Split(@TransactionType , ',')
         WHERE Item = -1
        )
            SET @TransactionType = NULL

        IF EXISTS
        (
         SELECT *
         FROM dbo.Split(@ItemCategoryID , ',')
         WHERE Item = -1
        )
            SET @ItemCategoryID = NULL

        SELECT H.Code,SUM(Isnull(H.DeliveryFees,0)) H_DeliveryFees,SUM(Isnull(H.Discount_Value,0))  H_Discount_Valu
    into #Context
	    FROM
             Inv_Receipt_h H
        LEFT JOIN
        Inv_CashCustomer ON Inv_CashCustomer.id = H.CashCustomerID
        LEFT JOIN
        GL_Accounts ON GL_Accounts.AccountID = H.Vendor_ID
        LEFT JOIN
        Security_Users ON Security_Users.Id = H.Empoyee_ID
        LEFT JOIN
        Inv_Transaction_Codes C ON H.Code = C.Code
        WHERE H.Code IN(51 , 52 , 53 , 54)
        AND (ISNULL(H.Is_Canceled , 0) <> 1)
        AND (ISNULL(H.IsHolded , 0) <> 1)
        AND (H.Id IN
        (
         SELECT Parent_Id
         FROM
              Inv_Receipt_D D
         LEFT JOIN
         Inv_Items ON D.Item_ID = Inv_Items.ID
         WHERE D.Parent_ID = H.ID
               AND (@ItemId IS NULL
                    OR D.Item_ID = @ItemId)
               AND (@ItemCategoryID IS NULL
                    OR Inv_Items.ID IN
         (
         SELECT Parent_ID
         FROM
              Inv_Receipt_d
         LEFT JOIN
         Inv_Items_Categories ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
         WHERE Inv_Receipt_d.Parent_ID = H.ID
               AND Inv_Items_Categories.ItemCategory_ID IN
         (
          SELECT item
          FROM dbo.Split(@ItemCategoryID , ',')
         )
        ))
        ))
        AND (@FromDate IS NULL
             OR CAST(H.Entry_Date AS DATE) >= @FromDate)
        AND (@ToDate IS NULL
             OR CAST(H.Entry_Date AS DATE) <= @ToDate)
        AND (@SubsidaryID IS NULL
             OR H.SubsidiaryID = @SubsidaryID)
        AND (@SalesManId IS NULL
             OR H.Empoyee_ID = @SalesManId)
        AND (@BrachID IS NULL
             OR H.Branch_ID IN(@BrachID))
        AND (@CustomerID IS NULL
             OR H.Vendor_ID = @CustomerID)
        AND (@CashCustomerID IS NULL
             OR H.CashCustomerID = @CashCustomerID)
        AND (@CustomerCatID IS NULL
             OR Inv_CashCustomer.CategoryID IN(@CustomerCatID)
             OR Gl_Accounts.VendorCategoryID IN(@CustomerCatID))
        AND (@FromInvoiceNumber IS NULL
             OR H.Entry_No >= @FromInvoiceNumber)
        AND (@ToInvoiceNumber IS NULL
             OR H.Entry_No <= @ToInvoiceNumber)
        AND (@TransactionType IS NULL
             OR H.Code IN
        (
         SELECT item
         FROM dbo.Split(@TransactionType , ',')
        ))
        AND (@FromTime IS NULL
             OR CAST(H.Entry_Date AS TIME) >= @FromTime)
        AND (@ToTime IS NULL
             OR CAST(H.Entry_Date AS TIME) <= @ToTime)
        AND (@FromCustomerActualDeliverDate IS NULL
             OR CAST(H.CustomerDeliverDate AS DATE) >= @FromCustomerActualDeliverDate)
        AND (@ToCustomerActualDeliverDate IS NULL
             OR CAST(H.CustomerDeliverDate AS DATE) <= @ToCustomerActualDeliverDate)
        AND (@CustomerStatusID IS NULL
             OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
        AND (@Payment_Type IS NULL
             OR H.Payment_Type = @Payment_Type)
	Group by H.Code







	select '1' Sales_Code,
	sum(H_DeliveryFees) Sales_H_DeliveryFees
	,sum(H_Discount_Valu) Sales_H_Discount_Valu
	
	into #Sales
	from #Context
	where Code in (51,52)


	select '1' Return_Code,
	sum(H_DeliveryFees) Return_H_DeliveryFees
	,sum(H_Discount_Valu) Return_H_Discount_Valu
	
	into #Return
	from #Context
	where Code in (53,54)



	select *
	,	case 
			WHEN 
				1 =  ( SELECT 1 FROM dbo.Split(@TransactionType , ',') where @TransactionType  IS NULL)
				THEN 1
			when 
				'53'  IN ( SELECT item FROM dbo.Split(@TransactionType , ','))
				then 1
			when
				 '54'  IN ( SELECT item FROM dbo.Split(@TransactionType , ','))
				then 1 
			else 0 end TransactionType
	,
		case 
			WHEN 
				(
					( 1 =  ( SELECT 1 FROM dbo.Split(@ItemCategoryID , ',') where @ItemCategoryID IS NULL) ) 
				and 
					(1  = ( case  when  @ItemId IS NULL then 1 else 0 end))
				)
				THEN 1
			
			else 0 end	temCategoryID


	 From #Sales
	join #Return
	on #Sales.Sales_Code = #Return.Return_Code
	
	



	
	
    END
GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Sales_Group_By_BatchOrder_Invoices]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Report_INV_Sales_Group_By_BatchOrder_Invoices] @SubsidaryID    INT           = NULL
                                                        , @FromDate       DATE          = NULL
                                                        , @ToDate         DATE          = NULL
                                                        , @BrachID        INT           = NULL
                                                        , @ItemCategoryID NVARCHAR(MAX) = NULL
                                                        , @ItemId         INT           = NULL
                                                        , @CustomerID     INT           = NULL
                                                        , @CashCustomerID INT           = NULL
                                                        , @CustomerCatID  INT           = NULL
AS
    BEGIN

/*
Code	Name		Name_AR	
84	Batch Order    أمر تشغيل
*/

        IF EXISTS
        (
         SELECT *
         FROM dbo.Split(@ItemCategoryID , ',')
         WHERE Item = -1
        )
            SET @ItemCategoryID = NULL

        SELECT H.ID                         H_ID
             , H.Entry_No                   Entry_No
             , H.Entry_Date                 Entry_Date
             , CASE
                   WHEN GL_Accounts.AccountID IS NULL
                   THEN ''
                   ELSE GL_Accounts.VendorCode
               END                          CustomerNo
             , CASE
                   WHEN GL_Accounts.AccountID IS NULL
                   THEN Inv_CashCustomer.Name
                   ELSE GL_Accounts.Name
               END                          CustomerName
             , CASE
                   WHEN GL_Accounts.AccountID IS NULL
                   THEN Inv_CashCustomer.Name_Ar
                   ELSE GL_Accounts.Name_Ar
               END                          CustomerName_Ar
             , ISNULL(H.Value , 0)          H_Value
             , ISNULL(H.Discount_Value , 0) H_Discount_Value
             , ISNULL(H.NetValue , 0)       H_NetValue
             , ISNULL(H.DeliveryFees , 0)   H_DeliveryFees
        
        FROM Inv_Receipt_H H
             LEFT JOIN Inv_CashCustomer
             ON Inv_CashCustomer.id = H.CashCustomerID
             LEFT JOIN GL_Accounts
             ON GL_Accounts.AccountID = H.Vendor_ID
        WHERE H.Code IN(84)
             AND (ISNULL(H.Is_Canceled , 0) <> 1)
             AND (ISNULL(H.IsHolded , 0) <> 1)
             AND EXISTS
        (
         SELECT Parent_ID
         FROM Inv_Receipt_D D
         WHERE D.Parent_ID = H.ID
        )
             AND (@SubsidaryID IS NULL
                  OR H.SubsidiaryID = @SubsidaryID)
             AND (@FromDate IS NULL
                  OR CAST(H.Entry_Date AS DATE) >= @FromDate)
             AND (@ToDate IS NULL
                  OR CAST(H.Entry_Date AS DATE) <= @ToDate)
             AND (@ItemId IS NULL
                  OR H.ID IN
        (
         SELECT Parent_ID
         FROM Inv_Receipt_D
         WHERE Item_ID = @ItemId
        ))
             AND (@BrachID IS NULL
                  OR H.Branch_ID IN(@BrachID))
        AND (@CustomerID IS NULL
             OR H.Vendor_ID = @CustomerID)
        AND (@CashCustomerID IS NULL
             OR H.CashCustomerID = @CashCustomerID)
        AND (@CustomerCatID IS NULL
             OR Inv_CashCustomer.CategoryID IN(@CustomerCatID)
        OR Gl_Accounts.VendorCategoryID IN(@CustomerCatID))
    AND (@ItemCategoryID IS NULL
         OR H.ID IN
        (
         SELECT Parent_ID
         FROM Inv_Receipt_d
              LEFT JOIN Inv_Items_Categories
              ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
         WHERE Inv_Receipt_d.Parent_ID = H.ID
               AND Inv_Items_Categories.ItemCategory_ID IN
         (
          SELECT item
          FROM dbo.Split(@ItemCategoryID , ',')
         )
        ))
        ORDER BY H.Entry_No

    END
GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Sales_Group_By_BatchOrder_Items]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Report_INV_Sales_Group_By_BatchOrder_Items] @SubsidaryID    INT           = NULL
                                                     , @FromDate       DATE          = NULL
                                                     , @ToDate         DATE          = NULL
                                                     , @BrachID        INT           = NULL
                                                     , @ItemCategoryID NVARCHAR(MAX) = NULL
                                                     , @ItemId         INT           = NULL
                                                     , @CustomerID     INT           = NULL
                                                     , @CashCustomerID INT           = NULL
                                                     , @CustomerCatID  INT           = NULL
AS
    BEGIN

/*
Code	Name		Name_AR	
84	Batch Order    أمر تشغيل
*/

        IF EXISTS
        (
         SELECT *
         FROM dbo.Split(@ItemCategoryID , ',')
         WHERE Item = -1
        )
            SET @ItemCategoryID = NULL

        SELECT Inv_Items.Id                                                                           Inv_Items_Id
             , Inv_Items.Code                                                                         Inv_Items_Code
             , Inv_Items.Name                                                                         Inv_Items_Name
             , Inv_Items.Name_Ar                                                                      Inv_Items_Name_Ar
             , Inv_Items.Selling_UnitId                                                               Inv_Items_Selling_UnitId
               --Inv_Unit
             , Inv_Unit.Name                                                                          Inv_Unit_Name
             , Inv_Unit.Name_AR                                                                       Inv_Unit_Name_AR
             , Inv_Items_Units.Conv                                                                   Inv_Items_Units_Conv
               -- QTY
             , (ISNULL(D.Qty , 0) * ISNULL(D.Final_conv , 1)) / ISNULL(Inv_Items_Units.FinalConv , 1) QTY
        INTO #Context
        FROM Inv_Receipt_H H
             LEFT JOIN Inv_CashCustomer
             ON Inv_CashCustomer.id = H.CashCustomerID
             LEFT JOIN GL_Accounts
             ON GL_Accounts.AccountID = H.Vendor_ID
             LEFT JOIN Inv_Receipt_d D
             ON H.ID = D.Parent_ID
             LEFT JOIN Inv_Items
             ON D.Item_ID = Inv_Items.ID
             LEFT JOIN Inv_Unit
             ON Inv_Unit.ID = Inv_Items.Selling_UnitId
             LEFT JOIN dbo.Inv_Items_Units
             ON Inv_Items.Selling_UnitId = Inv_Items_Units.Unit_id
                AND Inv_Items.Id = Inv_Items_Units.Item_ID
        WHERE H.Code IN(84)
             AND (ISNULL(H.Is_Canceled , 0) <> 1)
             AND (ISNULL(H.IsHolded , 0) <> 1)
             AND EXISTS
        (
         SELECT Parent_ID
         FROM Inv_Receipt_D D
         WHERE D.Parent_ID = H.ID
        )
             AND (@SubsidaryID IS NULL
                  OR H.SubsidiaryID = @SubsidaryID)
             AND (@FromDate IS NULL
                  OR CAST(H.Entry_Date AS DATE) >= @FromDate)
             AND (@ToDate IS NULL
                  OR CAST(H.Entry_Date AS DATE) <= @ToDate)
             AND (@ItemId IS NULL
                  OR D.Item_ID IN(@ItemId))
        AND (@BrachID IS NULL
             OR H.Branch_ID IN(@BrachID))
        AND (@CustomerID IS NULL
             OR H.Vendor_ID = @CustomerID)
        AND (@CashCustomerID IS NULL
             OR H.CashCustomerID = @CashCustomerID)
        AND (@CustomerCatID IS NULL
             OR Inv_CashCustomer.CategoryID IN(@CustomerCatID)
    OR Gl_Accounts.VendorCategoryID IN(@CustomerCatID))
     AND (@ItemCategoryID IS NULL
          OR H.ID IN
        (
         SELECT Parent_ID
         FROM Inv_Receipt_d
              LEFT JOIN Inv_Items_Categories
              ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
         WHERE Inv_Receipt_d.Parent_ID = H.ID
               AND Inv_Items_Categories.ItemCategory_ID IN
         (
          SELECT item
          FROM dbo.Split(@ItemCategoryID , ',')
         )
        ))

        SELECT Inv_Items_Id
             , Inv_Items_Code
             , Inv_Items_Name
             , Inv_Items_Name_Ar
             , Inv_Items_Selling_UnitId
             , Inv_Unit_Name
             , Inv_Unit_Name_AR
             , Inv_Items_Units_Conv
             , SUM(QTY) QTU
        FROM #context
        GROUP BY Inv_Items_Id
               , Inv_Items_Code
               , Inv_Items_Name
               , Inv_Items_Name_Ar
               , Inv_Items_Selling_UnitId
               , Inv_Unit_Name
               , Inv_Unit_Name_AR
               , Inv_Items_Units_Conv
    END
GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Sales_Group_By_Components]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Report_INV_Sales_Group_By_Components] @SubsidaryID     INT           = NULL
                                               , @FromDate        DATE          = NULL
                                               , @ToDate          DATE          = NULL
                                               , @TransactionType NVARCHAR(MAX) = NULL
                                               , @ItemCategoryID  INT           = NULL
                                               , @ItemID          INT           = NULL
                                               , @BrachID         INT           = NULL
                                               , @StoreID         INT           = NULL
AS
    BEGIN
        IF EXISTS
        (
         SELECT *
         FROM dbo.Split(@TransactionType , ',')
         WHERE Item = -1
        )
            SET @TransactionType = NULL

        SELECT

        --Inv_Items
        Inv_Items.Code       Inv_Items_Code
      , Inv_Items.Name       Inv_Items_Name
      , Inv_Items.Name_AR    Inv_Items_Name_AR
        --Inv_Unit
      , Inv_Unit.Name        Inv_Unit_Name
      , Inv_Unit.Name_Ar     Inv_Unit_Name_Ar
        --Inv_Store
      , Inv_Store.Code       Inv_Store_Code
        --Item_parent
      , Item_parent.ID       Item_parent_ID
      , Item_parent.Code     Item_parent_Code
      , Item_parent.Name     Item_parent_Name
      , Item_parent.Name_AR  Item_parent_Name_AR
        --Inv_Receipt_d
      , Inv_Items_Units.Conv D_Conv
      , QTY_Out = SUM(CASE
                          WHEN H.CODE IN(51 , 52)
                          THEN(D.Qty * D.Conv) / D.Final_conv
                          ELSE 0
                      END)
      , QTY_In = SUM(CASE
                         WHEN H.CODE IN(53 , 54)
                         THEN(D.Qty * D.Conv) / D.Final_conv
                         ELSE 0
                     END)
      , Net_QTY = SUM(CASE
                          WHEN H.CODE IN(51 , 52)
                          THEN(D.Qty * D.Conv) / D.Final_conv
                          ELSE 0
                      END) - SUM(CASE
                                     WHEN H.CODE IN(53 , 54)
                                     THEN D.Qty * D.Final_conv
                                     ELSE 0
                                 END)
      , Cost = SUM(CASE
                       WHEN H.CODE IN(51 , 52)
                       THEN d.AvgCost * d.QTY * d.Conv
                       ELSE 0
                   END) - SUM(CASE
                                  WHEN H.CODE IN(53 , 54)
                                  THEN d.AvgCost * d.QTY * d.Conv
                                  ELSE 0
                              END)
        FROM
             Inv_Receipt_d D
        LEFT JOIN
        Inv_Receipt_h H ON D.Parent_ID = H.ID
        LEFT JOIN
        Inv_Store ON Inv_Store.ID = D.Store_ID
        LEFT JOIN
        Inv_Items ON D.Item_ID = Inv_Items.ID
        LEFT JOIN
        Inv_Unit ON Inv_Unit.ID = Inv_Items.Inventory_UnitId
        LEFT JOIN
        Inv_Items_Units ON Inv_Items_Units.Item_ID = Inv_Items.ID
                           AND Inv_Items_Units.Unit_id = Inv_Items.Inventory_UnitId
        LEFT JOIN
        Inv_Items Item_parent ON Item_parent.ID = D.FinishedProductID
         WHERE(D.FinishedProductID IS NOT NULL)
             AND (@SubsidaryID IS NULL
                  OR H.SubsidiaryID = @SubsidaryID)
             AND (@FromDate IS NULL
                  OR CAST(H.Entry_Date AS DATE) >= @FromDate)
             AND (@ToDate IS NULL
                  OR CAST(H.Entry_Date AS DATE) <= @ToDate)
             AND (@TransactionType IS NULL
                  OR H.Code IN
        (
         SELECT item
         FROM dbo.Split(@TransactionType , ',')
        ))
        AND (@ItemCategoryID IS NULL
             OR H.ID IN
        (
         SELECT Parent_ID
         FROM
              Inv_Receipt_d
         LEFT JOIN
         Inv_Items_Categories ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
         WHERE Inv_Receipt_d.Parent_ID = H.ID
               AND Inv_Items_Categories.ItemCategory_ID IN(@ItemCategoryID)
        ))
        AND (@ItemID IS NULL
             OR (D.Item_ID = @ItemID)
             OR (Item_parent.ID = @ItemID))
			 AND (Item_parent.Item_Type = 3)
        AND (@BrachID IS NULL
             OR H.Branch_ID = @BrachID)
        AND (@StoreID IS NULL
             OR D.Store_ID = @StoreID)
        GROUP BY Inv_Items_Units.Conv
               , Inv_Items.Code
               , Inv_Items.Name
               , Inv_Items.Name_AR
               , Inv_Unit.Name
               , Inv_Unit.Name_Ar
               , Inv_Store.Code
               , Item_parent.ID
               , Item_parent.Code
               , Item_parent.Name
               , Item_parent.Name_AR
    END


GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Sales_Group_By_Components_Without_Parent_Items]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Report_INV_Sales_Group_By_Components_Without_Parent_Items] @SubsidaryID     INT           = NULL
                                                                    , @FromDate        DATE          = NULL
                                                                    , @ToDate          DATE          = NULL
                                                                    , @TransactionType NVARCHAR(MAX) = NULL
                                                                    , @ItemCategoryID  INT           = NULL
                                                                    , @ItemID          INT           = NULL
                                                                    , @BrachID         INT           = NULL
                                                                    , @StoreID         INT           = NULL
AS
    BEGIN
        IF EXISTS
        (
         SELECT *
         FROM dbo.Split(@TransactionType , ',')
         WHERE Item = -1
        )
            SET @TransactionType = NULL

        SELECT

        --Inv_Items
        Inv_Items.Code    Inv_Items_Code
      , Inv_Items.Name    Inv_Items_Name
      , Inv_Items.Name_AR Inv_Items_Name_AR
        --Inv_Unit
      , Inv_Unit.Name     Inv_Unit_Name
      , Inv_Unit.Name_Ar  Inv_Unit_Name_Ar
        --Inv_Store
      , Inv_Store.Code    Inv_Store_Code
        --Inv_Receipt_d
      , Inv_Items_Units.Conv              D_Conv
      , QTY_Out = SUM(CASE
                          WHEN H.CODE IN(51 , 52)
                          THEN(D.Qty * D.Conv) / D.Final_conv
                          ELSE 0
                      END)
      , QTY_In = SUM(CASE
                         WHEN H.CODE IN(53 , 54)
                         THEN(D.Qty * D.Conv) / D.Final_conv
                         ELSE 0
                     END)
      , Net_QTY = SUM(CASE
                          WHEN H.CODE IN(51 , 52)
                          THEN(D.Qty * D.Conv) / D.Final_conv
                          ELSE 0
                      END) - SUM(CASE
                                     WHEN H.CODE IN(53 , 54)
                                     THEN(D.Qty * D.Conv) / D.Final_conv
                                     ELSE 0
                                 END)
      , Cost = SUM(CASE
                       WHEN H.CODE IN(51 , 52)
                       THEN AV_INV_TransactionDetails.AvgCost * AV_INV_TransactionDetails.QTY * AV_INV_TransactionDetails.final_conv
                       ELSE 0
                   END) - SUM(CASE
                                  WHEN H.CODE IN(53 , 54)
                                  THEN AV_INV_TransactionDetails.AvgCost * AV_INV_TransactionDetails.QTY * AV_INV_TransactionDetails.final_conv
                                  ELSE 0
                              END)
        FROM
             Inv_Receipt_d D
        LEFT JOIN
        Inv_Receipt_h H ON D.Parent_ID = H.ID
        LEFT JOIN
        Inv_Store ON Inv_Store.ID = D.Store_ID
        LEFT JOIN
        Inv_Items ON D.Item_ID = Inv_Items.ID
        LEFT JOIN
        Inv_Unit ON Inv_Unit.ID = Inv_Items.Inventory_UnitId
        LEFT JOIN
        Inv_Items_Units ON Inv_Items_Units.Item_ID = Inv_Items.ID
                           AND Inv_Items_Units.Unit_id = Inv_Items.Inventory_UnitId
        LEFT JOIN
        AV_INV_TransactionDetails ON AV_INV_TransactionDetails.ID = D.ID
                                     AND AV_INV_TransactionDetails.Parent_ID = H.ID
        WHERE
		(H.Code IN (51,52,53,54) )

		And (D.FinishedProductID IS NOT NULL)
             AND (@SubsidaryID IS NULL
                  OR H.SubsidiaryID = @SubsidaryID)
             AND (@FromDate IS NULL
                  OR CAST(H.Entry_Date AS DATE) >= @FromDate)
             AND (@ToDate IS NULL
                  OR CAST(H.Entry_Date AS DATE) <= @ToDate)
             AND (@TransactionType IS NULL
                  OR H.Code IN
        (
         SELECT item
         FROM dbo.Split(@TransactionType , ',')
        ))
        AND (@ItemCategoryID IS NULL
             OR H.ID IN
        (
         SELECT Parent_ID
         FROM
              Inv_Receipt_d
         LEFT JOIN
         Inv_Items_Categories ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
         WHERE Inv_Receipt_d.Parent_ID = H.ID
               AND Inv_Items_Categories.ItemCategory_ID IN(@ItemCategoryID)
        ))
        AND (@ItemID IS NULL
             OR D.Item_ID = @ItemID)
        AND (@BrachID IS NULL
             OR H.Branch_ID = @BrachID)
        AND (@StoreID IS NULL
             OR D.Store_ID = @StoreID)
        GROUP BY Inv_Items_Units.Conv
               , Inv_Items.Code
               , Inv_Items.Name
               , Inv_Items.Name_AR
               , Inv_Unit.Name
               , Inv_Unit.Name_Ar
               , Inv_Store.Code
    END
GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Sales_Group_By_Invoices]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Report_INV_Sales_Group_By_Invoices] @FromDate DATE = '2019-03-23'
, @ToDate DATE =  '2020-03-23'
, @BrachID INT = NULL
, @CustomerID INT = NULL
, @CashCustomerID INT = NULL
, @CustomerCatID INT = NULL
, @FromInvoiceNumber INT = NULL
, @ToInvoiceNumber INT = NULL
, @TransactionType NVARCHAR(MAX) = NULL
, @ItemCategoryID NVARCHAR(MAX) = NULL
, @ItemId INT = NULL
, @Item_vendor INT = NULL
, @SalesManId INT = NULL
, @SubsidaryID INT = NULL
, @FromCustomerActualDeliverDate DATE = NULL
, @ToCustomerActualDeliverDate DATE = NULL
, @FromTime TIME = NULL
, @ToTime TIME = NULL
, @CustomerStatusID INT = NULL
, @Payment_Type INT = NULL
, @User_Role_Sale INT = NULL
,@userId int =13
,@CashDrawer int =NULL
AS
--select distinct Branch_ID  from Inv_Receipt_h where    cast(Entry_Date as date) >='2020-03-23' and cast(Entry_Date as date) < '2020-03-24'
BEGIN
 
   
  IF OBJECT_ID('tbl') IS NOT NULL
begin
        drop table tbl
end
    if @FromTime is null set @FromTime = ' 00:00:00';
    if @ToTime is null set @ToTime = ' 23:59:59';

    IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@TransactionType, ',')
            WHERE Item = -1
        )
        SET @TransactionType = NULL

    IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@ItemCategoryID, ',')
            WHERE Item = -1
        )
        SET @ItemCategoryID = NULL
		
   select * Into #tbl from (
    SELECT H.ID						   ID
         , H.Entry_No                  Bilno
         , H.Entry_Date                [Date]
		 ,H.SurchargeValue             SurchargeValue
         , Inv_PaymentType.Name        Payment
         , Inv_PaymentType.Name_AR     Payment_Ar
         , case when @User_Role_Sale IS NULL
		 then
		   ISNULL(H.Value, 0)   
		   else
		    (
               SELECT top 1 sum(Inv_Receipt_D.Total)
               FROM Inv_Receipt_D
               WHERE Inv_Receipt_D.SalesManId = @User_Role_Sale
			   and Inv_Receipt_D.Parent_ID=h.ID
			   group by Inv_Receipt_D.SalesManId
           ) 
		   end       Total
         ,case when @User_Role_Sale IS NULL
		 then
		   ISNULL(H.Discount_Value, 0)   
		   else
		    0
		   end  [Invoice Discount]
         , case when @User_Role_Sale IS NULL
		 then
		  ISNULL(H.NetValue, 0)  
		   else
		    (
               SELECT top 1 sum(Inv_Receipt_D.Total)
               FROM Inv_Receipt_D
               WHERE Inv_Receipt_D.SalesManId = @User_Role_Sale
			   and Inv_Receipt_D.Parent_ID=h.ID
			   group by Inv_Receipt_D.SalesManId
           ) 
		   end      [Net Total]
         ,case when @User_Role_Sale IS NULL
		 then
		    ISNULL(H.DeliveryFees, 0)  
		   else
		    0
		   end
		   
		      DeliveryFees
		 ,H.CustomerDeliverDate as  CustomerActualDeliverDate
         , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN ''
               ELSE GL_Accounts.VendorCode
        END                            CustomerNo
         , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN Inv_CashCustomer.Name
               ELSE GL_Accounts.Name
        END                            CustomerName
         , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN Inv_CashCustomer.Name_Ar
               ELSE GL_Accounts.Name_Ar
        END                            CustomerName_Ar
         , H.Vendor_ID
         , H.CashCustomerID
         , GL_Accounts.AccountID
         , Gl_Accounts.VendorCode
         , Security_Users.Name         [S.Name]
         , Security_Users.Name_Ar      [S.Name_Ar]
         , C.Name                      C_Name
         , C.Name_Ar                   C_Name_Ar
         , C.Code                      C_Code
		 
		 ,avgcost = (SELECT top 1 Sum(D.Final_conv * D.AvgCost * d.Qty)  
               FROM Inv_Receipt_D d
               WHERE ( d.SalesManId = @User_Role_Sale or @User_Role_Sale is null) 
			   and d.Parent_ID=H.ID
			   group by d.SalesManId) 
		 ,    ( H.netvalue -  (SELECT top 1 Sum(D.Final_conv * D.AvgCost * d.Qty)  
							   FROM Inv_Receipt_D d
							   WHERE ( d.SalesManId = @User_Role_Sale or @User_Role_Sale is null) 
							   and d.Parent_ID=H.ID
							   group by d.SalesManId)  ) Profit
    -- cost and profit
    FROM Inv_Receipt_H H
             LEFT JOIN
         Inv_CashCustomer ON Inv_CashCustomer.id = H.CashCustomerID
        
		LEFT JOIN
         GL_Accounts ON GL_Accounts.AccountID = H.Vendor_ID
             LEFT JOIN
         Inv_Transaction_Codes C ON H.Code = C.Code
             LEFT JOIN
         Security_Users ON Security_Users.Id = H.Empoyee_ID
             LEFT JOIN
         Inv_PaymentType ON Inv_PaymentType.id = H.Payment_Type
    WHERE H.Code IN (51, 52, 53, 54)
      AND (ISNULL(H.Is_Canceled, 0) <> 1)
      AND (ISNULL(H.IsHolded, 0) <> 1)
      AND (@User_Role_Sale IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
               WHERE Inv_Receipt_D.SalesManId = @User_Role_Sale
           ))
      AND EXISTS
        (
            SELECT Parent_ID
            FROM Inv_Receipt_D D
            WHERE D.Parent_ID = H.ID
        )
      AND (@SubsidaryID IS NULL
        OR H.SubsidiaryID = @SubsidaryID)
      AND (@FromDate IS NULL
        OR
           CAST(H.Entry_Date AS DATETIME) >= cast(@FromDate as datetime) + cast(@FromTime as datetime)
        )
      AND (@ToDate IS NULL
        OR
           CAST(H.Entry_Date AS DATETIME) <= cast(@ToDate as datetime) + cast(@ToTime as datetime)
        )
      AND (@ItemId IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
               WHERE (@ItemId is null or Inv_Receipt_D.Item_ID = @ItemId)
           ))
     
      AND (@Item_vendor IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
                        left join Inv_Items on Inv_Receipt_d.Item_ID = Inv_Items.ID
                        left join Inv_Items_Vendors on Inv_Items.ID = Inv_Items_Vendors.ItemID
               WHERE ( Inv_Items_Vendors.VendorID = @item_vendor)
           ))

      AND (@SalesManId IS NULL
        OR H.Empoyee_ID = @SalesManId)
	AND (@CashDrawer IS NULL
        OR H.CashDrawerId = @CashDrawer)
      AND (@BrachID IS NULL
        OR H.Branch_ID IN (@BrachID))
		and H.Branch_ID in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId)
      AND (@CustomerID IS NULL
        OR H.Vendor_ID = @CustomerID)
      AND (@CashCustomerID IS NULL
        OR H.CashCustomerID = @CashCustomerID)
      AND (@CustomerCatID IS NULL
        OR Inv_CashCustomer.CategoryID IN (@CustomerCatID)
        OR Gl_Accounts.VendorCategoryID IN (@CustomerCatID))
      AND (@FromInvoiceNumber IS NULL
        OR H.Entry_No >= @FromInvoiceNumber)
      AND (@ToInvoiceNumber IS NULL
        OR H.Entry_No <= @ToInvoiceNumber)
      AND (@TransactionType IS NULL
        OR H.Code IN
           (
               SELECT item
               FROM dbo.Split(@TransactionType, ',')
           ))
      AND (@ItemCategoryID IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_d
                        LEFT JOIN
                    Inv_Items_Categories ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
               WHERE Inv_Receipt_d.Parent_ID = H.ID
                 AND Inv_Items_Categories.ItemCategory_ID IN
                     (
                         SELECT item
                         FROM dbo.Split(@ItemCategoryID, ',')
                     )
           ))
      AND (@FromDate IS not NULL
        OR CAST(Entry_Date AS TIME) >= @FromTime)
      AND (@ToDate IS not NULL
        OR CAST(Entry_Date AS TIME) <= @ToTime)
      AND (@FromCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) >= @FromCustomerActualDeliverDate)
      AND (@ToCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) <= @ToCustomerActualDeliverDate)
      AND (@CustomerStatusID IS NULL
        OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
      AND (@Payment_Type IS NULL
        OR H.Payment_Type = @Payment_Type)
		union 
		SELECT H.ID                     ID
         , H.Entry_No                  Bilno
         , H.Entry_Date                [Date]
	     ,H.SurchargeValue             SurchargeValue
         , Inv_PaymentType.Name        Payment
         , Inv_PaymentType.Name_AR     Payment_Ar
         , ISNULL(Inv_ReceiptMultiPayment .Amount, 0)          Total
         , 0 [Invoice Discount]
         ,  ISNULL(Inv_ReceiptMultiPayment .Amount, 0)       [Net Total]
         , ISNULL(H.DeliveryFees, 0)   DeliveryFees
         ,H.CustomerDeliverDate as CustomerActualDeliverDate
		 , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN ''
               ELSE GL_Accounts.VendorCode
        END                            CustomerNo
         , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN Inv_CashCustomer.Name
               ELSE GL_Accounts.Name
        END                            CustomerName
         , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN Inv_CashCustomer.Name_Ar
               ELSE GL_Accounts.Name_Ar
        END                            CustomerName_Ar
         , H.Vendor_ID
         , H.CashCustomerID
         , GL_Accounts.AccountID
         , Gl_Accounts.VendorCode
         , Security_Users.Name         [S.Name]
         , Security_Users.Name_Ar      [S.Name_Ar]
         , C.Name                      C_Name
         , C.Name_Ar                   C_Name_Ar
         , C.Code                      C_Code
		 ,avgcost = (SELECT top 1 Sum(D.Final_conv * D.AvgCost * d.Qty)  
               FROM Inv_Receipt_D d
               WHERE ( d.SalesManId = @User_Role_Sale or @User_Role_Sale is null) 
			   and d.Parent_ID=H.ID
			   group by d.SalesManId) 
		 ,    ( H.netvalue -  (SELECT top 1 Sum(D.Final_conv * D.AvgCost * d.Qty)  
							   FROM Inv_Receipt_D d
							   WHERE ( d.SalesManId = @User_Role_Sale or @User_Role_Sale is null) 
							   and d.Parent_ID=H.ID
							   group by d.SalesManId)  ) Profit
    FROM Inv_Receipt_H H
	inner join Inv_ReceiptMultiPayment on Inv_ReceiptMultiPayment.ReceiptId=H.id
             LEFT JOIN
         Inv_CashCustomer ON Inv_CashCustomer.id = H.CashCustomerID
            
             LEFT JOIN
         GL_Accounts ON GL_Accounts.AccountID = H.Vendor_ID
             LEFT JOIN
         Inv_Transaction_Codes C ON H.Code = C.Code
             LEFT JOIN
         Security_Users ON Security_Users.Id = H.Empoyee_ID
             LEFT JOIN
         Inv_PaymentType ON Inv_PaymentType.id = H.Payment_Type
    WHERE H.Payment_Type=51 
	and  Inv_ReceiptMultiPayment.PaymentTypeId=@Payment_Type 
	and
	H.Code IN (51, 52, 53, 54)
      AND (ISNULL(H.Is_Canceled, 0) <> 1)
      AND (ISNULL(H.IsHolded, 0) <> 1)
      AND (@User_Role_Sale IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
               WHERE Inv_Receipt_D.SalesManId = @User_Role_Sale
           ))
      AND EXISTS
        (
            SELECT Parent_ID
            FROM Inv_Receipt_D D
            WHERE D.Parent_ID = H.ID
        )
      AND (@SubsidaryID IS NULL
        OR H.SubsidiaryID = @SubsidaryID)
      AND (@FromDate IS NULL
        OR
           CAST(H.Entry_Date AS DATETIME) >= cast(@FromDate as datetime) + cast(@FromTime as datetime)
        )
      AND (@ToDate IS NULL
        OR
           CAST(H.Entry_Date AS DATETIME) <= cast(@ToDate as datetime) + cast(@ToTime as datetime)
        )
      AND (@ItemId IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
               WHERE (@ItemId is null or Inv_Receipt_D.Item_ID = @ItemId)
           ))
	
      AND (@Item_vendor IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
                        left join Inv_Items on Inv_Receipt_d.Item_ID = Inv_Items.ID
                        left join Inv_Items_Vendors on Inv_Items.ID = Inv_Items_Vendors.ItemID
               WHERE (Inv_Items_Vendors.VendorID = @item_vendor)
           ))

      AND (@SalesManId IS NULL
        OR H.Empoyee_ID = @SalesManId)
      AND (@BrachID IS NULL
        OR H.Branch_ID IN (@BrachID))
		--	and H.Branch_ID in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId)
      AND (@CustomerID IS NULL
        OR H.Vendor_ID = @CustomerID)
      AND (@CashCustomerID IS NULL
        OR H.CashCustomerID = @CashCustomerID)
      AND (@CustomerCatID IS NULL
        OR Inv_CashCustomer.CategoryID IN (@CustomerCatID)
        OR Gl_Accounts.VendorCategoryID IN (@CustomerCatID))
      AND (@FromInvoiceNumber IS NULL
        OR H.Entry_No >= @FromInvoiceNumber)
      AND (@ToInvoiceNumber IS NULL
        OR H.Entry_No <= @ToInvoiceNumber)
      AND (@TransactionType IS NULL
        OR H.Code IN
           (
               SELECT item
               FROM dbo.Split(@TransactionType, ',')
           ))
      AND (@ItemCategoryID IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_d
                        LEFT JOIN
                    Inv_Items_Categories ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
               WHERE Inv_Receipt_d.Parent_ID = H.ID
                 AND Inv_Items_Categories.ItemCategory_ID IN
                     (
                         SELECT item
                         FROM dbo.Split(@ItemCategoryID, ',')
                     )
           ))
      AND (@FromDate IS not NULL
        OR CAST(Entry_Date AS TIME) >= @FromTime)
      AND (@ToDate IS not NULL
        OR CAST(Entry_Date AS TIME) <= @ToTime)
      AND (@FromCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) >= @FromCustomerActualDeliverDate)
      AND (@ToCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) <= @ToCustomerActualDeliverDate)
      AND (@CustomerStatusID IS NULL
        OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
      
		) as Q;
  

    SELECT *,( SELECT  Sum(D.Qty) as Qty
            FROM Inv_Receipt_D D
            WHERE D.Parent_ID = #tbl.ID ) as Qty
    FROM #tbl  ORDER BY #tbl.Date
           , #tbl.Bilno
   -- SELECT  Sum( #tbl.[Net Total]  ) FROM #tbl where #tbl.C_Code in (51,52)
END
GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Sales_Group_By_Invoices_Reserve]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Report_INV_Sales_Group_By_Invoices_Reserve] @FromDate DATE = NULL

, @ToDate DATE = NULL
, @BrachID INT = NULL
, @CustomerID INT = NULL
, @CashCustomerID INT = NULL
, @CustomerCatID INT = NULL
, @FromInvoiceNumber INT = NULL
, @ToInvoiceNumber INT = NULL
, @TransactionType NVARCHAR(MAX) = NULL
, @ItemCategoryID NVARCHAR(MAX) = NULL
, @ItemId INT = NULL
, @Item_vendor INT = NULL
, @SalesManId INT = NULL
, @SubsidaryID INT = NULL
, @FromCustomerActualDeliverDate DATE = NULL
, @ToCustomerActualDeliverDate DATE = NULL
, @FromTime TIME = NULL
, @ToTime TIME = NULL
, @CustomerStatusID INT = NULL
, @Payment_Type INT = NULL
, @User_Role_Sale INT = NULL
,@userId int =null
AS
BEGIN
    IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@TransactionType, ',')
            WHERE Item = -1
        )
        SET @TransactionType = NULL

    IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@ItemCategoryID, ',')
            WHERE Item = -1
        )
        SET @ItemCategoryID = NULL

    SELECT H.ID
         , H.Entry_No                  Bilno
         , H.Entry_Date                [Date]
         , Inv_PaymentType.Name        Payment
         , Inv_PaymentType.Name_AR     Payment_Ar
         , ISNULL(H.Value, 0)          Total
         , ISNULL(H.Discount_Value, 0) [Invoice Discount]
         , ISNULL(H.NetValue, 0)       [Net Total]
         , ISNULL(H.DeliveryFees, 0)   DeliveryFees
         , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN ''
               ELSE GL_Accounts.VendorCode
        END                            CustomerNo
         , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN Inv_CashCustomer.Name
               ELSE GL_Accounts.Name
        END                            CustomerName
         , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN Inv_CashCustomer.Name_Ar
               ELSE GL_Accounts.Name_Ar
        END                            CustomerName_Ar
         , H.Vendor_ID
         , H.CashCustomerID
         , GL_Accounts.AccountID
         , Gl_Accounts.VendorCode
         , Security_Users.Name         [S.Name]
         , Security_Users.Name_Ar      [S.Name_Ar]
         , C.Name                      C_Name
         , C.Name_Ar                   C_Name_Ar
         , C.Code                      C_Code
    INTO #T
    FROM Inv_Receipt_H H
             LEFT JOIN Inv_CashCustomer
                       ON Inv_CashCustomer.id = H.CashCustomerID
             LEFT JOIN GL_Accounts
                       ON GL_Accounts.AccountID = H.Vendor_ID
             LEFT JOIN Inv_Transaction_Codes C
                       ON H.Code = C.Code
             LEFT JOIN Security_Users
                       ON Security_Users.Id = H.Empoyee_ID
             LEFT JOIN Inv_PaymentType
                       ON Inv_PaymentType.id = H.Payment_Type
    WHERE H.Code IN (51, 52, 53, 54)
      AND (ISNULL(H.Is_Canceled, 0) <> 1)
      AND (ISNULL(H.IsHolded, 0) <> 1)
      AND (ISNULL(H.ReservedFlag, 0) = 1)

      AND (@User_Role_Sale IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
               WHERE Inv_Receipt_D.SalesManId = @User_Role_Sale
           ))
      AND EXISTS
        (
            SELECT Parent_ID
            FROM Inv_Receipt_D D
            WHERE D.Parent_ID = H.ID
        )
      AND (@SubsidaryID IS NULL
        OR H.SubsidiaryID = @SubsidaryID)
      AND (@FromDate IS NULL
        OR CAST(H.Entry_Date AS DATE) >= @FromDate)
      AND (@ToDate IS NULL
        OR CAST(H.Entry_Date AS DATE) <= @ToDate)
      AND (@ItemId IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
               WHERE Item_ID = @ItemId
           ))
          AND (@Item_vendor IS NULL
            OR H.ID IN
               (
                   SELECT Parent_ID
                   FROM Inv_Receipt_D
                            left join Inv_Items on Inv_Receipt_d.Item_ID = Inv_Items.ID
                            left join Inv_Items_Vendors on Inv_Items.ID = Inv_Items_Vendors.ItemID
                   WHERE (Inv_Items_Vendors.VendorID = @item_vendor)
               ))
      AND (@SalesManId IS NULL
        OR H.Empoyee_ID = @SalesManId)
      AND (@BrachID IS NULL
        OR H.Branch_ID IN (@BrachID))
		and H.Branch_ID in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId)
      AND (@CustomerID IS NULL
        OR H.Vendor_ID = @CustomerID)
      AND (@CashCustomerID IS NULL
        OR H.CashCustomerID = @CashCustomerID)
      AND (@CustomerCatID IS NULL
        OR Inv_CashCustomer.CategoryID IN (@CustomerCatID)
        OR Gl_Accounts.VendorCategoryID IN (@CustomerCatID))
      AND (@FromInvoiceNumber IS NULL
        OR H.Entry_No >= @FromInvoiceNumber)
      AND (@ToInvoiceNumber IS NULL
        OR H.Entry_No <= @ToInvoiceNumber)
      AND (@TransactionType IS NULL
        OR H.Code IN
           (
               SELECT item
               FROM dbo.Split(@TransactionType, ',')
           ))
      AND (@ItemCategoryID IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_d
                        LEFT JOIN Inv_Items_Categories
                                  ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
               WHERE Inv_Receipt_d.Parent_ID = H.ID
                 AND Inv_Items_Categories.ItemCategory_ID IN
                     (
                         SELECT item
                         FROM dbo.Split(@ItemCategoryID, ',')
                     )
           ))
      AND (@FromTime IS NULL
        OR CAST(Entry_Date AS TIME) >= @FromTime)
      AND (@ToTime IS NULL
        OR CAST(Entry_Date AS TIME) <= @ToTime)
      AND (@FromCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) >= @FromCustomerActualDeliverDate)
      AND (@ToCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) <= @ToCustomerActualDeliverDate)
      AND (@CustomerStatusID IS NULL
        OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
      AND (@Payment_Type IS NULL
        OR H.Payment_Type = @Payment_Type)
    ORDER BY H.Entry_Date
           , H.Entry_No

    SELECT *
    FROM #T
    --SELECT  Sum(CASE WHEN C_Code = 51 OR C_Code =52 Then #T.[Net Total] End) FROM #T
END
GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Sales_Group_By_Invoices_Tarek]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[Report_INV_Sales_Group_By_Invoices_Tarek]

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	  SELECT H.ID
         , H.Entry_No                  Bilno
         , H.Entry_Date                [Date]
         , Inv_PaymentType.Name        Payment
         , Inv_PaymentType.Name_AR     Payment_Ar
         , ISNULL(H.Value, 0)          Total
         , ISNULL(H.Discount_Value, 0) [Invoice_Discount]
         , ISNULL(H.NetValue, 0)       [Net_Total]
         , ISNULL(H.DeliveryFees, 0)   DeliveryFees
         , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN ''
               ELSE GL_Accounts.VendorCode
        END                            CustomerNo
         , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN Inv_CashCustomer.Name
               ELSE GL_Accounts.Name
        END                            CustomerName
         , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN Inv_CashCustomer.Name_Ar
               ELSE GL_Accounts.Name_Ar
        END                            CustomerName_Ar
         , H.Vendor_ID
         , H.CashCustomerID
         , GL_Accounts.AccountID
         , Gl_Accounts.VendorCode
         , Security_Users.Name         [S.Name]
         , Security_Users.Name_Ar      [S.Name_Ar]
         , C.Name                      C_Name
         , C.Name_Ar                   C_Name_Ar
         , C.Code                      C_Code

    FROM Inv_Receipt_H H
             LEFT JOIN
         Inv_CashCustomer ON Inv_CashCustomer.id = H.CashCustomerID
             LEFT JOIN
         GL_Accounts ON GL_Accounts.AccountID = H.Vendor_ID
             LEFT JOIN
         Inv_Transaction_Codes C ON H.Code = C.Code
             LEFT JOIN
         Security_Users ON Security_Users.Id = H.Empoyee_ID
             LEFT JOIN
         Inv_PaymentType ON Inv_PaymentType.id = H.Payment_Type
END
GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Sales_GroupBy_Users]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Report_INV_Sales_GroupBy_Users] @SubsidaryID     INT           = NULL
                                         , @UserId          INT           = NULL
                                         , @BrachId         INT           = NULL
                                         , @FromDate        DATE          = NULL
                                         , @ToDate          DATE          = NULL
                                         , @TransactionType NVARCHAR(MAX) = NULL
AS
    BEGIN

        IF EXISTS
        (
         SELECT *
         FROM dbo.Split(@TransactionType , ',')
         WHERE Item = -1
        )
            SET @TransactionType = NULL

        -- Get All Data_#Context_Receipt_H

        SELECT H.ID                                                  H_ID
             , H.Code                                                H_Code
             , Inv_Transaction_Codes.Name                            Inv_Transaction_Codes_Name
             , Inv_Transaction_Codes.Name_Ar                         Inv_Transaction_Codes_Name_Ar
             , H.CreatedByID                                         H_CreatedByID
             , U.Name                                                U_Name
             , U.Name_Ar                                             U_Name_Ar
             , ISNULL(H.NetValue , 00) - ISNULL(H.DeliveryFees , 00) H_ValueForeign
        INTO #Context_Receipt_H
        FROM
             Inv_Receipt_h H
        LEFT JOIN
        Inv_Transaction_Codes ON H.code = Inv_Transaction_Codes.Code
        LEFT JOIN
        Security_Users U ON H.CreatedByID = U.Id
        WHERE(H.CreatedByID IS NOT NULL)
		AND (IsNull(H.Is_Canceled,0) <> 1)
		AND (IsNull(H.IsHolded,0) <> 1)
             AND (@SubsidaryID IS NULL
                  OR H.SubsidiaryID = @SubsidaryID)
             AND (@UserId IS NULL
                  OR H.CreatedByID = @UserId)
             AND (@BrachId IS NULL
                  OR H.Branch_ID = @BrachId)
             AND (@FromDate IS NULL
                  OR CAST(H.Entry_Date AS DATE) >= @FromDate)
             AND (@ToDate IS NULL
                  OR CAST(H.Entry_Date AS DATE) <= @ToDate)
             AND (@TransactionType IS NULL
                  OR H.Code IN
        (
         SELECT item
         FROM dbo.Split(@TransactionType , ',')
        ))

        -- Get 51	Cash Sales
        SELECT H_CreatedByID
             , SUM(H_ValueForeign) Total_Cash_Sales
        INTO #Cash_Sales
        FROM #Context_Receipt_H
        WHERE H_Code = 51
        GROUP BY H_CreatedByID

        -- Get 53	Cash Return
        SELECT H_CreatedByID
             , SUM(H_ValueForeign) Total_Cash_Return
        INTO #CashReturn
        FROM #Context_Receipt_H
        WHERE H_Code = 53
        GROUP BY H_CreatedByID

        -- Get 52	Credit Sales
        SELECT H_CreatedByID
             , SUM(H_ValueForeign) Total_Credit_Sales
        INTO #CreditSales
        FROM #Context_Receipt_H
        WHERE H_Code = 52
        GROUP BY H_CreatedByID

        -- Get 53	Credit Return
        SELECT H_CreatedByID
             , SUM(H_ValueForeign) Total_Credit_Return
        INTO #CreditReturn
        FROM #Context_Receipt_H
        WHERE H_Code = 54
        GROUP BY H_CreatedByID

        SELECT V.ID                   V_ID
             , VoucherTypeID          VoucherTypeID
             , GL_VoucherType.Code    GL_VoucherType_Code
             , GL_VoucherType.Name    GL_VoucherType_Name
             , GL_VoucherType.Name_Ar GL_VoucherType_Name_Ar
             , V.CreatedByID          V_CreatedByID
             , U.Name                 U_Name
             , U.Name_Ar              U_Name_Ar
             , D.Credit               D_Credit
        INTO #Context_GL_VoucherDetails
        FROM
             GL_VoucherDetails D
        LEFT JOIN
        GL_Vouchers V ON V.ID = D.VoucherID
        LEFT JOIN
        GL_VoucherType ON V.VoucherTypeID = GL_VoucherType.ID
        LEFT JOIN
        Security_Users U ON V.CreatedByID = U.Id
        WHERE(V.CreatedByID IS NOT NULL)
             AND (@SubsidaryID IS NULL
                  OR V.SubsidaryID = @SubsidaryID)
             AND (@UserId IS NULL
                  OR V.CreatedByID = @UserId)
             AND (@BrachId IS NULL
                  OR V.BranchID = @BrachId)
             AND (@FromDate IS NULL
                  OR CAST(V.VouhcerDate AS DATE) >= @FromDate)
             AND (@ToDate IS NULL
                  OR CAST(V.VouhcerDate AS DATE) <= @ToDate)
             AND (@TransactionType IS NULL
                  OR GL_VoucherType.Code IN
        (
         SELECT item
         FROM dbo.Split(@TransactionType , ',')
        ))

        -- Get 11	Customer_Payment
        SELECT V_CreatedByID
             , SUM(D_Credit) Total_Customer_Payment
        INTO #Customer_Payment
        FROM #Context_GL_VoucherDetails
        WHERE GL_VoucherType_Code = 11
        GROUP BY V_CreatedByID

        -- Get 3	Receipt_Voucher
        SELECT V_CreatedByID
             , SUM(D_Credit) Total_Receipt_Voucher
        INTO #Receipt_Voucher
        FROM #Context_GL_VoucherDetails
        WHERE GL_VoucherType_Code = 3
        GROUP BY V_CreatedByID

        -- Collect All Data

        SELECT Su.Id
             , Su.Name
             , Su.Name_Ar
             , ISNULL(Total_Cash_Sales , 0)                                                                                                                                                 Total_Cash_Sales
             , ISNULL(Total_Cash_Return , 0)                                                                                                                                                Total_Cash_Return
             , ISNULL(Total_Cash_Sales , 0) - ISNULL(Total_Cash_Return , 0)                                                                                                                 NetCashSale
             , ISNULL(Total_Credit_Sales , 0)                                                                                                                                               Total_Credit_Sales
             , ISNULL(Total_Credit_Return , 0)                                                                                                                                              Total_Credit_Return
             , ISNULL(Total_Credit_Sales , 0) - ISNULL(Total_Credit_Return , 0)                                                                                                             NetCreditSale
             , ISNULL(Total_Cash_Sales , 0) + ISNULL(Total_Credit_Sales , 0)                                                                                                                TotalCashSale
             , ISNULL(Total_Cash_Return , 0) + ISNULL(Total_Credit_Return , 0)                                                                                                              TotalCashReturn
             , (ISNULL(Total_Cash_Sales , 0) + ISNULL(Total_Credit_Sales , 0)) - (ISNULL(Total_Cash_Return , 0) + ISNULL(Total_Credit_Return , 0))                                          NetTotalSale
             , ISNULL(#Receipt_Voucher.Total_Receipt_Voucher , 0)                                                                                                                           Total_Receipt_Voucher
             , ISNULL(#Customer_Payment.Total_Customer_Payment , 0)                                                                                                                         Total_Customer_Payment
             , ISNULL(#Receipt_Voucher.Total_Receipt_Voucher , 0) + ISNULL(#Customer_Payment.Total_Customer_Payment , 0)                                                                    Total_Receipt_Voucher_Total_Customer_Payment
             , (ISNULL(Total_Cash_Sales , 0) - ISNULL(Total_Cash_Return , 0)) + (ISNULL(#Receipt_Voucher.Total_Receipt_Voucher , 0) + ISNULL(#Customer_Payment.Total_Customer_Payment , 0)) Net_Total_Receipt_Voucher_Total_Customer_Payment_Total_Receipt_Voucher_Total_Customer_Payment
        FROM
             Security_Users SU
        LEFT JOIN
        #Cash_Sales ON #Cash_Sales.H_CreatedByID = Su.Id
        LEFT JOIN
        #CashReturn ON #CashReturn.H_CreatedByID = Su.Id
        LEFT JOIN
        #CreditSales ON #CreditSales.H_CreatedByID = Su.Id
        LEFT JOIN
        #CreditReturn ON #CreditReturn.H_CreatedByID = Su.Id
        LEFT JOIN
        #Customer_Payment ON #Customer_Payment.V_CreatedByID = Su.Id
        LEFT JOIN
        #Receipt_Voucher ON #Receipt_Voucher.V_CreatedByID = Su.Id
        WHERE(@UserId IS NULL
              OR Su.id = @UserId)
             AND ((Su.Id IN
        (
         SELECT CreatedByID
         FROM Inv_Receipt_h H
         WHERE H.CreatedByID IS NOT NULL
        ))
                  OR (Su.Id IN
        (
         SELECT CreatedByID
         FROM GL_Vouchers V
         WHERE V.CreatedByID IS NOT NULL
        )))
    END
GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Sales_GroupBy_Users_Details]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Report_INV_Sales_GroupBy_Users_Details] @SubsidaryID     INT           = NULL
                                                 , @UserId          INT           = NULL
                                                 , @BrachId         INT           = NULL
                                                 , @FromDate        DATE          = NULL
                                                 , @ToDate          DATE          = NULL
                                                 , @TransactionType NVARCHAR(MAX) = 3
AS
    BEGIN

        IF EXISTS
        (
         SELECT *
         FROM dbo.Split(@TransactionType , ',')
         WHERE Item = -1
        )
            SET @TransactionType = NULL

        -- Get All Data_#Context_Receipt_H

        SELECT mstr_Branch.Name              mstr_Branch_Name
             , mstr_Branch.Name_Ar           mstr_Branch_Name_Ar
             , mstr_Branch.Code              mstr_Branch_Code
             , Inv_Transaction_Codes.Name    Inv_Transaction_Codes_Name
             , Inv_Transaction_Codes.Name_Ar Inv_Transaction_Codes_Name_Ar
             , H.Entry_Date                  H_Entry_Date
             , H.Entry_No                    H_Entry_No
             , CASE
                   WHEN GL_Accounts.AccountID IS NULL
                   THEN Inv_CashCustomer.Name
                   ELSE GL_Accounts.Name
               END                           CustomerName
             , CASE
                   WHEN GL_Accounts.AccountID IS NULL
                   THEN Inv_CashCustomer.Name_Ar
                   ELSE GL_Accounts.Name_Ar
               END                           CustomerName_Ar
             , Inv_PaymentType.Name          Inv_PaymentType_Name
             , Inv_PaymentType.Name_Ar       Inv_PaymentType_Name_Ar
             , IsNull(H.NetValue,00) - IsNull(H.DeliveryFees,00)                       H_ValueForeign
             , U.Name                        U_Name
             , U.Name_Ar                     U_Name_Ar
             , Inv_Transaction_Codes.Code    Inv_Transaction_Codes_Code
             , CASE Inv_Transaction_Codes.Code
                   WHEN '51'
                   THEN '1'
                   WHEN '53'
                   THEN '2'
                   WHEN '52'
                   THEN '3'
                   WHEN '54'
                   THEN '4'
               END                           Sort
             , H.CreatedByID                 H_CreatedByID
        INTO #Context_Receipt_H
        FROM Inv_Receipt_h H
             LEFT JOIN Inv_Transaction_Codes
             ON H.code = Inv_Transaction_Codes.Code
             LEFT JOIN Security_Users U
             ON H.CreatedByID = U.Id
             LEFT JOIN mstr_Branch
             ON mstr_Branch.ID = H.Branch_ID
             LEFT JOIN Inv_CashCustomer
             ON Inv_CashCustomer.id = H.CashCustomerID
             LEFT JOIN GL_Accounts
             ON GL_Accounts.AccountID = H.Vendor_ID
             LEFT JOIN Inv_PaymentType
             ON H.Payment_Type = Inv_PaymentType.id
        WHERE(H.CreatedByID IS NOT NULL)
             AND (H.Code IN(51 , 52 , 53 , 54))
		AND (IsNull(H.Is_Canceled,0) <> 1)
		AND (IsNull(H.IsHolded,0) <> 1)
             AND (@SubsidaryID IS NULL
                  OR H.SubsidiaryID = @SubsidaryID)
             AND (@UserId IS NULL
                  OR H.CreatedByID = @UserId)
             AND (@BrachId IS NULL
                  OR H.Branch_ID = @BrachId)
             AND (@FromDate IS NULL
                  OR CAST(H.Entry_Date AS DATE) >= @FromDate)
             AND (@ToDate IS NULL
                  OR CAST(H.Entry_Date AS DATE) <= @ToDate)

        SELECT V.id
             , GL_Accounts.Name    GL_Accounts_Name
             , GL_Accounts.Name_ar GL_Accounts_Name_Ar
        INTO #Get_Account_Name_For_Code_3
        FROM GL_VoucherDetails D
             LEFT JOIN GL_Vouchers V
             ON V.ID = D.VoucherID
             LEFT JOIN GL_Accounts
             ON GL_Accounts.AccountID = D.AccountNoID
        WHERE D.Debit > 0
              AND (V.VoucherTypeID IN(3))

        SELECT mstr_Branch.Name                                                                   mstr_Branch_Name
             , mstr_Branch.Name_Ar                                                                mstr_Branch_Name_Ar
             , mstr_Branch.Code                                                                   mstr_Branch_Code
             , GL_VoucherType.Name                                                                GL_VoucherType_Name
             , GL_VoucherType.Name_Ar                                                             GL_VoucherType_Name_Ar
             , V.VouhcerDate                                                                      V_VouhcerDate
             , V.Code                                                                             V_Code
             , GL_Accounts.Name                                                                   GL_Accounts_Name
             , GL_Accounts.Name_ar                                                                GL_Accounts_Name_Ar
             , ISNULL(Inv_PaymentType.Name , #Get_Account_Name_For_Code_3.GL_Accounts_Name)       Inv_PaymentType_Name
             , ISNULL(Inv_PaymentType.Name_Ar , #Get_Account_Name_For_Code_3.GL_Accounts_Name_ar) Inv_PaymentType_Name_Ar
             , D.Credit                                                                           D_Credit
             , U.Name                                                                             U_Name
             , U.Name_Ar                                                                          U_Name_Ar
             , GL_VoucherType.Code                                                                GL_VoucherType_Code
             , CASE GL_VoucherType.Code
                   WHEN '3'
                   THEN '4'
                   WHEN '11'
                   THEN '5'
               END                                                                                Sort
             , V.CreatedByID                                                                      V_CreatedByID
        INTO #Context_GL_VoucherDetails
        FROM GL_VoucherDetails D
             LEFT JOIN GL_Vouchers V
             ON V.ID = D.VoucherID
             LEFT JOIN GL_VoucherType
             ON V.VoucherTypeID = GL_VoucherType.ID
             LEFT JOIN Security_Users U
             ON V.CreatedByID = U.Id
             LEFT JOIN mstr_Branch
             ON V.BranchID = mstr_Branch.ID
             LEFT JOIN GL_Accounts
             ON GL_Accounts.AccountID = D.AccountNoID
             LEFT JOIN Inv_PaymentType
             ON V.PaymentTypeId = Inv_PaymentType.id
             LEFT JOIN #Get_Account_Name_For_Code_3
             ON #Get_Account_Name_For_Code_3.Id = D.VoucherID
        WHERE(V.CreatedByID IS NOT NULL)
             AND D.Credit > 0
             AND (GL_VoucherType.Code IN(11 , 3))
             AND (@SubsidaryID IS NULL
                  OR V.SubsidaryID = @SubsidaryID)
             AND (@UserId IS NULL
                  OR V.CreatedByID = @UserId)
             AND (@BrachId IS NULL
                  OR V.BranchID = @BrachId)
             AND (@FromDate IS NULL
                  OR CAST(V.VouhcerDate AS DATE) >= @FromDate)
             AND (@ToDate IS NULL
                  OR CAST(V.VouhcerDate AS DATE) <= @ToDate)

        SELECT *
        FROM
        (
         SELECT *
         FROM #Context_Receipt_H
         UNION ALL
         SELECT *
         FROM #Context_GL_VoucherDetails
        ) Tbl
        WHERE(@TransactionType IS NULL
              OR Inv_Transaction_Codes_Code IN
        (
         SELECT item
         FROM dbo.Split(@TransactionType , ',')
        ))
        AND (@UserId IS NULL
             OR H_CreatedByID = @UserId)
        ORDER BY mstr_Branch_Code
               , Sort
               , H_Entry_No
    END
GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Sales_Installment]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Report_INV_Sales_Installment] @CustomerID       INT  = NULL
                                              , @SubsidaryID      INT  = NULL
                                              , @AreadID          INT  = NULL
                                              , @FromDate         DATE = NULL
                                              , @ToDate           DATE = NULL
                                              , @CatCustomers     INT  = NULL
                                              , @FromInvoice      INT  = NULL
                                              , @ToInvoice        INT  = NULL
                                              , @Balance          INT  = NULL
                                              , @BrachID          INT  = NULL
                                              , @CustomerStatusID INT  = NULL
AS
    BEGIN

        SELECT GL_Accounts.VendorCode                      CustomerNo
             , GL_Accounts.Name                            CustomerName
             , GL_Accounts.Name_Ar                         CustomerName_Ar
               --, MachinNumber
             , GL_Accounts.Address
             , GL_Accounts.Phone
             , GL_Accounts.AltPhone
             , GL_Area.Name + ' ' + GL_Accounts.Address    Adress_Name
             , GL_Area.Name_Ar + ' ' + GL_Accounts.Address Adress_Name_Ar
             , H.ID
             , H.Entry_Date
             , H.Entry_No
             , mstr_Departments.Name                       mstr_Departments_Name
             , mstr_Departments.Name_Ar                    mstr_Departments_Name_Ar
             ,
        (
         SELECT TOP 1 Security_Users.Name
         FROM GL_Vouchers gv
              LEFT JOIN Security_Users
              ON gv.CollecterId = Security_Users.ID
         WHERE gv.ID = GL_Vouchers.ID
         ORDER BY gv.iD DESC
        )                                                  mstr_Classes_Name
             ,
        (
         SELECT TOP 1 Security_Users.Name_AR
         FROM GL_Vouchers v
              LEFT JOIN Security_Users
              ON v.CollecterId = Security_Users.ID
         WHERE v.ID = GL_Vouchers.ID
         ORDER BY v.iD DESC
        )                                                  mstr_Classes_Name_Ar
        --,المقدم
             , h.Value
        --,م اتصال 
             , su.Name                                     [su_Name]
             , su.Name_AR                                  [su_Name_Ar]

        -- Details
             , ID.InstallmentDate
             , ID.InstallmentValue
             , CASE Id.StatusID
                   WHEN 1
                   THEN 'Paid'
                   WHEN 2
                   THEN 'Unpaid'
                   ELSE CAST(id.StatusID AS NVARCHAR(2))
               END                                         Id_StatusID_En
             , CASE Id.StatusID
                   WHEN 1
                   THEN N'محصله'
                   WHEN 2
                   THEN N'غير محصله'
                   ELSE CAST(id.StatusID AS NVARCHAR(2))
               END                                         Id_StatusID_Ar
             , GL_Vouchers.VouhcerDate
             , GL_Vouchers.id                              GL_Vouchers_id
             , H.Id                                        H_Id
             , GL_Vouchers.Memo + ' - ' + GL_Vouchers.Code Memo
             , H.memo                                      Memo_2
             , I.ID                                        Crm_Invoice_Installments_ID
             , ID2.sum_paid
             , (h.Value - ID2.sum_paid)                    Balance
             ,
        (
         SELECT TOP 1 Quantity
         FROM Inv_Receipt_d D
              LEFT JOIN Inv_Receipt_d_Serial S
              ON D.ID = S.Inv_Receipt_d_ID
         WHERE D.Parent_ID = H.Id
        )                                                  GETMachinNumber
             ,
        (
         SELECT TOP 1 s.SerialFrom
         FROM Inv_Receipt_d D
              LEFT JOIN Inv_Receipt_d_Serial S
              ON D.ID = S.Inv_Receipt_d_ID
         WHERE D.Parent_ID = H.Id
        )                                                  GETMachinNumber_Serial
             ,
        (
         SELECT TOP 1 s.[Name]
         FROM Inv_Receipt_d D
              JOIN Inv_Items S
              ON D.Item_ID = S.ID
         WHERE D.Parent_ID = 2538 - H.Id
        )                                                  ItemName
             ,
        (
         SELECT TOP 1 s.Name_AR
         FROM Inv_Receipt_d D
              JOIN Inv_Items S
              ON D.Item_ID = S.ID
         WHERE D.Parent_ID = H.Id
        )                                                  ItemNameAr
             , mstr_Branch.name                            mstr_Branch_name
             , mstr_Branch.name_ar                         mstr_Branch_name_Ar
        FROM Crm_Invoice_Installments I
             LEFT JOIN Crm_Invoice_Installments_Details ID
             ON i.ID = id.InvoiceInstallmentsID
             LEFT JOIN GL_Vouchers
             ON GL_Vouchers.InvoiceInstallmentsDetailsId = ID.ID
             LEFT JOIN Inv_Receipt_H H
             ON I.InvoiceID = H.ID
             LEFT JOIN Security_Users SU
             ON Su.Id = h.Empoyee_ID
             LEFT JOIN GL_Accounts
             ON GL_Accounts.AccountID = H.Vendor_ID
                AND GL_Accounts.IsVendor = 0
             LEFT JOIN
        (
         SELECT InvoiceInstallmentsID
              , SUM(CASE
                        WHEN StatusID = 1
                        THEN InstallmentValue
                        ELSE 0
                    END) sum_paid
         FROM Crm_Invoice_Installments_Details
         GROUP BY InvoiceInstallmentsID
        ) ID2
             ON ID2.InvoiceInstallmentsID = I.ID
             LEFT JOIN GL_Governorate
             ON GL_Governorate.ID = GL_Accounts.GovernorateId
             LEFT JOIN GL_Area
             ON GL_Area.ID = GL_Accounts.AreaId
             LEFT JOIN mstr_Departments
             ON mstr_Departments.ID = H.DepartmentID
             LEFT JOIN mstr_Branch
             ON mstr_Branch.id = H.Branch_ID
        WHERE(@CustomerID IS NULL
              OR H.Vendor_ID = @CustomerID)
             AND (ISNULL(H.Is_Canceled , 0) <> 1)
             AND (ISNULL(H.IsHolded , 0) <> 1)
             AND (@SubsidaryID IS NULL
                  OR H.SubsidiaryID = @SubsidaryID)
             AND (@AreadID IS NULL
                  OR GL_Accounts.AreaId = @AreadID)
             AND (@FromDate IS NULL
                  OR ID.InstallmentDate >= @FromDate)
             AND (@ToDate IS NULL
                  OR ID.InstallmentDate <= @ToDate)
             AND (@CatCustomers IS NULL
                  OR GL_Accounts.VendorCategoryID = @CatCustomers)
             AND (@FromInvoice IS NULL
                  OR H.Entry_No >= @FromInvoice)
             AND (@ToInvoice IS NULL
                  OR H.Entry_No <= @ToInvoice)
             AND (@Balance IS NULL
                  OR (h.Value - ID2.sum_paid) <> 0)
             AND (@BrachID IS NULL
                  OR H.Branch_ID = @BrachID)
             AND (@CustomerStatusID IS NULL
                  OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
        ORDER BY H.id
               , ID.InstallmentDate
    END
GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Sales_Installment_Print]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Report_INV_Sales_Installment_Print] @InvoiceID INT = NULL
AS
    BEGIN

        SELECT 
        -- Crm_Invoice_Installments
        Crm_Invoice_Installments.ID                         Crm_Invoice_Installments_ID
      , Crm_Invoice_Installments.ProfitValue                Crm_Invoice_Installments_ProfitValue
        -- Crm_Invoice_Installments_Details
      , Crm_Invoice_Installments_Details.ID                 Crm_Invoice_Installments_Details_ID
      , ROW_NUMBER() OVER(
        ORDER BY Crm_Invoice_Installments_Details.ID)       Crm_Invoice_Installments_Details_Row_Number
      , (ROW_NUMBER() OVER(
         ORDER BY Crm_Invoice_Installments_Details.ID) % 2) Crm_Invoice_Installments_Details_Row_Number_Odd_Even
      , Crm_Invoice_Installments_Details.InstallmentValue   Crm_Invoice_Installments_Details_InstallmentValue
      , Crm_Invoice_Installments_Details.InstallmentDate    Crm_Invoice_Installments_Details_InstallmentDate
      , SUM(Crm_Invoice_Installments_Details.InstallmentValue) OVER(PARTITION BY Crm_Invoice_Installments.ID
        ORDER BY Crm_Invoice_Installments.ID)               Crm_Invoice_Installments_Details_Sum_InstallmentValue 
        -- Inv_Receipt_H
      , Inv_Receipt_H.Id                                    Inv_Receipt_H_Id
      , Inv_Receipt_H.Entry_No                              Inv_Receipt_H_Entry_No
      , Inv_Receipt_H.Entry_Date                            Inv_Receipt_H_Entry_Date
      , Inv_Receipt_H.ValueForeign                          Inv_Receipt_H_ValueForeign
      , Inv_Receipt_h.NetValueForeign                       Inv_Receipt_H_NetValueForeign
      , Inv_Receipt_H.Value                                 Inv_Receipt_H_Value
      , Inv_Receipt_h.NetValue                              Inv_Receipt_H_NetValue
        --mstr_Branch
      , mstr_Branch.ID                                      mstr_Branch_ID
      , mstr_Branch.Name                                    mstr_Branch_Name
      , mstr_Branch.Name_Ar                                 mstr_Branch_Name_Ar
        --mstr_Currencies	  
      , mstr_Currencies.ID                                  mstr_Currencies_ID
      , mstr_Currencies.Code                                mstr_Currencies_Code
      , mstr_Currencies.Name                                mstr_Currencies_Name
      , mstr_Currencies.Name_Ar                             mstr_Currencies_Name_Ar
        --GL_Accounts
      , GL_Accounts.AccountID                               GL_Accounts_AccountID
      , Gl_Accounts.Name                                    Gl_Accounts_Name
      , Gl_Accounts.Name_Ar                                 Gl_Accounts_Name_Ar
      , GL_Accounts.Phone                                   GL_Accounts_Phone
      , GL_Accounts.Address                                 GL_Accounts_Address
      , GL_Accounts.CivilId                                 GL_Accounts_CivilId
      , GL_Accounts.AltPhone                                GL_Accounts_AltPhone
        -- mstr_Country
      , mstr_Country.ID                                     mstr_Country_ID
      , mstr_Country.CountryName                            mstr_Country_CountryName
      , mstr_Country.CountryName_AR                         mstr_Country_CountryName_AR
        INTO #Final
        FROM
             Crm_Invoice_Installments
        LEFT JOIN
        Crm_Invoice_Installments_Details ON Crm_Invoice_Installments.ID = Crm_Invoice_Installments_Details.InvoiceInstallmentsID
        LEFT JOIN
        Inv_Receipt_H ON Crm_Invoice_Installments.InvoiceID = Inv_Receipt_H.ID
        LEFT JOIN
        mstr_Currencies ON Inv_Receipt_H.Currency_ID = mstr_Currencies.ID
        LEFT JOIN
        mstr_Branch ON Inv_Receipt_H.Branch_ID = mstr_Branch.id
        LEFT JOIN
        GL_Accounts ON Inv_Receipt_H.Vendor_ID = GL_Accounts.AccountID
                       AND GL_Accounts.IsVendor = 0
        LEFT JOIN
        mstr_Country ON GL_Accounts.CounrtyID = mstr_Country.ID
        WHERE(@InvoiceID IS NULL
              OR Inv_Receipt_H.Id IN(@InvoiceID))
        AND (ISNULL(Inv_Receipt_H.Is_Canceled , 0) <> 1)
        AND (ISNULL(Inv_Receipt_H.IsHolded , 0) <> 1)

        SELECT *
             ,
        (
         SELECT numEn
         FROM dbo.Tafkeet(Crm_Invoice_Installments_Details_Sum_InstallmentValue , mstr_Currencies_ID)
        ) Crm_Invoice_Installments_Details_Sum_InstallmentValue_Tafkeet_En
             ,
        (
         SELECT numAr
         FROM dbo.Tafkeet(Crm_Invoice_Installments_Details_Sum_InstallmentValue , mstr_Currencies_ID)
        ) Crm_Invoice_Installments_Details_Sum_InstallmentValue_Tafkeet_Ar
        FROM #final
    END
GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Sales_Return_Group_By_Branches]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Report_INV_Sales_Return_Group_By_Branches] @FromDate DATE = NULL
, @ToDate DATE = NULL
, @BrachID INT = NULL
, @CustomerID INT = NULL
, @CashCustomerID INT = NULL
, @CustomerCatID INT = NULL
, @FromInvoiceNumber INT = NULL
, @ToInvoiceNumber INT = NULL
, @ItemCategoryID NVARCHAR(MAX) = NULL
, @SubsidaryID INT = NULL
, @ItemId INT = NULL
, @Item_vendor INT = NULL
, @SalesManId INT = NULL
, @FromCustomerActualDeliverDate DATE = NULL
, @ToCustomerActualDeliverDate DATE = NULL
, @FromTime TIME = NULL
, @ToTime TIME = NULL
, @CustomerStatusID INT = NULL
, @Payment_Type INT = NULL
, @User_Role_Sale INT = NULL
,@userId int =null
,@TransactionType nvarchar(max)=null
AS
BEGIN

    IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@ItemCategoryID, ',')
            WHERE Item = -1
        )
        SET @ItemCategoryID = NULL
		  SET @TransactionType = NULL
    IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@TransactionType, ',')
            WHERE Item = -1
        )
		DROP TABLE IF EXISTS #AV_INV_TransactionDetails
    SELECT Parent_ID
         , SUM(AvgCost *qty * final_Conv) NetTotalAmount
    INTO #AV_INV_TransactionDetails
    FROM AV_INV_TransactionDetails
    WHERE (@ItemId IS NULL
        OR AV_INV_TransactionDetails.item_id = @ItemId)
    GROUP BY Parent_ID

    SELECT mstr_Branch_Name    = mstr_Branch.Name
         , mstr_Branch_Name_Ar = mstr_Branch.Name_Ar
		 ,Code                    =mstr_Branch.ID
         ,                          COUNT(DISTINCT H.ID) Count_All
         , C_S_Sum_NetValue       = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN ISNULL(H.NetValue, 0)
                                            ELSE 0
        END)
         , C_R_Sum_NetValue       = SUM(CASE
                                            WHEN H.CODE IN (53, 54)
                                                THEN ISNULL(H.NetValue, 0)
                                            ELSE 0
        END)
         , NetSale                = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN ISNULL(H.NetValue, 0)
                                            ELSE 0
        END) - SUM(CASE
                       WHEN H.CODE IN (53, 54)
                           THEN ISNULL(H.NetValue, 0)
                       ELSE 0
        END)
         , Sales_Cost             = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN  AV_TransactionDetails.NetTotalAmount
                                            ELSE 0
        END)
         , Returns_Cost           = SUM(CASE
                                            WHEN H.CODE IN (53, 54)
                                                THEN  AV_TransactionDetails.NetTotalAmount
                                            ELSE 0
        END)
    FROM Inv_Receipt_H H
             LEFT JOIN
         mstr_Branch ON H.Branch_ID = mstr_Branch.Id
             LEFT JOIN
         Inv_CashCustomer ON Inv_CashCustomer.id = H.CashCustomerID
             LEFT JOIN
         GL_Accounts ON GL_Accounts.AccountID = H.Vendor_ID
             LEFT JOIN
         #AV_INV_TransactionDetails AV_TransactionDetails ON AV_TransactionDetails.Parent_ID = H.ID
    WHERE H.Code IN (51, 52, 53, 54)
      AND (ISNULL(H.Is_Canceled, 0) <> 1)
      AND (ISNULL(H.IsHolded, 0) <> 1)
	   AND (@TransactionType IS NULL or @TransactionType='-1'
        OR H.Code IN
           (
               SELECT item
               FROM dbo.Split(@TransactionType, ',')
           ))
      AND EXISTS
        (
            SELECT Parent_ID
            FROM Inv_Receipt_D D
            WHERE D.Parent_ID = H.ID
        )
      AND (@SubsidaryID IS NULL
        OR H.SubsidiaryID = @SubsidaryID)
      AND (@FromDate IS NULL
        OR CAST(H.Entry_Date AS DATE) >= @FromDate)
      AND (@ToDate IS NULL
        OR CAST(H.Entry_Date AS DATE) <= @ToDate)
      AND (@User_Role_Sale IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
               WHERE Inv_Receipt_D.SalesManId = @User_Role_Sale
           ))
      AND (@ItemId IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
               WHERE Item_ID = @ItemId
           ))
      AND (@Item_vendor IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
                        left join Inv_Items on Inv_Receipt_d.Item_ID = Inv_Items.ID
                        left join Inv_Items_Vendors on Inv_Items.ID = Inv_Items_Vendors.ItemID
               WHERE (@item_vendor is null or Inv_Items_Vendors.VendorID = @item_vendor)
           ))

      AND (@SalesManId IS NULL
        OR H.Empoyee_ID = @SalesManId)
      AND (@BrachID IS NULL
        OR H.Branch_ID IN (@BrachID))
		and H.Branch_ID in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId)
      AND (@CustomerID IS NULL
        OR H.Vendor_ID = @CustomerID)
      AND (@CashCustomerID IS NULL
        OR H.CashCustomerID = @CashCustomerID)
      AND (@CustomerCatID IS NULL
        OR Inv_CashCustomer.CategoryID IN (@CustomerCatID)
        OR Gl_Accounts.VendorCategoryID IN (@CustomerCatID))
      AND (@FromInvoiceNumber IS NULL
        OR H.Entry_No >= @FromInvoiceNumber)
      AND (@ToInvoiceNumber IS NULL
        OR H.Entry_No <= @ToInvoiceNumber)
      AND (@ItemCategoryID IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_d
                        LEFT JOIN
                    Inv_Items_Categories ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
               WHERE Inv_Receipt_d.Parent_ID = H.ID
                 AND Inv_Items_Categories.ItemCategory_ID IN
                     (
                         SELECT item
                         FROM dbo.Split(@ItemCategoryID, ',')
                     )
           ))
      AND (@FromTime IS NULL
        OR CAST(H.Entry_Date AS TIME) >= @FromTime)
      AND (@ToTime IS NULL
        OR CAST(H.Entry_Date AS TIME) <= @ToTime)
      AND (@FromCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) >= @FromCustomerActualDeliverDate)
      AND (@ToCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) <= @ToCustomerActualDeliverDate)
      AND (@CustomerStatusID IS NULL
        OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
      AND (@Payment_Type IS NULL
        OR H.Payment_Type = @Payment_Type)
    GROUP BY mstr_Branch.Name
           , mstr_Branch.Name_AR
           , mstr_Branch.ID
		   --,Security_Users.Code
    ORDER BY mstr_Branch.ID
END
GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Sales_Return_Group_By_Cash_Customer_Area]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 
CREATE PROC [dbo].[Report_INV_Sales_Return_Group_By_Cash_Customer_Area] @FromDate DATE = NULL
, @ToDate DATE = NULL
, @BrachID INT = NULL
, @CustomerID INT = NULL
, @CashCustomerID INT = NULL
, @CustomerCatID INT = NULL
, @FromInvoiceNumber INT = NULL
, @ToInvoiceNumber INT = NULL
, @ItemCategoryID NVARCHAR(MAX) = NULL
, @SubsidaryID INT = NULL
, @ItemId INT = NULL
, @Item_vendor INT = NULL
, @SalesManId INT = NULL
, @FromCustomerActualDeliverDate DATE = NULL
, @ToCustomerActualDeliverDate DATE = NULL
, @FromTime TIME = NULL
, @ToTime TIME = NULL
, @CustomerStatusID INT = NULL
, @Payment_Type INT = NULL
, @User_Role_Sale INT = NULL
,@userId int =null
AS
BEGIN

    IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@ItemCategoryID, ',')
            WHERE Item = -1
        )
        SET @ItemCategoryID = NULL

    
    SELECT                    GL_Area.ID      AS   GL_Area_ID
         ,                    GL_Area.Name    AS   GL_Area_Name
         ,                    GL_Area.Name_Ar AS   GL_Area_Name_Ar
         ,                    COUNT(DISTINCT H.ID) Count_All
         , C_S_Sum_NetValue = SUM(CASE
                                      WHEN H.CODE IN (51, 52)
                                          THEN ISNULL(d.Total, 0)
                                      ELSE 0
        END)
         , C_R_Sum_NetValue = SUM(CASE
                                      WHEN H.CODE IN (53, 54)
                                          THEN ISNULL(d.Total, 0)
                                      ELSE 0
        END)
         , NetSale          = SUM(CASE
                                      WHEN H.CODE IN (51, 52)
                                          THEN ISNULL(d.Total, 0)
                                      ELSE 0
        END) - SUM(CASE
                       WHEN H.CODE IN (53, 54)
                           THEN ISNULL(d.Total, 0)
                       ELSE 0
        END)
         , Sales_Cost       =isnull( sum (CASE
                                      WHEN H.CODE IN (51, 52)
                                          THEN AV_TransactionDetails.AvgCost * AV_TransactionDetails.QTY *
                                               AV_TransactionDetails.final_Conv
                                      ELSE 0
        END),0)
         , Returns_Cost     = SUM(CASE
                                      WHEN H.CODE IN (53, 54)
                                          THEN AV_TransactionDetails.AvgCost * AV_TransactionDetails.QTY *
                                               AV_TransactionDetails.final_Conv
                                      ELSE 0
        END)
    FROM Inv_Receipt_H H
	inner join Inv_Receipt_d D on h.id=d.Parent_ID 
             LEFT JOIN Security_Users
                       ON H.DriverId = Security_Users.Id
             LEFT JOIN Inv_CashCustomer
                       ON Inv_CashCustomer.id = H.CashCustomerID
             LEFT JOIN Inv_CashCustomerDetail
                       ON Inv_CashCustomerDetail.CashCustomerID = Inv_CashCustomer.ID
					   and H.CashCustomerDetailId=Inv_CashCustomerDetail.id
             inner JOIN GL_Area
                       ON GL_Area.ID = Inv_CashCustomerDetail.AreaId
             LEFT JOIN GL_Accounts
                       ON GL_Accounts.AccountID = H.Vendor_ID
             LEFT JOIN AV_INV_TransactionDetails AV_TransactionDetails
                       ON AV_TransactionDetails.Parent_ID = H.ID
					   and AV_TransactionDetails.ID=D.ID
    WHERE H.Code IN (51, 52, 53, 54)
      AND (ISNULL(H.Is_Canceled, 0) <> 1)
      AND (ISNULL(H.IsHolded, 0) <> 1)
	  and d.FinishedProductID is null
      AND (@User_Role_Sale IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
               WHERE Inv_Receipt_D.SalesManId = @User_Role_Sale
           ))
      AND EXISTS
        (
            SELECT Parent_ID
            FROM Inv_Receipt_D D
            WHERE D.Parent_ID = H.ID
        )
      AND (@SubsidaryID IS NULL
        OR H.SubsidiaryID = @SubsidaryID)
      AND (@FromDate IS NULL
        OR CAST(H.Entry_Date AS DATE) >= @FromDate)
      AND (@ToDate IS NULL
        OR CAST(H.Entry_Date AS DATE) <= @ToDate)
      AND (@ItemId IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
               WHERE Item_ID = @ItemId
           ))
      AND (@Item_vendor IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
                        left join Inv_Items on Inv_Receipt_d.Item_ID = Inv_Items.ID
                        left join Inv_Items_Vendors on Inv_Items.ID = Inv_Items_Vendors.ItemID
               WHERE (@item_vendor is null or Inv_Items_Vendors.VendorID = @item_vendor)
           ))


      AND (@SalesManId IS NULL
        OR H.Empoyee_ID = @SalesManId)
      AND (@BrachID IS NULL
        OR H.Branch_ID IN (@BrachID))
		and H.Branch_ID in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId)
      AND (@CustomerID IS NULL
        OR H.Vendor_ID = @CustomerID)
      AND (@CashCustomerID IS NULL
        OR H.CashCustomerID = @CashCustomerID)
      AND (@CustomerCatID IS NULL
        OR Inv_CashCustomer.CategoryID IN (@CustomerCatID)
        OR Gl_Accounts.VendorCategoryID IN (@CustomerCatID))
      AND (@FromInvoiceNumber IS NULL
        OR H.Entry_No >= @FromInvoiceNumber)
      AND (@ToInvoiceNumber IS NULL
        OR H.Entry_No <= @ToInvoiceNumber)
      AND (@ItemCategoryID IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_d
                        LEFT JOIN Inv_Items_Categories
                                  ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
               WHERE Inv_Receipt_d.Parent_ID = H.ID
                 AND Inv_Items_Categories.ItemCategory_ID IN
                     (
                         SELECT item
                         FROM dbo.Split(@ItemCategoryID, ',')
                     )
           ))
      AND (@FromTime IS NULL
        OR CAST(H.Entry_Date AS TIME) >= @FromTime)
      AND (@ToTime IS NULL
        OR CAST(H.Entry_Date AS TIME) <= @ToTime)
      AND (@FromCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) >= @FromCustomerActualDeliverDate)
      AND (@ToCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) <= @ToCustomerActualDeliverDate)
      AND (@CustomerStatusID IS NULL
        OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
      AND (@Payment_Type IS NULL
        OR H.Payment_Type = @Payment_Type)
    GROUP BY GL_Area.Name
           , GL_Area.Name_Ar
           , GL_Area.ID
    ORDER BY GL_Area.Name
END

GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Sales_Return_Group_By_Customer]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 --Select * from security_users    select userid ,count(branchid) from UserBranch group by userid
CREATE PROC [dbo].[Report_INV_Sales_Return_Group_By_Customer] @FromDate DATE = '2020-01-01'
, @ToDate DATE = '2020-01-20'
, @BrachID INT = NULL
, @CustomerID INT = NULL
, @CashCustomerID INT = NULL
, @CustomerCatID INT = NULL
, @FromInvoiceNumber INT = NULL
, @ToInvoiceNumber INT = NULL
, @ItemCategoryID NVARCHAR(MAX) = NULL
, @SubsidaryID INT = NULL
, @ItemId INT = 4833
, @Item_vendor INT = NULL
, @SalesManId INT = NULL
, @FromCustomerActualDeliverDate DATE = NULL
, @ToCustomerActualDeliverDate DATE = NULL
, @FromTime TIME = NULL
, @ToTime TIME = NULL
, @CustomerStatusID INT = NULL
, @Payment_Type INT = NULL
, @User_Role_Sale INT = NULL
,@userId int =18
,@TransactionType nvarchar(max)=null
AS
BEGIN

    IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@ItemCategoryID, ',')
            WHERE Item = -1
        )
        SET @ItemCategoryID = NULL
		 IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@TransactionType, ',')
            WHERE Item = -1
        )
        SET @TransactionType = NULL
    SELECT Parent_ID
         , SUM(AvgCost * QTY *  final_Conv)    NetTotalAmount 
    INTO #AV_INV_TransactionDetails
    FROM AV_INV_TransactionDetails
    WHERE (@ItemId IS NULL
        OR AV_INV_TransactionDetails.item_id = @ItemId)
    GROUP BY Parent_ID

    SELECT CustomerNo       = CASE
                                  WHEN GL_Accounts.AccountID IS NULL
                                      THEN ''
                                  ELSE GL_Accounts.Code
                                  END
         , CustomerName     = CASE
                                  WHEN GL_Accounts.AccountID IS NULL
                                      THEN Inv_CashCustomer.Name
                                  ELSE GL_Accounts.Name
                                  END
         , CustomerName_Ar  = CASE
                                  WHEN GL_Accounts.AccountID IS NULL
                                      THEN Inv_CashCustomer.Name_Ar
                                  ELSE GL_Accounts.Name_Ar
                                  END
         , C_S_Sum_NetValue = SUM(CASE
                                      WHEN H.CODE IN (51, 52)
                                          THEN ISNULL(H.NetValue, 0)
                                      ELSE 0
        END)
         , C_R_Sum_NetValue = SUM(CASE
                                      WHEN H.CODE IN (53, 54)
                                          THEN ISNULL(H.NetValue, 0)
                                      ELSE 0
        END)
         , NetSale          = SUM(CASE
                                      WHEN H.CODE IN (51, 52)
                                          THEN ISNULL(H.NetValue, 0)
                                      ELSE 0
        END) - SUM(CASE
                       WHEN H.CODE IN (53, 54)
                           THEN ISNULL(H.NetValue, 0)
                       ELSE 0
        END)
         , Sales_Cost       = SUM(CASE
                                      WHEN H.CODE IN (51, 52)
                                          THEN AV_TransactionDetails.NetTotalAmount                                            

                                      ELSE 0
        END)
         , Returns_Cost     = SUM(CASE
                                      WHEN H.CODE IN (53, 54)
                                          THEN AV_TransactionDetails.NetTotalAmount
                                      ELSE 0
        END)
    FROM Inv_Receipt_H H
             LEFT JOIN Inv_CashCustomer
                       ON Inv_CashCustomer.id = H.CashCustomerID
             LEFT JOIN GL_Accounts
                       ON GL_Accounts.AccountID = H.Vendor_ID
             LEFT JOIN #AV_INV_TransactionDetails AV_TransactionDetails
                       ON AV_TransactionDetails.Parent_ID = H.ID
    WHERE H.Code IN (51, 52, 53, 54)
      AND (ISNULL(H.Is_Canceled, 0) <> 1)
      AND (ISNULL(H.IsHolded, 0) <> 1)
	    AND (@TransactionType IS NULL or @TransactionType='-1'
        OR H.Code IN
           (
               SELECT item
               FROM dbo.Split(@TransactionType, ',')
           ))
      AND (@User_Role_Sale IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
               WHERE Inv_Receipt_D.SalesManId = @User_Role_Sale
           ))
      AND EXISTS
        (
            SELECT Parent_ID
            FROM Inv_Receipt_D D
            WHERE D.Parent_ID = H.ID
        )
      AND (@SubsidaryID IS NULL
        OR H.SubsidiaryID = @SubsidaryID)
      AND (@FromDate IS NULL
        OR CAST(H.Entry_Date AS DATE) >= @FromDate)
      AND (@ToDate IS NULL
        OR CAST(H.Entry_Date AS DATE) <= @ToDate)
      AND (@ItemId IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
               WHERE Item_ID = @ItemId
           ))
      AND (@Item_vendor IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
                        left join Inv_Items on Inv_Receipt_d.Item_ID = Inv_Items.ID
                        left join Inv_Items_Vendors on Inv_Items.ID = Inv_Items_Vendors.ItemID
               WHERE (@item_vendor is null or Inv_Items_Vendors.VendorID = @item_vendor)
           ))
      AND (@SalesManId IS NULL
        OR H.Empoyee_ID = @SalesManId)
      AND (@BrachID IS NULL
        OR H.Branch_ID IN (@BrachID))
		and H.Branch_ID in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId)
      AND (@CustomerID IS NULL
        OR H.Vendor_ID = @CustomerID)
      AND (@CashCustomerID IS NULL
        OR H.CashCustomerID = @CashCustomerID)
      AND (@CustomerCatID IS NULL
        OR Inv_CashCustomer.CategoryID IN (@CustomerCatID)
        OR Gl_Accounts.VendorCategoryID IN (@CustomerCatID))
      AND (@FromInvoiceNumber IS NULL
        OR H.Entry_No >= @FromInvoiceNumber)
      AND (@ToInvoiceNumber IS NULL
        OR H.Entry_No <= @ToInvoiceNumber)
      AND (@ItemCategoryID IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_d
                        LEFT JOIN Inv_Items_Categories
                                  ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
               WHERE Inv_Receipt_d.Parent_ID = H.ID
                 AND Inv_Items_Categories.ItemCategory_ID IN
                     (
                         SELECT item
                         FROM dbo.Split(@ItemCategoryID, ',')
                     )
           ))
      AND (@FromTime IS NULL
        OR CAST(H.Entry_Date AS TIME) >= @FromTime)
      AND (@ToTime IS NULL
        OR CAST(H.Entry_Date AS TIME) <= @ToTime)
      AND (@FromCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) >= @FromCustomerActualDeliverDate)
      AND (@ToCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) <= @ToCustomerActualDeliverDate)
      AND (@CustomerStatusID IS NULL
        OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
      AND (@Payment_Type IS NULL
        OR H.Payment_Type = @Payment_Type)
    GROUP BY GL_Accounts.AccountID
           , Inv_CashCustomer.id
           , GL_Accounts.Code
           , Inv_CashCustomer.Name
           , GL_Accounts.Name
           , Inv_CashCustomer.Name_Ar
           , GL_Accounts.Name_Ar
    ORDER BY Inv_CashCustomer.Name
           , GL_Accounts.Name

		   Select Sales_Cost       = SUM(CASE
                                      WHEN H.CODE IN (51, 52)
                                          THEN AV_TransactionDetails.NetTotalAmount
                                      ELSE 0
        END)
		   From Inv_Receipt_H H
             LEFT JOIN Inv_CashCustomer
                       ON Inv_CashCustomer.id = H.CashCustomerID
             LEFT JOIN GL_Accounts
                       ON GL_Accounts.AccountID = H.Vendor_ID
             LEFT JOIN #AV_INV_TransactionDetails AV_TransactionDetails
                       ON AV_TransactionDetails.Parent_ID = H.ID
		     WHERE H.Code IN (51, 52)
      AND (ISNULL(H.Is_Canceled, 0) <> 1)
      AND (ISNULL(H.IsHolded, 0) <> 1)
	    AND (@TransactionType IS NULL or @TransactionType='-1'
        OR H.Code IN
           (
               SELECT item
               FROM dbo.Split(@TransactionType, ',')
           ))
      AND (@User_Role_Sale IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
               WHERE Inv_Receipt_D.SalesManId = @User_Role_Sale
           ))
      AND EXISTS
        (
            SELECT Parent_ID
            FROM Inv_Receipt_D D
            WHERE D.Parent_ID = H.ID
        )
      AND (@SubsidaryID IS NULL
        OR H.SubsidiaryID = @SubsidaryID)
      AND (@FromDate IS NULL
        OR CAST(H.Entry_Date AS DATE) >= @FromDate)
      AND (@ToDate IS NULL
        OR CAST(H.Entry_Date AS DATE) <= @ToDate)
      AND (@ItemId IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
               WHERE Item_ID = @ItemId
           ))
      AND (@Item_vendor IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
                        left join Inv_Items on Inv_Receipt_d.Item_ID = Inv_Items.ID
                        left join Inv_Items_Vendors on Inv_Items.ID = Inv_Items_Vendors.ItemID
               WHERE (@item_vendor is null or Inv_Items_Vendors.VendorID = @item_vendor)
           ))
      AND (@SalesManId IS NULL
        OR H.Empoyee_ID = @SalesManId)
      AND (@BrachID IS NULL
        OR H.Branch_ID IN (@BrachID))
		and H.Branch_ID in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId)
      AND (@CustomerID IS NULL
        OR H.Vendor_ID = @CustomerID)
      AND (@CashCustomerID IS NULL
        OR H.CashCustomerID = @CashCustomerID)
      AND (@CustomerCatID IS NULL
        OR Inv_CashCustomer.CategoryID IN (@CustomerCatID)
        OR Gl_Accounts.VendorCategoryID IN (@CustomerCatID))
      AND (@FromInvoiceNumber IS NULL
        OR H.Entry_No >= @FromInvoiceNumber)
      AND (@ToInvoiceNumber IS NULL
        OR H.Entry_No <= @ToInvoiceNumber)
      AND (@ItemCategoryID IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_d
                        LEFT JOIN Inv_Items_Categories
                                  ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
               WHERE Inv_Receipt_d.Parent_ID = H.ID
                 AND Inv_Items_Categories.ItemCategory_ID IN
                     (
                         SELECT item
                         FROM dbo.Split(@ItemCategoryID, ',')
                     )
           ))
      AND (@FromTime IS NULL
        OR CAST(H.Entry_Date AS TIME) >= @FromTime)
      AND (@ToTime IS NULL
        OR CAST(H.Entry_Date AS TIME) <= @ToTime)
      AND (@FromCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) >= @FromCustomerActualDeliverDate)
      AND (@ToCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) <= @ToCustomerActualDeliverDate)
      AND (@CustomerStatusID IS NULL
        OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
      AND (@Payment_Type IS NULL
        OR H.Payment_Type = @Payment_Type)
    GROUP BY GL_Accounts.AccountID
           , Inv_CashCustomer.id
           , GL_Accounts.Code
           , Inv_CashCustomer.Name
           , GL_Accounts.Name
           , Inv_CashCustomer.Name_Ar
           , GL_Accounts.Name_Ar
    ORDER BY Inv_CashCustomer.Name
           , GL_Accounts.Name
END
GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Sales_Return_Group_By_customer2_Unitedco]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROC [dbo].[Report_INV_Sales_Return_Group_By_customer2_Unitedco] @FromDate DATE ='2020-07-01'
, @ToDate DATE ='2020-07-31'
, @BrachID INT = NULL
, @CustomerID INT = NULL
, @CashCustomerID INT = NULL
, @CustomerCatID INT = NULL
, @FromInvoiceNumber INT = NULL
, @ToInvoiceNumber INT = NULL
, @ItemCategoryID NVARCHAR(MAX) = -1
, @SubsidaryID INT = NULL
, @ItemId INT = NULL
, @Item_vendor INT = NULL
, @SalesManId INT = NULL
, @FromCustomerActualDeliverDate DATE = NULL
, @ToCustomerActualDeliverDate DATE = NULL
, @FromTime TIME = NULL
, @ToTime TIME = NULL
, @CustomerStatusID INT = NULL
, @Payment_Type INT = NULL
, @User_Role_Sale INT = NULL
,@userId int =13
,@TransactionType nvarchar(max)=null
,@CashDrawer int =NULL
AS
BEGIN

    IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@ItemCategoryID, ',')
            WHERE Item = -1
        )
        SET @ItemCategoryID = NULL
		 IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@TransactionType, ',')
            WHERE Item = -1
        )
        SET @TransactionType = NULL

    if @FromTime is null set @FromTime = ' 00:00:00';
    if @ToTime is null set @ToTime = ' 23:59:59';

    declare
        @fromDateTime DATETIME = null
        , @toDateTime DATETIME = null

    set @fromDateTime = cast(@FromDate as datetime) + cast(@FromTime as datetime)
    set @toDateTime = cast(@ToDate as datetime) + cast(@ToTime as datetime)


    SELECT 
	      GL_Accounts.Code                CustomerCode
		 ,GL_Accounts.Name                CustomerName
		 ,GL_Accounts.Name_AR             CustomerName_Ar
	     ,I_Code                 = I.Code
         , I_Name                 = I.Name
         , I_Name_Ar              = I.Name_AR
         , Net_QTY                = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN D.qty*d.Final_conv
                                            ELSE 0
        END) - SUM(CASE
                       WHEN H.CODE IN (53, 54)
                           THEN D.qty*d.Final_conv
                       ELSE 0
        END)
		,TotalNet=(SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN (D.Total / ISNULL(H.Currency_Rate, 1))
                                            ELSE 0
        END) - SUM(CASE
                       WHEN H.CODE IN (53, 54)
                           THEN (D.Total / ISNULL(H.Currency_Rate, 1))
                       ELSE 0
        END))-((MIN(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN ISNULL( D.H_Discount_Value,0) 
                                            ELSE 0
        END))*(SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN D.qty*d.Final_conv
                                            ELSE 0
        END)))
          , C_S_Sum_NetValue = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN (D.Total / ISNULL(H.Currency_Rate, 1))
                                            ELSE 0
        END)
		  , C_R_Sum_NetValue = SUM(CASE
                                      WHEN H.CODE IN (53, 54)
                                          THEN ISNULL(H.NetValue, 0)
                                      ELSE 0
        END)
         , NetSale                = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN (D.Total / ISNULL(H.Currency_Rate, 1))
                                            ELSE 0
        END) - SUM(CASE
                       WHEN H.CODE IN (53, 54)
                           THEN (D.Total / ISNULL(H.Currency_Rate, 1))
                       ELSE 0
        END)
         , Sales_Cost             = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN d.AvgCost * d.QTY *
                                                     d.final_Conv
                                            ELSE 0
        END)
         , Returns_Cost           = SUM(CASE
                                            WHEN H.CODE IN (53, 54)
                                                THEN d.AvgCost * d.QTY *
                                                     d.final_Conv
                                            ELSE 0
        END)
		
    FROM Inv_Receipt_H H
             LEFT JOIN Inv_Receipt_d D
                       ON D.Parent_ID = H.ID
             LEFT JOIN Inv_Items I
                       ON I.ID = D.Item_ID
             LEFT JOIN Inv_CashCustomer
                       ON Inv_CashCustomer.id = H.CashCustomerID
             LEFT JOIN GL_Accounts
                       ON GL_Accounts.AccountID = H.Vendor_ID
             LEFT JOIN Inv_Unit
                       ON Inv_Unit.ID = I.Selling_UnitId
           
    WHERE D.Item_ID IS NOT NULL
      AND (@SubsidaryID IS NULL
        OR H.SubsidiaryID = @SubsidaryID)
      AND (ISNULL(H.Is_Canceled, 0) <> 1)
      AND (ISNULL(H.IsHolded, 0) <> 1)
      AND (@User_Role_Sale IS NULL
        OR D.SalesManId IN (@User_Role_Sale))
      AND (@ItemId IS NULL
        OR D.Item_ID = @ItemId)
      AND (@CashDrawer IS NULL
        OR H.CashDrawerId = @CashDrawer)
      AND (@Item_vendor IS NULL
        OR D.Item_ID IN
           (
               SELECT Inv_Items_Vendors.ItemID
               FROM Inv_Items_Vendors
               WHERE (@item_vendor is null or Inv_Items_Vendors.VendorID = @item_vendor)
           ))

      AND D.FinishedProductID IS NULL
      AND (@SalesManId IS NULL
        OR H.Empoyee_ID = @SalesManId)
      AND H.Code IN (51, 52, 53, 54)
      AND (@FromDate IS NULL
        OR CAST(H.Entry_Date AS DATETIME) >= @fromDateTime)
      AND (@ToDate IS NULL
        OR CAST(H.Entry_Date AS DATETIME) <= @toDateTime)
      AND (@BrachID IS NULL
        OR H.Branch_ID IN (@BrachID))
		and H.Branch_ID in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId)
      AND (@CustomerID IS NULL
        OR H.Vendor_ID = @CustomerID)
      AND (@CashCustomerID IS NULL
        OR H.CashCustomerID = @CashCustomerID)
      AND (@CustomerCatID IS NULL
        OR Inv_CashCustomer.CategoryID IN (@CustomerCatID)
        OR Gl_Accounts.VendorCategoryID IN (@CustomerCatID))
      AND (@FromInvoiceNumber IS NULL
        OR H.Entry_No >= @FromInvoiceNumber)
      AND (@ToInvoiceNumber IS NULL
        OR H.Entry_No <= @ToInvoiceNumber)
      AND (@ItemCategoryID IS NULL
        OR D.Item_ID IN
           (
               SELECT Inv_Receipt_d.Item_ID
               FROM Inv_Receipt_d
                        LEFT JOIN Inv_Items_Categories
                                  ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
               WHERE Inv_Receipt_d.Parent_ID = H.ID
                 AND Inv_Items_Categories.ItemCategory_ID IN
                     (
                         SELECT item
                         FROM dbo.Split(@ItemCategoryID, ',')
                     )
           ))
		    AND (@TransactionType IS NULL or @TransactionType='-1'
        OR H.Code IN
           (
               SELECT item
               FROM dbo.Split(@TransactionType, ',')
           ))
      AND (@FromTime IS NULL
        OR CAST(H.Entry_Date AS TIME) >= @FromTime)
      AND (@ToTime IS NULL
        OR CAST(H.Entry_Date AS TIME) <= @ToTime)
      AND (@FromCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) >= @FromCustomerActualDeliverDate)
      AND (@ToCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) <= @ToCustomerActualDeliverDate)
      AND (@CustomerStatusID IS NULL
        OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
      AND (@Payment_Type IS NULL
        OR H.Payment_Type = @Payment_Type)
    GROUP BY I.Code
           , I.Name
           , I.Name_AR
           , Inv_Unit.Name_AR
           , I.ID
           , Inv_Unit.Name
		   ,GL_Accounts.Code
		   ,GL_Accounts.Name
		   ,GL_Accounts.Name_AR
    ORDER BY I.Name
	
END

GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Sales_Return_Group_By_D_SalesMan]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Report_INV_Sales_Return_Group_By_D_SalesMan] @FromDate DATE = NULL
, @ToDate DATE = NULL
, @BrachID INT = NULL
, @CustomerID INT = NULL
, @CashCustomerID INT = NULL
, @CustomerCatID INT = NULL
, @FromInvoiceNumber INT = NULL
, @ToInvoiceNumber INT = NULL
, @ItemCategoryID NVARCHAR(MAX) = NULL
, @SubsidaryID INT = NULL
, @ItemId INT = NULL
, @Item_vendor INT = NULL
, @SalesManId INT = NULL
, @FromCustomerActualDeliverDate DATE = NULL
, @ToCustomerActualDeliverDate DATE = NULL
, @FromTime TIME = NULL
, @ToTime TIME = NULL
, @CustomerStatusID INT = NULL
, @Payment_Type INT = NULL
, @User_Role_Sale INT = NULL
,@userId int =null
,@TransactionType nvarchar(max)=null
AS
BEGIN

    IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@ItemCategoryID, ',')
            WHERE Item = -1
        )
        SET @ItemCategoryID = NULL

		SELECT Parent_ID
         , SUM(AvgCost *qty * final_Conv) NetTotalAmount
    INTO #AV_INV_TransactionDetails
    FROM AV_INV_TransactionDetails
    WHERE (@ItemId IS NULL
        OR AV_INV_TransactionDetails.item_id = @ItemId)
    GROUP BY Parent_ID
    SELECT Security_Users_Name    = Security_Users.Name
         , Security_Users_Name_Ar = Security_Users.Name_Ar
         ,                          COUNT(DISTINCT H.ID) Count_All
         ,                          SUM(H.DeliveryFees)  inv_Receipt_H_DeliveryFees
         , C_S_Sum_Qty            = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN D.qty
                                            ELSE 0
        END)
         , C_R_Sum_Qty            = SUM(CASE
                                            WHEN H.CODE IN (53, 54)
                                                THEN D.qty
                                            ELSE 0
        END)
         , Net_QTY                = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN D.qty
                                            ELSE 0
        END) - SUM(CASE
                       WHEN H.CODE IN (53, 54)
                           THEN D.qty
                       ELSE 0
        END)
         , C_S_Sum_Price          = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN (D.Total / ISNULL(H.Currency_Rate, 1)) -
                                                     ISNULL((D.H_Discount_Value / ISNULL(H.Currency_Rate, 1)), 0)
                                            ELSE 0
        END)
         , C_R_Sum_Price          = SUM(CASE
                                            WHEN H.CODE IN (53, 54)
                                                THEN (D.Total / ISNULL(H.Currency_Rate, 1)) -
                                                     ISNULL((D.H_Discount_Value / ISNULL(H.Currency_Rate, 1)), 0)
                                            ELSE 0
        END)
         , NetSale                = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN (D.Total / ISNULL(H.Currency_Rate, 1)) -
                                                     ISNULL((D.H_Discount_Value / ISNULL(H.Currency_Rate, 1)), 0)
                                            ELSE 0
        END) - SUM(CASE
                       WHEN H.CODE IN (53, 54)
                           THEN (D.Total / ISNULL(H.Currency_Rate, 1)) -
                                ISNULL((D.H_Discount_Value / ISNULL(H.Currency_Rate, 1)), 0)
                       ELSE 0
        END)
         , D_H_Discount_Value     = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN D.H_Discount_Value / ISNULL(H.Currency_Rate, 1)
                                            ELSE 0
        END)
         , C_R_Sum_Discount_Value = SUM(CASE
                                            WHEN H.CODE IN (53, 54)
                                                THEN D.Price / ISNULL(H.Currency_Rate, 1)
                                            ELSE 0
        END)
         , C_S_Sum_Total          = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN D.Total
                                            ELSE 0
        END)
         , C_R_Sum_Total          = SUM(CASE
                                            WHEN H.CODE IN (53, 54)
                                                THEN D.Total
                                            ELSE 0
        END)
         , Sales_Cost             = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                              --  THEN AV_TransactionDetails.NetTotalAmount
											  Then d.AvgCost * d.qty * d.Final_conv
                                            ELSE 0
        END)
         , Returns_Cost           = SUM(CASE
                                            WHEN H.CODE IN (53, 54)
                                              --  THEN AV_TransactionDetails.NetTotalAmount
											   Then d.AvgCost * d.qty * d.Final_conv
                                            ELSE 0
        END)
    FROM Inv_Receipt_H H
             LEFT JOIN
         Inv_Receipt_d D ON D.Parent_ID = H.ID
             LEFT JOIN
         Inv_Items I ON I.ID = D.Item_ID
             LEFT JOIN
         Inv_CashCustomer ON Inv_CashCustomer.id = H.CashCustomerID
             LEFT JOIN
         GL_Accounts ON GL_Accounts.AccountID = H.Vendor_ID
             LEFT JOIN
         Inv_Unit ON Inv_Unit.ID = I.Selling_UnitId
             LEFT JOIN
         Security_Users ON D.SalesManId = Security_Users.Id
             LEFT JOIN
         #AV_INV_TransactionDetails AV_TransactionDetails ON  
              AV_TransactionDetails.Parent_ID = H.ID
    WHERE D.Item_ID IS NOT NULL
      AND H.Code IN (51, 52, 53, 54)
      AND (ISNULL(H.Is_Canceled, 0) <> 1)
      AND (ISNULL(H.IsHolded, 0) <> 1)
	   AND (@TransactionType IS NULL or @TransactionType='-1'
        OR H.Code IN
           (
               SELECT item
               FROM dbo.Split(@TransactionType, ',')
           ))
      AND (@User_Role_Sale IS NULL
        OR D.SalesManId IN (@User_Role_Sale))
      AND D.FinishedProductID IS NULL
      AND (@ItemId IS NULL
        OR D.Item_ID = @ItemId)
      AND (@Item_vendor IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
                        left join Inv_Items on Inv_Receipt_d.Item_ID = Inv_Items.ID
                        left join Inv_Items_Vendors on Inv_Items.ID = Inv_Items_Vendors.ItemID
               WHERE (@item_vendor is null or Inv_Items_Vendors.VendorID = @item_vendor)
           ))

      AND (@SalesManId IS NULL
        OR H.Empoyee_ID = @SalesManId)
      AND (@SubsidaryID IS NULL
        OR H.SubsidiaryID = @SubsidaryID)
      AND (@FromDate IS NULL
        OR CAST(H.Entry_Date AS DATE) >= @FromDate)
      AND (@ToDate IS NULL
        OR CAST(H.Entry_Date AS DATE) <= @ToDate)
      AND (@BrachID IS NULL
        OR H.Branch_ID IN (@BrachID))
			and H.Branch_ID in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId)
    
      AND (@CustomerID IS NULL
        OR H.Vendor_ID = @CustomerID)
      AND (@CashCustomerID IS NULL
        OR H.CashCustomerID = @CashCustomerID)
      AND (@CustomerCatID IS NULL
        OR Inv_CashCustomer.CategoryID IN (@CustomerCatID)
        OR Gl_Accounts.VendorCategoryID IN (@CustomerCatID))
      AND (@FromInvoiceNumber IS NULL
        OR H.Entry_No >= @FromInvoiceNumber)
      AND (@ToInvoiceNumber IS NULL
        OR H.Entry_No <= @ToInvoiceNumber)
      AND (@ItemCategoryID IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_d
                        LEFT JOIN
                    Inv_Items_Categories ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
               WHERE Inv_Receipt_d.Parent_ID = H.ID
                 AND Inv_Items_Categories.ItemCategory_ID IN
                     (
                         SELECT item
                         FROM dbo.Split(@ItemCategoryID, ',')
                     )
           ))
      AND (@FromTime IS NULL
        OR CAST(H.Entry_Date AS TIME) >= @FromTime)
      AND (@ToTime IS NULL
        OR CAST(H.Entry_Date AS TIME) <= @ToTime)
      AND (@FromCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) >= @FromCustomerActualDeliverDate)
      AND (@ToCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) <= @ToCustomerActualDeliverDate)
      AND (@CustomerStatusID IS NULL
        OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
      AND (@Payment_Type IS NULL
        OR H.Payment_Type = @Payment_Type)
    GROUP BY Security_Users.Name
           , Security_Users.Name_AR
           , Security_Users.Id
    ORDER BY Security_Users.Name
END

 
GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Sales_Return_Group_By_Date_Day]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Report_INV_Sales_Return_Group_By_Date_Day] @FromDate DATE = NULL
, @ToDate DATE = NULL
, @BrachID INT = NULL
, @CustomerID INT = NULL
, @CashCustomerID INT = NULL
, @CustomerCatID INT = NULL
, @FromInvoiceNumber INT = NULL
, @ToInvoiceNumber INT = NULL
, @ItemCategoryID NVARCHAR(MAX) = NULL
, @SubsidaryID INT = NULL
, @ItemId INT = NULL
, @Item_vendor INT = NULL
, @SalesManId INT = NULL
, @FromCustomerActualDeliverDate DATE = NULL
, @ToCustomerActualDeliverDate DATE = NULL
, @FromTime TIME = NULL
, @ToTime TIME = NULL
, @CustomerStatusID INT = NULL
, @Payment_Type INT = NULL
, @User_Role_Sale INT = NULL
,@userId int =null
,@TransactionType nvarchar(max)=null
AS
BEGIN

    IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@ItemCategoryID, ',')
            WHERE Item = -1
        )
        SET @ItemCategoryID = NULL
			 IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@TransactionType, ',')
            WHERE Item = -1
        )
        SET @TransactionType = NULL
    SELECT Parent_ID
         , SUM(AvgCost * QTY * final_Conv )    NetTotalAmount
    INTO #AV_INV_TransactionDetails
    FROM Inv_Receipt_D
    WHERE (@ItemId IS NULL
        OR Inv_Receipt_D.item_id = @ItemId)
		and Inv_Receipt_D.FinishedProductID is null
    GROUP BY Parent_ID
    SELECT Date             = CAST(H.Entry_Date AS DATE)
         , C_S_Sum_NetValue = SUM(CASE
                                      WHEN H.CODE IN (51, 52)
                                          THEN ISNULL(H.NetValue, 0)
                                      ELSE 0
        END)
         , C_R_Sum_NetValue = SUM(CASE
                                      WHEN H.CODE IN (53, 54)
                                          THEN ISNULL(H.NetValue, 0)
                                      ELSE 0
        END)
         , NetSale          = SUM(CASE
                                      WHEN H.CODE IN (51, 52)
                                          THEN ISNULL(H.NetValue, 0)
                                      ELSE 0
        END) - SUM(CASE
                       WHEN H.CODE IN (53, 54)
                           THEN ISNULL(H.NetValue, 0)
                       ELSE 0
        END)
         , Sales_Cost       = SUM(CASE
                                      WHEN H.CODE IN (51, 52)
                                          THEN AV_TransactionDetails.NetTotalAmount
                                      ELSE 0
        END)
         , Returns_Cost     = SUM(CASE
                                      WHEN H.CODE IN (53, 54)
                                          THEN AV_TransactionDetails.NetTotalAmount
                                      ELSE 0
        END)
    FROM Inv_Receipt_H H
             LEFT JOIN Inv_CashCustomer
                       ON Inv_CashCustomer.id = H.CashCustomerID
             LEFT JOIN GL_Accounts
                       ON GL_Accounts.AccountID = H.Vendor_ID
             LEFT JOIN #AV_INV_TransactionDetails AV_TransactionDetails
                       ON AV_TransactionDetails.Parent_ID = H.ID
    WHERE H.Code IN (51, 52, 53, 54)
      AND (ISNULL(H.Is_Canceled, 0) <> 1)
      AND (ISNULL(H.IsHolded, 0) <> 1)
	   AND (@TransactionType IS NULL or @TransactionType='-1'
        OR  CAST(H.Code as int) IN
           (
               SELECT ISNULL(CAST(item as INT),0)
               FROM dbo.Split(@TransactionType, ',')
           ))
      AND (@User_Role_Sale IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
               WHERE Inv_Receipt_D.SalesManId = @User_Role_Sale
           ))
      AND EXISTS
        (
            SELECT Parent_ID
            FROM Inv_Receipt_D D
            WHERE D.Parent_ID = H.ID
        )
      AND (@SubsidaryID IS NULL
        OR H.SubsidiaryID = @SubsidaryID)
      AND (@FromDate IS NULL
        OR CAST(H.Entry_Date AS DATE) >= @FromDate)
      AND (@ToDate IS NULL
        OR CAST(H.Entry_Date AS DATE) <= @ToDate)
      AND (@ItemId IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
               WHERE Item_ID = @ItemId
           ))
      AND (@Item_vendor IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
                        left join Inv_Items on Inv_Receipt_d.Item_ID = Inv_Items.ID
                        left join Inv_Items_Vendors on Inv_Items.ID = Inv_Items_Vendors.ItemID
               WHERE (@item_vendor is null or Inv_Items_Vendors.VendorID = @item_vendor)
           ))

      AND (@SalesManId IS NULL
        OR H.Empoyee_ID = @SalesManId)
      AND (@BrachID IS NULL
        OR H.Branch_ID IN (@BrachID))
		and H.Branch_ID in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId)
      AND (@CustomerID IS NULL
        OR H.Vendor_ID = @CustomerID)
      AND (@CashCustomerID IS NULL
        OR H.CashCustomerID = @CashCustomerID)
      AND (@CustomerCatID IS NULL
        OR Inv_CashCustomer.CategoryID IN (@CustomerCatID)
        OR Gl_Accounts.VendorCategoryID IN (@CustomerCatID))
      AND (@FromInvoiceNumber IS NULL
        OR H.Entry_No >= @FromInvoiceNumber)
      AND (@ToInvoiceNumber IS NULL
        OR H.Entry_No <= @ToInvoiceNumber)
      AND (@ItemCategoryID IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_d
                        LEFT JOIN Inv_Items_Categories
                                  ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
               WHERE Inv_Receipt_d.Parent_ID = H.ID
                 AND Inv_Items_Categories.ItemCategory_ID IN
                     (
                         SELECT item
                         FROM dbo.Split(@ItemCategoryID, ',')
                     )
           ))
      AND (@FromTime IS NULL
        OR CAST(H.Entry_Date AS TIME) >= @FromTime)
      AND (@ToTime IS NULL
        OR CAST(H.Entry_Date AS TIME) <= @ToTime)
      AND (@FromCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) >= @FromCustomerActualDeliverDate)
      AND (@ToCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) <= @ToCustomerActualDeliverDate)
      AND (@CustomerStatusID IS NULL
        OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
      AND (@Payment_Type IS NULL
        OR H.Payment_Type = @Payment_Type)
    GROUP BY CAST(H.Entry_Date AS DATE)
    ORDER BY CAST(H.Entry_Date AS DATE)
END
GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Sales_Return_Group_By_Date_Day_SalesMan]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Report_INV_Sales_Return_Group_By_Date_Day_SalesMan] @FromDate DATE = NULL
, @ToDate DATE = NULL
, @BrachID INT = NULL
, @CustomerID INT = NULL
, @CashCustomerID INT = NULL
, @CustomerCatID INT = NULL
, @FromInvoiceNumber INT = NULL
, @ToInvoiceNumber INT = NULL
, @ItemCategoryID NVARCHAR(MAX) = NULL
,@TransactionType NVARCHAR(MAX) = NULL
, @SubsidaryID INT = NULL
, @ItemId INT = NULL
, @Item_vendor INT = NULL
, @SalesManId INT = NULL
, @FromCustomerActualDeliverDate DATE = NULL
, @ToCustomerActualDeliverDate DATE = NULL
, @FromTime TIME = NULL
, @ToTime TIME = NULL
, @CustomerStatusID INT = NULL
, @Payment_Type INT = NULL
, @User_Role_Sale INT = NULL
,@userId int =null
AS
BEGIN

    IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@ItemCategoryID, ',')
            WHERE Item = -1
        )
        SET @ItemCategoryID = NULL

    SELECT Parent_ID
         , SUM(AvgCost * QTY *  final_Conv)    NetTotalAmount 
    INTO #AV_INV_TransactionDetails
    FROM Inv_Receipt_D
    WHERE (@ItemId IS NULL
        OR Inv_Receipt_D.item_id = @ItemId)
		and Inv_Receipt_D.FinishedProductID is null
    GROUP BY Parent_ID
    SELECT 
	Security_Users_Name = Security_Users.Name
             , Security_Users_Name_Ar = Security_Users.Name_Ar,
			 mstr_Branch.Code as BranchCode,

			 mstr_Branch.Name as BranchName,
			  mstr_Branch.Name_AR as BranchNameAr,
	Date             = CAST(H.Entry_Date AS DATE)
         , C_S_Sum_NetValue = SUM(CASE
                                      WHEN H.CODE IN (51, 52)
                                          THEN ISNULL(H.NetValue, 0)
                                      ELSE 0
        END)
         , C_R_Sum_NetValue = SUM(CASE
                                      WHEN H.CODE IN (53, 54)
                                          THEN ISNULL(H.NetValue, 0)
                                      ELSE 0
        END)
         , NetSale          = SUM(CASE
                                      WHEN H.CODE IN (51, 52)
                                          THEN ISNULL(H.NetValue, 0)
                                      ELSE 0
        END) - SUM(CASE
                       WHEN H.CODE IN (53, 54)
                           THEN ISNULL(H.NetValue, 0)
                       ELSE 0
        END)
         , Sales_Cost       = SUM(CASE
                                      WHEN H.CODE IN (51, 52)
                                          THEN AV_TransactionDetails.NetTotalAmount
                                      ELSE 0
        END)
         , Returns_Cost     = SUM(CASE
                                      WHEN H.CODE IN (53, 54)
                                          THEN AV_TransactionDetails.NetTotalAmount
                                      ELSE 0
        END)
    FROM Inv_Receipt_H H
           LEFT JOIN
        Security_Users ON H.Empoyee_ID = Security_Users.Id
		  LEFT JOIN Inv_CashCustomer
                       ON Inv_CashCustomer.id = H.CashCustomerID
             LEFT JOIN GL_Accounts
                       ON GL_Accounts.AccountID = H.Vendor_ID
             LEFT JOIN #AV_INV_TransactionDetails AV_TransactionDetails
                      ON AV_TransactionDetails.Parent_ID = H.ID
					  left join mstr_Branch
					  on h.Branch_ID=mstr_Branch.id
    WHERE H.Code IN (51, 52, 53, 54)
      AND (ISNULL(H.Is_Canceled, 0) <> 1)
      AND (ISNULL(H.IsHolded, 0) <> 1)
      AND (@User_Role_Sale IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
               WHERE Inv_Receipt_D.SalesManId = @User_Role_Sale
           ))
      AND EXISTS
        (
            SELECT Parent_ID
            FROM Inv_Receipt_D D
            WHERE D.Parent_ID = H.ID
        )
      AND (@SubsidaryID IS NULL
        OR H.SubsidiaryID = @SubsidaryID)
      AND (@FromDate IS NULL
        OR CAST(H.Entry_Date AS DATE) >= @FromDate)
      AND (@ToDate IS NULL
        OR CAST(H.Entry_Date AS DATE) <= @ToDate)
      AND (@ItemId IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
               WHERE Item_ID = @ItemId
           ))
      AND (@Item_vendor IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
                        left join Inv_Items on Inv_Receipt_d.Item_ID = Inv_Items.ID
                        left join Inv_Items_Vendors on Inv_Items.ID = Inv_Items_Vendors.ItemID
               WHERE (@item_vendor is null or Inv_Items_Vendors.VendorID = @item_vendor)
           ))

      AND (@SalesManId IS NULL
        OR H.Empoyee_ID = @SalesManId)
      AND (@BrachID IS NULL
        OR H.Branch_ID IN (@BrachID))
		and H.Branch_ID in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId)
      AND (@CustomerID IS NULL
        OR H.Vendor_ID = @CustomerID)
      AND (@CashCustomerID IS NULL
        OR H.CashCustomerID = @CashCustomerID)
      AND (@CustomerCatID IS NULL
        OR Inv_CashCustomer.CategoryID IN (@CustomerCatID)
        OR Gl_Accounts.VendorCategoryID IN (@CustomerCatID))
      AND (@FromInvoiceNumber IS NULL
        OR H.Entry_No >= @FromInvoiceNumber)
      AND (@ToInvoiceNumber IS NULL
        OR H.Entry_No <= @ToInvoiceNumber)
      AND (@ItemCategoryID IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_d
                        LEFT JOIN Inv_Items_Categories
                                  ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
								   
               WHERE Inv_Receipt_d.Parent_ID = H.ID
                 AND Inv_Items_Categories.ItemCategory_ID IN
                     (
                         SELECT item
                         FROM dbo.Split(@ItemCategoryID, ',')
                     )
				
           ))
      AND (@TransactionType ='-1' or @TransactionType is null or @TransactionType=''
          OR H.Code IN
           (
               SELECT item
                         FROM dbo.Split(@TransactionType, ',')
           ))
	AND (@FromTime IS NULL
        OR CAST(H.Entry_Date AS TIME) >= @FromTime)
      AND (@ToTime IS NULL
        OR CAST(H.Entry_Date AS TIME) <= @ToTime)
      AND (@FromCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) >= @FromCustomerActualDeliverDate)
      AND (@ToCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) <= @ToCustomerActualDeliverDate)
      AND (@CustomerStatusID IS NULL
        OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
      AND (@Payment_Type IS NULL
        OR H.Payment_Type = @Payment_Type)
			
    GROUP BY CAST(H.Entry_Date AS DATE),
	  Security_Users.Name
             , Security_Users.Name_Ar,
			 mstr_Branch.Code ,

			 mstr_Branch.Name  ,
			  mstr_Branch.Name_AR 
    ORDER BY CAST(H.Entry_Date AS DATE)
END
GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Sales_Return_Group_By_Date_Month_Year]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Report_INV_Sales_Return_Group_By_Date_Month_Year] @FromDate DATE =  '20200101'  
, @ToDate DATE =  '20200310'  
, @BrachID INT = NULL
, @CustomerID INT = NULL
, @CashCustomerID INT = NULL
, @CustomerCatID INT = NULL
, @FromInvoiceNumber INT = NULL
, @ToInvoiceNumber INT = NULL
, @ItemCategoryID NVARCHAR(MAX) = NULL
, @SubsidaryID INT = NULL
, @ItemId INT = NULL
, @Item_vendor INT = NULL
, @SalesManId INT = NULL
, @FromCustomerActualDeliverDate DATE = NULL
, @ToCustomerActualDeliverDate DATE = NULL
, @FromTime TIME = NULL
, @ToTime TIME = NULL
, @CustomerStatusID INT = NULL
, @Payment_Type INT = NULL
, @User_Role_Sale INT = NULL
,@userId int =13
,@TransactionType nvarchar(max)=null
AS
BEGIN
		 IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@TransactionType, ',')
            WHERE Item = -1
        )
        SET @TransactionType = NULL
    IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@ItemCategoryID, ',')
            WHERE Item = -1
        )
        SET @ItemCategoryID = NULL
		--DROP TABLE IF EXISTS #AV_INV_TransactionDetails
    SELECT Parent_ID
         , SUM(AvgCost * QTY *  final_Conv)    NetTotalAmount 
    INTO #AV_INV_TransactionDetails
    FROM AV_INV_TransactionDetails
    WHERE (@ItemId IS NULL
        OR AV_INV_TransactionDetails.item_id = @ItemId)
    GROUP BY Parent_ID

    SELECT Date             = CAST(MONTH(H.Entry_Date) AS NVARCHAR(50)) + ' / ' +
                              CAST(YEAR(H.Entry_Date) AS NVARCHAR(50))
         , C_S_Sum_NetValue = SUM(CASE
                                      WHEN H.CODE IN (51, 52)
                                          THEN h.NetValue
                                      ELSE 0
        END)
         , C_R_Sum_NetValue = SUM(CASE
                                      WHEN H.CODE IN (53, 54)
                                          THEN h.NetValue
                                      ELSE 0
        END)
         , NetSale          =  
		  SUM(CASE     WHEN h.CODE IN (51, 52)
                         THEN  AV_TransactionDetails.NetTotalAmount
						ELSE 0
			 END) 
		-
		SUM(CASE WHEN h.CODE IN (53,54)
                   THEN AV_TransactionDetails.NetTotalAmount
                 ELSE 0
        END)   
         , Sales_Cost       =  		 SUM(CASE
                                      WHEN H.CODE IN (51, 52)
                                          THEN AV_TransactionDetails.NetTotalAmount
                                      ELSE 0
        END)
         , Returns_Cost     = SUM(CASE
                                      WHEN H.CODE IN (53, 54)
                                          THEN AV_TransactionDetails.NetTotalAmount
                                      ELSE 0
        END)
    FROM Inv_Receipt_H H
             LEFT JOIN
         Inv_CashCustomer ON Inv_CashCustomer.id = H.CashCustomerID
             LEFT JOIN
         GL_Accounts ON GL_Accounts.AccountID = H.Vendor_ID
             LEFT JOIN
         #AV_INV_TransactionDetails  AV_TransactionDetails ON AV_TransactionDetails.Parent_ID = H.ID
    WHERE      H.Code IN (51, 52 , 53, 54)
      AND (ISNULL(H.Is_Canceled, 0) <> 1)
      AND (ISNULL(H.IsHolded, 0) <> 1)
	   AND (@TransactionType IS NULL or @TransactionType='-1'
        OR H.Code IN
           (
               SELECT item
               FROM dbo.Split(@TransactionType, ',')
           ))
     
      AND (@User_Role_Sale IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
               WHERE Inv_Receipt_D.SalesManId = @User_Role_Sale
           ))
      AND EXISTS
        (
            SELECT Parent_ID
            FROM Inv_Receipt_D D
            WHERE D.Parent_ID = H.ID
        )
      AND (@SubsidaryID IS NULL
        OR H.SubsidiaryID = @SubsidaryID)
      AND (@FromDate IS NULL
        OR CAST(H.Entry_Date AS DATE) >= @FromDate)
      AND (@ToDate IS NULL
        OR CAST(H.Entry_Date AS DATE) <= @ToDate)
      AND (@ItemId IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
               WHERE Item_ID = @ItemId
           ))
      AND (@Item_vendor IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
                        left join Inv_Items on Inv_Receipt_d.Item_ID = Inv_Items.ID
                        left join Inv_Items_Vendors on Inv_Items.ID = Inv_Items_Vendors.ItemID
               WHERE (@item_vendor is null or Inv_Items_Vendors.VendorID = @item_vendor)
           ))

      AND (@SalesManId IS NULL
        OR H.Empoyee_ID = @SalesManId)
      AND (@BrachID IS NULL
        OR H.Branch_ID IN (@BrachID))
		and H.Branch_ID in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId)
      AND (@CustomerID IS NULL
        OR H.Vendor_ID = @CustomerID)
      AND (@CashCustomerID IS NULL
        OR H.CashCustomerID = @CashCustomerID)
      AND (@CustomerCatID IS NULL
        OR Inv_CashCustomer.CategoryID IN (@CustomerCatID)
        OR Gl_Accounts.VendorCategoryID IN (@CustomerCatID))
      AND (@FromInvoiceNumber IS NULL
        OR H.Entry_No >= @FromInvoiceNumber)
      AND (@ToInvoiceNumber IS NULL
        OR H.Entry_No <= @ToInvoiceNumber)
      AND (@ItemCategoryID IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_d
                        LEFT JOIN
                    Inv_Items_Categories ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
               WHERE Inv_Receipt_d.Parent_ID = H.ID
                 AND Inv_Items_Categories.ItemCategory_ID IN
                     (
                         SELECT item
                         FROM dbo.Split(@ItemCategoryID, ',')
                     )
           ))
      AND (@FromTime IS NULL
        OR CAST(H.Entry_Date AS TIME) >= @FromTime)
      AND (@ToTime IS NULL
        OR CAST(H.Entry_Date AS TIME) <= @ToTime)
      AND (@FromCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) >= @FromCustomerActualDeliverDate)
      AND (@ToCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) <= @ToCustomerActualDeliverDate)
      AND (@CustomerStatusID IS NULL
        OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
      AND (@Payment_Type IS NULL
        OR H.Payment_Type = @Payment_Type)
    GROUP BY MONTH(H.Entry_Date)
           , YEAR(H.Entry_Date)
    ORDER BY MONTH(H.Entry_Date)
           , YEAR(H.Entry_Date)
END
GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Sales_Return_Group_By_Driver]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Report_INV_Sales_Return_Group_By_Driver] @FromDate DATE = NULL
, @ToDate DATE = NULL
, @BrachID INT = NULL
, @CustomerID INT = NULL
, @CashCustomerID INT = NULL
, @CustomerCatID INT = NULL
, @FromInvoiceNumber INT = NULL
, @ToInvoiceNumber INT = NULL
, @ItemCategoryID NVARCHAR(MAX) = NULL
, @SubsidaryID INT = NULL
, @ItemId INT = NULL
, @Item_vendor INT = NULL
, @SalesManId INT = NULL
, @FromCustomerActualDeliverDate DATE = NULL
, @ToCustomerActualDeliverDate DATE = NULL
, @FromTime TIME = NULL
, @ToTime TIME = NULL
, @CustomerStatusID INT = NULL
, @Payment_Type INT = NULL
, @User_Role_Sale INT = NULL
,@userId int =null
,@TransactionType nvarchar(max)=null
AS
BEGIN

    IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@ItemCategoryID, ',')
            WHERE Item = -1
        )
        SET @ItemCategoryID = NULL

    SELECT Parent_ID
         , SUM(AvgCost *qty * final_Conv) NetTotalAmount
    INTO #AV_INV_TransactionDetails
    FROM AV_INV_TransactionDetails
    WHERE (@ItemId IS NULL
        OR AV_INV_TransactionDetails.item_id = @ItemId)
    GROUP BY Parent_ID

    SELECT Security_Users_Name    = Security_Users.Name
         , Security_Users_Name_Ar = Security_Users.Name_Ar
         ,                          COUNT(DISTINCT H.ID) Count_All
         , C_S_Sum_NetValue       = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN ISNULL(H.NetValue, 0)
                                            ELSE 0
        END)
         , C_R_Sum_NetValue       = SUM(CASE
                                            WHEN H.CODE IN (53, 54)
                                                THEN ISNULL(H.NetValue, 0)
                                            ELSE 0
        END)
         , NetSale                = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN ISNULL(H.NetValue, 0)
                                            ELSE 0
        END) - SUM(CASE
                       WHEN H.CODE IN (53, 54)
                           THEN ISNULL(H.NetValue, 0)
                       ELSE 0
        END)
         , Sales_Cost             = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN AV_TransactionDetails.NetTotalAmount 
                                            ELSE 0
        END)
         , Returns_Cost           = SUM(CASE
                                            WHEN H.CODE IN (53, 54)
                                                THEN AV_TransactionDetails.NetTotalAmount
                                            ELSE 0
        END)
    FROM Inv_Receipt_H H
             LEFT JOIN
         Security_Users ON H.DriverId = Security_Users.Id
             LEFT JOIN
         Inv_CashCustomer ON Inv_CashCustomer.id = H.CashCustomerID
             LEFT JOIN
         GL_Accounts ON GL_Accounts.AccountID = H.Vendor_ID
             LEFT JOIN
         #AV_INV_TransactionDetails AV_TransactionDetails ON AV_TransactionDetails.Parent_ID = H.ID
    WHERE H.Code IN (51, 52, 53, 54)
      AND (ISNULL(H.Is_Canceled, 0) <> 1)
      AND (ISNULL(H.IsHolded, 0) <> 1)
	   AND (@TransactionType IS NULL or @TransactionType='-1'
        OR H.Code IN
           (
               SELECT item
               FROM dbo.Split(@TransactionType, ',')
           ))
      AND (@User_Role_Sale IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
               WHERE Inv_Receipt_D.SalesManId = @User_Role_Sale
           ))
      AND EXISTS
        (
            SELECT Parent_ID
            FROM Inv_Receipt_D D
            WHERE D.Parent_ID = H.ID
        )
      AND (@SubsidaryID IS NULL
        OR H.SubsidiaryID = @SubsidaryID)
      AND (@FromDate IS NULL
        OR CAST(H.Entry_Date AS DATE) >= @FromDate)
      AND (@ToDate IS NULL
        OR CAST(H.Entry_Date AS DATE) <= @ToDate)
      AND (@ItemId IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
               WHERE Item_ID = @ItemId
           ))
      AND (@Item_vendor IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
                        left join Inv_Items on Inv_Receipt_d.Item_ID = Inv_Items.ID
                        left join Inv_Items_Vendors on Inv_Items.ID = Inv_Items_Vendors.ItemID
               WHERE (@item_vendor is null or Inv_Items_Vendors.VendorID = @item_vendor)
           ))

      AND (@SalesManId IS NULL
        OR H.Empoyee_ID = @SalesManId)
      AND (@BrachID IS NULL
        OR H.Branch_ID IN (@BrachID))
		and H.Branch_ID in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId)
      AND (@CustomerID IS NULL
        OR H.Vendor_ID = @CustomerID)
      AND (@CashCustomerID IS NULL
        OR H.CashCustomerID = @CashCustomerID)
      AND (@CustomerCatID IS NULL
        OR Inv_CashCustomer.CategoryID IN (@CustomerCatID)
        OR Gl_Accounts.VendorCategoryID IN (@CustomerCatID))
      AND (@FromInvoiceNumber IS NULL
        OR H.Entry_No >= @FromInvoiceNumber)
      AND (@ToInvoiceNumber IS NULL
        OR H.Entry_No <= @ToInvoiceNumber)
      AND (@ItemCategoryID IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_d
                        LEFT JOIN
                    Inv_Items_Categories ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
               WHERE Inv_Receipt_d.Parent_ID = H.ID
                 AND Inv_Items_Categories.ItemCategory_ID IN
                     (
                         SELECT item
                         FROM dbo.Split(@ItemCategoryID, ',')
                     )
           ))
      AND (@FromTime IS NULL
        OR CAST(H.Entry_Date AS TIME) >= @FromTime)
      AND (@ToTime IS NULL
        OR CAST(H.Entry_Date AS TIME) <= @ToTime)
      AND (@FromCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) >= @FromCustomerActualDeliverDate)
      AND (@ToCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) <= @ToCustomerActualDeliverDate)
      AND (@CustomerStatusID IS NULL
        OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
      AND (@Payment_Type IS NULL
        OR H.Payment_Type = @Payment_Type)
    GROUP BY Security_Users.Name
           , Security_Users.Name_AR
           , Security_Users.Id
    ORDER BY Security_Users.Name
END
GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Sales_Return_Group_By_Item_Category]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Report_INV_Sales_Return_Group_By_Item_Category] @FromDate DATE ='2020-01-01'
, @ToDate DATE ='2020-01-20'
, @BrachID INT = NULL
, @CustomerID INT = NULL
, @CashCustomerID INT = NULL
, @CustomerCatID INT = NULL
, @FromInvoiceNumber INT = NULL
, @ToInvoiceNumber INT = NULL
, @ItemCategoryID NVARCHAR(MAX) = NULL
, @SubsidaryID INT = NULL
, @ItemId INT = NULL
, @Item_vendor INT = NULL
, @SalesManId INT = NULL
, @FromCustomerActualDeliverDate DATE = NULL
, @ToCustomerActualDeliverDate DATE = NULL
, @FromTime TIME = NULL
, @ToTime TIME = NULL
, @CustomerStatusID INT = NULL
, @Payment_Type INT = NULL
, @User_Role_Sale INT = NULL
,@userId int =5
,@TransactionType nvarchar(max)=null
AS
BEGIN

    IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@ItemCategoryID, ',')
            WHERE Item = -1
        )
        SET @ItemCategoryID = NULL
		 IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@TransactionType, ',')
            WHERE Item = -1
        )
        SET @TransactionType = NULL

    if @FromTime is null set @FromTime = ' 00:00:00';
    if @ToTime is null set @ToTime = ' 23:59:59';

    declare
        @fromDateTime DATETIME = null
        , @toDateTime DATETIME = null

    set @fromDateTime = cast(@FromDate as datetime) + cast(@FromTime as datetime)
    set @toDateTime = cast(@ToDate as datetime) + cast(@ToTime as datetime)

	
    SELECT  
	
	      --Item_Category_S          = Inv_ProductCategories.Name
       --  , Item_Category_AR_S       = Inv_ProductCategories.Name_Ar  
		 Min(Inv_Items_Categories.ItemCategory_ID)  ItemCategory_ID
		 ,(select top 1 Inv_ProductCategories.Name  from Inv_ProductCategories where Inv_ProductCategories.ID= Min(Inv_Items_Categories.ItemCategory_ID))  Item_Category_S
		 ,(select top 1 Inv_ProductCategories.Name_AR from Inv_ProductCategories where Inv_ProductCategories.ID= Min(Inv_Items_Categories.ItemCategory_ID))  Item_Category_AR_S
		  ,Inv_ProductCategories.ID as ID_S
 
         ,                          COUNT(DISTINCT H.ID) Count_All
         ,                          SUM(H.DeliveryFees)  inv_Receipt_H_DeliveryFees
         , C_S_Sum_Qty            = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN D.qty*d.Final_conv
                                            ELSE 0
        END)
         , C_R_Sum_Qty            = SUM(CASE
                                            WHEN H.CODE IN (53, 54)
                                                THEN D.qty*d.Final_conv
                                            ELSE 0
        END)
         , Net_QTY                = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN D.qty*d.Final_conv
                                            ELSE 0
        END) - SUM(CASE
                       WHEN H.CODE IN (53, 54)
                           THEN D.qty*d.Final_conv
                       ELSE 0
        END)
         , C_S_Sum_Price          = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN (D.Total / ISNULL(H.Currency_Rate, 1))
                                            ELSE 0
        END)
         , C_R_Sum_Price          = SUM(CASE
                                            WHEN H.CODE IN (53, 54)
                                                THEN (D.Total / ISNULL(H.Currency_Rate, 1))
                                            ELSE 0
        END)
         , NetSale                = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN (D.Total / ISNULL(H.Currency_Rate, 1))
                                            ELSE 0
        END) - SUM(CASE
                       WHEN H.CODE IN (53, 54)
                           THEN (D.Total / ISNULL(H.Currency_Rate, 1))
                       ELSE 0
        END)
         , D_H_Discount_Value     = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN D.H_Discount_Value / ISNULL(H.Currency_Rate, 1)
                                            ELSE 0
        END)
         , C_R_Sum_Discount_Value = SUM(CASE
                                            WHEN H.CODE IN (53, 54)
                                                THEN D.Price / ISNULL(H.Currency_Rate, 1)
                                            ELSE 0
        END)
         , C_S_Sum_Total          = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN D.Total
                                            ELSE 0
        END)
         , C_R_Sum_Total          = SUM(CASE
                                            WHEN H.CODE IN (53, 54)
                                                THEN D.Total
                                            ELSE 0
        END)
         , Sales_Cost             = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN d.AvgCost * d.QTY *
                                                     d.final_Conv
                                            ELSE 0
        END)
         , Returns_Cost           = SUM(CASE
                                            WHEN H.CODE IN (53, 54)
                                                THEN d.AvgCost * d.QTY *
                                                     d.final_Conv
                                            ELSE 0
        END)
    FROM Inv_Receipt_H H
             LEFT JOIN Inv_Receipt_d D
                       ON D.Parent_ID = H.ID
             LEFT JOIN Inv_Items I
                       ON I.ID = D.Item_ID
             LEFT JOIN Inv_CashCustomer
                       ON Inv_CashCustomer.id = H.CashCustomerID
             LEFT JOIN GL_Accounts
                       ON GL_Accounts.AccountID = H.Vendor_ID
             LEFT JOIN Inv_Unit
                       ON Inv_Unit.ID = I.Selling_UnitId
           LEFT JOIN Inv_Items_Categories
                       ON Inv_Items_Categories.Item_ID = I.ID
           LEFT JOIN Inv_ProductCategories
                       ON Inv_Items_Categories.ItemCategory_ID = Inv_Items_Categories.ID
           
    WHERE D.Item_ID IS NOT NULL
      AND (@SubsidaryID IS NULL
        OR H.SubsidiaryID = @SubsidaryID)
      AND (ISNULL(H.Is_Canceled, 0) <> 1)
      AND (ISNULL(H.IsHolded, 0) <> 1)
      AND (@User_Role_Sale IS NULL
        OR D.SalesManId IN (@User_Role_Sale))
      AND (@ItemId IS NULL
        OR D.Item_ID = @ItemId)
      AND (@Item_vendor IS NULL
        OR D.Item_ID IN
           (
               SELECT Inv_Items_Vendors.ItemID
               FROM Inv_Items_Vendors
               WHERE (@item_vendor is null or Inv_Items_Vendors.VendorID = @item_vendor)
           ))

      AND D.FinishedProductID IS NULL
      AND (@SalesManId IS NULL
        OR H.Empoyee_ID = @SalesManId)
      AND H.Code IN (51, 52, 53, 54)
      AND (@FromDate IS NULL
        OR CAST(H.Entry_Date AS DATETIME) >= @fromDateTime)
      AND (@ToDate IS NULL
        OR CAST(H.Entry_Date AS DATETIME) <= @toDateTime)
      AND (@BrachID IS NULL
        OR H.Branch_ID IN (@BrachID))
		and H.Branch_ID in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId)
      AND (@CustomerID IS NULL
        OR H.Vendor_ID = @CustomerID)
      AND (@CashCustomerID IS NULL
        OR H.CashCustomerID = @CashCustomerID)
      AND (@CustomerCatID IS NULL
        OR Inv_CashCustomer.CategoryID IN (@CustomerCatID)
        OR Gl_Accounts.VendorCategoryID IN (@CustomerCatID))
      AND (@FromInvoiceNumber IS NULL
        OR H.Entry_No >= @FromInvoiceNumber)
      AND (@ToInvoiceNumber IS NULL
        OR H.Entry_No <= @ToInvoiceNumber)
      AND (@ItemCategoryID IS NULL
        OR D.Item_ID IN
           (
               SELECT Inv_Receipt_d.Item_ID
               FROM Inv_Receipt_d
                        LEFT JOIN Inv_Items_Categories
                                  ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
               WHERE Inv_Receipt_d.Parent_ID = H.ID
                 AND Inv_Items_Categories.ItemCategory_ID IN
                     (
                         SELECT item
                         FROM dbo.Split(@ItemCategoryID, ',')
                     )
           ))
		    AND (@TransactionType IS NULL or @TransactionType='-1'
        OR H.Code IN
           (
               SELECT item
               FROM dbo.Split(@TransactionType, ',')
           ))
      AND (@FromTime IS NULL
        OR CAST(H.Entry_Date AS TIME) >= @FromTime)
      AND (@ToTime IS NULL
        OR CAST(H.Entry_Date AS TIME) <= @ToTime)
      AND (@FromCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) >= @FromCustomerActualDeliverDate)
      AND (@ToCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) <= @ToCustomerActualDeliverDate)
      AND (@CustomerStatusID IS NULL
        OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
      AND (@Payment_Type IS NULL
        OR H.Payment_Type = @Payment_Type)
    GROUP BY Inv_ProductCategories.Name,Inv_ProductCategories.Name_Ar  ,  
		  Inv_ProductCategories.ID
    ORDER BY  Inv_ProductCategories.Name
END
GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Sales_Return_Group_By_Items]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Report_INV_Sales_Return_Group_By_Items] @FromDate DATE ='2020-07-01'
, @ToDate DATE ='2020-07-31'
, @BrachID INT = NULL
, @CustomerID INT = NULL
, @CashCustomerID INT = NULL
, @CustomerCatID INT = NULL
, @FromInvoiceNumber INT = NULL
, @ToInvoiceNumber INT = NULL
, @ItemCategoryID NVARCHAR(MAX) = -1
, @SubsidaryID INT = NULL
, @ItemId INT = NULL
, @Item_vendor INT = NULL
, @SalesManId INT = NULL
, @FromCustomerActualDeliverDate DATE = NULL
, @ToCustomerActualDeliverDate DATE = NULL
, @FromTime TIME = NULL
, @ToTime TIME = NULL
, @CustomerStatusID INT = NULL
, @Payment_Type INT = NULL
, @User_Role_Sale INT = NULL
,@userId int =13
,@TransactionType nvarchar(max)=null
,@CashDrawer int =NULL
AS
BEGIN

    IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@ItemCategoryID, ',')
            WHERE Item = -1
        )
        SET @ItemCategoryID = NULL
		 IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@TransactionType, ',')
            WHERE Item = -1
        )
        SET @TransactionType = NULL

    if @FromTime is null set @FromTime = ' 00:00:00';
    if @ToTime is null set @ToTime = ' 23:59:59';

    declare
        @fromDateTime DATETIME = null
        , @toDateTime DATETIME = null

    set @fromDateTime = cast(@FromDate as datetime) + cast(@FromTime as datetime)
    set @toDateTime = cast(@ToDate as datetime) + cast(@ToTime as datetime)


    SELECT I_Code                 = I.Code
         , I_Name                 = I.Name
         , I_Name_Ar              = I.Name_AR
         , I_Unit_Ar              = Inv_Unit.Name_AR
         , I_Unit                 = Inv_Unit.Name
         ,                          COUNT(DISTINCT H.ID) Count_All
         ,                          SUM(H.DeliveryFees)  inv_Receipt_H_DeliveryFees
         , C_S_Sum_Qty            = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN D.qty*d.Final_conv
                                            ELSE 0
        END)
         , C_R_Sum_Qty            = SUM(CASE
                                            WHEN H.CODE IN (53, 54)
                                                THEN D.qty*d.Final_conv
                                            ELSE 0
        END)
         , Net_QTY                = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN D.qty*d.Final_conv
                                            ELSE 0
        END) - SUM(CASE
                       WHEN H.CODE IN (53, 54)
                           THEN D.qty*d.Final_conv
                       ELSE 0
        END)
         , C_S_Sum_Price          = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN (D.Total / ISNULL(H.Currency_Rate, 1))
                                            ELSE 0
        END)
         , C_R_Sum_Price          = SUM(CASE
                                            WHEN H.CODE IN (53, 54)
                                                THEN (D.Total / ISNULL(H.Currency_Rate, 1))
                                            ELSE 0
        END)
         , NetSale                = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN (D.Total / ISNULL(H.Currency_Rate, 1))
                                            ELSE 0
        END) - SUM(CASE
                       WHEN H.CODE IN (53, 54)
                           THEN (D.Total / ISNULL(H.Currency_Rate, 1))
                       ELSE 0
        END)
         , D_H_Discount_Value     = MIN(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN ISNULL( D.H_Discount_Value,0) 
                                            ELSE 0
        END)
		,Discount_Value     = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN ISNULL(D.H_Discount_Value,0) * (D.qty*d.Final_conv)
                                            ELSE 0

        END)
		,Return_Discount_Value     = SUM(CASE
                                            WHEN H.CODE IN (53, 54)
                                                THEN ISNULL(D.H_Discount_Value,0) * (D.qty*d.Final_conv)
                                            ELSE 0

        END)
         , C_R_Sum_Discount_Value = SUM(CASE
                                            WHEN H.CODE IN (53, 54)
                                                THEN D.Price / ISNULL(H.Currency_Rate, 1)
                                            ELSE 0
        END)
         , C_S_Sum_Total          = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN D.Total
                                            ELSE 0
        END)
         , C_R_Sum_Total          = SUM(CASE
                                            WHEN H.CODE IN (53, 54)
                                                THEN D.Total 
                                            ELSE 0
        END)
         , Sales_Cost             = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN d.AvgCost * d.QTY *
                                                     d.final_Conv
                                            ELSE 0
        END)
         , Returns_Cost           = SUM(CASE
                                            WHEN H.CODE IN (53, 54)
                                                THEN d.AvgCost * d.QTY *
                                                     d.final_Conv
                                            ELSE 0
        END)
		,item_profit = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN D.Total
                                            ELSE 0
        END) +SUM(CASE
                                            WHEN H.CODE IN (53, 54)
                                                THEN D.Total - ISNULL(D.H_Discount_Value,0)
                                            ELSE 0
        END) - SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN d.AvgCost * d.QTY *
                                                     d.final_Conv
                                            ELSE 0
        END) + SUM(CASE
                                            WHEN H.CODE IN (53, 54)
                                                THEN d.AvgCost * d.QTY *
                                                     d.final_Conv
                                            ELSE 0
        END)
    FROM Inv_Receipt_H H
             LEFT JOIN Inv_Receipt_d D
                       ON D.Parent_ID = H.ID
             LEFT JOIN Inv_Items I
                       ON I.ID = D.Item_ID
             LEFT JOIN Inv_CashCustomer
                       ON Inv_CashCustomer.id = H.CashCustomerID
             LEFT JOIN GL_Accounts
                       ON GL_Accounts.AccountID = H.Vendor_ID
             LEFT JOIN Inv_Unit
                       ON Inv_Unit.ID = I.Selling_UnitId
           
    WHERE D.Item_ID IS NOT NULL
      AND (@SubsidaryID IS NULL
        OR H.SubsidiaryID = @SubsidaryID)
      AND (ISNULL(H.Is_Canceled, 0) <> 1)
      AND (ISNULL(H.IsHolded, 0) <> 1)
      AND (@User_Role_Sale IS NULL
        OR D.SalesManId IN (@User_Role_Sale))
      AND (@ItemId IS NULL
        OR D.Item_ID = @ItemId)
      AND (@CashDrawer IS NULL
        OR H.CashDrawerId = @CashDrawer)
      AND (@Item_vendor IS NULL
        OR D.Item_ID IN
           (
               SELECT Inv_Items_Vendors.ItemID
               FROM Inv_Items_Vendors
               WHERE (@item_vendor is null or Inv_Items_Vendors.VendorID = @item_vendor)
           ))

      AND D.FinishedProductID IS NULL
      AND (@SalesManId IS NULL
        OR H.Empoyee_ID = @SalesManId)
      AND H.Code IN (51, 52, 53, 54)
      AND (@FromDate IS NULL
        OR CAST(H.Entry_Date AS DATETIME) >= @fromDateTime)
      AND (@ToDate IS NULL
        OR CAST(H.Entry_Date AS DATETIME) <= @toDateTime)
      AND (@BrachID IS NULL
        OR H.Branch_ID IN (@BrachID))
		and H.Branch_ID in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId)
      AND (@CustomerID IS NULL
        OR H.Vendor_ID = @CustomerID)
      AND (@CashCustomerID IS NULL
        OR H.CashCustomerID = @CashCustomerID)
      AND (@CustomerCatID IS NULL
        OR Inv_CashCustomer.CategoryID IN (@CustomerCatID)
        OR Gl_Accounts.VendorCategoryID IN (@CustomerCatID))
      AND (@FromInvoiceNumber IS NULL
        OR H.Entry_No >= @FromInvoiceNumber)
      AND (@ToInvoiceNumber IS NULL
        OR H.Entry_No <= @ToInvoiceNumber)
      AND (@ItemCategoryID IS NULL
        OR D.Item_ID IN
           (
               SELECT Inv_Receipt_d.Item_ID
               FROM Inv_Receipt_d
                        LEFT JOIN Inv_Items_Categories
                                  ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
               WHERE Inv_Receipt_d.Parent_ID = H.ID
                 AND Inv_Items_Categories.ItemCategory_ID IN
                     (
                         SELECT item
                         FROM dbo.Split(@ItemCategoryID, ',')
                     )
           ))
		    AND (@TransactionType IS NULL or @TransactionType='-1'
        OR H.Code IN
           (
               SELECT item
               FROM dbo.Split(@TransactionType, ',')
           ))
      AND (@FromTime IS NULL
        OR CAST(H.Entry_Date AS TIME) >= @FromTime)
      AND (@ToTime IS NULL
        OR CAST(H.Entry_Date AS TIME) <= @ToTime)
      AND (@FromCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) >= @FromCustomerActualDeliverDate)
      AND (@ToCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) <= @ToCustomerActualDeliverDate)
      AND (@CustomerStatusID IS NULL
        OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
      AND (@Payment_Type IS NULL
        OR H.Payment_Type = @Payment_Type)
    GROUP BY I.Code
           , I.Name
           , I.Name_AR
           , Inv_Unit.Name_AR
           , I.ID
           , Inv_Unit.Name
    ORDER BY I.Name
END
GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Sales_Return_Group_By_Items_ABC]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 
CREATE PROC [dbo].[Report_INV_Sales_Return_Group_By_Items_ABC] @FromDate DATE = '2019-03-25'
, @ToDate DATE ='2020-4-08'
, @BrachID INT = NULL
, @CustomerID INT = NULL
, @CashCustomerID INT = NULL
, @CustomerCatID INT = NULL
, @FromInvoiceNumber INT = NULL
, @ToInvoiceNumber INT = NULL
, @ItemCategoryID NVARCHAR(MAX) = NULL
, @SubsidaryID INT = NULL
, @ItemId INT = NULL
, @Item_vendor INT = NULL
, @SalesManId INT = NULL
, @FromCustomerActualDeliverDate DATE = NULL
, @ToCustomerActualDeliverDate DATE = NULL
, @FromTime TIME = NULL
, @ToTime TIME = NULL
, @CustomerStatusID INT = NULL
, @Payment_Type INT = NULL
, @User_Role_Sale INT = NULL
,@userId int =157
,@TransactionType nvarchar(max)=null
AS
BEGIN

    IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@ItemCategoryID, ',')
            WHERE Item = -1
        )
        SET @ItemCategoryID = NULL
		 IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@TransactionType, ',')
            WHERE Item = -1
        )
        SET @TransactionType = NULL

    if @FromTime is null set @FromTime = ' 00:00:00';
    if @ToTime is null set @ToTime = ' 23:59:59';

    declare
        @fromDateTime DATETIME = null
        , @toDateTime DATETIME = null

    set @fromDateTime = cast(@FromDate as datetime) + cast(@FromTime as datetime)
    set @toDateTime = cast(@ToDate as datetime) + cast(@ToTime as datetime)

	Declare @A float = 20 ,@B Float = 30 ,@C Float = 50 ,@AValue float = 0 ,@BValue Float = 0 ,@CValue Float = 0 ,@SumSales  Float = 0

	 
    Select @A =PercentageA,@B = PercentageB ,@C = [PercentageC] from  [dbo].[mstr_InventroySettings]
	SELECT  I.ID,I_Code                 = I.Code
         , I_Name                 = I.Name
         , I_Name_Ar              = I.Name_AR
         , I_Unit_Ar              = Inv_Unit.Name_AR
         , I_Unit                 = Inv_Unit.Name
         ,                          COUNT(DISTINCT H.ID) Count_All
         ,                          SUM(H.DeliveryFees)  inv_Receipt_H_DeliveryFees
         , C_S_Sum_Qty            = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN D.qty*d.Final_conv
                                            ELSE 0
        END)
         , C_R_Sum_Qty            = SUM(CASE
                                            WHEN H.CODE IN (53, 54)
                                                THEN D.qty*d.Final_conv
                                            ELSE 0
        END)
         , Net_QTY                = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN D.qty*d.Final_conv
                                            ELSE 0
        END) - SUM(CASE
                       WHEN H.CODE IN (53, 54)
                           THEN D.qty*d.Final_conv
                       ELSE 0
        END)
         , C_S_Sum_Price          = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN (D.Total / ISNULL(H.Currency_Rate, 1))
                                            ELSE 0
        END)
         , C_R_Sum_Price          = SUM(CASE
                                            WHEN H.CODE IN (53, 54)
                                                THEN (D.Total / ISNULL(H.Currency_Rate, 1))
                                            ELSE 0
        END)
         , NetSale                = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN (D.Total / ISNULL(H.Currency_Rate, 1))
                                            ELSE 0
        END) - SUM(CASE
                       WHEN H.CODE IN (53, 54)
                           THEN (D.Total / ISNULL(H.Currency_Rate, 1))
                       ELSE 0
        END)
         , D_H_Discount_Value     = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN D.H_Discount_Value / ISNULL(H.Currency_Rate, 1)
                                            ELSE 0
        END)
         , C_R_Sum_Discount_Value = SUM(CASE
                                            WHEN H.CODE IN (53, 54)
                                                THEN D.Price / ISNULL(H.Currency_Rate, 1)
                                            ELSE 0
        END)
         , C_S_Sum_Total          = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN D.Total
                                            ELSE 0
        END)
         , C_R_Sum_Total          = SUM(CASE
                                            WHEN H.CODE IN (53, 54)
                                                THEN D.Total
                                            ELSE 0
        END)
         , Sales_Cost             = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN d.AvgCost * d.QTY *
                                                     d.final_Conv
                                            ELSE 0
        END)
         , Returns_Cost           = SUM(CASE
                                            WHEN H.CODE IN (53, 54)
                                                THEN d.AvgCost * d.QTY *
                                                     d.final_Conv
                                            ELSE 0
        END)
		INto #TBL_ReportData
    FROM Inv_Receipt_H H
             LEFT JOIN Inv_Receipt_d D
                       ON D.Parent_ID = H.ID
             LEFT JOIN Inv_Items I
                       ON I.ID = D.Item_ID
             LEFT JOIN Inv_CashCustomer
                       ON Inv_CashCustomer.id = H.CashCustomerID
             LEFT JOIN GL_Accounts
                       ON GL_Accounts.AccountID = H.Vendor_ID
             LEFT JOIN Inv_Unit
                       ON Inv_Unit.ID = I.Selling_UnitId
           
    WHERE D.Item_ID IS NOT NULL
      AND (@SubsidaryID IS NULL
        OR H.SubsidiaryID = @SubsidaryID)
      AND (ISNULL(H.Is_Canceled, 0) <> 1)
      AND (ISNULL(H.IsHolded, 0) <> 1)
      AND (@User_Role_Sale IS NULL
        OR D.SalesManId IN (@User_Role_Sale))
      AND (@ItemId IS NULL
        OR D.Item_ID = @ItemId)
      AND (@Item_vendor IS NULL
        OR D.Item_ID IN
           (
               SELECT Inv_Items_Vendors.ItemID
               FROM Inv_Items_Vendors
               WHERE (@item_vendor is null or Inv_Items_Vendors.VendorID = @item_vendor)
           ))

      AND D.FinishedProductID IS NULL
      AND (@SalesManId IS NULL
        OR H.Empoyee_ID = @SalesManId)
      AND H.Code IN (51, 52, 53, 54)
      AND (@FromDate IS NULL
        OR CAST(H.Entry_Date AS DATETIME) >= @fromDateTime)
      AND (@ToDate IS NULL
        OR CAST(H.Entry_Date AS DATETIME) <= @toDateTime)
      AND (@BrachID IS NULL
        OR H.Branch_ID IN (@BrachID))
		and H.Branch_ID in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId)
      AND (@CustomerID IS NULL
        OR H.Vendor_ID = @CustomerID)
      AND (@CashCustomerID IS NULL
        OR H.CashCustomerID = @CashCustomerID)
      AND (@CustomerCatID IS NULL
        OR Inv_CashCustomer.CategoryID IN (@CustomerCatID)
        OR Gl_Accounts.VendorCategoryID IN (@CustomerCatID))
      AND (@FromInvoiceNumber IS NULL
        OR H.Entry_No >= @FromInvoiceNumber)
      AND (@ToInvoiceNumber IS NULL
        OR H.Entry_No <= @ToInvoiceNumber)
      AND (@ItemCategoryID IS NULL
        OR D.Item_ID IN
           (
               SELECT Inv_Receipt_d.Item_ID
               FROM Inv_Receipt_d
                        LEFT JOIN Inv_Items_Categories
                                  ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
               WHERE Inv_Receipt_d.Parent_ID = H.ID
                 AND Inv_Items_Categories.ItemCategory_ID IN
                     (
                         SELECT item
                         FROM dbo.Split(@ItemCategoryID, ',')
                     )
           ))
		    AND (@TransactionType IS NULL or @TransactionType='-1'
        OR H.Code IN
           (
               SELECT item
               FROM dbo.Split(@TransactionType, ',')
           ))
      AND (@FromTime IS NULL
        OR CAST(H.Entry_Date AS TIME) >= @FromTime)
      AND (@ToTime IS NULL
        OR CAST(H.Entry_Date AS TIME) <= @ToTime)
      AND (@FromCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) >= @FromCustomerActualDeliverDate)
      AND (@ToCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) <= @ToCustomerActualDeliverDate)
      AND (@CustomerStatusID IS NULL
        OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
      AND (@Payment_Type IS NULL
        OR H.Payment_Type = @Payment_Type)
    GROUP BY I.Code
           , I.Name
           , I.Name_AR
           , Inv_Unit.Name_AR
           , I.ID
           , Inv_Unit.Name
    ORDER BY I.Name
	Select * ,SUM(#TBL_ReportData.NetSale) OVER(ORDER BY ID ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS Acumlated	
		Into #TBL_Acumlated
		from #TBL_ReportData order by NetSale ASC
		Select @SumSales = Sum(NetSale) From #TBL_ReportData 
		
		Select  @AValue =  @SumSales * @A / 100 ,@BValue =  @SumSales * @B / 100 ,@CValue = @SumSales * @C / 100  From #TBL_ReportData
		Select *, ABC = (case when (Acumlated <= @AValue) Then 'A' when (Acumlated > @AValue  AND  Acumlated <= @BValue ) Then 'B' when Acumlated > @BValue   Then 'C' END) 
		From #TBL_Acumlated    --where Acumlated > 65314.0295686836  AND  Acumlated <= 97971.0443530254 
		--Select  @AValue  ,@BValue  ,@CValue  
END





GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Sales_Return_Group_By_Itemstest]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 
Create PROC [dbo].[Report_INV_Sales_Return_Group_By_Itemstest] @FromDate DATE ='2020-03-01'
, @ToDate DATE ='2020-03-31'
, @BrachID INT = NULL
, @CustomerID INT = NULL
, @CashCustomerID INT = NULL
, @CustomerCatID INT = NULL
, @FromInvoiceNumber INT = NULL
, @ToInvoiceNumber INT = NULL
, @ItemCategoryID NVARCHAR(MAX) = NULL
, @SubsidaryID INT = NULL
, @ItemId INT = NULL
, @Item_vendor INT = NULL
, @SalesManId INT = NULL
, @FromCustomerActualDeliverDate DATE = NULL
, @ToCustomerActualDeliverDate DATE = NULL
, @FromTime TIME = NULL
, @ToTime TIME = NULL
, @CustomerStatusID INT = NULL
, @Payment_Type INT = NULL
, @User_Role_Sale INT = NULL
,@userId int =13
,@TransactionType nvarchar(max)=null
AS
BEGIN

    IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@ItemCategoryID, ',')
            WHERE Item = -1
        )
        SET @ItemCategoryID = NULL
		 IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@TransactionType, ',')
            WHERE Item = -1
        )
        SET @TransactionType = NULL

    if @FromTime is null set @FromTime = ' 00:00:00';
    if @ToTime is null set @ToTime = ' 23:59:59';

    declare
        @fromDateTime DATETIME = null
        , @toDateTime DATETIME = null

    set @fromDateTime = cast(@FromDate as datetime) + cast(@FromTime as datetime)
    set @toDateTime = cast(@ToDate as datetime) + cast(@ToTime as datetime)


    SELECT ID = I.ID,I_Code                 = I.Code
         , I_Name                 = I.Name
         , I_Name_Ar              = I.Name_AR
         , I_Unit_Ar              = Inv_Unit.Name_AR
         , I_Unit                 = Inv_Unit.Name
         ,                          COUNT(DISTINCT H.ID) Count_All
         , SUM(H.DeliveryFees)  inv_Receipt_H_DeliveryFees
         , C_S_Sum_Qty            = SUM(  D.qty*d.Final_conv )
         , C_R_Sum_Qty            = 0
         , Net_QTY                = SUM(  D.qty*d.Final_conv )  
         , C_S_Sum_Price          = SUM( (D.Total / ISNULL(H.Currency_Rate, 1)))
         , C_R_Sum_Price          = 0
         , NetSale                = SUM( (D.Total / ISNULL(H.Currency_Rate, 1)) )  
         , D_H_Discount_Value     = SUM(  D.H_Discount_Value / ISNULL(H.Currency_Rate, 1) )
         , C_R_Sum_Discount_Value = 0
         , C_S_Sum_Total          = SUM( D.Total )
         , C_R_Sum_Total          = 0
         , Sales_Cost             = SUM(  d.AvgCost * d.QTY * d.final_Conv )
         , Returns_Cost           = 0
		into #Sales
    FROM Inv_Receipt_H H
             LEFT JOIN Inv_Receipt_d D
                       ON D.Parent_ID = H.ID
             LEFT JOIN Inv_Items I
                       ON I.ID = D.Item_ID
             LEFT JOIN Inv_CashCustomer
                       ON Inv_CashCustomer.id = H.CashCustomerID
             LEFT JOIN GL_Accounts
                       ON GL_Accounts.AccountID = H.Vendor_ID
             LEFT JOIN Inv_Unit
                       ON Inv_Unit.ID = I.Selling_UnitId
           
    WHERE D.Item_ID IS NOT NULL
      AND (@SubsidaryID IS NULL
        OR H.SubsidiaryID = @SubsidaryID)
      AND (ISNULL(H.Is_Canceled, 0) <> 1)
      AND (ISNULL(H.IsHolded, 0) <> 1)
      AND (@User_Role_Sale IS NULL
        OR D.SalesManId IN (@User_Role_Sale))
      AND (@ItemId IS NULL
        OR D.Item_ID = @ItemId)
      AND (@Item_vendor IS NULL
        OR D.Item_ID IN
           (
               SELECT Inv_Items_Vendors.ItemID
               FROM Inv_Items_Vendors
               WHERE (@item_vendor is null or Inv_Items_Vendors.VendorID = @item_vendor)
           ))

      AND D.FinishedProductID IS NULL
      AND (@SalesManId IS NULL
        OR H.Empoyee_ID = @SalesManId)
      AND H.Code IN (51, 52)
      AND (@FromDate IS NULL
        OR CAST(H.Entry_Date AS DATETIME) >= @fromDateTime)
      AND (@ToDate IS NULL
        OR CAST(H.Entry_Date AS DATETIME) <= @toDateTime)
      AND (@BrachID IS NULL
        OR H.Branch_ID IN (@BrachID))
		and H.Branch_ID in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId)
      AND (@CustomerID IS NULL
        OR H.Vendor_ID = @CustomerID)
      AND (@CashCustomerID IS NULL
        OR H.CashCustomerID = @CashCustomerID)
      AND (@CustomerCatID IS NULL
        OR Inv_CashCustomer.CategoryID IN (@CustomerCatID)
        OR Gl_Accounts.VendorCategoryID IN (@CustomerCatID))
      AND (@FromInvoiceNumber IS NULL
        OR H.Entry_No >= @FromInvoiceNumber)
      AND (@ToInvoiceNumber IS NULL
        OR H.Entry_No <= @ToInvoiceNumber)
      AND (@ItemCategoryID IS NULL
        OR D.Item_ID IN
           (
               SELECT Inv_Receipt_d.Item_ID
               FROM Inv_Receipt_d
                        LEFT JOIN Inv_Items_Categories
                                  ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
               WHERE Inv_Receipt_d.Parent_ID = H.ID
                 AND Inv_Items_Categories.ItemCategory_ID IN
                     (
                         SELECT item
                         FROM dbo.Split(@ItemCategoryID, ',')
                     )
           ))
		    AND (@TransactionType IS NULL or @TransactionType='-1'
        OR H.Code IN
           (
               SELECT item
               FROM dbo.Split(@TransactionType, ',')
           ))
      AND (@FromTime IS NULL
        OR CAST(H.Entry_Date AS TIME) >= @FromTime)
      AND (@ToTime IS NULL
        OR CAST(H.Entry_Date AS TIME) <= @ToTime)
      AND (@FromCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) >= @FromCustomerActualDeliverDate)
      AND (@ToCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) <= @ToCustomerActualDeliverDate)
      AND (@CustomerStatusID IS NULL
        OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
      AND (@Payment_Type IS NULL
        OR H.Payment_Type = @Payment_Type)
    GROUP BY   I.ID,I.Code
           , I.Name
           , I.Name_AR
           , Inv_Unit.Name_AR
           , I.ID
           , Inv_Unit.Name
    ORDER BY I.Name
	/***********************************************     Return    **********************************************/
	
    SELECT ID = I.ID,I_Code                 = I.Code
         , I_Name                 = I.Name
         , I_Name_Ar              = I.Name_AR
         , I_Unit_Ar              = Inv_Unit.Name_AR
         , I_Unit                 = Inv_Unit.Name
         ,                          COUNT(DISTINCT H.ID) Count_All
         , SUM(H.DeliveryFees)  inv_Receipt_H_DeliveryFees
         , C_S_Sum_Qty            = 0
         , C_R_Sum_Qty            = SUM(  D.qty*d.Final_conv )
         , Net_QTY                = SUM(  D.qty*d.Final_conv )  
         , C_S_Sum_Price          = 0
         , C_R_Sum_Price          = SUM( (D.Total / ISNULL(H.Currency_Rate, 1)))
         , NetSale                = SUM( (D.Total / ISNULL(H.Currency_Rate, 1)) )  
         , D_H_Discount_Value     = 0
         , C_R_Sum_Discount_Value = SUM(  D.H_Discount_Value / ISNULL(H.Currency_Rate, 1) )
         , C_S_Sum_Total          = 0
         , C_R_Sum_Total          = SUM( D.Total )
         , Sales_Cost             = 0
         , Returns_Cost           = SUM(  d.AvgCost * d.QTY * d.final_Conv )
		into #Return
    FROM Inv_Receipt_H H
             LEFT JOIN Inv_Receipt_d D
                       ON D.Parent_ID = H.ID
             LEFT JOIN Inv_Items I
                       ON I.ID = D.Item_ID
             LEFT JOIN Inv_CashCustomer
                       ON Inv_CashCustomer.id = H.CashCustomerID
             LEFT JOIN GL_Accounts
                       ON GL_Accounts.AccountID = H.Vendor_ID
             LEFT JOIN Inv_Unit
                       ON Inv_Unit.ID = I.Selling_UnitId
           
    WHERE D.Item_ID IS NOT NULL
      AND (@SubsidaryID IS NULL
        OR H.SubsidiaryID = @SubsidaryID)
      AND (ISNULL(H.Is_Canceled, 0) <> 1)
      AND (ISNULL(H.IsHolded, 0) <> 1)
      AND (@User_Role_Sale IS NULL
        OR D.SalesManId IN (@User_Role_Sale))
      AND (@ItemId IS NULL
        OR D.Item_ID = @ItemId)
      AND (@Item_vendor IS NULL
        OR D.Item_ID IN
           (
               SELECT Inv_Items_Vendors.ItemID
               FROM Inv_Items_Vendors
               WHERE (@item_vendor is null or Inv_Items_Vendors.VendorID = @item_vendor)
           ))

      AND D.FinishedProductID IS NULL
      AND (@SalesManId IS NULL
        OR H.Empoyee_ID = @SalesManId)
      AND H.Code IN (53, 54)
      AND (@FromDate IS NULL
        OR CAST(H.Entry_Date AS DATETIME) >= @fromDateTime)
      AND (@ToDate IS NULL
        OR CAST(H.Entry_Date AS DATETIME) <= @toDateTime)
      AND (@BrachID IS NULL
        OR H.Branch_ID IN (@BrachID))
		and H.Branch_ID in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId)
      AND (@CustomerID IS NULL
        OR H.Vendor_ID = @CustomerID)
      AND (@CashCustomerID IS NULL
        OR H.CashCustomerID = @CashCustomerID)
      AND (@CustomerCatID IS NULL
        OR Inv_CashCustomer.CategoryID IN (@CustomerCatID)
        OR Gl_Accounts.VendorCategoryID IN (@CustomerCatID))
      AND (@FromInvoiceNumber IS NULL
        OR H.Entry_No >= @FromInvoiceNumber)
      AND (@ToInvoiceNumber IS NULL
        OR H.Entry_No <= @ToInvoiceNumber)
      AND (@ItemCategoryID IS NULL
        OR D.Item_ID IN
           (
               SELECT Inv_Receipt_d.Item_ID
               FROM Inv_Receipt_d
                        LEFT JOIN Inv_Items_Categories
                                  ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
               WHERE Inv_Receipt_d.Parent_ID = H.ID
                 AND Inv_Items_Categories.ItemCategory_ID IN
                     (
                         SELECT item
                         FROM dbo.Split(@ItemCategoryID, ',')
                     )
           ))
		    AND (@TransactionType IS NULL or @TransactionType='-1'
        OR H.Code IN
           (
               SELECT item
               FROM dbo.Split(@TransactionType, ',')
           ))
      AND (@FromTime IS NULL
        OR CAST(H.Entry_Date AS TIME) >= @FromTime)
      AND (@ToTime IS NULL
        OR CAST(H.Entry_Date AS TIME) <= @ToTime)
      AND (@FromCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) >= @FromCustomerActualDeliverDate)
      AND (@ToCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) <= @ToCustomerActualDeliverDate)
      AND (@CustomerStatusID IS NULL
        OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
      AND (@Payment_Type IS NULL
        OR H.Payment_Type = @Payment_Type)
    GROUP BY   I.ID,I.Code
           , I.Name
           , I.Name_AR
           , Inv_Unit.Name_AR
           , I.ID
           , Inv_Unit.Name
    ORDER BY I.Name
	/************Net Value *********/
	--Select *  from #Sales
	--Select * from #Return

	--Return

	SELECT   S.I_Code,S.I_Name ,S.i_Name_AR , S.I_Unit_Ar
         , S.I_Unit  
          ,(ISnull(S.Count_All,0) + ISNull(R.Count_All,0) ) Count_All
          , ISNull(s.inv_Receipt_H_DeliveryFees,0) + ISNull(R.inv_Receipt_H_DeliveryFees,0) inv_Receipt_H_DeliveryFees
         , C_S_Sum_Qty            = ISnull(S.C_S_Sum_Qty,0) 
         , C_R_Sum_Qty            = ISNull(R.C_R_Sum_Qty,0)
         , Net_QTY                = ISNull(S.Net_QTY,0) -ISNull(R.Net_QTY,0) 
         , C_S_Sum_Price          = S.C_S_Sum_Price
         , C_R_Sum_Price          = R.C_R_Sum_Price
         , NetSale                = ISNull(S.NetSale,0) - ISNull(R.NetSale,0) 
         , D_H_Discount_Value     = S.D_H_Discount_Value
         , C_R_Sum_Discount_Value = S.C_R_Sum_Discount_Value
         , C_S_Sum_Total          = S.C_S_Sum_Total
         , C_R_Sum_Total          = R.C_R_Sum_Total
         , Sales_Cost             = S.Sales_Cost
         , Returns_Cost           = R.Returns_Cost

		 From #Return R FULL OUTER JOIN  #Sales S ON    s.id =r.id
		 
		 --Group by  S.ID,S.I_Code,S.I_Name ,S.i_Name_AR , S.I_Unit_Ar
   --      , S.I_Unit  
   -- ORDER BY S.I_Name


END





GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Sales_Return_Group_By_PaymentType_Brach]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Report_INV_Sales_Return_Group_By_PaymentType_Brach] @SubsidaryID                   INT           = null
                                                             , @FromDate                      DATE          = '2020-07-01'
                                                             , @ToDate                        DATE          = '2020-07-01'
                                                             , @BrachID                       INT           = 49
                                                             , @ItemId                        INT           = NULL
                                                             , @SalesManId                    INT           = NULL
                                                             , @CustomerID                    INT           = NULL
                                                             , @CashCustomerID                INT           = NULL
                                                             , @CustomerCatID                 INT           = NULL
                                                             , @FromInvoiceNumber             INT           = NULL
                                                             , @ToInvoiceNumber               INT           = NULL
                                                             , @ItemCategoryID                NVARCHAR(MAX) = NULL
                                                             , @FromCustomerActualDeliverDate DATE          = NULL
                                                             , @ToCustomerActualDeliverDate   DATE          = NULL
                                                             , @FromTime                      TIME          = NULL
                                                             , @ToTime                        TIME          = NULL
                                                             , @CustomerStatusID              INT           = NULL
                                                             , @TransactionType               NVARCHAR(MAX) = NULL
                                                             , @Payment_Type                  INT           = NULL
                                                             , @User_Role_Sale                INT           = NULL
, @Item_vendor INT = NULL
,@userId int =13
,@CashDrawer int =NULL
AS
    BEGIN
	Declare @PaymentIDCode0 int =0
	Select top 1 @PaymentIDCode0 = ID From Inv_PaymentType where code = 0
	IF @PaymentIDCode0 is null Set @PaymentIDCode0 = 0
/*
-1	Unpaid		
 0	Multi		
 1	ßÇÔ		
 2	ÈÇáÍÓÇÈ	
*/

        IF EXISTS
        (
         SELECT *
         FROM dbo.Split(@TransactionType , ',')
         WHERE Item = -1
        )
            SET @TransactionType = NULL

        IF EXISTS
        (
         SELECT *
         FROM dbo.Split(@ItemCategoryID , ',')
         WHERE Item = -1
        )
		    declare
        @fromDateTime DATETIME = null
        , @toDateTime DATETIME = null

    set @fromDateTime = cast(@FromDate as datetime)  +' ' +'00:00:00'
    set @toDateTime = cast(@ToDate as datetime)  +' ' + '23:59:59'
            SET @ItemCategoryID = NULL

			 CREATE TABLE #context
    (  
		   entry_no nvarchar(200)
		, entry_date datetime
		, Inv_PaymentType_Id int
         ,  Inv_PaymentType_code nvarchar(200)
        ,   Inv_PaymentType_Name nvarchar(500)
        ,   Inv_PaymentType_Name_Ar   nvarchar(500)                                       
         ,  mstr_Branch_ID int
             ,  mstr_Branch_Code  nvarchar(200)
             ,   mstr_Branch_Name  nvarchar(500)
             , mstr_Branch_Name_Ar  nvarchar(500) 
             ,  NetValue  float             
             ,  value1   float

    );
--	  INSERT INTO #context            
--	 SELECT    entry_no  
--			 , entry_date  
--			 , Inv_PaymentType_Id  
--			 ,  Inv_PaymentType_code   
--			 ,   Inv_PaymentType_Name 
--			 ,   Inv_PaymentType_Name_Ar  
--			 ,  mstr_Branch_ID  
--             ,  mstr_Branch_Code  
--             ,   mstr_Branch_Name   
--             , mstr_Branch_Name_Ar   
--             ,  NetValue   
--             ,  value1  

--From
--      (  
	  SELECT inv_receipt_h.Code,
		inv_receipt_h.entry_no
		,inv_receipt_h.entry_date
		, Inv_PaymentType.Id   Inv_PaymentType_Id
         , Inv_PaymentType.code  Inv_PaymentType_code
             ,   Inv_PaymentType.Name   Inv_PaymentType_Name
             ,   Inv_PaymentType.Name_Ar   Inv_PaymentType_Name_Ar                                         
              , mstr_Branch.ID mstr_Branch_ID
             , mstr_Branch.Code mstr_Branch_Code
             , mstr_Branch.Name mstr_Branch_Name
             , mstr_Branch.Name_Ar mstr_Branch_Name_Ar
             , ( case when Inv_Receipt_h.code in (51,52) then  Inv_receiptmultipayment.Amount   else  Inv_receiptmultipayment.Amount * -1 end ) Netvalue
             ,  Inv_receiptmultipayment.Amount  value1     
			 into #context1
        FROM Inv_PaymentType,Inv_receiptmultipayment,Inv_Receipt_h 
             LEFT JOIN GL_Accounts
             ON GL_Accounts.AccountID = Inv_Receipt_h.Vendor_ID
             LEFT JOIN mstr_Branch
             ON Inv_Receipt_h.Branch_ID = mstr_Branch.ID  
             
        WHERE Inv_receiptmultipayment.ReceiptId = Inv_Receipt_h.id
			and Inv_PaymentType.id=Inv_receiptmultipayment.PaymentTypeId
			and Inv_Receipt_h.Code IN(51 , 52 , 53 , 54) 
			and Inv_Receipt_h.Payment_Type = @PaymentIDCode0 
			and Inv_Receipt_h.Branch_ID in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId)
             AND (ISNULL(Inv_Receipt_h.Is_Canceled , 0) <> 1)
             AND (ISNULL(Inv_Receipt_h.IsHolded , 0) <> 1)
             AND (@User_Role_Sale IS NULL
                  OR Inv_Receipt_h.ID IN
        (
         SELECT Parent_ID
         FROM Inv_Receipt_D
         WHERE Inv_Receipt_D.SalesManId = @User_Role_Sale
        ))
             AND (@SubsidaryID IS NULL
                  OR Inv_Receipt_h.SubsidiaryID = @SubsidaryID)
             AND (@FromDate IS NULL
                  OR CAST(Inv_Receipt_h.Entry_Date AS DATETIME) >= @fromDateTime)
             AND (@ToDate IS NULL
                  OR CAST(Inv_Receipt_h.Entry_Date AS DATETIME) <= @toDateTime)
             AND (@BrachID IS NULL
                  OR (Inv_Receipt_h.Branch_ID IN(@BrachID) and
					  Inv_Receipt_h.Branch_ID in(select UserBranch.BranchID 
												 from UserBranch 
												 where UserBranch.UserID=@userId)))
				  			  
    
        AND (@ItemId IS NULL
             OR Inv_Receipt_h.ID IN
        (
         SELECT Inv_Receipt_d.Parent_ID
         FROM dbo.Inv_Receipt_d
         WHERE Inv_Receipt_d.Item_ID = @ItemId
        ))
		 AND (@CashDrawer IS NULL
        OR Inv_Receipt_h.CashDrawerId = @CashDrawer)
		 AND (@Item_vendor IS NULL
            OR Inv_Receipt_h.ID IN
               (
                   SELECT Parent_ID
                   FROM Inv_Receipt_D
                            left join Inv_Items on Inv_Receipt_d.Item_ID = Inv_Items.ID
                            left join Inv_Items_Vendors on Inv_Items.ID = Inv_Items_Vendors.ItemID
                   WHERE (Inv_Items_Vendors.VendorID = @item_vendor)
               ))
        
        AND (@SalesManId IS NULL
             OR Inv_Receipt_h.Empoyee_ID = @SalesManId)
        AND (@CustomerID IS NULL
             OR Inv_Receipt_h.Vendor_ID = @CustomerID)
        AND (@CashCustomerID IS NULL
             OR Inv_Receipt_h.CashCustomerID = @CashCustomerID)
        AND (@CustomerCatID IS NULL
             OR Inv_Receipt_h.CashCustomerID IN
        (
         SELECT Inv_CashCustomer.Id
         FROM dbo.Inv_CashCustomer
         WHERE Inv_CashCustomer.CategoryID = @CustomerCatID
        )
             OR Inv_Receipt_h.Vendor_ID IN
        (
         SELECT Gl_Accounts.AccountID
         FROM dbo.Gl_Accounts
         WHERE Gl_Accounts.VendorCategoryID = @CustomerCatID
        ))
        AND (@FromInvoiceNumber IS NULL
             OR Inv_Receipt_h.Entry_No >= @FromInvoiceNumber)
        AND (@ToInvoiceNumber IS NULL
             OR Inv_Receipt_h.Entry_No <= @ToInvoiceNumber)
        AND (@ItemCategoryID IS NULL
             OR Inv_Receipt_h.ID IN
        (
         SELECT Parent_ID
         FROM Inv_Receipt_d
              LEFT JOIN Inv_Items_Categories
              ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
         WHERE Inv_Receipt_d.Parent_ID = Inv_Receipt_h.ID
               AND Inv_Items_Categories.ItemCategory_ID IN
         (
          SELECT item
          FROM dbo.Split(@ItemCategoryID , ',')
         )
        ))
        AND (@FromTime IS NULL
             OR CAST(Inv_Receipt_h.Entry_Date AS TIME) >= @FromTime)
        AND (@ToTime IS NULL
             OR CAST(Inv_Receipt_h.Entry_Date AS TIME) <= @ToTime)
        AND (@FromCustomerActualDeliverDate IS NULL
             OR CAST(Inv_Receipt_h.CustomerDeliverDate AS DATE) >= @FromCustomerActualDeliverDate)
        AND (@ToCustomerActualDeliverDate IS NULL
             OR CAST(Inv_Receipt_h.CustomerDeliverDate AS DATE) <= @ToCustomerActualDeliverDate)
        AND (@CustomerStatusID IS NULL
             OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
        AND (@TransactionType IS NULL
             OR Inv_Receipt_h.Code IN
        (
         SELECT item
         FROM dbo.Split(@TransactionType , ',')
        ))
    AND (@Payment_Type IS NULL
         OR Inv_Receipt_h.Payment_Type = @Payment_Type)

		 	  --Select * from #context1
		-- union 
		  SELECT inv_receipt_h.code,
		inv_receipt_h.entry_no
		,inv_receipt_h.entry_date
		, Inv_PaymentType.Id   Inv_PaymentType_Id
         , Inv_PaymentType.code  Inv_PaymentType_code
             ,   Inv_PaymentType.Name   Inv_PaymentType_Name
             ,   Inv_PaymentType.Name_Ar   Inv_PaymentType_Name_Ar                                         
           , mstr_Branch.ID                                                  mstr_Branch_ID
             , mstr_Branch.Code                                                mstr_Branch_Code
             , mstr_Branch.Name                                                mstr_Branch_Name
             , mstr_Branch.Name_Ar                                             mstr_Branch_Name_Ar
             
			  , ( case when Inv_Receipt_h.code in (51,52) then   Inv_Receipt_h.Value    end ) Netvalue
             ,  0      value1  
		 into #context2
        FROM Inv_Receipt_h
             LEFT JOIN Inv_PaymentType
             ON Inv_Receipt_h.Payment_Type = Inv_PaymentType.id
             LEFT JOIN GL_Accounts
             ON GL_Accounts.AccountID = Inv_Receipt_h.Vendor_ID
             LEFT JOIN mstr_Branch
             ON Inv_Receipt_h.Branch_ID = mstr_Branch.ID 
        WHERE 
		Inv_Receipt_h.Code IN(51 , 52,53,54 ) 
		and Inv_Receipt_h.Payment_Type <> @PaymentIDCode0 
		and (@BrachID is null or  (Inv_Receipt_h.Branch_ID  = @BrachID))
				  and (@Payment_Type is null or (Inv_Receipt_h.Payment_Type = @Payment_Type))
             AND (ISNULL(Inv_Receipt_h.Is_Canceled , 0) <> 1)
             AND (ISNULL(Inv_Receipt_h.IsHolded , 0) <> 1)
             AND (@User_Role_Sale IS NULL
                  OR Inv_Receipt_h.ID IN
        (
         SELECT Parent_ID
         FROM Inv_Receipt_D
         WHERE Inv_Receipt_D.SalesManId = @User_Role_Sale
        ))
             AND (@SubsidaryID is null or (Inv_Receipt_h.SubsidiaryID = @SubsidaryID))
             AND (@FromDate IS NULL
                  OR CAST(Inv_Receipt_h.Entry_Date AS DATE) >= @FromDate)
             AND (@ToDate IS NULL
                  OR CAST(Inv_Receipt_h.Entry_Date AS DATE) <= @ToDate)
        AND (@ItemId IS NULL
             OR Inv_Receipt_h.ID IN
        (
         SELECT Inv_Receipt_d.Parent_ID
         FROM dbo.Inv_Receipt_d
         WHERE Inv_Receipt_d.Item_ID = @ItemId
        ))
		 AND (@CashDrawer IS NULL
        OR Inv_Receipt_h.CashDrawerId = @CashDrawer)
		 AND (@Item_vendor IS NULL
            OR Inv_Receipt_h.ID IN
               (
                   SELECT Parent_ID
                   FROM Inv_Receipt_D
                            left join Inv_Items on Inv_Receipt_d.Item_ID = Inv_Items.ID
                            left join Inv_Items_Vendors on Inv_Items.ID = Inv_Items_Vendors.ItemID
                   WHERE (Inv_Items_Vendors.VendorID = @item_vendor)
               ))
        
        AND (@SalesManId IS NULL
             OR Inv_Receipt_h.Empoyee_ID = @SalesManId)
        AND (@CustomerID IS NULL
             OR Inv_Receipt_h.Vendor_ID = @CustomerID)
        AND (@CashCustomerID IS NULL
             OR Inv_Receipt_h.CashCustomerID = @CashCustomerID)
        AND (@CustomerCatID IS NULL
             OR Inv_Receipt_h.CashCustomerID IN
        (
         SELECT Inv_CashCustomer.Id
         FROM dbo.Inv_CashCustomer
         WHERE Inv_CashCustomer.CategoryID = @CustomerCatID
        )
             OR Inv_Receipt_h.Vendor_ID IN
        (
         SELECT Gl_Accounts.AccountID
         FROM dbo.Gl_Accounts
         WHERE Gl_Accounts.VendorCategoryID = @CustomerCatID
        ))
        AND (@FromInvoiceNumber IS NULL
             OR Inv_Receipt_h.Entry_No >= @FromInvoiceNumber)
        AND (@ToInvoiceNumber IS NULL
             OR Inv_Receipt_h.Entry_No <= @ToInvoiceNumber)
        AND (@ItemCategoryID IS NULL
             OR Inv_Receipt_h.ID IN
        (
         SELECT Parent_ID
         FROM Inv_Receipt_d
              LEFT JOIN Inv_Items_Categories
              ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
         WHERE Inv_Receipt_d.Parent_ID = Inv_Receipt_h.ID
               AND Inv_Items_Categories.ItemCategory_ID IN
         (
          SELECT item
          FROM dbo.Split(@ItemCategoryID , ',')
         )
        ))
        AND (@FromTime IS NULL
             OR CAST(Inv_Receipt_h.Entry_Date AS TIME) >= @FromTime)
        AND (@ToTime IS NULL
             OR CAST(Inv_Receipt_h.Entry_Date AS TIME) <= @ToTime)
        AND (@FromCustomerActualDeliverDate IS NULL
             OR CAST(Inv_Receipt_h.CustomerDeliverDate AS DATE) >= @FromCustomerActualDeliverDate)
        AND (@ToCustomerActualDeliverDate IS NULL
             OR CAST(Inv_Receipt_h.CustomerDeliverDate AS DATE) <= @ToCustomerActualDeliverDate)
        AND (@CustomerStatusID IS NULL
             OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
        AND (@TransactionType IS NULL
             OR (Inv_Receipt_h.Code IN
        (
         SELECT item
         FROM dbo.Split(@TransactionType , ',')
        )))
    
 
		 
		  --Select sum(NetValue) ,sum(value1)from #context2
		 --Select Sum(Netvalue)  from  #context1
		 --union   Select * from #context2) as T
        SELECT Inv_PaymentType_Id      Inv_PaymentType_Id
             , Inv_PaymentType_code    Inv_PaymentType_code            
             , Inv_PaymentType_Name    Inv_PaymentType_Name
             , Inv_PaymentType_Name_AR Inv_PaymentType_Name_AR
             , mstr_Branch_ID
             , mstr_Branch_Code
             , mstr_Branch_Name
             , mstr_Branch_Name_Ar
             , SUM( Netvalue)  value
			 , CASE   Inv_PaymentType_code
                   WHEN 1
                   THEN 1
                   WHEN 2
                   THEN 3
                   ELSE 2
               END                                                             sort
			   --Select * from #context1 union 
        FROM   ( Select * from #context1   ) as T
        GROUP BY Inv_PaymentType_Id
               , Inv_PaymentType_code
               
               , Inv_PaymentType_Name
               , Inv_PaymentType_Name_AR
               , mstr_Branch_ID
               , mstr_Branch_Code
               , mstr_Branch_Name
               , mstr_Branch_Name_Ar



			   union
			   SELECT Inv_PaymentType_Id      Inv_PaymentType_Id
             , Inv_PaymentType_code    Inv_PaymentType_code            
             , Inv_PaymentType_Name    Inv_PaymentType_Name
             , Inv_PaymentType_Name_AR Inv_PaymentType_Name_AR
             , mstr_Branch_ID
             , mstr_Branch_Code
             , mstr_Branch_Name
             , mstr_Branch_Name_Ar
             , SUM( Netvalue)  value
			 , CASE   Inv_PaymentType_code
                   WHEN 1
                   THEN 1
                   WHEN 2
                   THEN 3
                   ELSE 2
               END                                                             sort
			   --Select * from #context1 union 
        FROM   (   Select * from #context2) as T
        GROUP BY Inv_PaymentType_Id
               , Inv_PaymentType_code
               
               , Inv_PaymentType_Name
               , Inv_PaymentType_Name_AR
               , mstr_Branch_ID
               , mstr_Branch_Code
               , mstr_Branch_Name
               , mstr_Branch_Name_Ar

    END
GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Sales_Return_Group_By_PaymentType_Brach_Users]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Report_INV_Sales_Return_Group_By_PaymentType_Brach_Users] @SubsidaryID INT = 63
, @FromDate DATE = '20190101'
, @ToDate DATE = '20190911'
, @BrachID INT = NULL
, @ItemId INT = NULL
, @SalesManId INT = NULL
, @CustomerID INT = NULL
, @CashCustomerID INT = NULL
, @CustomerCatID INT = NULL
, @FromInvoiceNumber INT = NULL
, @ToInvoiceNumber INT = NULL
, @ItemCategoryID NVARCHAR(MAX) = NULL
, @FromCustomerActualDeliverDate DATE = NULL
, @ToCustomerActualDeliverDate DATE = NULL
, @FromTime TIME = NULL
, @ToTime TIME = NULL
, @CustomerStatusID INT = NULL
, @TransactionType NVARCHAR(MAX) = NULL
, @Payment_Type INT = NULL
, @User_Role_Sale INT = NULL
, @Item_vendor INT = NULL
,@userId int =null
AS
BEGIN

    /*
    -1	Unpaid
     0	Multi
     1	ßÇÔ
     2	ÈÇáÍÓÇÈ
    */

    IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@TransactionType, ',')
            WHERE Item = -1
        )
        SET @TransactionType = NULL

    IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@ItemCategoryID, ',')
            WHERE Item = -1
        )
        SET @ItemCategoryID = NULL
    SELECT Inv_PaymentType.Id                                             Inv_PaymentType_Id
         , Inv_PaymentType.Code                                           Inv_PaymentType_code
         , Inv_PaymentType.Name                                           Inv_PaymentType_Name
         , Inv_PaymentType.Name_Ar                                        Inv_PaymentType_Name_AR
         --mstr_Branch
         , mstr_Branch.ID                                                 mstr_Branch_ID
         , mstr_Branch.Code                                               mstr_Branch_Code
         , mstr_Branch.Name                                               mstr_Branch_Name
         , mstr_Branch.Name_Ar                                            mstr_Branch_Name_Ar
         --Security_Users
         , Security_Users.ID                                              Security_Users_ID
         , Security_Users.Name                                            Security_Users_Name
         , Security_Users.Name_Ar                                         Security_Users_Name_Ar
         -- Inv_Receipt_h
         , Inv_Receipt_h.NetValue                                         NetValue
         -- Inv_PaymentType_2
         , ISNULL(Inv_PaymentType_2.Id, Inv_PaymentType.Id)               Inv_PaymentType_2_Id
         , ISNULL(Inv_PaymentType_2.Code, Inv_PaymentType.Code)           Inv_PaymentType_2_code
         , CASE ISNULL(Inv_PaymentType_2.Code, Inv_PaymentType.Code)
               WHEN 1
                   THEN 1
               WHEN 2
                   THEN 3
               ELSE 2
        END                                                               sort
         , ISNULL(Inv_PaymentType_2.Name, Inv_PaymentType.Name)           Inv_PaymentType_2_Name
         , ISNULL(Inv_PaymentType_2.Name_Ar, Inv_PaymentType.Name_Ar)     Inv_PaymentType_2_Name_AR
         , ISNULL(Inv_receiptmultipayment.Amount, Inv_Receipt_h.NetValue) Value
    INTO #context
    FROM Inv_Receipt_h
             LEFT JOIN Inv_PaymentType
                       ON Inv_Receipt_h.Payment_Type = Inv_PaymentType.id
             LEFT JOIN GL_Accounts
                       ON GL_Accounts.AccountID = Inv_Receipt_h.Vendor_ID
             LEFT JOIN mstr_Branch
                       ON Inv_Receipt_h.Branch_ID = mstr_Branch.ID
             left join Security_Users
                       on Inv_Receipt_h.Empoyee_ID = Security_Users.Id
             LEFT JOIN Inv_receiptmultipayment
                       ON Inv_receiptmultipayment.ReceiptId = Inv_Receipt_h.id
             LEFT JOIN Inv_PaymentType Inv_PaymentType_2
                       ON Inv_receiptmultipayment.PaymentTypeId = Inv_PaymentType_2.id
    WHERE Inv_Receipt_h.Code IN (51, 52, 53, 54)
      AND (ISNULL(Inv_Receipt_h.Is_Canceled, 0) <> 1)
      AND (ISNULL(Inv_Receipt_h.IsHolded, 0) <> 1)
      AND (@User_Role_Sale IS NULL
        OR Inv_Receipt_h.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
               WHERE Inv_Receipt_D.SalesManId = @User_Role_Sale
           ))
		    AND (@Item_vendor IS NULL
            OR Inv_Receipt_h.ID IN
               (
                   SELECT Parent_ID
                   FROM Inv_Receipt_D
                            left join Inv_Items on Inv_Receipt_d.Item_ID = Inv_Items.ID
                            left join Inv_Items_Vendors on Inv_Items.ID = Inv_Items_Vendors.ItemID
                   WHERE (Inv_Items_Vendors.VendorID = @item_vendor)
               ))
      AND (@SubsidaryID IS NULL
        OR Inv_Receipt_h.SubsidiaryID = @SubsidaryID)
      AND (@FromDate IS NULL
        OR CAST(Inv_Receipt_h.Entry_Date AS DATE) >= @FromDate)
      AND (@ToDate IS NULL
        OR CAST(Inv_Receipt_h.Entry_Date AS DATE) <= @ToDate)
      AND (@BrachID IS NULL
        OR Inv_Receipt_h.Branch_ID IN (@BrachID))
				  			  and Inv_Receipt_h.Branch_ID in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId)
    
      AND (@ItemId IS NULL
        OR Inv_Receipt_h.ID IN
           (
               SELECT Inv_Receipt_d.Parent_ID
               FROM dbo.Inv_Receipt_d
               WHERE Inv_Receipt_d.Item_ID = @ItemId
           ))
      AND (@SalesManId IS NULL
        OR Inv_Receipt_h.Empoyee_ID = @SalesManId)
      AND (@CustomerID IS NULL
        OR Inv_Receipt_h.Vendor_ID = @CustomerID)
      AND (@CashCustomerID IS NULL
        OR Inv_Receipt_h.CashCustomerID = @CashCustomerID)
      AND (@CustomerCatID IS NULL
        OR Inv_Receipt_h.CashCustomerID IN
           (
               SELECT Inv_CashCustomer.Id
               FROM dbo.Inv_CashCustomer
               WHERE Inv_CashCustomer.CategoryID = @CustomerCatID
           )
        OR Inv_Receipt_h.Vendor_ID IN
           (
               SELECT Gl_Accounts.AccountID
               FROM dbo.Gl_Accounts
               WHERE Gl_Accounts.VendorCategoryID = @CustomerCatID
           ))
      AND (@FromInvoiceNumber IS NULL
        OR Inv_Receipt_h.Entry_No >= @FromInvoiceNumber)
      AND (@ToInvoiceNumber IS NULL
        OR Inv_Receipt_h.Entry_No <= @ToInvoiceNumber)
      AND (@ItemCategoryID IS NULL
        OR Inv_Receipt_h.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_d
                        LEFT JOIN Inv_Items_Categories
                                  ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
               WHERE Inv_Receipt_d.Parent_ID = Inv_Receipt_h.ID
                 AND Inv_Items_Categories.ItemCategory_ID IN
                     (
                         SELECT item
                         FROM dbo.Split(@ItemCategoryID, ',')
                     )
           ))
      AND (@FromTime IS NULL
        OR CAST(Inv_Receipt_h.Entry_Date AS TIME) >= @FromTime)
      AND (@ToTime IS NULL
        OR CAST(Inv_Receipt_h.Entry_Date AS TIME) <= @ToTime)
      AND (@FromCustomerActualDeliverDate IS NULL
        OR CAST(Inv_Receipt_h.CustomerDeliverDate AS DATE) >= @FromCustomerActualDeliverDate)
      AND (@ToCustomerActualDeliverDate IS NULL
        OR CAST(Inv_Receipt_h.CustomerDeliverDate AS DATE) <= @ToCustomerActualDeliverDate)
      AND (@CustomerStatusID IS NULL
        OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
      AND (@TransactionType IS NULL
        OR Inv_Receipt_h.Code IN
           (
               SELECT item
               FROM dbo.Split(@TransactionType, ',')
           ))
      AND (@Payment_Type IS NULL
        OR Inv_Receipt_h.Payment_Type = @Payment_Type)


    SELECT Inv_PaymentType_2_Id      Inv_PaymentType_Id
         , Inv_PaymentType_2_code    Inv_PaymentType_code
         , sort
         , Inv_PaymentType_2_Name    Inv_PaymentType_Name
         , Inv_PaymentType_2_Name_AR Inv_PaymentType_Name_AR
         , mstr_Branch_ID
         , mstr_Branch_Code
         , mstr_Branch_Name
         , mstr_Branch_Name_Ar
         , Security_Users_ID
         , Security_Users_Name
         , Security_Users_Name_Ar
         , SUM(Value)                Value
    FROM #Context
    GROUP BY Inv_PaymentType_2_Id
           , Inv_PaymentType_2_code
           , sort
           , Inv_PaymentType_2_Name
           , Inv_PaymentType_2_Name_AR
           , mstr_Branch_ID
           , mstr_Branch_Code
           , mstr_Branch_Name
           , mstr_Branch_Name_Ar
           , Security_Users_ID
           , Security_Users_Name
           , Security_Users_Name_Ar
END

GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Sales_Return_Group_By_PaymentType_Brachtest]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Report_INV_Sales_Return_Group_By_PaymentType_Brachtest] @SubsidaryID                   INT           = null
                                                             , @FromDate                      DATE          = '2020-07-01'
                                                             , @ToDate                        DATE          = '2020-07-01'
                                                             , @BrachID                       INT           = 49
                                                             , @ItemId                        INT           = NULL
                                                             , @SalesManId                    INT           = NULL
                                                             , @CustomerID                    INT           = NULL
                                                             , @CashCustomerID                INT           = NULL
                                                             , @CustomerCatID                 INT           = NULL
                                                             , @FromInvoiceNumber             INT           = NULL
                                                             , @ToInvoiceNumber               INT           = NULL
                                                             , @ItemCategoryID                NVARCHAR(MAX) = NULL
                                                             , @FromCustomerActualDeliverDate DATE          = NULL
                                                             , @ToCustomerActualDeliverDate   DATE          = NULL
                                                             , @FromTime                      TIME          = NULL
                                                             , @ToTime                        TIME          = NULL
                                                             , @CustomerStatusID              INT           = NULL
                                                             , @TransactionType               NVARCHAR(MAX) = NULL
                                                             , @Payment_Type                  INT           = NULL
                                                             , @User_Role_Sale                INT           = NULL
, @Item_vendor INT = NULL
,@userId int =13
AS
    BEGIN
	Declare @PaymentIDCode0 int =0
	Select top 1 @PaymentIDCode0 = ID From Inv_PaymentType where code = 0
	IF @PaymentIDCode0 is null Set @PaymentIDCode0 = 0
/*
-1	Unpaid		
 0	Multi		
 1	ßÇÔ		
 2	ÈÇáÍÓÇÈ	
*/

        IF EXISTS
        (
         SELECT *
         FROM dbo.Split(@TransactionType , ',')
         WHERE Item = -1
        )
            SET @TransactionType = NULL

        IF EXISTS
        (
         SELECT *
         FROM dbo.Split(@ItemCategoryID , ',')
         WHERE Item = -1
        )
		    declare
        @fromDateTime DATETIME = null
        , @toDateTime DATETIME = null

    set @fromDateTime = cast(@FromDate as datetime)  +' ' +'00:00:00'
    set @toDateTime = cast(@ToDate as datetime)  +' ' + '23:59:59'
            SET @ItemCategoryID = NULL

			 CREATE TABLE #context
    (  
		   entry_no nvarchar(200)
		, entry_date datetime
		, Inv_PaymentType_Id int
         ,  Inv_PaymentType_code nvarchar(200)
        ,   Inv_PaymentType_Name nvarchar(500)
        ,   Inv_PaymentType_Name_Ar   nvarchar(500)                                       
         ,  mstr_Branch_ID int
             ,  mstr_Branch_Code  nvarchar(200)
             ,   mstr_Branch_Name  nvarchar(500)
             , mstr_Branch_Name_Ar  nvarchar(500) 
             ,  NetValue  float             
             ,  value1   float

    );
--	  INSERT INTO #context            
--	 SELECT    entry_no  
--			 , entry_date  
--			 , Inv_PaymentType_Id  
--			 ,  Inv_PaymentType_code   
--			 ,   Inv_PaymentType_Name 
--			 ,   Inv_PaymentType_Name_Ar  
--			 ,  mstr_Branch_ID  
--             ,  mstr_Branch_Code  
--             ,   mstr_Branch_Name   
--             , mstr_Branch_Name_Ar   
--             ,  NetValue   
--             ,  value1  

--From
--      (  
	  SELECT inv_receipt_h.Code,
		inv_receipt_h.entry_no
		,inv_receipt_h.entry_date
		, Inv_PaymentType.Id   Inv_PaymentType_Id
         , Inv_PaymentType.code  Inv_PaymentType_code
             ,   Inv_PaymentType.Name   Inv_PaymentType_Name
             ,   Inv_PaymentType.Name_Ar   Inv_PaymentType_Name_Ar                                         
              , mstr_Branch.ID mstr_Branch_ID
             , mstr_Branch.Code mstr_Branch_Code
             , mstr_Branch.Name mstr_Branch_Name
             , mstr_Branch.Name_Ar mstr_Branch_Name_Ar
             , Inv_receiptmultipayment.Amount    Netvalue
             ,  Inv_receiptmultipayment.Amount  value1     
			 into #context1
        FROM Inv_PaymentType,Inv_receiptmultipayment,Inv_Receipt_h 
             LEFT JOIN GL_Accounts
             ON GL_Accounts.AccountID = Inv_Receipt_h.Vendor_ID
             LEFT JOIN mstr_Branch
             ON Inv_Receipt_h.Branch_ID = mstr_Branch.ID  
             
        WHERE Inv_receiptmultipayment.ReceiptId = Inv_Receipt_h.id
			and Inv_PaymentType.id=Inv_receiptmultipayment.PaymentTypeId
			and Inv_Receipt_h.Code IN(51 , 52 , 53 , 54) 
			and Inv_Receipt_h.Payment_Type = @PaymentIDCode0 
			and Inv_Receipt_h.Branch_ID in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId)
             AND (ISNULL(Inv_Receipt_h.Is_Canceled , 0) <> 1)
             AND (ISNULL(Inv_Receipt_h.IsHolded , 0) <> 1)
             AND (@User_Role_Sale IS NULL
                  OR Inv_Receipt_h.ID IN
        (
         SELECT Parent_ID
         FROM Inv_Receipt_D
         WHERE Inv_Receipt_D.SalesManId = @User_Role_Sale
        ))
             AND (@SubsidaryID IS NULL
                  OR Inv_Receipt_h.SubsidiaryID = @SubsidaryID)
             AND (@FromDate IS NULL
                  OR CAST(Inv_Receipt_h.Entry_Date AS DATETIME) >= @fromDateTime)
             AND (@ToDate IS NULL
                  OR CAST(Inv_Receipt_h.Entry_Date AS DATETIME) <= @toDateTime)
             AND (@BrachID IS NULL
                  OR (Inv_Receipt_h.Branch_ID IN(@BrachID) and
					  Inv_Receipt_h.Branch_ID in(select UserBranch.BranchID 
												 from UserBranch 
												 where UserBranch.UserID=@userId)))
				  			  
    
        AND (@ItemId IS NULL
             OR Inv_Receipt_h.ID IN
        (
         SELECT Inv_Receipt_d.Parent_ID
         FROM dbo.Inv_Receipt_d
         WHERE Inv_Receipt_d.Item_ID = @ItemId
        ))
		 AND (@Item_vendor IS NULL
            OR Inv_Receipt_h.ID IN
               (
                   SELECT Parent_ID
                   FROM Inv_Receipt_D
                            left join Inv_Items on Inv_Receipt_d.Item_ID = Inv_Items.ID
                            left join Inv_Items_Vendors on Inv_Items.ID = Inv_Items_Vendors.ItemID
                   WHERE (Inv_Items_Vendors.VendorID = @item_vendor)
               ))
        
        AND (@SalesManId IS NULL
             OR Inv_Receipt_h.Empoyee_ID = @SalesManId)
        AND (@CustomerID IS NULL
             OR Inv_Receipt_h.Vendor_ID = @CustomerID)
        AND (@CashCustomerID IS NULL
             OR Inv_Receipt_h.CashCustomerID = @CashCustomerID)
        AND (@CustomerCatID IS NULL
             OR Inv_Receipt_h.CashCustomerID IN
        (
         SELECT Inv_CashCustomer.Id
         FROM dbo.Inv_CashCustomer
         WHERE Inv_CashCustomer.CategoryID = @CustomerCatID
        )
             OR Inv_Receipt_h.Vendor_ID IN
        (
         SELECT Gl_Accounts.AccountID
         FROM dbo.Gl_Accounts
         WHERE Gl_Accounts.VendorCategoryID = @CustomerCatID
        ))
        AND (@FromInvoiceNumber IS NULL
             OR Inv_Receipt_h.Entry_No >= @FromInvoiceNumber)
        AND (@ToInvoiceNumber IS NULL
             OR Inv_Receipt_h.Entry_No <= @ToInvoiceNumber)
        AND (@ItemCategoryID IS NULL
             OR Inv_Receipt_h.ID IN
        (
         SELECT Parent_ID
         FROM Inv_Receipt_d
              LEFT JOIN Inv_Items_Categories
              ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
         WHERE Inv_Receipt_d.Parent_ID = Inv_Receipt_h.ID
               AND Inv_Items_Categories.ItemCategory_ID IN
         (
          SELECT item
          FROM dbo.Split(@ItemCategoryID , ',')
         )
        ))
        AND (@FromTime IS NULL
             OR CAST(Inv_Receipt_h.Entry_Date AS TIME) >= @FromTime)
        AND (@ToTime IS NULL
             OR CAST(Inv_Receipt_h.Entry_Date AS TIME) <= @ToTime)
        AND (@FromCustomerActualDeliverDate IS NULL
             OR CAST(Inv_Receipt_h.CustomerDeliverDate AS DATE) >= @FromCustomerActualDeliverDate)
        AND (@ToCustomerActualDeliverDate IS NULL
             OR CAST(Inv_Receipt_h.CustomerDeliverDate AS DATE) <= @ToCustomerActualDeliverDate)
        AND (@CustomerStatusID IS NULL
             OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
        AND (@TransactionType IS NULL
             OR Inv_Receipt_h.Code IN
        (
         SELECT item
         FROM dbo.Split(@TransactionType , ',')
        ))
    AND (@Payment_Type IS NULL
         OR Inv_Receipt_h.Payment_Type = @Payment_Type)

		 	  --Select * from #context1
		-- union 
		  SELECT inv_receipt_h.code,
		inv_receipt_h.entry_no
		,inv_receipt_h.entry_date
		, Inv_PaymentType.Id   Inv_PaymentType_Id
         , Inv_PaymentType.code  Inv_PaymentType_code
             ,   Inv_PaymentType.Name   Inv_PaymentType_Name
             ,   Inv_PaymentType.Name_Ar   Inv_PaymentType_Name_Ar                                         
           , mstr_Branch.ID                                                  mstr_Branch_ID
             , mstr_Branch.Code                                                mstr_Branch_Code
             , mstr_Branch.Name                                                mstr_Branch_Name
             , mstr_Branch.Name_Ar                                             mstr_Branch_Name_Ar
             , Inv_Receipt_h.NetValue
             ,  0      value1  
		 into #context2
        FROM Inv_Receipt_h
             LEFT JOIN Inv_PaymentType
             ON Inv_Receipt_h.Payment_Type = Inv_PaymentType.id
             LEFT JOIN GL_Accounts
             ON GL_Accounts.AccountID = Inv_Receipt_h.Vendor_ID
             LEFT JOIN mstr_Branch
             ON Inv_Receipt_h.Branch_ID = mstr_Branch.ID 
        WHERE 
		Inv_Receipt_h.Code IN(51 , 52 , 53 , 54) and Inv_Receipt_h.Payment_Type <> @PaymentIDCode0 
		and Inv_Receipt_h.Branch_ID in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId)
             AND (ISNULL(Inv_Receipt_h.Is_Canceled , 0) <> 1)
             AND (ISNULL(Inv_Receipt_h.IsHolded , 0) <> 1)
             AND (@User_Role_Sale IS NULL
                  OR Inv_Receipt_h.ID IN
        (
         SELECT Parent_ID
         FROM Inv_Receipt_D
         WHERE Inv_Receipt_D.SalesManId = @User_Role_Sale
        ))
             AND (@SubsidaryID IS NULL
                  OR Inv_Receipt_h.SubsidiaryID = @SubsidaryID)
             AND (@FromDate IS NULL
                  OR CAST(Inv_Receipt_h.Entry_Date AS DATETIME) >= @fromDateTime)
             AND (@ToDate IS NULL
                  OR CAST(Inv_Receipt_h.Entry_Date AS DATETIME) <= @toDateTime)
             AND (@BrachID IS NULL
                  OR (Inv_Receipt_h.Branch_ID IN(@BrachID) and
					  Inv_Receipt_h.Branch_ID in(select UserBranch.BranchID 
												 from UserBranch 
												 where UserBranch.UserID=@userId)))
				  			  
    
        AND (@ItemId IS NULL
             OR Inv_Receipt_h.ID IN
        (
         SELECT Inv_Receipt_d.Parent_ID
         FROM dbo.Inv_Receipt_d
         WHERE Inv_Receipt_d.Item_ID = @ItemId
        ))
		 AND (@Item_vendor IS NULL
            OR Inv_Receipt_h.ID IN
               (
                   SELECT Parent_ID
                   FROM Inv_Receipt_D
                            left join Inv_Items on Inv_Receipt_d.Item_ID = Inv_Items.ID
                            left join Inv_Items_Vendors on Inv_Items.ID = Inv_Items_Vendors.ItemID
                   WHERE (Inv_Items_Vendors.VendorID = @item_vendor)
               ))
        
        AND (@SalesManId IS NULL
             OR Inv_Receipt_h.Empoyee_ID = @SalesManId)
        AND (@CustomerID IS NULL
             OR Inv_Receipt_h.Vendor_ID = @CustomerID)
        AND (@CashCustomerID IS NULL
             OR Inv_Receipt_h.CashCustomerID = @CashCustomerID)
        AND (@CustomerCatID IS NULL
             OR Inv_Receipt_h.CashCustomerID IN
        (
         SELECT Inv_CashCustomer.Id
         FROM dbo.Inv_CashCustomer
         WHERE Inv_CashCustomer.CategoryID = @CustomerCatID
        )
             OR Inv_Receipt_h.Vendor_ID IN
        (
         SELECT Gl_Accounts.AccountID
         FROM dbo.Gl_Accounts
         WHERE Gl_Accounts.VendorCategoryID = @CustomerCatID
        ))
        AND (@FromInvoiceNumber IS NULL
             OR Inv_Receipt_h.Entry_No >= @FromInvoiceNumber)
        AND (@ToInvoiceNumber IS NULL
             OR Inv_Receipt_h.Entry_No <= @ToInvoiceNumber)
        AND (@ItemCategoryID IS NULL
             OR Inv_Receipt_h.ID IN
        (
         SELECT Parent_ID
         FROM Inv_Receipt_d
              LEFT JOIN Inv_Items_Categories
              ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
         WHERE Inv_Receipt_d.Parent_ID = Inv_Receipt_h.ID
               AND Inv_Items_Categories.ItemCategory_ID IN
         (
          SELECT item
          FROM dbo.Split(@ItemCategoryID , ',')
         )
        ))
        AND (@FromTime IS NULL
             OR CAST(Inv_Receipt_h.Entry_Date AS TIME) >= @FromTime)
        AND (@ToTime IS NULL
             OR CAST(Inv_Receipt_h.Entry_Date AS TIME) <= @ToTime)
        AND (@FromCustomerActualDeliverDate IS NULL
             OR CAST(Inv_Receipt_h.CustomerDeliverDate AS DATE) >= @FromCustomerActualDeliverDate)
        AND (@ToCustomerActualDeliverDate IS NULL
             OR CAST(Inv_Receipt_h.CustomerDeliverDate AS DATE) <= @ToCustomerActualDeliverDate)
        AND (@CustomerStatusID IS NULL
             OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
        AND (@TransactionType IS NULL
             OR Inv_Receipt_h.Code IN
        (
         SELECT item
         FROM dbo.Split(@TransactionType , ',')
        )
    AND (@Payment_Type IS NULL
         OR Inv_Receipt_h.Payment_Type = @Payment_Type))
 
		 
		 -- Select sum(NetValue) ,sum(value1)from #context2
		 --Select Sum(Netvalue) from ( Select *from #context1
		 --union   Select * from #context2) as T
		   
        SELECT Inv_PaymentType_Id      Inv_PaymentType_Id
             , Inv_PaymentType_code    Inv_PaymentType_code            
             , Inv_PaymentType_Name    Inv_PaymentType_Name
             , Inv_PaymentType_Name_AR Inv_PaymentType_Name_AR
             , mstr_Branch_ID
             , mstr_Branch_Code
             , mstr_Branch_Name
             , mstr_Branch_Name_Ar
             , SUM(Netvalue)                Value, 0 sort
        FROM   ( Select *from #context1 union   Select * from #context2) as T
        GROUP BY Inv_PaymentType_Id
               , Inv_PaymentType_code
               
               , Inv_PaymentType_Name
               , Inv_PaymentType_Name_AR
               , mstr_Branch_ID
               , mstr_Branch_Code
               , mstr_Branch_Name
               , mstr_Branch_Name_Ar
    END

GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Sales_Return_Group_By_PaymentType_Date]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--Select * from mstr_branch
CREATE PROC [dbo].[Report_INV_Sales_Return_Group_By_PaymentType_Date] @SubsidaryID                   INT           = null
                                                             , @FromDate                      DATE          = '2019-01-01'
                                                             , @ToDate                        DATE          = '2020-08-06'
                                                             , @BrachID                       INT           = 51
                                                             , @ItemId                        INT           = NULL
                                                             , @SalesManId                    INT           = NULL
                                                             , @CustomerID                    INT           = NULL
                                                             , @CashCustomerID                INT           = NULL
                                                             , @CustomerCatID                 INT           = NULL
                                                             , @FromInvoiceNumber             INT           = NULL
                                                             , @ToInvoiceNumber               INT           = NULL
                                                             , @ItemCategoryID                NVARCHAR(MAX) = NULL
                                                             , @FromCustomerActualDeliverDate DATE          = NULL
                                                             , @ToCustomerActualDeliverDate   DATE          = NULL
                                                             , @FromTime                      TIME          = NULL
                                                             , @ToTime                        TIME          = NULL
                                                             , @CustomerStatusID              INT           = NULL
                                                             , @TransactionType               NVARCHAR(MAX) = NULL
                                                             , @Payment_Type                  INT           = 36
                                                             , @User_Role_Sale                INT           = NULL
, @Item_vendor INT = NULL
,@userId int =13
AS
    BEGIN
	Declare @PaymentIDCode0 int =0
	Select top 1 @PaymentIDCode0 = ID From Inv_PaymentType where code = 0
	IF @PaymentIDCode0 is null Set @PaymentIDCode0 = 0
/*
-1	Unpaid		
 0	Multi		
 1	ßÇÔ		
 2	ÈÇáÍÓÇÈ	
*/

        IF EXISTS
        (
         SELECT *
         FROM dbo.Split(@TransactionType , ',')
         WHERE Item = -1
        )
            SET @TransactionType = NULL

        IF EXISTS
        (
         SELECT *
         FROM dbo.Split(@ItemCategoryID , ',')
         WHERE Item = -1
        )
		    declare
        @fromDateTime DATETIME = null
        , @toDateTime DATETIME = null

    set @fromDateTime = cast(@FromDate as datetime)  +' ' +'00:00:00'
    set @toDateTime = cast(@ToDate as datetime)  +' ' + '23:59:59'
            SET @ItemCategoryID = NULL

			 CREATE TABLE #context
    (  
		   entry_no nvarchar(200)
		, entry_date datetime
		, Inv_PaymentType_Id int
         ,  Inv_PaymentType_code nvarchar(200)
        ,   Inv_PaymentType_Name nvarchar(500)
        ,   Inv_PaymentType_Name_Ar   nvarchar(500)                                       
         ,  mstr_Branch_ID int
             ,  mstr_Branch_Code  nvarchar(200)
             ,   mstr_Branch_Name  nvarchar(500)
             , mstr_Branch_Name_Ar  nvarchar(500) 
             ,  NetValue  float             
             ,  value1   float

    );
--	  INSERT INTO #context            
--	 SELECT    entry_no  
--			 , entry_date  
--			 , Inv_PaymentType_Id  
--			 ,  Inv_PaymentType_code   
--			 ,   Inv_PaymentType_Name 
--			 ,   Inv_PaymentType_Name_Ar  
--			 ,  mstr_Branch_ID  
--             ,  mstr_Branch_Code  
--             ,   mstr_Branch_Name   
--             , mstr_Branch_Name_Ar   
--             ,  NetValue   
--             ,  value1  

--From
--      (  
	  SELECT inv_receipt_h.Code,
		inv_receipt_h.entry_no
		,inv_receipt_h.entry_date
		, Inv_PaymentType.Id   Inv_PaymentType_Id
         , Inv_PaymentType.code  Inv_PaymentType_code
             ,   Inv_PaymentType.Name   Inv_PaymentType_Name
             ,   Inv_PaymentType.Name_Ar   Inv_PaymentType_Name_Ar                                         
              , mstr_Branch.ID mstr_Branch_ID
             , mstr_Branch.Code mstr_Branch_Code
             , mstr_Branch.Name mstr_Branch_Name
             , mstr_Branch.Name_Ar mstr_Branch_Name_Ar
             , ( case when Inv_Receipt_h.code in (51,52) then  Inv_receiptmultipayment.Amount   else  Inv_receiptmultipayment.Amount * -1 end ) Netvalue
             ,  Inv_receiptmultipayment.Amount  value1     
			 into #context1
        FROM Inv_PaymentType,Inv_receiptmultipayment,Inv_Receipt_h 
             LEFT JOIN GL_Accounts
             ON GL_Accounts.AccountID = Inv_Receipt_h.Vendor_ID
             LEFT JOIN mstr_Branch
             ON Inv_Receipt_h.Branch_ID = mstr_Branch.ID  
             
        WHERE Inv_receiptmultipayment.ReceiptId = Inv_Receipt_h.id
			and Inv_PaymentType.id=Inv_receiptmultipayment.PaymentTypeId
			and Inv_Receipt_h.Code IN(51 , 52 , 53 , 54) 
			and Inv_Receipt_h.Payment_Type = @PaymentIDCode0 
			and Inv_Receipt_h.Branch_ID in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId)
             AND (ISNULL(Inv_Receipt_h.Is_Canceled , 0) <> 1)
             AND (ISNULL(Inv_Receipt_h.IsHolded , 0) <> 1)
             AND (@User_Role_Sale IS NULL
                  OR Inv_Receipt_h.ID IN
        (
         SELECT Parent_ID
         FROM Inv_Receipt_D
         WHERE Inv_Receipt_D.SalesManId = @User_Role_Sale
        ))
             AND (@SubsidaryID IS NULL
                  OR Inv_Receipt_h.SubsidiaryID = @SubsidaryID)
             AND (@FromDate IS NULL
                  OR CAST(Inv_Receipt_h.Entry_Date AS DATETIME) >= @fromDateTime)
             AND (@ToDate IS NULL
                  OR CAST(Inv_Receipt_h.Entry_Date AS DATETIME) <= @toDateTime)
             AND (@BrachID IS NULL
                  OR (Inv_Receipt_h.Branch_ID IN(@BrachID) and
					  Inv_Receipt_h.Branch_ID in(select UserBranch.BranchID 
												 from UserBranch 
												 where UserBranch.UserID=@userId)))
				  			  
    
        AND (@ItemId IS NULL
             OR Inv_Receipt_h.ID IN
        (
         SELECT Inv_Receipt_d.Parent_ID
         FROM dbo.Inv_Receipt_d
         WHERE Inv_Receipt_d.Item_ID = @ItemId
        ))
		 AND (@Item_vendor IS NULL
            OR Inv_Receipt_h.ID IN
               (
                   SELECT Parent_ID
                   FROM Inv_Receipt_D
                            left join Inv_Items on Inv_Receipt_d.Item_ID = Inv_Items.ID
                            left join Inv_Items_Vendors on Inv_Items.ID = Inv_Items_Vendors.ItemID
                   WHERE (Inv_Items_Vendors.VendorID = @item_vendor)
               ))
        
        AND (@SalesManId IS NULL
             OR Inv_Receipt_h.Empoyee_ID = @SalesManId)
        AND (@CustomerID IS NULL
             OR Inv_Receipt_h.Vendor_ID = @CustomerID)
        AND (@CashCustomerID IS NULL
             OR Inv_Receipt_h.CashCustomerID = @CashCustomerID)
        AND (@CustomerCatID IS NULL
             OR Inv_Receipt_h.CashCustomerID IN
        (
         SELECT Inv_CashCustomer.Id
         FROM dbo.Inv_CashCustomer
         WHERE Inv_CashCustomer.CategoryID = @CustomerCatID
        )
             OR Inv_Receipt_h.Vendor_ID IN
        (
         SELECT Gl_Accounts.AccountID
         FROM dbo.Gl_Accounts
         WHERE Gl_Accounts.VendorCategoryID = @CustomerCatID
        ))
        AND (@FromInvoiceNumber IS NULL
             OR Inv_Receipt_h.Entry_No >= @FromInvoiceNumber)
        AND (@ToInvoiceNumber IS NULL
             OR Inv_Receipt_h.Entry_No <= @ToInvoiceNumber)
        AND (@ItemCategoryID IS NULL
             OR Inv_Receipt_h.ID IN
        (
         SELECT Parent_ID
         FROM Inv_Receipt_d
              LEFT JOIN Inv_Items_Categories
              ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
         WHERE Inv_Receipt_d.Parent_ID = Inv_Receipt_h.ID
               AND Inv_Items_Categories.ItemCategory_ID IN
         (
          SELECT item
          FROM dbo.Split(@ItemCategoryID , ',')
         )
        ))
        AND (@FromTime IS NULL
             OR CAST(Inv_Receipt_h.Entry_Date AS TIME) >= @FromTime)
        AND (@ToTime IS NULL
             OR CAST(Inv_Receipt_h.Entry_Date AS TIME) <= @ToTime)
        AND (@FromCustomerActualDeliverDate IS NULL
             OR CAST(Inv_Receipt_h.CustomerDeliverDate AS DATE) >= @FromCustomerActualDeliverDate)
        AND (@ToCustomerActualDeliverDate IS NULL
             OR CAST(Inv_Receipt_h.CustomerDeliverDate AS DATE) <= @ToCustomerActualDeliverDate)
        AND (@CustomerStatusID IS NULL
             OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
        AND (@TransactionType IS NULL
             OR Inv_Receipt_h.Code IN
        (
         SELECT item
         FROM dbo.Split(@TransactionType , ',')
        ))
    AND (@Payment_Type IS NULL
         OR Inv_ReceiptMultiPayment.PaymentTypeId = @Payment_Type)

		 	  --Select * from #context1
		-- union 
		  SELECT inv_receipt_h.code,
		inv_receipt_h.entry_no
		,inv_receipt_h.entry_date
		, Inv_PaymentType.Id   Inv_PaymentType_Id
         , Inv_PaymentType.code  Inv_PaymentType_code
             ,   Inv_PaymentType.Name   Inv_PaymentType_Name
             ,   Inv_PaymentType.Name_Ar   Inv_PaymentType_Name_Ar                                         
           , mstr_Branch.ID                                                  mstr_Branch_ID
             , mstr_Branch.Code                                                mstr_Branch_Code
             , mstr_Branch.Name                                                mstr_Branch_Name
             , mstr_Branch.Name_Ar                                             mstr_Branch_Name_Ar
             
			  , ( case when Inv_Receipt_h.code in (51,52) then   Inv_Receipt_h.NetValue   else   Inv_Receipt_h.NetValue * -1 end ) Netvalue
             ,  0      value1  
		 into #context2
        FROM Inv_Receipt_h
             LEFT JOIN Inv_PaymentType
             ON Inv_Receipt_h.Payment_Type = Inv_PaymentType.id
             LEFT JOIN GL_Accounts
             ON GL_Accounts.AccountID = Inv_Receipt_h.Vendor_ID
             LEFT JOIN mstr_Branch
             ON Inv_Receipt_h.Branch_ID = mstr_Branch.ID 
        WHERE 
		Inv_Receipt_h.Code IN(51 , 52 , 53 , 54) 
		and Inv_Receipt_h.Branch_ID in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId)
             AND (ISNULL(Inv_Receipt_h.Is_Canceled , 0) <> 1)
             AND (ISNULL(Inv_Receipt_h.IsHolded , 0) <> 1)
             AND (@User_Role_Sale IS NULL
                  OR Inv_Receipt_h.ID IN
        (
         SELECT Parent_ID
         FROM Inv_Receipt_D
         WHERE Inv_Receipt_D.SalesManId = @User_Role_Sale
        ))
             AND (@SubsidaryID IS NULL
                  OR Inv_Receipt_h.SubsidiaryID = @SubsidaryID)
             AND (@FromDate IS NULL
                  OR CAST(Inv_Receipt_h.Entry_Date AS DATETIME) >= @fromDateTime)
             AND (@ToDate IS NULL
                  OR CAST(Inv_Receipt_h.Entry_Date AS DATETIME) <= @toDateTime)
             AND (@BrachID IS NULL
                  OR (Inv_Receipt_h.Branch_ID IN(@BrachID) and
					  Inv_Receipt_h.Branch_ID in(select UserBranch.BranchID 
												 from UserBranch 
												 where UserBranch.UserID=@userId)))
				  			  
    
        AND (@ItemId IS NULL
             OR Inv_Receipt_h.ID IN
        (
         SELECT Inv_Receipt_d.Parent_ID
         FROM dbo.Inv_Receipt_d
         WHERE Inv_Receipt_d.Item_ID = @ItemId
        ))
		 AND (@Item_vendor IS NULL
            OR Inv_Receipt_h.ID IN
               (
                   SELECT Parent_ID
                   FROM Inv_Receipt_D
                            left join Inv_Items on Inv_Receipt_d.Item_ID = Inv_Items.ID
                            left join Inv_Items_Vendors on Inv_Items.ID = Inv_Items_Vendors.ItemID
                   WHERE (Inv_Items_Vendors.VendorID = @item_vendor)
               ))
        
        AND (@SalesManId IS NULL
             OR Inv_Receipt_h.Empoyee_ID = @SalesManId)
        AND (@CustomerID IS NULL
             OR Inv_Receipt_h.Vendor_ID = @CustomerID)
        AND (@CashCustomerID IS NULL
             OR Inv_Receipt_h.CashCustomerID = @CashCustomerID)
        AND (@CustomerCatID IS NULL
             OR Inv_Receipt_h.CashCustomerID IN
        (
         SELECT Inv_CashCustomer.Id
         FROM dbo.Inv_CashCustomer
         WHERE Inv_CashCustomer.CategoryID = @CustomerCatID
        )
             OR Inv_Receipt_h.Vendor_ID IN
        (
         SELECT Gl_Accounts.AccountID
         FROM dbo.Gl_Accounts
         WHERE Gl_Accounts.VendorCategoryID = @CustomerCatID
        ))
        AND (@FromInvoiceNumber IS NULL
             OR Inv_Receipt_h.Entry_No >= @FromInvoiceNumber)
        AND (@ToInvoiceNumber IS NULL
             OR Inv_Receipt_h.Entry_No <= @ToInvoiceNumber)
        AND (@ItemCategoryID IS NULL
             OR Inv_Receipt_h.ID IN
        (
         SELECT Parent_ID
         FROM Inv_Receipt_d
              LEFT JOIN Inv_Items_Categories
              ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
         WHERE Inv_Receipt_d.Parent_ID = Inv_Receipt_h.ID
               AND Inv_Items_Categories.ItemCategory_ID IN
         (
          SELECT item
          FROM dbo.Split(@ItemCategoryID , ',')
         )
        ))
        AND (@FromTime IS NULL
             OR CAST(Inv_Receipt_h.Entry_Date AS TIME) >= @FromTime)
        AND (@ToTime IS NULL
             OR CAST(Inv_Receipt_h.Entry_Date AS TIME) <= @ToTime)
        AND (@FromCustomerActualDeliverDate IS NULL
             OR CAST(Inv_Receipt_h.CustomerDeliverDate AS DATE) >= @FromCustomerActualDeliverDate)
        AND (@ToCustomerActualDeliverDate IS NULL
             OR CAST(Inv_Receipt_h.CustomerDeliverDate AS DATE) <= @ToCustomerActualDeliverDate)
        AND (@CustomerStatusID IS NULL
             OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
        AND (@TransactionType IS NULL
             OR Inv_Receipt_h.Code IN
        (
         SELECT item
         FROM dbo.Split(@TransactionType , ',')
        ))
    AND ( (@Payment_Type IS NULL
         OR Inv_Receipt_h.Payment_Type = @Payment_Type) and   Inv_Receipt_h.Payment_Type <> @PaymentIDCode0 )
 
		 
		 -- Select sum(NetValue) ,sum(value1)from #context2
		 --Select Sum(Netvalue) from ( Select *from #context1
		 --union   Select * from #context2) as T
		   
        SELECT  cast(Entry_Date as date )		ENtry_date		
		     ,Inv_PaymentType_Id      Inv_PaymentType_Id
             , Inv_PaymentType_code    Inv_PaymentType_code            
             , Inv_PaymentType_Name    Inv_PaymentType_Name
             , Inv_PaymentType_Name_AR Inv_PaymentType_Name_AR
             , mstr_Branch_ID
             , mstr_Branch_Code
             , mstr_Branch_Name
             , mstr_Branch_Name_Ar
             , SUM( Netvalue)  value 
        FROM   ( Select *from #context1 union   Select * from #context2) as T
        GROUP BY Inv_PaymentType_Id
               , Inv_PaymentType_code               
               , Inv_PaymentType_Name
               , Inv_PaymentType_Name_AR
               , mstr_Branch_ID
               , mstr_Branch_Code
               , mstr_Branch_Name
               , mstr_Branch_Name_Ar
			   ,cast(Entry_Date as date ) 
			    --SELECT  SUM( Netvalue)  value 
       -- FROM     #context1  
       -- 	    SELECT  SUM( Netvalue)  value 
       -- FROM   #context2 
        
    END

GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Sales_Return_Group_By_PaymentType_TransactionCode]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Report_INV_Sales_Return_Group_By_PaymentType_TransactionCode] @SubsidaryID                   INT           = 63
                                                                       , @FromDate                      DATE          = '20190325'
                                                                       , @ToDate                        DATE          = '20190325'
                                                                       , @BrachID                       INT           = NULL
                                                                       , @ItemId                        INT           = NULL
                                                                       , @SalesManId                    INT           = NULL
                                                                       , @CustomerID                    INT           = NULL
                                                                       , @CashCustomerID                INT           = NULL
                                                                       , @CustomerCatID                 INT           = NULL
                                                                       , @FromInvoiceNumber             INT           = NULL
                                                                       , @ToInvoiceNumber               INT           = NULL
                                                                       , @ItemCategoryID                NVARCHAR(MAX) = NULL
                                                                       , @FromCustomerActualDeliverDate DATE          = NULL
                                                                       , @ToCustomerActualDeliverDate   DATE          = NULL
                                                                       , @FromTime                      TIME          = NULL
                                                                       , @ToTime                        TIME          = NULL
                                                                       , @CustomerStatusID              INT           = NULL
                                                                       , @TransactionType               NVARCHAR(MAX) = NULL
                                                                       , @Payment_Type                  INT           = NULL
                                                                       , @User_Role_Sale                INT           = NULL
, @Item_vendor INT = NULL
,@userId int =null
AS
    BEGIN

/*
-1	Unpaid		
 0	Multi		
 1	???		
 2	???????	
*/

        IF EXISTS
        (
         SELECT *
         FROM dbo.Split(@TransactionType , ',')
         WHERE Item = -1
        )
            SET @TransactionType = NULL

        IF EXISTS
        (
         SELECT *
         FROM dbo.Split(@ItemCategoryID , ',')
         WHERE Item = -1
        )
            SET @ItemCategoryID = NULL

        -- Get Context Data
        SELECT
        --	Inv_PaymentType
        Inv_PaymentType.Id                       Inv_PaymentType_Id
      , Inv_PaymentType.code                     Inv_PaymentType_code
      , Inv_PaymentType.Name                     Inv_PaymentType_Name
      , Inv_PaymentType.Name_AR                  Inv_PaymentType_Name_AR
        --Inv_Receipt_h
      , Inv_Receipt_h.id                         Inv_Receipt_h_id
      , Inv_Receipt_h.Code                       Inv_Receipt_h_Code
      , Inv_Receipt_h.Entry_Date                 Inv_Receipt_h_Entry_Date
      ,  ISNULL(Inv_Receipt_h.NetValue , 0)      Inv_Receipt_h_NetValue
      , ISNULL(Inv_Receipt_h.[Value] , 0)        Inv_Receipt_h_Value
      , ISNULL(Inv_Receipt_h.Discount_Value , 0) Inv_Receipt_h_Discount_Value
      , ISNULL(Inv_Receipt_h.DeliveryFees , 0)   Inv_Receipt_h_DeliveryFees
        --mstr_Branch
      , mstr_Branch.ID                           mstr_Branch_ID
      , mstr_Branch.Code                         mstr_Branch_Code
      , mstr_Branch.Name                         mstr_Branch_Name
      , mstr_Branch.Name_Ar                      mstr_Branch_Name_Ar
        INTO #Context
        FROM dbo.Inv_PaymentType
             LEFT JOIN dbo.Inv_Receipt_h
             ON Inv_PaymentType.id = Inv_Receipt_h.Payment_Type
             LEFT JOIN GL_Accounts
             ON GL_Accounts.AccountID = Inv_Receipt_h.Vendor_ID
             LEFT JOIN mstr_Branch
             ON Inv_Receipt_h.Branch_ID = mstr_Branch.ID
        WHERE Inv_Receipt_h.Code IN(51 , 52 , 53 , 54)
             AND (ISNULL(Inv_Receipt_h.Is_Canceled , 0) <> 1)
             AND (ISNULL(Inv_Receipt_h.IsHolded , 0) <> 1)
             AND (@User_Role_Sale IS NULL
                  OR Inv_Receipt_h.ID IN
        (
         SELECT Parent_ID
         FROM Inv_Receipt_D
         WHERE Inv_Receipt_D.SalesManId = @User_Role_Sale
        ))
             AND (@SubsidaryID IS NULL
                  OR Inv_Receipt_h.SubsidiaryID = @SubsidaryID)
             AND (@FromDate IS NULL
                  OR CAST(Inv_Receipt_h.Entry_Date AS DATE) >= @FromDate)
             AND (@ToDate IS NULL
                  OR CAST(Inv_Receipt_h.Entry_Date AS DATE) <= @ToDate)
             AND (@BrachID IS NULL
                  OR Inv_Receipt_h.Branch_ID IN(@BrachID))
				  and Inv_Receipt_h.Branch_ID in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId)
        AND (@ItemId IS NULL
             OR Inv_Receipt_h.ID IN
        (
         SELECT Inv_Receipt_d.Parent_ID
         FROM dbo.Inv_Receipt_d
         WHERE Inv_Receipt_d.Item_ID = @ItemId
        ))
        AND (@SalesManId IS NULL
             OR Inv_Receipt_h.Empoyee_ID = @SalesManId)
        AND (@CustomerID IS NULL
             OR Inv_Receipt_h.Vendor_ID = @CustomerID)
        AND (@CashCustomerID IS NULL
             OR Inv_Receipt_h.CashCustomerID = @CashCustomerID)
        AND (@CustomerCatID IS NULL
             OR Inv_Receipt_h.CashCustomerID IN
        (
         SELECT Inv_CashCustomer.Id
         FROM dbo.Inv_CashCustomer
         WHERE Inv_CashCustomer.CategoryID = @CustomerCatID
        )
             OR Inv_Receipt_h.Vendor_ID IN
        (
         SELECT Gl_Accounts.AccountID
         FROM dbo.Gl_Accounts
         WHERE Gl_Accounts.VendorCategoryID = @CustomerCatID
        ))
		   AND (@Item_vendor IS NULL
            OR Inv_Receipt_h.ID IN
               (
                   SELECT Parent_ID
                   FROM Inv_Receipt_D
                            left join Inv_Items on Inv_Receipt_d.Item_ID = Inv_Items.ID
                            left join Inv_Items_Vendors on Inv_Items.ID = Inv_Items_Vendors.ItemID
                   WHERE (Inv_Items_Vendors.VendorID = @item_vendor)
               ))
        AND (@FromInvoiceNumber IS NULL
             OR Inv_Receipt_h.Entry_No >= @FromInvoiceNumber)
        AND (@ToInvoiceNumber IS NULL
             OR Inv_Receipt_h.Entry_No <= @ToInvoiceNumber)
        AND (@ItemCategoryID IS NULL
             OR Inv_Receipt_h.ID IN
        (
         SELECT Parent_ID
         FROM Inv_Receipt_d
              LEFT JOIN Inv_Items_Categories
              ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
         WHERE Inv_Receipt_d.Parent_ID = Inv_Receipt_h.ID
               AND Inv_Items_Categories.ItemCategory_ID IN
         (
          SELECT item
          FROM dbo.Split(@ItemCategoryID , ',')
         )
        ))
        AND (@FromTime IS NULL
             OR CAST(Inv_Receipt_h.Entry_Date AS TIME) >= @FromTime)
        AND (@ToTime IS NULL
             OR CAST(Inv_Receipt_h.Entry_Date AS TIME) <= @ToTime)
        AND (@FromCustomerActualDeliverDate IS NULL
             OR CAST(Inv_Receipt_h.CustomerDeliverDate AS DATE) >= @FromCustomerActualDeliverDate)
        AND (@ToCustomerActualDeliverDate IS NULL
             OR CAST(Inv_Receipt_h.CustomerDeliverDate AS DATE) <= @ToCustomerActualDeliverDate)
        AND (@CustomerStatusID IS NULL
             OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
        AND (@TransactionType IS NULL
             OR Inv_Receipt_h.Code IN
        (
         SELECT item
         FROM dbo.Split(@TransactionType , ',')
        ))
    AND (@Payment_Type IS NULL
         OR Inv_Receipt_h.Payment_Type = @Payment_Type)

        -- Get Multi Payment
        SELECT
        -- Inv_ReceiptMultiPayment
        Inv_ReceiptMultiPayment.PaymentTypeId                                                                                  Inv_ReceiptMultiPayment_PaymentTypeId
      , Inv_ReceiptMultiPayment.ReceiptId                                                                                      Inv_ReceiptMultiPayment_ReceiptId
      , Inv_ReceiptMultiPayment.Amount                                                                                         Inv_ReceiptMultiPayment_Amount
        --#Context 
      , #Context.Inv_Receipt_h_Code
      , #Context.Inv_Receipt_h_Entry_Date
      , #Context.mstr_Branch_ID
        -- Equation
      , (Inv_ReceiptMultiPayment.Amount / 
	  case when
	  #Context.Inv_Receipt_h_NetValue=0
	  then 1 else  #Context.Inv_Receipt_h_NetValue end
	  ) * ISNULL(#Context.Inv_Receipt_h_Value , 0)          Inv_ReceiptMultiPayment_Value
      , (Inv_ReceiptMultiPayment.Amount / 
	   case when
	  #Context.Inv_Receipt_h_NetValue=0
	  then 1 else  #Context.Inv_Receipt_h_NetValue end
	  ) * ISNULL(#Context.Inv_Receipt_h_DeliveryFees , 0)   Inv_ReceiptMultiPayment_DeliveryFees
      , (Inv_ReceiptMultiPayment.Amount / 
	   case when
	  #Context.Inv_Receipt_h_NetValue=0
	  then 1 else  #Context.Inv_Receipt_h_NetValue end
	  ) * ISNULL(#Context.Inv_Receipt_h_Discount_Value , 0) Inv_ReceiptMultiPayment_Discount_Value
        INTO #Inv_ReceiptMultiPayment
        FROM #Context
             LEFT JOIN dbo.Inv_receiptmultipayment
             ON Inv_receiptmultipayment.ReceiptID = #Context.Inv_Receipt_h_id
        WHERE Inv_receiptmultipayment.ReceiptID IS NOT NULL and #Context.Inv_PaymentType_code=0
        ORDER BY Inv_receiptmultipayment.ReceiptID

        -- Get Sum Multi Value With Transaction Code
        SELECT Inv_ReceiptMultiPayment_PaymentTypeId
             , Inv_Receipt_h_Code
             , SUM(Inv_ReceiptMultiPayment_Value)          Inv_ReceiptMultiPayment_Value
             , SUM(Inv_ReceiptMultiPayment_DeliveryFees)   Inv_ReceiptMultiPayment_DeliveryFees
             , SUM(Inv_ReceiptMultiPayment_Discount_Value) Inv_ReceiptMultiPayment_Discount_Value
        INTO #Multi_Sum
        FROM #Inv_ReceiptMultiPayment
        GROUP BY Inv_ReceiptMultiPayment_PaymentTypeId
               , Inv_Receipt_h_Code

        -- Get Sum Context Value With Transaction Code
        SELECT #Context.Inv_PaymentType_Id
             , #Context.Inv_PaymentType_code
             , #Context.Inv_PaymentType_Name
             , #Context.Inv_PaymentType_Name_AR
             , #Context.Inv_Receipt_h_Code
             , SUM(#Context.Inv_Receipt_h_Value)          Inv_Receipt_h_Value
             , SUM(#Context.Inv_Receipt_h_DeliveryFees)   Inv_Receipt_h_DeliveryFees
             , SUM(#Context.Inv_Receipt_h_Discount_Value) Inv_Receipt_h_Discount_Value
        INTO #Context_Sum
        FROM #Context
        WHERE #Context.Inv_PaymentType_code NOT IN(-1 , 0)
        GROUP BY #Context.Inv_PaymentType_Id
               , #Context.Inv_PaymentType_code
               , #Context.Inv_PaymentType_Name
               , #Context.Inv_PaymentType_Name_AR
               , #Context.Inv_Receipt_h_Code

        -- Get All Sum Value With Transction Code
        SELECT Inv_PaymentType.Id                                                                                                    Inv_PaymentType_Id
             , Inv_PaymentType.Code                                                                                                  Inv_PaymentType_code
             , Inv_PaymentType.Name                                                                                                  Inv_PaymentType_Name
             , Inv_PaymentType.Name_Ar                                                                                               Inv_PaymentType_Name_AR
             , ISNULL(#Context_Sum.Inv_Receipt_h_Code , #Multi_Sum.Inv_Receipt_h_Code)                                               Inv_Receipt_h_Code
             , ISNULL(#Context_Sum.Inv_Receipt_h_Value , 0) + ISNULL(#Multi_Sum.Inv_ReceiptMultiPayment_Value , 0)                   Value
             , ISNULL(#Context_Sum.Inv_Receipt_h_DeliveryFees , 0) + ISNULL(#Multi_Sum.Inv_ReceiptMultiPayment_DeliveryFees , 0)     DeliveryFees
             , ISNULL(#Context_Sum.Inv_Receipt_h_Discount_Value , 0) + ISNULL(#Multi_Sum.Inv_ReceiptMultiPayment_Discount_Value , 0) Discount_Value
        INTO #Context_Multi
        FROM #Context_Sum
             FULL JOIN #Multi_Sum
             ON #Context_Sum.Inv_PaymentType_Id = #Multi_Sum.Inv_ReceiptMultiPayment_PaymentTypeId
                AND #Context_Sum.Inv_Receipt_h_Code = #Multi_Sum.Inv_Receipt_h_Code
             LEFT JOIN Inv_PaymentType
             ON(#Context_Sum.Inv_PaymentType_Id = Inv_PaymentType.id)
               OR (#Multi_Sum.Inv_ReceiptMultiPayment_PaymentTypeId = Inv_PaymentType.id)

        -- Get transaction (51,52)
        SELECT Inv_PaymentType_Id
             , Inv_PaymentType_code
             , Inv_PaymentType_Name
             , Inv_PaymentType_Name_AR
             , SUM(Value)          Value
             , SUM(DeliveryFees)   DeliveryFees
             , SUM(Discount_Value) Discount_Value
        INTO #Context_Multi_51_52
        FROM #Context_Multi
        WHERE Inv_Receipt_h_Code IN(51 , 52)
        GROUP BY Inv_PaymentType_Id
               , Inv_PaymentType_code
               , Inv_PaymentType_Name
               , Inv_PaymentType_Name_AR

        -- Get transaction (53, 54)
        SELECT Inv_PaymentType_Id
             , Inv_PaymentType_code
             , Inv_PaymentType_Name
             , Inv_PaymentType_Name_AR
             , SUM(Value)          Value
             , SUM(DeliveryFees)   DeliveryFees
             , SUM(Discount_Value) Discount_Value
        INTO #Context_Multi_53_54
        FROM #Context_Multi
        WHERE Inv_Receipt_h_Code IN(53 , 54)
        GROUP BY Inv_PaymentType_Id
               , Inv_PaymentType_code
               , Inv_PaymentType_Name
               , Inv_PaymentType_Name_AR

        --SELECT * FROM #Context
        --SELECT * FROM #Inv_ReceiptMultiPayment
        --SELECT * FROM #Multi_Sum
        --SELECT * FROM #Context_Sum
        --SELECT * FROM #Context_Multi
        --SELECT * FROM #Context_Multi_51_52
        --SELECT * FROM #Context_Multi_53_54
        --Get Just Distinct Paymet Type From #Context_Multi 
        SELECT DISTINCT 
               Inv_PaymentType_Id
             , Inv_PaymentType_code
             , Inv_PaymentType_Name
             , Inv_PaymentType_Name_AR
        INTO #PaymentType
        FROM #Context_Multi

        -- Finally
        SELECT *
             , Net_Sales - Net_Return Net_Value
        FROM
        (
         SELECT #PaymentType.Inv_PaymentType_Id
              , #PaymentType.Inv_PaymentType_code
              , CASE #PaymentType.Inv_PaymentType_code
                    WHEN 1
                    THEN 1
                    WHEN 2
                    THEN 3
                    ELSE 2
                END                                                                                                                                        sort
              , #PaymentType.Inv_PaymentType_Name
              , #PaymentType.Inv_PaymentType_Name_AR
              , #Context_Multi_51_52.Value                                                                                                                 Context_Multi_51_52_Value
              , #Context_Multi_51_52.DeliveryFees                                                                                                          Context_Multi_51_52_DeliveryFees
              , #Context_Multi_51_52.Discount_Value                                                                                                        Context_Multi_51_52_Discount_Value
              , ISNULL(#Context_Multi_51_52.[Value] , 0) + ISNULL(#Context_Multi_51_52.DeliveryFees , 0) - ISNULL(#Context_Multi_51_52.Discount_Value , 0) Net_Sales
              , #Context_Multi_53_54.Value                                                                                                                 Context_Multi_53_54_Value
              , #Context_Multi_53_54.DeliveryFees                                                                                                          Context_Multi_53_54_DeliveryFees
              , #Context_Multi_53_54.Discount_Value                                                                                                        Context_Multi_53_54_sDiscount_Value
              , ISNULL(#Context_Multi_53_54.[Value] , 0) - ISNULL(#Context_Multi_53_54.Discount_Value , 0)                                                 Net_Return
         FROM #PaymentType
              LEFT JOIN #Context_Multi_51_52
              ON #Context_Multi_51_52.Inv_PaymentType_Id = #PaymentType.Inv_PaymentType_Id
              LEFT JOIN #Context_Multi_53_54
              ON #Context_Multi_53_54.Inv_PaymentType_Id = #PaymentType.Inv_PaymentType_Id
        ) Tbl
        ORDER BY sort
               , Inv_PaymentType_code
    END


GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Sales_Return_Group_By_SalesMan]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Report_INV_Sales_Return_Group_By_SalesMan] @FromDate DATE = NULL
, @ToDate DATE = NULL
, @BrachID INT = NULL
, @CustomerID INT = NULL
, @CashCustomerID INT = NULL
, @CustomerCatID INT = NULL
, @FromInvoiceNumber INT = NULL
, @ToInvoiceNumber INT = NULL
, @ItemCategoryID NVARCHAR(MAX) = NULL
, @SubsidaryID INT = NULL
, @ItemId INT = NULL
, @Item_vendor INT = NULL
, @SalesManId INT = NULL
, @FromCustomerActualDeliverDate DATE = NULL
, @ToCustomerActualDeliverDate DATE = NULL
, @FromTime TIME = NULL
, @ToTime TIME = NULL
, @CustomerStatusID INT = NULL
, @Payment_Type INT = NULL
, @User_Role_Sale INT = NULL
,@userId int =null
,@TransactionType nvarchar(max)=null
AS
BEGIN

    IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@ItemCategoryID, ',')
            WHERE Item = -1
        )
        SET @ItemCategoryID = NULL
		  SET @TransactionType = NULL
    IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@TransactionType, ',')
            WHERE Item = -1
        )
		DROP TABLE IF EXISTS #AV_INV_TransactionDetails
    SELECT Parent_ID
         , SUM(AvgCost *qty * final_Conv) NetTotalAmount
    INTO #AV_INV_TransactionDetails
    FROM AV_INV_TransactionDetails
    WHERE (@ItemId IS NULL
        OR AV_INV_TransactionDetails.item_id = @ItemId)
    GROUP BY Parent_ID

    SELECT Security_Users_Name    = Security_Users.Name
         , Security_Users_Name_Ar = Security_Users.Name_Ar
		 ,Code                    =Security_Users.Code
         ,                          COUNT(DISTINCT H.ID) Count_All
         , C_S_Sum_NetValue       = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN ISNULL(H.NetValue, 0)
                                            ELSE 0
        END)
         , C_R_Sum_NetValue       = SUM(CASE
                                            WHEN H.CODE IN (53, 54)
                                                THEN ISNULL(H.NetValue, 0)
                                            ELSE 0
        END)
         , NetSale                = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN ISNULL(H.NetValue, 0)
                                            ELSE 0
        END) - SUM(CASE
                       WHEN H.CODE IN (53, 54)
                           THEN ISNULL(H.NetValue, 0)
                       ELSE 0
        END)
         , Sales_Cost             = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN  AV_TransactionDetails.NetTotalAmount
                                            ELSE 0
        END)
         , Returns_Cost           = SUM(CASE
                                            WHEN H.CODE IN (53, 54)
                                                THEN  AV_TransactionDetails.NetTotalAmount
                                            ELSE 0
        END)
    FROM Inv_Receipt_H H
             LEFT JOIN
         Security_Users ON H.Empoyee_ID = Security_Users.Id
             LEFT JOIN
         Inv_CashCustomer ON Inv_CashCustomer.id = H.CashCustomerID
             LEFT JOIN
         GL_Accounts ON GL_Accounts.AccountID = H.Vendor_ID
             LEFT JOIN
         #AV_INV_TransactionDetails AV_TransactionDetails ON AV_TransactionDetails.Parent_ID = H.ID
    WHERE H.Code IN (51, 52, 53, 54)
      AND (ISNULL(H.Is_Canceled, 0) <> 1)
      AND (ISNULL(H.IsHolded, 0) <> 1)
	   AND (@TransactionType IS NULL or @TransactionType='-1'
        OR H.Code IN
           (
               SELECT item
               FROM dbo.Split(@TransactionType, ',')
           ))
      AND EXISTS
        (
            SELECT Parent_ID
            FROM Inv_Receipt_D D
            WHERE D.Parent_ID = H.ID
        )
      AND (@SubsidaryID IS NULL
        OR H.SubsidiaryID = @SubsidaryID)
      AND (@FromDate IS NULL
        OR CAST(H.Entry_Date AS DATE) >= @FromDate)
      AND (@ToDate IS NULL
        OR CAST(H.Entry_Date AS DATE) <= @ToDate)
      AND (@User_Role_Sale IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
               WHERE Inv_Receipt_D.SalesManId = @User_Role_Sale
           ))
      AND (@ItemId IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
               WHERE Item_ID = @ItemId
           ))
      AND (@Item_vendor IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
                        left join Inv_Items on Inv_Receipt_d.Item_ID = Inv_Items.ID
                        left join Inv_Items_Vendors on Inv_Items.ID = Inv_Items_Vendors.ItemID
               WHERE (@item_vendor is null or Inv_Items_Vendors.VendorID = @item_vendor)
           ))

      AND (@SalesManId IS NULL
        OR H.Empoyee_ID = @SalesManId)
      AND (@BrachID IS NULL
        OR H.Branch_ID IN (@BrachID))
		and H.Branch_ID in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId)
      AND (@CustomerID IS NULL
        OR H.Vendor_ID = @CustomerID)
      AND (@CashCustomerID IS NULL
        OR H.CashCustomerID = @CashCustomerID)
      AND (@CustomerCatID IS NULL
        OR Inv_CashCustomer.CategoryID IN (@CustomerCatID)
        OR Gl_Accounts.VendorCategoryID IN (@CustomerCatID))
      AND (@FromInvoiceNumber IS NULL
        OR H.Entry_No >= @FromInvoiceNumber)
      AND (@ToInvoiceNumber IS NULL
        OR H.Entry_No <= @ToInvoiceNumber)
      AND (@ItemCategoryID IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_d
                        LEFT JOIN
                    Inv_Items_Categories ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
               WHERE Inv_Receipt_d.Parent_ID = H.ID
                 AND Inv_Items_Categories.ItemCategory_ID IN
                     (
                         SELECT item
                         FROM dbo.Split(@ItemCategoryID, ',')
                     )
           ))
      AND (@FromTime IS NULL
        OR CAST(H.Entry_Date AS TIME) >= @FromTime)
      AND (@ToTime IS NULL
        OR CAST(H.Entry_Date AS TIME) <= @ToTime)
      AND (@FromCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) >= @FromCustomerActualDeliverDate)
      AND (@ToCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) <= @ToCustomerActualDeliverDate)
      AND (@CustomerStatusID IS NULL
        OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
      AND (@Payment_Type IS NULL
        OR H.Payment_Type = @Payment_Type)
    GROUP BY Security_Users.Name
           , Security_Users.Name_AR
           , Security_Users.Id
		   ,Security_Users.Code
    ORDER BY Security_Users.Name
END
GO
/****** Object:  StoredProcedure [dbo].[Report_INV_Sales_Return_Group_By_Store]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Report_INV_Sales_Return_Group_By_Store] @FromDate DATE = NULL
, @ToDate DATE = NULL
, @BrachID INT = NULL
, @CustomerID INT = NULL
, @CashCustomerID INT = NULL
, @CustomerCatID INT = NULL
, @FromInvoiceNumber INT = NULL
, @ToInvoiceNumber INT = NULL
, @ItemCategoryID NVARCHAR(MAX) = NULL
, @SubsidaryID INT = NULL
, @ItemId INT = NULL
, @Item_vendor INT = NULL
, @SalesManId INT = NULL
, @FromCustomerActualDeliverDate DATE = NULL
, @ToCustomerActualDeliverDate DATE = NULL
, @FromTime TIME = NULL
, @ToTime TIME = NULL
, @CustomerStatusID INT = NULL
, @Payment_Type INT = NULL
, @User_Role_Sale INT = NULL
,@userId int =null
,@TransactionType nvarchar(max)=null
AS
BEGIN

    SELECT Parent_ID
         , SUM(AvgCost *qty * final_Conv) NetTotalAmount
    INTO #AV_INV_TransactionDetails
    FROM AV_INV_TransactionDetails
    WHERE (@ItemId IS NULL
        OR AV_INV_TransactionDetails.item_id = @ItemId)
    GROUP BY Parent_ID

       SELECT Inv_Store_Name    = Inv_Store.Name
         , Inv_Store_Name_Ar = Inv_Store.Name_Ar
		 ,Code                    =Inv_Store.ID
         ,                          COUNT(DISTINCT H.ID) Count_All

	    , C_S_Sum_NetValue       = SUM(CASE
                                             WHEN H.CODE IN (51, 52)
                                                THEN ISNULL(H.NetValue, 0)
                                            ELSE 0
        END)
         , C_R_Sum_NetValue       = SUM(CASE
                                            WHEN H.CODE IN (53, 54)
                                                THEN ISNULL(H.NetValue, 0)
                                            ELSE 0
        END)
         , NetSale                = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN ISNULL(H.NetValue, 0)
                                            ELSE 0
        END) - SUM(CASE
                       WHEN H.CODE IN (53, 54)
                           THEN ISNULL(H.NetValue, 0)
                       ELSE 0
        END)
         , Sales_Cost             = SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN  AV_TransactionDetails.NetTotalAmount
                                            ELSE 0
        END)
         , Returns_Cost           = SUM(CASE
                                            WHEN H.CODE IN (53, 54)
                                                THEN  AV_TransactionDetails.NetTotalAmount
                                            ELSE 0
        END)

		  FROM Inv_Receipt_H H
	LEFT JOIN
	  Inv_Receipt_d D ON H.ID = D.Parent_ID
             LEFT JOIN
         Inv_Store ON D.Store_ID = Inv_Store.Id
             LEFT JOIN
         Inv_CashCustomer ON Inv_CashCustomer.id = H.CashCustomerID
             LEFT JOIN
         GL_Accounts ON GL_Accounts.AccountID = H.Vendor_ID
             LEFT JOIN
         #AV_INV_TransactionDetails AV_TransactionDetails ON AV_TransactionDetails.Parent_ID = H.ID

    WHERE H.Code IN (51, 52, 53, 54)
      AND (ISNULL(H.Is_Canceled, 0) <> 1)
      AND (ISNULL(H.IsHolded, 0) <> 1)
	   AND (@TransactionType IS NULL or @TransactionType='-1'
        OR H.Code IN
           (
               SELECT item
               FROM dbo.Split(@TransactionType, ',')
           ))
      AND EXISTS
        (
            SELECT Parent_ID
            FROM Inv_Receipt_D D
            WHERE D.Parent_ID = H.ID
        )
      AND (@SubsidaryID IS NULL
        OR H.SubsidiaryID = @SubsidaryID)
      AND (@FromDate IS NULL
        OR CAST(H.Entry_Date AS DATE) >= @FromDate)
      AND (@ToDate IS NULL
        OR CAST(H.Entry_Date AS DATE) <= @ToDate)
      AND (@User_Role_Sale IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
               WHERE Inv_Receipt_D.SalesManId = @User_Role_Sale
           ))
      AND (@ItemId IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
               WHERE Item_ID = @ItemId
           ))
      AND (@Item_vendor IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
                        left join Inv_Items on Inv_Receipt_d.Item_ID = Inv_Items.ID
                        left join Inv_Items_Vendors on Inv_Items.ID = Inv_Items_Vendors.ItemID
               WHERE (@item_vendor is null or Inv_Items_Vendors.VendorID = @item_vendor)
           ))

      AND (@SalesManId IS NULL
        OR H.Empoyee_ID = @SalesManId)
      AND (@BrachID IS NULL
        OR H.Branch_ID IN (@BrachID))
	--	and H.Branch_ID in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId)
      AND (@CustomerID IS NULL
        OR H.Vendor_ID = @CustomerID)
      AND (@CashCustomerID IS NULL
        OR H.CashCustomerID = @CashCustomerID)
      AND (@CustomerCatID IS NULL
        OR Inv_CashCustomer.CategoryID IN (@CustomerCatID)
        OR Gl_Accounts.VendorCategoryID IN (@CustomerCatID))
      AND (@FromInvoiceNumber IS NULL
        OR H.Entry_No >= @FromInvoiceNumber)
      AND (@ToInvoiceNumber IS NULL
        OR H.Entry_No <= @ToInvoiceNumber)
      AND (@ItemCategoryID ='-1' OR @ItemCategoryID IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_d
                        LEFT JOIN
                    Inv_Items_Categories ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
               WHERE Inv_Receipt_d.Parent_ID = H.ID
                 AND Inv_Items_Categories.ItemCategory_ID IN
                     (
                         SELECT item
                         FROM dbo.Split(@ItemCategoryID, ',')
                     )
           ))
      AND (@FromTime IS NULL
        OR CAST(H.Entry_Date AS TIME) >= @FromTime)
      AND (@ToTime IS NULL
        OR CAST(H.Entry_Date AS TIME) <= @ToTime)
      AND (@FromCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) >= @FromCustomerActualDeliverDate)
      AND (@ToCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) <= @ToCustomerActualDeliverDate)
      AND (@CustomerStatusID IS NULL
        OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
      AND (@Payment_Type IS NULL
        OR H.Payment_Type = @Payment_Type)
    GROUP BY Inv_Store.Name
           , Inv_Store.Name_AR
           , Inv_Store.ID
		   --,Security_Users.Code
    ORDER BY Inv_Store.ID
END
GO
/****** Object:  StoredProcedure [dbo].[Report_PurchInv_Prints]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Report_PurchInv_Prints] @ID          INT = null
                            , @SupplierID INT = Null,
							@BranchID int =null,
							@PricePerc int=null
						 

AS
    BEGIN
      
        
		select H.id as PurchID,
		H.Entry_No as Purch_EntryNo,
		H.Entry_Date as Purch_Date,
		H.SubsidiaryID,
		H.Branch_ID,
		d.Discount_Percent,
	d.Price-	(d.Price*d.Discount_Percent/100) as NetPrice,
		H.Payment_Type,
		supp.Name as Supp_Name,
		supp.Name_AR as Supp_NameAr,
		cur.Name as CurrName,
		cur.Name_AR as Curr_NameAr,
		h.Value As PurchValue,
		h.ValueForeign as PurchForignValue,
		h.NetValue as PurchNetValue,
		h.NetValueForeign as PurchNetValueForeign,
		d.Item_ID ,
		h.Discount_Value ,
		h.Discount_ForeignValue,
		i.Name as Item_Name,
		i.Name_AR as Item_NameAr, 
		i.Code as Item_Code,
		u.Name as Unit_Name,
		u.Name_AR as Unit_NameAr,
		d.Qty,
		d.Conv,
		d.Price,
		d.Total,
		D.Discount_Value as itemDiscount,
		d.price-D.Discount_Value as FinalPrice,
		br.Name_AR as BranchName,
		br.Name as BranchNameEn,
		st.Name_AR as StoreName,
		st.Name as StoreNameEn,
		h.Currency_Rate,
		 		h.Costing_Rate,
		(
		select sum(LocalValue) from Inv_ReceiptExpenses 
		where ReceiptID=h.id
		 


		) as ExpenssValue
		,d.PrevPurch,d.newAvg,d.Sale_price1
		
		
		
 from Inv_Receipt_h H
inner join V_inv_Receipt_D_Purc d
on H.id=d.Parent_ID
inner join GL_Accounts supp
on supp.AccountID=H.Vendor_ID
inner join Inv_Store st on st. ID=d.Store_ID
inner join mstr_Currencies cur  on
cur.ID=h.Currency_ID
inner join Inv_Items i
on i.Id=d.Item_ID

inner join Inv_Unit u on
u.ID=d.Unit_ID
inner join mstr_Branch br on 
br.ID=h.Branch_ID
where H.Code=1
       and h.ID=@ID
	    END
GO
/****** Object:  StoredProcedure [dbo].[Report_TestRep]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[Report_TestRep]
AS
    BEGIN
        SELECT *
        FROM inv_Receipt_H H
             LEFT JOIN inv_Receipt_d D
             ON H.ID = D.Parent_ID
        WHERE CAST(H.Entry_Date AS DATE) = '2019-03-25'
              AND code IN(51 ,52 ,53 , 54) AND H.SubsidiaryID = 63
    END
GO
/****** Object:  StoredProcedure [dbo].[Report_Tools_Main_Scripts]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Proc [dbo].[Report_Tools_Main_Scripts] @Type NVARCHAR(50) = 'Server',
                                      @ID   INT          = Null
As
     Begin
         If @Type = 'Style'
             Begin
                 Declare @VarTable Table
(StyleID INT,
 Name    NVARCHAR(50)
);
                 Insert Into @VarTable
(Styleid,
 Name
)
                 Values
(1,
 'Corporate'
);
                 Insert Into @VarTable
(Styleid,
 Name
)
                 Values
(2,
 'Forest'
);
                 Insert Into @VarTable
(Styleid,
 Name
)
                 Values
(3,
 'Default'
);
                 Insert Into @VarTable
(Styleid,
 Name
)
                 Values
(4,
 'Mahogany'
);
                 Insert Into @VarTable
(Styleid,
 Name
)
                 Values
(5,
 'Ocens'
);
                 Insert Into @VarTable
(Styleid,
 Name
)
                 Values
(6,
 'Slate'
);
                 Select *
                 From @VarTable;
             End;
             Else
         If @Type = 'Server'
             Begin
                 Declare @VarTable2 Table
(Id       INT,
 ParentId INT,
 Name     NVARCHAR(50)
);
                 Insert Into @VarTable2
(Id,
 ParentId,
 Name
)
                 Values
(1,
 Null,
 '79.137.65.231'
);
                 Insert Into @VarTable2
(Id,
 ParentId,
 Name
)
                 Values
(2,
 Null,
 '145.239.64.2\MSSQLSERVER1'
);
                 Insert Into @VarTable2
(Id,
 ParentId,
 Name
)
                 Values
(3,
 1,
 'GL_Web'
);
                 Insert Into @VarTable2
(Id,
 ParentId,
 Name
)
                 Values
(4,
 2,
 'GL_Web'
);
                 Select *
                 From @VarTable2
					  WHERE (@ID IS NULL OR Id = @id);
             End;
             Else
         Print 'No Data';
     End;
GO
/****** Object:  StoredProcedure [dbo].[Report_Tools_Server_And_DataBase]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Proc [dbo].[Report_Tools_Server_And_DataBase]
As
	BEGIN
/*
SELECT 'Union All Select ' +''''+name+'''' FROM master.dbo.sysdatabases
WHERE name NOT IN 
('master'
,'tempdb'
,'model'
,'msdb'
,'ReportServer$MSSQLSERVER1'
,'ReportServer$MSSQLSERVER1TempDB'
)
*/

	    Declare @VarTable2 TABLE ( Name     NVARCHAR(50) );

	    Insert Into @VarTable2 (Name)
SELECT '79.137.65.231'
Union All	SELECT '145.239.64.2\MSSQLSERVER1'
Union All	SELECT '.'
Union All	SELECT 'GL_Web'
Union All Select 'ClinicCareDemo'
Union All Select 'FaisalCare'
Union All Select 'GL_WEB_509'
Union All Select 'GL_Web_alasousi'
Union All Select 'GL_WEB_albassam'
Union All Select 'GL_WEB_alkhalejia'
Union All Select 'GL_WEB_alsafwa'
Union All Select 'GL_WEB_copenhagen'
Union All Select 'GL_WEB_Dashboard'
Union All Select 'GL_WEB_faisal1'
Union All Select 'GL_WEB_fidility'
Union All Select 'GL_WEB_ink'
Union All Select 'GL_WEB_Liwan'
Union All Select 'GL_WEB_matar'
Union All Select 'GL_WEB_mmv'
Union All Select 'GL_WEB_Mounira'
Union All Select 'GL_WEB_Mounira_Dashboard'
Union All Select 'GL_WEB_Nishan'
Union All Select 'GL_WEB_rahatalkhaleej'
Union All Select 'GL_WEB_Royalwings'
Union All Select 'GL_WEB_terp'
Union All Select 'GL_WEB_terp_Dashboard'
Union All Select 'GL_Web_yoza'
Union All Select 'GL_Web_yoza_Dashboard'
Union All Select 'HealthCareLast'
Union All Select 'MonieraCare'


	    Select
			 *
	    From
		    @VarTable2;
	End;
--Go

--Report_Tools_Server_And_DataBase;
GO
/****** Object:  StoredProcedure [dbo].[ReportAgingData]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create PROCEDURE [dbo].[ReportAgingData]

@SubsidiaryID int ,
@ToDate date  ,
@TransactionTypeId int =  NULL,
@TransactionPostedId int = NULL,
@AccountId int = NULL,
@PeriodNumber int = 30

AS

Declare @Period30Date date = DATEADD(DAY, -(1*@PeriodNumber), CONVERT(datetime, @ToDate))
Declare @Period60Date date = DATEADD(DAY, - (2*@PeriodNumber), CONVERT(datetime, @ToDate))
Declare @Period90Date date = DATEADD(DAY, -(3*@PeriodNumber), CONVERT(datetime, @ToDate))
Declare @Period120Date date = DATEADD(DAY, -(4*@PeriodNumber), CONVERT(datetime, @ToDate))
Declare @PeriodAbove120Date date = DATEADD(DAY, -1, @Period120Date)

--Select @Period30Date as Period30Date , @Period60Date as Period60Date, @Period90Date as Period90Date ,@Period120Date as Period120Date ,@PeriodAbove120Date  as Periodabove120Date
Select * from (
Select Max(GL_Accounts.VendorCode) as Code,Max(GL_Accounts.Name) as CustomerName,Max(GL_Accounts.Name_AR) as CustomerNameAr ,Sum(Debit) as TotalDebit , Sum(Credit) as TotalCredit ,
CASE WHEN  Sum(Debit) - Sum(Credit) > 0  
     THEN CONVERT(NVARCHAR,CONVERT(DECIMAL(10,3) ,(Sum(Debit) - Sum(Credit))))
	 ELSE '(' + CONVERT(NVARCHAR,CONVERT(DECIMAL(10,3) ,(Sum(Credit) - Sum(Debit)))) + ')' END   As CustomerBalance  ,
     CONVERT(NVARCHAR,CONVERT(DECIMAL(10,3) ,Sum(Debit) - Sum(Credit)))   As CustomerBalanceValue  ,
    -- Aging Above 120
    -- Start AgingPeriodAbove120_WithoutPayment Column
	(Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ) as AgingPeriodAbove120WithoutPayment ,
    -- End AgingPeriodAbove120_WithoutPayment Column

---*********************************************************************************************************************************---

    -- Start AgingPeriodAbove120_WithPayment Column
	Sum(GL_VoucherDetails.Credit) - (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ) as AgingPeriodAbove120WithPayment ,
    -- End AgingPeriodAbove120_WithPayment Column

---*********************************************************************************************************************************---

   CASE WHEN Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END as CreditAfterAbove120,

---*********************************************************************************************************************************---

    -- Start AgingPeriodAbove120 Column
	CONVERT(DECIMAL(10,3) ,Case When Sum(GL_VoucherDetails.Debit) - Sum(GL_VoucherDetails.Credit) > 0 
	Then
	    Case 
		WHEN ISNULL((Select  Sum(VD.Debit)    --Start Condition_1
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0) = 0  --End Condition_1
		THEN 0
		WHEN  -- Start Condition_2
		Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)  < 0  -- End Condition_2
		THEN 
		ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)	-Sum(GL_VoucherDetails.Credit)
		Else 0 End
	Else 0 End) as AgingPeriodAbove120   ,
	-- End AgingPeriodAbove120 Column

---*********************************************************************************************************************************---

	-- Aging = 120
	-- Start AgingPeriod120_WithoutPayment Column
	(Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ) as AgingPeriod120WithoutPayment ,
	-- End AgingPeriod120_WithoutPayment Column

---*********************************************************************************************************************************---

	-- Aging = 120
	-- Start CreditAfter120 Column
	   Case WHEN ((CASE WHEN Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END as CreditAfter120 ,
	-- End CreditAfter120 Column

---*********************************************************************************************************************************---

	-- Start AgingPeriod120 Column
	CONVERT(DECIMAL(10,3) ,Case When Sum(GL_VoucherDetails.Debit) - Sum(GL_VoucherDetails.Credit) > 0 
	Then
	    Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		THEN 
		0
		ELSE 
		(ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)
		- (CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		) END  
		ELSE 0 END) as AgingPeriod120  , 
	-- End AgingPeriod120 Column

---*********************************************************************************************************************************---

	-- Aging = 90
	-- Start AgingPeriod90_WithoutPayment Column
	(Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ) as AgingPeriod90WithoutPayment ,
	-- End AgingPeriod90_WithoutPayment Column

---*********************************************************************************************************************************---
	
	-- Aging = 90
	-- Start CreditAfter90 Column
	Case WHEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0))
	ELSE 0
	END as CreditAfter90 ,
	   
---*********************************************************************************************************************************---
	
	-- Aging = 90
	-- Start AgingPeriod90 Column
	CONVERT(DECIMAL(10,3) ,	Case When Sum(GL_VoucherDetails.Debit) - Sum(GL_VoucherDetails.Credit) > 0 
	Then
	Case WHEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	-----///////////////////////////////////////////////////////////////////////////////////////-----
	THEN 0
	ELSE (ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ) ,0)
		-(Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END))
	END 
	ELSE 0 END) as AgingPeriod90,
	   
---*********************************************************************************************************************************---
	-- Aging = 60
	-- Start AgingPeriod60_WithoutPayment Column
	(Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ) as AgingPeriod60WithoutPayment ,
	-- End AgingPeriod60_WithoutPayment Column

---*********************************************************************************************************************************---
    --CreditAfter60
	CASE WHEN ((Case WHEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) ) > 0
	OR ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	-----////////////////////////////////////////////---------------------------------------------------------------------
	THEN ((Case WHEN ((Case WHEN ((CASE WHEN    Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) )
	ELSE 0
	END as CreditAfter60 ,

---*********************************************************************************************************************************---
    --AgingPeriod60
	CONVERT(DECIMAL(10,3) ,Case When Sum(GL_VoucherDetails.Debit) - Sum(GL_VoucherDetails.Credit) > 0 
	Then
	CASE WHEN ((Case WHEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) ) > 0
	OR ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	-----////////////////////////////////////////////---------------------------------------------------------------------
	THEN 0
	ELSE (ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) 
		- (Case WHEN ((Case WHEN ((CASE WHEN Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0))
	ELSE 0
	END) )
	END 
	ELSE 0 END) as AgingPeriod60 ,

---*********************************************************************************************************************************---

	-- Aging = 30
	-- Start AgingPeriod30_WithoutPayment Column
	(Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < @ToDate and V.VouhcerDate >=  @Period30Date ) as AgingPeriod30WithoutPayment ,
	-- End AgingPeriod30_WithoutPayment Column

---*********************************************************************************************************************************---

     -- CreditAfter30
	 CASE WHEN ((CASE WHEN ((Case WHEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) ) > 0
	OR ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	-----////////////////////////////////////////////---------------------------------------------------------------------
	THEN ((Case WHEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) )
	ELSE 0
	END) 
	 - ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < @ToDate and V.VouhcerDate >=  @Period30Date ), 0)) > 0
	 OR ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < @ToDate and V.VouhcerDate >=  @Period30Date ), 0) = 0
	 OR Sum(GL_VoucherDetails.Credit) = 0
	 -----/*/*/*/*/*/*/*/*/*/*/*/*/**/*//**/*/*/*/*//**/**/*/**/*/*------
	 THEN ((CASE WHEN ((Case WHEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) ) > 0
	OR ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	-----////////////////////////////////////////////---------------------------------------------------------------------
	THEN ((Case WHEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) )
	ELSE 0
	END) 
	 - ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < @ToDate and V.VouhcerDate >=  @Period30Date ), 0))
	 ELSE 0
	 END as CreditAfter30 ,

---*********************************************************************************************************************************---

     -- AgingPeriod30
	CONVERT(DECIMAL(10,3) ,Case When Sum(GL_VoucherDetails.Debit) - Sum(GL_VoucherDetails.Credit) > 0 
	Then
	 CASE WHEN ((CASE WHEN ((Case WHEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) ) > 0
	OR ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	-----////////////////////////////////////////////---------------------------------------------------------------------
	THEN ((Case WHEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) )
	ELSE 0
	END) 
	 - ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < @ToDate and V.VouhcerDate >=  @Period30Date ), 0)) > 0
	 OR ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < @ToDate and V.VouhcerDate >=  @Period30Date ), 0) = 0
	 OR Sum(GL_VoucherDetails.Credit) = 0
	 -----/*/*/*/*/*/*/*/*/*/*/*/*/**/*//**/*/*/*/*//**/**/*/**/*/*------
	 THEN 0
	 ELSE (ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < @ToDate and V.VouhcerDate >=  @Period30Date ), 0))
		- (CASE WHEN ((Case WHEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN  Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) ) > 0
	OR ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	-----////////////////////////////////////////////---------------------------------------------------------------------
	THEN ((Case WHEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0)) > 0
	OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0) = 0
	OR Sum(GL_VoucherDetails.Credit) = 0
	THEN ((Case WHEN ((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0)) > 0
		OR ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0) = 0
		OR Sum(GL_VoucherDetails.Credit) = 0
		THEN 
		((CASE WHEN   Sum(GL_VoucherDetails.Credit) = 0 OR 
		(Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) < 0
        THEN 0
		ELSE (Sum(GL_VoucherDetails.Credit) - ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate <= @PeriodAbove120Date ),0)) END )
		- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period90Date) and V.VouhcerDate >=  @Period120Date ),0))
		ELSE 0 END)		
	- ISNULL((Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period60Date) and V.VouhcerDate >=  @Period90Date ),0))
	ELSE 0
	END)
	- ISNULL( (Select  Sum(VD.Debit)  
		From GL_Vouchers as V Join GL_VoucherDetails AS VD  ON VD.VoucherID = V.ID
		Where  VD.AccountNoID  = GL_Accounts.AccountID 
		AND V.VouhcerDate < DATEADD(DAY, -1,@Period30Date) and V.VouhcerDate >=  @Period60Date ),0) )
	ELSE 0
	END) 
	 END 
	 ELSE 0 END) as AgingPeriod30 

---*********************************************************************************************************************************---

From GL_Vouchers
JOIN GL_VoucherDetails ON GL_Vouchers.ID = GL_VoucherDetails.VoucherID
JOIN GL_Accounts ON GL_VoucherDetails.AccountNoID = GL_Accounts.AccountID
Where 
GL_Vouchers.SubsidaryID = @SubsidiaryID
AND GL_Accounts.IsVendor = 0 AND GL_Accounts.LevelNo = 0 -- Customers Only
AND (GL_Accounts.AccountID = @AccountId OR  @AccountId IS NULL)
AND Cast(GL_Vouchers.VouhcerDate as date) <= Cast(@ToDate as date)
AND (GL_VoucherDetails.SetupAccountType IS NULL OR GL_VoucherDetails.SetupAccountType = 1)
AND ((@TransactionPostedId = 1) OR( GL_Vouchers.Posted = 1 AND @TransactionPostedId = 2))

Group By AccountID

) ResultData

WHERE ((@TransactionTypeId = 1) OR( (CustomerBalance > 0) AND @TransactionTypeId = 2))
 
GO
/****** Object:  StoredProcedure [dbo].[Reports_Budget]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  
CREATE PROC [dbo].[Reports_Budget] @FromDate    DATE         = NULL
                                                     , @ToDate      DATE         = NULL
                                                     , @SubsidaryID INT          = 72
                                                      
                                                     , @Type        INT          = NULL
													 , @BudgetType        INT          = NULL
                                                     , @ClearZero   INT          = NULL
													 , @BudgetYear   INT          = NULL
AS
    BEGIN
        
                -- Get Account Level : #Accounts_Level
                ;
        WITH Accounts_Level
             AS (
             -- root level
             SELECT GL_Accounts.AccountID
                  , GL_Accounts.ParentID
                  , 1 AS                                                                  [Level]
                  , CAST('-' + CAST(AccountID AS NVARCHAR(10)) + '-' AS NVARCHAR(100)) AS Hierarchy -- build hierarchy in format -L0-L1-L2-...-Ln--
             FROM GL_Accounts
             WHERE ParentID IS NULL
             UNION ALL
             -- recursive join on parent, building hierarchy
             SELECT CurrentLevel.AccountID
                  , CurrentLevel.ParentID
                  , ParentLevel.[Level] + 1 AS                                                                           [Level]
                  , CAST(ParentLevel.Hierarchy + CAST(CurrentLevel.AccountID AS NVARCHAR(10)) + '-' AS NVARCHAR(100)) AS Hierarchy
             FROM GL_Accounts CurrentLevel
                  JOIN Accounts_Level ParentLevel
                  ON CurrentLevel.ParentID = ParentLevel.AccountID)
             SELECT *
             INTO #AccountsLevel
             FROM Accounts_Level

     

        -- Get Details :#GL_VoucherDetails
        SELECT #AccountsLevel.AccountID                                        AccountNoID
             , #AccountsLevel.Hierarchy                             Hierarchy
            
			 , (
			 select isnull(SUM(D.Debit),0) from  GL_VoucherDetails D where 
			 D.AccountNoID=#AccountsLevel.AccountID
			   and D.VoucherID IN
        (
         SELECT ID
         FROM GL_Vouchers H
         WHERE H.ID = D.VoucherID
               
               AND (@SubsidaryID IS NULL
                    OR H.SubsidaryID IN(@SubsidaryID))
         AND (@FromDate IS NULL
              OR CAST(H.VouhcerDate AS DATE) >= @FromDate)
         AND (@ToDate IS NULL
              OR CAST(H.VouhcerDate AS DATE) <= @ToDate)
			     ))   Debit
             , (
			 select isnull(SUM(D.Credit),0) from  GL_VoucherDetails D where 
			 D.AccountNoID=#AccountsLevel.AccountID
			   and D.VoucherID IN
        (
         SELECT ID
         FROM GL_Vouchers H
         WHERE H.ID = D.VoucherID
               
               AND (@SubsidaryID IS NULL
                    OR H.SubsidaryID IN(@SubsidaryID))
         AND (@FromDate IS NULL
              OR CAST(H.VouhcerDate AS DATE) >= @FromDate)
         AND (@ToDate IS NULL
              OR CAST(H.VouhcerDate AS DATE) <= @ToDate)
			     ))   Credit
			  
			 ,ISNULL(SUM(sb.Val1),0) as Val1
			 ,ISNULL(SUM(sb.Val2),0) as Val2
			 ,ISNULL(SUM(sb.Val3),0) as Val3
			 ,ISNULL(SUM(sb.Val4),0) as Val4
			 ,ISNULL(SUM(sb.Val5),0) as Val5
			 ,ISNULL(SUM(sb.Val6),0) as Val6
			 ,ISNULL(SUM(sb.Val7),0) as Val7
			 ,ISNULL(SUM(sb.Val8),0) as Val8
			 ,ISNULL(SUM(sb.Val9),0) as Val9
			 ,ISNULL(SUM(sb.Val10),0) as Val10
			 ,ISNULL(SUM(sb.Val11),0) as Val11
			 ,ISNULL(SUM(sb.Val12),0) as Val12
        INTO #GL_VoucherDetails
        FROM  #AccountsLevel
             
			 left join Sub_BudgetSetup SB on sb.AccountId=#AccountsLevel.AccountID
			 inner join Budget_Setup b on b.id=sb.BudgetId
        WHERE b.YearNo=@BudgetYear
			  and b.TypeID=@BudgetType
			
        GROUP BY #AccountsLevel.AccountID
               , #AccountsLevel.Hierarchy
        ORDER BY #AccountsLevel.AccountID

        -- Get Details :#GL_VoucherDetails_BeginBalance
    
        -- Get All Acounts With It's Value : #All_Accounts
        SELECT GL_Accounts.AccountID
             , GL_Accounts.Code
             , SUM(Debit) AS  [Debit]
             , SUM(Credit) AS [Credit]
     ,ISNULL(SUM(Val1),0) as Val1
			 ,ISNULL(SUM(Val2),0) as Val2
			 ,ISNULL( SUM(Val3),0) as Val3
			 ,ISNULL( SUM(Val4),0) as Val4
			 ,ISNULL( SUM(Val5),0) as Val5
			 ,ISNULL( SUM(Val6),0) as Val6
			 ,ISNULL( SUM(Val7),0) as Val7
			 ,ISNULL( SUM(Val8),0) as Val8
			 ,ISNULL( SUM(Val9),0) as Val9
			 ,ISNULL( SUM(Val10),0) as Val10
			 ,ISNULL( SUM(Val11),0) as Val11
			 ,ISNULL( SUM(Val12),0) as Val12
	    INTO #All_Accounts
        FROM GL_Accounts
             LEFT JOIN #AccountsLevel
             ON #AccountsLevel.AccountID = GL_Accounts.AccountID , 
             #GL_VoucherDetails
        WHERE #GL_VoucherDetails.Hierarchy LIKE #AccountsLevel.Hierarchy + '%'
        GROUP BY GL_Accounts.AccountID
               , GL_Accounts.Code

    

/******************************
 Get Accounts_Balance_Hierarchy
******************************/

        -- Get Accounts Related to @SubsidaryID

        SELECT *
        INTO #GL_Accounts
        FROM
        (
         SELECT *
         FROM GL_Accounts
         WHERE GL_Accounts.LevelNo <= 3
         UNION ALL
         SELECT *
         FROM GL_Accounts
         WHERE GL_Accounts.LevelNo >= 4
               AND (GL_Accounts.AccountID IN
         (
          SELECT AccountID
          FROM GL_AccountSubsidiary
          WHERE GL_AccountSubsidiary.AccountID = GL_Accounts.AccountID
                AND (@SubsidaryID IS NULL
                     OR GL_AccountSubsidiary.SubsidiaryID = @SubsidaryID)
         ))
        ) GL_Accounts_SubsidaryID



		--SELECT * FROM #GL_Accounts ORDER BY code
		--return
        -- Get Accounts_Balance_Hierarchy
        SELECT Gl_Accounts.AccountID
             , GL_Accounts.Code
            
                    , GL_Accounts.Type
                                      Type
             , GL_Accounts.Type                  Type2
             , GL_Accounts.LevelNo AS            Level
             , GL_Accounts.Name
             , GL_Accounts.Name_AR
             
             , ISNULL(#All_Accounts.Debit , 00)  Debit
             , ISNULL(#All_Accounts.Credit , 00) Credit
			  ,ISNULL(Val1,0) as Val1
			 ,ISNULL(Val2,0) as Val2
			 ,ISNULL( Val3,0) as Val3
			 ,ISNULL( Val4,0) as Val4
			 ,ISNULL( Val5,0) as Val5
			 ,ISNULL( Val6,0) as Val6
			 ,ISNULL( Val7,0) as Val7
			 ,ISNULL( Val8,0) as Val8
			 ,ISNULL( Val9,0) as Val9
			 ,ISNULL( Val10,0) as Val10
			 ,ISNULL( Val11,0) as Val11
			 ,ISNULL( Val12,0) as Val12
        INTO #All_Accounts_Final
        FROM #GL_Accounts GL_Accounts
             LEFT JOIN #All_Accounts
             ON #All_Accounts.AccountID = GL_Accounts.AccountID
            

        SELECT *
             
        FROM #All_Accounts_Final
        WHERE(@Type IS NULL
              OR Type = @Type)
             
             AND (Level != 0)
             AND (@ClearZero IS NULL
                  OR (@ClearZero = 1
                      AND val1 +Val2+val3+val4+val5+val6+val7+val8+val9+val10+val11+val12 <> 0))
        ORDER BY Code
    END
 
GO
/****** Object:  StoredProcedure [dbo].[Reports_Gl_Trial_Balance_Sheet_Transaction]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Reports_Gl_Trial_Balance_Sheet_Transaction] @FromDate    DATE         = '2019-11-01'
                                                     , @ToDate      DATE         = '2020-12-31'
                                                     , @SubsidaryID INT          = null
                                                     , @Level       int= NULL
                                                     , @Type        INT          = NULL
                                                     , @ClearZero   INT          = NULL
													  ,@TargetMoves INT  = NULL
AS
    BEGIN
	--set @TargetMoves=1
	    declare @mainAccountCode nvarchar(50);
		set @mainAccountCode=(select top 1 ISNULL(GL_Accounts.Code,'') from GL_Accounts where GL_Accounts.AccountID =(select top 1  ISNULL(MIN(acc.Main_AccountID),0) from GL_Accounts as  acc where acc.IsVendor=0));
		declare @mainAccountId int;
		set @mainAccountId=(select top 1 ISNULL(GL_Accounts.AccountID,'') from GL_Accounts where GL_Accounts.Code=@mainAccountCode);

        IF @Level = 4
            BEGIN

                SET @Type = 2
        END

                -- Get Account Level : #Accounts_Level
                ;
        WITH Accounts_Level
             AS (
             -- root level
             SELECT GL_Accounts.AccountID
                  , GL_Accounts.ParentID
                  , 1 AS                                                                  [Level]
                  , CAST('-' + CAST(AccountID AS NVARCHAR(10)) + '-' AS NVARCHAR(100)) AS Hierarchy -- build hierarchy in format -L0-L1-L2-...-Ln--
             FROM GL_Accounts
             WHERE ParentID IS NULL
             UNION ALL
             -- recursive join on parent, building hierarchy
             SELECT CurrentLevel.AccountID
                  , CurrentLevel.ParentID
                  , ParentLevel.[Level] + 1 AS                                                                           [Level]
                  , CAST(ParentLevel.Hierarchy + CAST(CurrentLevel.AccountID AS NVARCHAR(10)) + '-' AS NVARCHAR(100)) AS Hierarchy
             FROM GL_Accounts CurrentLevel
                  JOIN Accounts_Level ParentLevel
                  ON CurrentLevel.ParentID = ParentLevel.AccountID)
             SELECT *
             INTO #AccountsLevel
             FROM Accounts_Level

        DECLARE @ReceivablesAccount_ID INT= NULL , @PayablesAccount_ID INT= NULL ,@MinMainLevels int 

        SELECT @ReceivablesAccount_ID = ReceivableAccount
             , @PayablesAccount_ID = PayableAccount
			 ,@MinMainLevels = MinMainLevels
        FROM GL_Setup
        WHERE(ReceivableAccount IS NOT NULL
              OR PayableAccount IS NOT NULL)

/*
    select Count(#Accounts_Level.AccountID),Count(Gl_Accounts.AccountID)
    from Gl_Accounts
    Left join #Accounts_Level
    on #Accounts_Level.AccountID = Gl_Accounts.AccountID 
 */

        -- Get Details :#GL_VoucherDetails
        SELECT D.AccountNoID                                        AccountNoID
             , #AccountsLevel.Hierarchy                             Hierarchy
             , ISNULL(SUM(Debit) , 00)                              Debit
             , ISNULL(SUM(Credit) , 00)                             Credit
             , ISNULL(SUM(Debit) , 00) - ISNULL(SUM(D.Credit) , 00) Balance
        INTO #GL_VoucherDetails
        FROM GL_VoucherDetails D
             LEFT JOIN #AccountsLevel
             ON #AccountsLevel.AccountID = D.AccountNoID
        WHERE(D.VoucherID IN
        (
         SELECT ID
         FROM GL_Vouchers H
         WHERE H.ID = D.VoucherID
              AND (@TargetMoves IS NULL
              OR H.Posted = @TargetMoves)
               AND (@SubsidaryID IS NULL
                    OR H.SubsidaryID IN(@SubsidaryID))
         AND (@FromDate IS NULL
              OR CAST(H.VouhcerDate AS DATE) >= @FromDate)
         AND (@ToDate IS NULL
              OR CAST(H.VouhcerDate AS DATE) <= @ToDate)
        ))
        GROUP BY D.AccountNoID
               , #AccountsLevel.Hierarchy
        ORDER BY AccountNoID

        -- Get Details :#GL_VoucherDetails_BeginBalance
        SELECT D.AccountNoID                                        AccountNoID
             , #AccountsLevel.Hierarchy                             Hierarchy
             , ISNULL(SUM(Debit) , 00)                              Debit
             , ISNULL(SUM(Credit) , 00)                             Credit
             , ISNULL(SUM(Debit) , 00) - ISNULL(SUM(D.Credit) , 00) Balance
        INTO #GL_VoucherDetails_BeginBalance
        FROM GL_VoucherDetails D
             LEFT JOIN #AccountsLevel
             ON #AccountsLevel.AccountID = D.AccountNoID
        WHERE(D.VoucherID IN
        (
         SELECT ID
         FROM GL_Vouchers H
         WHERE H.ID = D.VoucherID
			   AND (@TargetMoves IS NULL
              OR H.Posted = @TargetMoves)
               AND (@SubsidaryID IS NULL
                    OR H.SubsidaryID IN(@SubsidaryID))
         AND (@FromDate IS NULL
              OR CAST(H.VouhcerDate AS DATE) < @FromDate)
        ))
        GROUP BY D.AccountNoID
               , #AccountsLevel.Hierarchy
        ORDER BY AccountNoID

        -- Get All Acounts With It's Value : #All_Accounts
        SELECT GL_Accounts.AccountID
		   ,GL_Accounts.ParentID
             , GL_Accounts.Code
             , SUM(Debit) AS  [Debit]
             , SUM(Credit) AS [Credit]
        INTO #All_Accounts
        FROM GL_Accounts
             LEFT JOIN #AccountsLevel
             ON #AccountsLevel.AccountID = GL_Accounts.AccountID , 
             #GL_VoucherDetails
        WHERE #GL_VoucherDetails.Hierarchy LIKE #AccountsLevel.Hierarchy + '%'
        GROUP BY GL_Accounts.AccountID
               , GL_Accounts.Code
			    ,GL_Accounts.ParentID
        SELECT GL_Accounts.AccountID
		 ,GL_Accounts.ParentID
             , GL_Accounts.Code
             , SUM(Debit) AS  [Debit]
             , SUM(Credit) AS [Credit]
        INTO #All_Accounts_BeginBalance
        FROM GL_Accounts
             LEFT JOIN #AccountsLevel
             ON #AccountsLevel.AccountID = GL_Accounts.AccountID , 
             #GL_VoucherDetails_BeginBalance
        WHERE #GL_VoucherDetails_BeginBalance.Hierarchy LIKE #AccountsLevel.Hierarchy + '%'
        GROUP BY GL_Accounts.AccountID
               , GL_Accounts.Code
			    ,GL_Accounts.ParentID

/******************************
 Get Accounts_Balance_Hierarchy
******************************/

        -- Get Accounts Related to @SubsidaryID

        SELECT *
        INTO #GL_Accounts
        FROM
        (
         SELECT *
         FROM GL_Accounts
         WHERE GL_Accounts.LevelNo <= 3
         UNION ALL
         SELECT *
         FROM GL_Accounts
         WHERE GL_Accounts.LevelNo >= 4
               AND (GL_Accounts.AccountID IN
         (
          SELECT AccountID
          FROM GL_AccountSubsidiary
          WHERE GL_AccountSubsidiary.AccountID = GL_Accounts.AccountID
                AND (@SubsidaryID IS NULL
                     OR GL_AccountSubsidiary.SubsidiaryID = @SubsidaryID)
         ))
        ) GL_Accounts_SubsidaryID



		--SELECT * FROM #GL_Accounts ORDER BY code
		--return
        -- Get Accounts_Balance_Hierarchy
        SELECT Gl_Accounts.AccountID
             , GL_Accounts.Code
             , CASE
                   WHEN(Gl_Accounts.AccountID = @ReceivablesAccount_ID)
                       OR (Gl_Accounts.AccountID = @PayablesAccount_ID)
                   THEN 2
                   ELSE GL_Accounts.Type
               END                               Type
             , GL_Accounts.Type                  Type2
             , GL_Accounts.LevelNo AS            Level
             , GL_Accounts.Name
             , GL_Accounts.Name_AR
             , CASE
			 WHEN #All_Accounts.Code =@mainAccountCode  or #All_Accounts.AccountID = (select accc.ParentID from GL_Accounts accc where accc.AccountID = @mainAccountId)
	THEN 
	(
	select 
    Case WHEN   (ISNULL(SUM(AV_accountBalance.Debit),0) -ISNULL(SUM(AV_accountBalance.Credit),0)) > 0
	THEN (ISNULL(SUM(AV_accountBalance.Debit),0) -ISNULL(SUM(AV_accountBalance.Credit),0))
	ELSE 0
	END 
	from AV_accountBalance
   where 
   ((AV_accountBalance.Main_AccountID in 
   (select accountid from GL_Accounts where ParentID=@mainAccountId) )
   or AV_accountBalance.Main_AccountID=@mainAccountId)
   and AV_accountBalance.SubsidaryID=@SubsidaryID
   and  CAST(AV_accountBalance.VouhcerDate AS DATE) < @FromDate
	)
	WHEN #All_Accounts.ParentID = @mainAccountId
	THEN
	(
	select 
    Case WHEN   (ISNULL(SUM(AV_accountBalance.Debit),0) -ISNULL(SUM(AV_accountBalance.Credit),0)) > 0
	THEN (ISNULL(SUM(AV_accountBalance.Debit),0) -ISNULL(SUM(AV_accountBalance.Credit),0))
	ELSE 0
	END 
	from AV_accountBalance
   where 
   ((AV_accountBalance.Main_AccountID in 
   (select accountid from GL_Accounts where ParentID=#All_Accounts.AccountID) )
   or AV_accountBalance.Main_AccountID=#All_Accounts.AccountID)
   and AV_accountBalance.SubsidaryID=@SubsidaryID
   and  CAST(AV_accountBalance.VouhcerDate AS DATE) < @FromDate 
	)
                   WHEN ISNULL(#All_Accounts_BeginBalance.Debit , 00) - ISNULL(#All_Accounts_BeginBalance.Credit , 00) > 0
                   THEN ISNULL(#All_Accounts_BeginBalance.Debit , 00) - ISNULL(#All_Accounts_BeginBalance.Credit , 00)
				   -- edit here 
                   ELSE 0
               END                               Opening_Balance_Debit
             , CASE
			 --edit credit here
			  WHEN #All_Accounts.Code =@mainAccountCode  or #All_Accounts.AccountID = (select accc.ParentID from GL_Accounts accc where accc.AccountID = @mainAccountId)
	THEN 
	(
	select 
    Case WHEN   (ISNULL(SUM(AV_accountBalance.Credit),0) -ISNULL(SUM(AV_accountBalance.Debit),0)) > 0
	THEN (ISNULL(SUM(AV_accountBalance.Credit),0) -ISNULL(SUM(AV_accountBalance.Debit),0))
	ELSE 0
	END 
	from AV_accountBalance
   where 
   ((AV_accountBalance.Main_AccountID in 
   (select accountid from GL_Accounts where ParentID=@mainAccountId) )
   or AV_accountBalance.Main_AccountID=@mainAccountId)
   and AV_accountBalance.SubsidaryID=@SubsidaryID
   and  CAST(AV_accountBalance.VouhcerDate AS DATE) < @FromDate
	)
	WHEN #All_Accounts.ParentID = @mainAccountId
	THEN
	(
	select 
    Case WHEN   (ISNULL(SUM(AV_accountBalance.Credit),0) -ISNULL(SUM(AV_accountBalance.Debit),0)) > 0
	THEN (ISNULL(SUM(AV_accountBalance.Credit),0) -ISNULL(SUM(AV_accountBalance.Debit),0))
	ELSE 0
	END 
	from AV_accountBalance
   where 
   ((AV_accountBalance.Main_AccountID in 
   (select accountid from GL_Accounts where ParentID=#All_Accounts.AccountID) )
   or AV_accountBalance.Main_AccountID=#All_Accounts.AccountID)
   and AV_accountBalance.SubsidaryID=@SubsidaryID
   and  CAST(AV_accountBalance.VouhcerDate AS DATE) < @FromDate 
	)
                   WHEN ISNULL(#All_Accounts_BeginBalance.Credit , 00) - ISNULL(#All_Accounts_BeginBalance.Debit , 00) > 0
                   THEN ISNULL(#All_Accounts_BeginBalance.Credit , 00) - ISNULL(#All_Accounts_BeginBalance.Debit , 00)
                   ELSE 0
               END AS                            Opening_Balance_Credit
			   ,
		CASE
    WHEN #All_Accounts.Code =@mainAccountCode  or #All_Accounts.AccountID = (select accc.ParentID from GL_Accounts accc where accc.AccountID = @mainAccountId)
	THEN (
	select 
     ISNULL(SUM(AV_accountBalance.Credit),0)
	from AV_accountBalance
   where 
   ((AV_accountBalance.Main_AccountID in 
   (select accountid from GL_Accounts where ParentID=@mainAccountId) )
   or AV_accountBalance.Main_AccountID=@mainAccountId)
   and AV_accountBalance.SubsidaryID=@SubsidaryID
   and CAST(AV_accountBalance.VouhcerDate AS DATE) >= @FromDate 
   and  CAST(AV_accountBalance.VouhcerDate AS DATE) <= @ToDate 
	)
	WHEN #All_Accounts.ParentID = @mainAccountId
	THEN

	(
	select 
     ISNULL(SUM(AV_accountBalance.Credit),0)
	from AV_accountBalance
   where 
   ((AV_accountBalance.Main_AccountID in 
   (select accountid from GL_Accounts where ParentID=#All_Accounts.AccountID) )
   or AV_accountBalance.Main_AccountID=#All_Accounts.AccountID)
   and AV_accountBalance.SubsidaryID=@SubsidaryID
   and CAST(AV_accountBalance.VouhcerDate AS DATE) >= @FromDate 
   and  CAST(AV_accountBalance.VouhcerDate AS DATE) <= @ToDate 
	)
    ELSE ISNULL(#All_Accounts.Credit,0)
END Credit,
CASE
    WHEN #All_Accounts.Code =@mainAccountCode  or #All_Accounts.AccountID = (select accc.ParentID from GL_Accounts accc where accc.AccountID = @mainAccountId)
	THEN 
	(
	select 
	ISNULL(SUM(AV_accountBalance.Debit),0)
	from AV_accountBalance
   where 
   ((AV_accountBalance.Main_AccountID in 
   (select accountid from GL_Accounts where ParentID=@mainAccountId) )
   or AV_accountBalance.Main_AccountID=@mainAccountId)
   and AV_accountBalance.SubsidaryID=@SubsidaryID
   and CAST(AV_accountBalance.VouhcerDate AS DATE) >= @FromDate 
   and  CAST(AV_accountBalance.VouhcerDate AS DATE) <= @ToDate 
	)
	WHEN #All_Accounts.ParentID = @mainAccountId
	THEN
	(
	select 
     ISNULL(SUM(AV_accountBalance.Debit),0)
	from AV_accountBalance
   where 
   ((AV_accountBalance.Main_AccountID in 
   (select accountid from GL_Accounts where ParentID=#All_Accounts.AccountID) )
   or AV_accountBalance.Main_AccountID=#All_Accounts.AccountID)
   and AV_accountBalance.SubsidaryID=@SubsidaryID
   and CAST(AV_accountBalance.VouhcerDate AS DATE) >= @FromDate 
   and  CAST(AV_accountBalance.VouhcerDate AS DATE) <= @ToDate 
	)
    ELSE ISNULL(#All_Accounts.Debit,0)
END Debit
             --, ISNULL(#All_Accounts.Debit , 00)  Debit

           --  , ISNULL(#All_Accounts.Credit , 00) Credit
        INTO #All_Accounts_Final
        FROM #GL_Accounts GL_Accounts
             LEFT JOIN #All_Accounts
             ON #All_Accounts.AccountID = GL_Accounts.AccountID
             LEFT JOIN #All_Accounts_BeginBalance
             ON #All_Accounts_BeginBalance.AccountID = GL_Accounts.AccountID

        SELECT *
             , CASE
                   WHEN #All_Accounts_Final.Opening_Balance_Debit - #All_Accounts_Final.Opening_Balance_Credit + #All_Accounts_Final.Debit - #All_Accounts_Final.Credit > 0
                   THEN #All_Accounts_Final.Opening_Balance_Debit - #All_Accounts_Final.Opening_Balance_Credit + #All_Accounts_Final.Debit - #All_Accounts_Final.Credit
                   ELSE 0
               END AS Ending_Balance_Debit
             , CASE
                   WHEN #All_Accounts_Final.Opening_Balance_Credit - #All_Accounts_Final.Opening_Balance_Debit + #All_Accounts_Final.Credit - #All_Accounts_Final.Debit > 0
                   THEN #All_Accounts_Final.Opening_Balance_Credit - #All_Accounts_Final.Opening_Balance_Debit + #All_Accounts_Final.Credit - #All_Accounts_Final.Debit
                   ELSE 0
               END AS Ending_Balance_Credit

			   into #Test
        FROM #All_Accounts_Final
        WHERE(@Type IS NULL
              OR Type = @Type)
             AND (@Level = 4
                  OR @Level IS NULL
                  OR Level <= @Level)
             AND (Level != 0)
             AND (@ClearZero IS NULL
                  OR (@ClearZero = 1
                      AND 
					  (Debit>0 or Credit > 0 or Opening_Balance_Debit>0 or Opening_Balance_Credit>0)
					  
					  ))
        ORDER BY Code
		Select * from #test a ,

		(Select   Sum_Opening_Balance_Debit =  Sum(Opening_Balance_Debit),
				Sum_Opening_Balance_Credit= Sum(Opening_Balance_Credit)   ,
				Sum_credit = Sum(Credit),
				Sum_Debit = Sum(Debit)  ,
				Sum_Ending_Balance_Debit = Sum(Ending_Balance_Debit),
				Sum_Ending_Balance_Credit = Sum(Ending_Balance_Credit) 
		from #test where type = 2 and level >= @MinMainLevels)  sum_t
    END
 
 --/SSRS/ReportViewer.aspx
 --?q=R_F_Trial_Balance_Sheet_Transaction_Ar&Level=&ClearZero=&FromDate=2020-01-01&TargetMoves=&ToDate=2020-07-21
 --exec [dbo].[Reports_Gl_Trial_Balance_Sheet_Transaction] @level=null,@FromDate='2020-01-01',
 --@ToDate='2020-07-21',@TargetMoves=null,@ClearZero=null,@Type=null
GO
/****** Object:  StoredProcedure [dbo].[Reports_INV_Business_Summery_Report]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Reports_INV_Business_Summery_Report]
  @SubsidiaryID INT  = NULL   
, @BranchId     INT  = NULL
, @FromDate     DATE = null
, @ToDate       DATE = null
AS
BEGIN
-- Data Context : #Data 
	SELECT 
	*
	INTO #Data 
	FROM
	INV_Receipt_h H
	
	WHERE 
	(@SubsidiaryID IS NULL OR H.SubsidiaryID In (@SubsidiaryID))
	AND 
	(@BranchId IS NULL OR H.Branch_ID IN (@BranchId))
	AND 
	(@FromDate IS NULL OR Cast(H.Entry_Date AS date) >= @FromDate)	
	AND
	(@ToDate IS NULL OR Cast(H.Entry_Date AS date) <= @ToDate)
	AND
	IsNull(Is_Canceled,0) != 1
	AND 
	IsNull(IsHolded,0) != 1

	
--	Create #table To Hold Data : 
CREATE TABLE #Table 
(
	[Type] NVARCHAR(50)
	,Name_En NVARCHAR(50)
	,Name_Ar NVARCHAR(50)
	,Value	 DECIMAL(18,3)
	, Qty int 
	,lookUp_ID INT 
)

-- Revenues Section
INSERT INTO #table  ([TYPE],Name_En, Name_Ar, [Value])
SELECT 'Revenues','Total Sales',N'اجمالى المبيعات', SUM(  ISNULL(Value,0)  ) FROM #Data
UNION ALL
SELECT 'Revenues','Paid Modifiers','Paid Modifiers',0
UNION ALL
SELECT 'Revenues','Surcharge',N'ضريبة إضافية',SUM(  IsNull(DeliveryFees,0)  ) FROM #Data
UNION ALL
SELECT 'Revenues','Gross  Sales',N'إجمالي المبيعات',SUM(  IsNull(Value,0) + IsNull(DeliveryFees,0)  )   FROM #Data
UNION ALL
SELECT 'Revenues','Discounts',N'الخصومات',SUM(  ISNULL(Discount_Value,0) + (ISNULL(Discount_Percent,0)* ISNULL(Value,0)  / 100) )  FROM #Data
UNION ALL
SELECT 'Revenues','Net Sales',N'صافي المبيعات',SUM(  ISNULL(NetValue,0)  )  FROM #Data

-- OrderTypes section ?? image have 2 col not done ??
INSERT INTO #table  ([TYPE],Name_En, Name_Ar, [Value])

SELECT 
'OrderType'
,CASE OrderType 
 WHEN 1 THEN 'TakeAway'
 WHEN 2 THEN 'Delivery'
 WHEN 3 THEN 'Dine In'
 WHEN 4 THEN 'Pick Up'
 ELSE 'Not Categories'
 END AS Name_En
 ,CASE OrderType 
 WHEN 1 THEN 'TakeAway'
 WHEN 2 THEN N'توصيل'
 WHEN 3 THEN 'Dine In'
 WHEN 4 THEN 'Pick Up'
 ELSE N'لم تصنف'
 END AS Name_Ar
,SUM(NetValue) AS NetValue
FROM #Data
GROUP BY OrderType

-- Discount section ?? is it gorup by discount or just 10% as image ??
INSERT INTO #table  ([TYPE],Name_En, Name_Ar,Value ,Qty)

SELECT 'Discount'
,'10% discount (10%)'
,N'خصم 10'
,SUM(  (ISNULL(Discount_Percent,0)* ISNULL(Value,0)  / 100) )
,Count(id) 
FROM #Data
WHERE
Discount_Percent > 0
OR 
Discount_Value > 0


-- Payment Types section

INSERT INTO #table  ([TYPE],Name_En, Name_Ar,Value, lookUp_ID,Qty)

SELECT 'PaymentTypes'
,Inv_PaymentType.Name
,Inv_PaymentType.Name_AR
,SUM(NetValue)
,Payment_Type
,COUNT(#Data.id)
FROM
#Data
LEFT JOIN Inv_PaymentType
ON Inv_PaymentType.id = #Data.Payment_Type

GROUP BY Inv_PaymentType.Name,Inv_PaymentType.Name_AR,Payment_Type

-- SurChanrges section
INSERT INTO #table  ([TYPE],Name_En, Name_Ar, Value,Qty)

SELECT 'SurChanrges'
,'Service (14%)'
,N'خدمات 14'
,isNull(Sum(DeliveryFees),0)
,COUNT(Id)
FROM #Data
WHERE DeliveryFees > 0 


-- Finally ☺
SELECT * FROM #Table
		
	
END
GO
/****** Object:  StoredProcedure [dbo].[Reports_Inv_Contract_Return_Group_By_Invoice_Details]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROC [dbo].[Reports_Inv_Contract_Return_Group_By_Invoice_Details] @FromDate DATE = '2015-08-05'
, @ToDate DATE =  '2019-12-31'
, @BrachID INT = null
, @CustomerID INT = NULL
, @CashCustomerID INT = NULL
, @CustomerCatID INT = NULL
, @FromInvoiceNumber INT = NULL
, @ToInvoiceNumber INT = NULL
, @TransactionType NVARCHAR(MAX) = null
, @ItemCategoryID NVARCHAR(MAX) = NULL
, @ItemId INT = NULL
, @Item_vendor INT = NULL
, @SalesManId INT = null
, @SubsidaryID INT = 1
, @FromCustomerActualDeliverDate DATE = NULL
, @ToCustomerActualDeliverDate DATE = NULL
, @FromTime TIME = NULL
, @ToTime TIME = NULL
, @CustomerStatusID INT = NULL
, @Payment_Type INT = NULL
, @User_Role_Sale INT = NULL
,@userId int =13
AS
--select *  from Inv_Receipt_h where  entry_no = '463'  cast(Entry_Date as date) >='2020-03-23' and cast(Entry_Date as date) < '2020-03-24'
BEGIN
 
   
  IF OBJECT_ID('tbl') IS NOT NULL
begin
        drop table tbl
end
    if @FromTime is null set @FromTime = ' 00:00:00';
    if @ToTime is null set @ToTime = ' 23:59:59';

    IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@TransactionType, ',')
            WHERE Item = -1
        )
        SET @TransactionType = NULL

    IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@ItemCategoryID, ',')
            WHERE Item = -1
        )
        SET @ItemCategoryID = NULL
		
   select * Into #tbl from (
    SELECT   H.ID
         , H.Entry_Date                                             AS [Date]
         , H.Entry_No                                               AS [No.]
         , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN ''
               ELSE GL_Accounts.Code
        END                                                         AS CustomerNo
         , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN Inv_CashCustomer.Name
               ELSE GL_Accounts.Name
        END                                                         AS CustomerName
         , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN Inv_CashCustomer.Name_Ar
               ELSE GL_Accounts.Name_Ar
        END                                                         AS CustomerName_Ar
         , Security_Users.Name                                      AS [S.Name]
         , Security_Users.Name_Ar                                   AS [S.NameAr]
         , Inv_Store.Code                                           AS StoreCode
         , Inv_Items.Code                                           AS [Item Code]
         , Inv_Items.Name                                           AS [Item Name]
         , Inv_Items.Name_AR                                        AS [Item Name_Ar]
         , ISNULL(D.Conv, 0)                                        AS pack
         , ISNULL(D.Qty, 0)                                         AS QTy
         , Inv_Unit.Name                                               Inv_Unit_Name
         , Inv_Unit.Name_Ar                                            Inv_Unit_Name_AR
         , ISNULL(D.Price, 0) / ISNULL(H.Currency_Rate, 1)          AS Price
         , (ISNULL(D.Discount_Value, 0) / ISNULL(H.Currency_Rate, 1))  +  (ISNULL(D.H_Discount_Value, 0) / ISNULL(H.Currency_Rate, 1))   AS Disc
         , case when D.H_Discount_Value >0 and d.price >0 and d.qty > 0 then (((ISNULL(D.Discount_Value, 0) / ISNULL(H.Currency_Rate, 1))  +  (ISNULL(D.H_Discount_Value, 0) / ISNULL(H.Currency_Rate, 1))) / (d.qty * d.Price)  )    * 100  else   (ISNULL(D.Discount_Percent, 0) )  end                AS [Tot.Disc]
         , ISNULL(H.Discount_Value, 0)                              AS [Discount_Value]
         , ISNULL(H.DeliveryFees, 0)                                AS [H.DeliveryFees]
		   ,H.               CustomerActualDeliverDate              
         , ISNULL(D.Total, 0)                                          AS Total
         , d.AvgCost * d.Final_conv                      AS Cost
		 , D_H_Discount_Value     = CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN ISNULL( D.H_Discount_Value,0) / ISNULL(H.Currency_Rate, 1)
                                            ELSE ISNULL( D.H_Discount_Value,0) / ISNULL(H.Currency_Rate, 1)
          END
        -- ,  (ISNULL(D.Total, 0)     -   ISNULL(D.H_Discount_Value, 0)   )   - ( D.AvgCost *  D.QTY*D.Final_conv )    AS Profit
		    , CASE
               WHEN C.Code =53
                   THEN ((ISNULL(D.Total, 0)     -   ISNULL(D.H_Discount_Value, 0)- ( D.AvgCost *  D.QTY*D.Final_conv ))*-1)
				   WHEN C.Code =54
                   THEN ((ISNULL(D.Total, 0)     -   ISNULL(D.H_Discount_Value, 0)- ( D.AvgCost *  D.QTY*D.Final_conv ))*-1)
               ELSE ((ISNULL(D.Total, 0)     -   ISNULL(D.H_Discount_Value, 0)   )   - ( D.AvgCost *  D.QTY*D.Final_conv ))
        END                                                         AS Profit

         , C.Name                                                      C_Name
         , C.Name_Ar                                                   C_Name_Ar
         , C.Code                                                      C_Code
		--,D.Item_ID Item_ID
		--,D.qty d_qty
		--,D.price d_price
		--,D.Final_conv d_final_conv 
		--,D.conv d_conv 
		--,d.AvgCost d_avgcost
    FROM Inv_Receipt_d D
	    LEFT JOIN Inv_Unit
                       ON D.Unit_ID = Inv_Unit.ID
             LEFT JOIN Inv_Items
                       ON Inv_Items.ID = D.Item_ID
             LEFT JOIN Inv_Store
                       ON Inv_Store.ID = D.Store_ID,Inv_Receipt_H H
             LEFT JOIN
         Inv_CashCustomer ON Inv_CashCustomer.id = H.CashCustomerID
             LEFT JOIN
         GL_Accounts ON GL_Accounts.AccountID = H.Vendor_ID
             LEFT JOIN
         Inv_Transaction_Codes C ON H.Code = C.Code
             LEFT JOIN
         Security_Users ON Security_Users.Id = H.Empoyee_ID
             LEFT JOIN
         Inv_PaymentType ON Inv_PaymentType.id = H.Payment_Type
		  
    WHERE D.parent_id =H.ID and H.Code IN (87)
      AND (ISNULL(H.Is_Canceled, 0) <> 1)
      AND (ISNULL(H.IsHolded, 0) <> 1)
      AND (@User_Role_Sale IS NULL
        OR D.Item_ID IN
           (
               SELECT Inv_Receipt_D.Item_ID
               FROM Inv_Receipt_D
               WHERE Inv_Receipt_D.SalesManId = @User_Role_Sale
           ))
      AND EXISTS
        (
            SELECT Parent_ID
            FROM Inv_Receipt_D D
            WHERE D.Parent_ID = H.ID
        )
      AND (@SubsidaryID IS NULL
        OR H.SubsidiaryID = @SubsidaryID)
      AND (@FromDate IS NULL
        OR
           CAST(H.Entry_Date AS DATETIME) >= cast(@FromDate as datetime) + cast(@FromTime as datetime)
        )
      AND (@ToDate IS NULL
        OR
           CAST(H.Entry_Date AS DATETIME) <= cast(@ToDate as datetime) + cast(@ToTime as datetime)
        )
      AND (@ItemId IS NULL
        OR d.Item_ID IN
           (
               SELECT Inv_Receipt_D.Item_ID
               FROM Inv_Receipt_D
               WHERE (@ItemId is null or Inv_Receipt_D.Item_ID = @ItemId)
           ))

      AND (@Item_vendor IS NULL
        OR d.Item_ID IN
           (
               SELECT Inv_Receipt_D.Item_ID
               FROM Inv_Receipt_D
                        left join Inv_Items on Inv_Receipt_d.Item_ID = Inv_Items.ID
                        left join Inv_Items_Vendors on Inv_Items.ID = Inv_Items_Vendors.ItemID
               WHERE ( Inv_Items_Vendors.VendorID = @item_vendor)
           ))

      AND (@SalesManId IS NULL
        OR H.Empoyee_ID = @SalesManId)
      AND (@BrachID IS NULL
        OR H.Branch_ID IN (@BrachID))
		and H.Branch_ID in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId)
      AND (@CustomerID IS NULL
        OR H.Vendor_ID = @CustomerID)
      AND (@CashCustomerID IS NULL
        OR H.CashCustomerID = @CashCustomerID)
      AND (@CustomerCatID IS NULL
        OR Inv_CashCustomer.CategoryID IN (@CustomerCatID)
        OR Gl_Accounts.VendorCategoryID IN (@CustomerCatID))
      AND (@FromInvoiceNumber IS NULL
        OR H.Entry_No >= @FromInvoiceNumber)
      AND (@ToInvoiceNumber IS NULL
        OR H.Entry_No <= @ToInvoiceNumber)
      AND (@TransactionType IS NULL
        OR H.Code IN
           (
               SELECT item
               FROM dbo.Split(@TransactionType, ',')
           ))
      AND (@ItemCategoryID IS NULL
        OR D.Item_ID IN
           (
               SELECT Inv_Receipt_D.Item_ID
               FROM Inv_Receipt_d
                        LEFT JOIN
                    Inv_Items_Categories ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
               WHERE Inv_Receipt_d.Parent_ID = H.ID
                 AND Inv_Items_Categories.ItemCategory_ID IN
                     (
                         SELECT item
                         FROM dbo.Split(@ItemCategoryID, ',')
                     )
           ))
      AND (@FromDate IS not NULL
        OR CAST(Entry_Date AS TIME) >= @FromTime)
      AND (@ToDate IS not NULL
        OR CAST(Entry_Date AS TIME) <= @ToTime)
      AND (@FromCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) >= @FromCustomerActualDeliverDate)
      AND (@ToCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) <= @ToCustomerActualDeliverDate)
      AND (@CustomerStatusID IS NULL
        OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
      AND (@Payment_Type IS NULL
        OR H.Payment_Type = @Payment_Type)
		) as Q;
 -- Select Count(distinct id)   from #tbl
  Select *   from #tbl
END
GO
/****** Object:  StoredProcedure [dbo].[Reports_Inv_Details_For_One_Store]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Reports_Inv_Details_For_One_Store] @StoreID        INT = NULL
                                            , @VendorID       INT = NULL
                                            , @ItemCategoryID nvarchar(max) = NULL
                                            , @SubsidaryID    INT = NULL
                                            , @ItemType       INT = NULL
                                            , @Item           INT = NULL
AS
    BEGIN
	 IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@ItemCategoryID, ',')
            WHERE Item = -1
        )
        SET @ItemCategoryID = NULL
        SELECT Inv_Items.Code
             , Inv_Items.Name
             , Inv_Items.Name_AR
             , Inv_Items_Store.First_Conv
             , Inv_Items_Store.First_Qty
             , Inv_Items_Store.First_Cost
             , Inv_Items_Store.First_Qty * Inv_Items_Store.First_Cost AS Cost
        FROM Inv_Items_Store
             LEFT JOIN Inv_Items
             ON Inv_Items.ID = Inv_Items_Store.Item_ID
             LEFT JOIN Inv_Store S
             ON S.id = Inv_Items_Store.Store_ID
        WHERE(@SubsidaryID IS NULL
              OR Inv_Items.Subsidiary_ID = @SubsidaryID)
             AND (@StoreID IS NULL
                  OR Inv_Items_Store.Store_ID IN(@StoreID))
             AND (@VendorID IS NULL
                  OR Inv_Items.ID IN
        (
         SELECT Inv_Items_Vendors.ItemID
         FROM Inv_Items_Vendors
         WHERE Inv_Items_Vendors.ItemID IN(@VendorID)
        ))
        AND (@ItemCategoryID IS NULL
        OR Inv_Items.ID IN
           (
               SELECT Inv_Items_Categories.Item_ID
               FROM Inv_Items_Categories
               WHERE ( Inv_Items_Categories.ItemCategory_ID  in (
                         SELECT item
                         FROM dbo.Split(@ItemCategoryID, ',')
                     ))
           ))
        AND (@Item IS NULL
             OR Inv_Items.ID = @Item)
        AND (@ItemType IS NULL
             OR Inv_Items.Item_Type = @ItemType)
    END

GO
/****** Object:  StoredProcedure [dbo].[Reports_Inv_Inventory_Summery]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Reports_Inv_Inventory_Summery] @FromDate          DATE = '20200509'
                                        , @ToDate            DATE = '20200510'
                                        , @BrachID           INT  = NULL
                                        , @CustomerID        INT  = NULL
                                        , @CustomerCatID     INT  = NULL
                                        , @FromInvoiceNumber INT  = NULL
                                        , @ToInvoiceNumber   INT  = NULL
                                        , @TransactionType   INT  = 81
                                        , @ItemCategoryID    INT  = NULL
                                        , @SubsidaryID       INT  = NULL
                                        , @ItemId            INT  = NULL
                                        , @SalesManId        INT  = NULL
                                        , @StoreID           INT  = NULL
                                        , @VendorID          INT  = NULL
                                        , @CostCenterID      INT  = NULL
                                        , @FromStore         INT  = NULL
                                        , @ToStore           INT  = NULL
AS
    BEGIN

        SELECT distinct Inv_Receipt_h.ID
             , Inv_Receipt_h.Entry_Date AS                                               [Date]
             , Inv_Receipt_h.Entry_No AS                                                 [No.]
             , mstr_Costcenter.Name                                                      mstr_Costcenter_Name
             , mstr_Costcenter.Name_ar                                                   mstr_Costcenter_Name_ar
             , CASE
                   WHEN GL_Accounts.AccountID IS NULL
                   THEN CAST(Inv_CashCustomer.id AS NVARCHAR(50))
                   ELSE CAST(GL_Accounts.Code AS NVARCHAR(100))
               END AS                                                                    CustomerNo
             , CASE
                   WHEN GL_Accounts.AccountID IS NULL
                   THEN Inv_CashCustomer.Name
                   ELSE GL_Accounts.Name
               END AS                                                                    CustomerName
             , CASE
                   WHEN GL_Accounts.AccountID IS NULL
                   THEN Inv_CashCustomer.Name_Ar
                   ELSE GL_Accounts.Name_Ar
               END AS                                                                    CustomerName_Ar
             , Security_Users.Name AS                                                    [S.Name]
             , Security_Users.Name_Ar AS                                                 [S.NameAr]
             --, Inv_Store.Code AS                                                         StoreCode
             --, Inv_Store.Name AS                                                         StoreName
             --, Inv_Store.Name_Ar AS                                                      StoreName_Ar
             , Inv_Items.Code AS                                                         [Item Code]
             , Inv_Items.Name AS                                                         [Item Name]
             , Inv_Items.Name_AR AS                                                      [Item Name_Ar]
             , Inv_Receipt_D.Conv AS                                                     pack
             , Inv_Receipt_D.Qty AS                                                      QTy
             , Inv_Receipt_D.Price / ISNULL(Inv_Receipt_h.Currency_Rate , 1) AS          Price
             , Inv_Receipt_D.Discount_Value / ISNULL(Inv_Receipt_h.Currency_Rate , 1) AS Disc
             , Inv_Receipt_D.Discount_Percent AS                                         [Tot.Disc]
               --, Inv_Receipt_h.Discount_Percent As                                   [Tot.Disc]
             , Inv_Receipt_D.Total / ISNULL(Inv_Receipt_h.Currency_Rate , 1) AS          Total
             , Inv_Receipt_D.AvgCost* Inv_Receipt_D.Qty*Inv_Receipt_D.Final_conv
			  AS                                             Cost
             , Inv_Receipt_D.Total - Inv_Items.Service_Item_Cost * Inv_Receipt_D.Qty AS  Profit
             , C.Name                                                                    C_Name
             , C.Name_Ar                                                                 C_Name_Ar
             , C.Code                                                                    C_Code
             , FromStore.Name                                                            FromStore_Name
             , FromStore.Name_Ar                                                         FromStore_Name_Ar
			 , FromStore.Code                                                            FromStore_Code
             , ToStore.Name                                                              ToStore_Name
             , ToStore.Name_Ar                                                           ToStore_Name_Ar
			 , ToStore.Code                                                              ToStore_Code
      ,Inv_Unit.Name as UnitName
	  ,Inv_Unit.Name_AR as UnitNameAr
	    FROM Inv_Receipt_h
             LEFT JOIN Inv_CashCustomer
             ON Inv_CashCustomer.id = Inv_Receipt_h.CashCustomerID
             LEFT JOIN GL_Accounts
             ON GL_Accounts.AccountID = Inv_Receipt_h.Vendor_ID
             LEFT JOIN Security_Users
             ON Security_Users.Id = Inv_Receipt_h.Empoyee_ID
             LEFT JOIN Inv_Transaction_Codes C
             ON Inv_Receipt_h.Code = C.Code
             LEFT JOIN mstr_Costcenter
             ON Inv_Receipt_h.CostCenterID = mstr_costcenter.Id
             LEFT JOIN Inv_Receipt_D
             ON Inv_Receipt_D.Parent_ID = Inv_Receipt_h.ID
			 left join Inv_Unit on
			 Inv_Receipt_D.Unit_ID=Inv_Unit.ID
             LEFT JOIN Inv_Items
             ON Inv_Items.ID = Inv_Receipt_D.Item_ID
             LEFT JOIN Inv_Store
             ON Inv_Store.ID = Inv_Receipt_D.Store_ID
             LEFT JOIN Inv_Store FromStore
             ON FromStore.ID = Inv_Receipt_h.FromStoreID
             LEFT JOIN Inv_Store ToStore
             ON ToStore.ID = Inv_Receipt_h.ToStoreID
             LEFT JOIN AV_Inv_items_store
             ON AV_Inv_items_store.item_id = Inv_Receipt_D.Item_ID
                AND AV_Inv_items_store.store_id = Inv_Receipt_d.Store_ID
        WHERE (Inv_Receipt_h.Code IN(82 , 60 , 63 , 3 , 61 , 83  , 4 , 85 , 80) or(Inv_Receipt_h.Code = 81 and Transaction_move = 1) )
             AND (@ItemId IS NULL
                  OR Inv_Receipt_D.Item_ID = @ItemId)
             AND Inv_Receipt_D.FinishedProductID IS NULL
             AND (@SalesManId IS NULL
                  OR Inv_Receipt_h.Empoyee_ID = @SalesManId)
             AND (@SubsidaryID IS NULL
                  OR Inv_Receipt_h.SubsidiaryID = @SubsidaryID)
             AND (@FromDate IS NULL
                  OR CAST(Inv_Receipt_h.Entry_Date AS DATE) >= @FromDate)
             AND (@ToDate IS NULL
                  OR CAST(Inv_Receipt_h.Entry_Date AS DATE) <= @ToDate)
             AND (@BrachID IS NULL
                  OR inv_Receipt_H.Branch_ID IN(@BrachID))
        AND (@CustomerID IS NULL
             OR Inv_Receipt_H.CashCustomerID = @CustomerID
             OR Inv_Receipt_H.Vendor_ID = @CustomerID)
        AND (@VendorID IS NULL
             OR Inv_Receipt_H.CashCustomerID = @VendorID
             OR Inv_Receipt_H.Vendor_ID = @VendorID)
        AND (@StoreID IS NULL
             OR Inv_Receipt_D.Store_ID IN(@StoreID))
        AND (@CustomerCatID IS NULL
             OR Inv_CashCustomer.CategoryID IN(@CustomerCatID)
    OR Gl_Accounts.VendorCategoryID IN(@CustomerCatID))
     AND (@FromInvoiceNumber IS NULL
          OR inv_Receipt_H.Entry_No >= @FromInvoiceNumber)
     AND (@ToInvoiceNumber IS NULL
          OR inv_Receipt_H.Entry_No <= @ToInvoiceNumber)
     AND (@TransactionType IS NULL
          OR Inv_Receipt_H.Code = @TransactionType)
     AND (@ItemCategoryID IS NULL
          OR Inv_Items.ID IN
        (
         SELECT Item_ID
         FROM Inv_Items_Categories
         WHERE Inv_Items_Categories.Item_ID = Inv_Items.ID
               AND Inv_Items_Categories.ItemCategory_ID IN(@ItemCategoryID)
        ))
AND (@CostCenterID IS NULL
     OR Inv_Receipt_h.CostCenterID IN(@CostCenterID))
AND (@FromStore IS NULL
     OR Inv_Receipt_h.FromStoreID = @FromStore)
AND (@ToStore IS NULL
     OR Inv_Receipt_h.ToStoreID = @ToStore)
        ORDER BY Inv_Receipt_h.Entry_Date
    END
GO
/****** Object:  StoredProcedure [dbo].[Reports_Inv_Items_Report]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Reports_Inv_Items_Report] @SubsidaryID INT = NULL
, @Category nvarchar(max) = NULL -- SELECT * FROM Inv_Items_Categories
, @Type INT = 4 -- SELECT Item_Type,* FROM Inv_Items
, @Vendor INT = NULL
AS
BEGIN

    SELECT
         -- Inv_Items
        Inv_Items.ID                                              Inv_Items___ID
         , Inv_Items.Item_Type                                    Inv_Items___Item_Type
         , Inv_Items.Code                                         Inv_Items___Code
		 , (SELECT top 1 Inv_Items_Barcode.ItemBarCode FROM    Inv_Items_Barcode  where Inv_Items_Barcode.Item_ID=Inv_Items.ID)    ItemBarCode
         , Inv_Items.Name                                         Inv_Items___Name
         , Inv_Items.Name_Ar                                      Inv_Items___Name_Ar
		 ---------------------------------------------------------------------------
		 , SUBSTRING(Inv_Items.ImagePath , 2,LEN(Inv_Items.ImagePath)) Inv_Items_ImagePath
		 ----------------------------------------------------------------------------
         -- Inv_Items_Units
         , Inv_Items_Units.Sale_price1                            Inv_Items_Units___Sale_price1
         , Inv_Items_Units.BarCode                                Inv_Items_Units___BarCode
         --Inv_Unit
         , Inv_Unit.ID                                            Inv_Unit___ID
         , Inv_Unit.Name                                          Inv_Unit___Name
         , Inv_Unit.Name_Ar                                       Inv_Unit___Name_Ar
         -- GL_Accounts
         , GL_Accounts.AccountID                                  GL_Accounts___AccountID
         , GL_Accounts.Name                                       GL_Accounts___Name
         , GL_Accounts.Name_AR                                    GL_Accounts___Name_AR
         --Inv_Items_Components
         , Inv_Items_Components.Item_ID                           Inv_Items_Components___Item_ID
         , Inv_Items_Components.ItemComponentID                   Inv_Items_Components___ItemComponentID
         , Inv_Items_Components.ItemComponentUnitId               Inv_Items_Components___ItemComponentUnitId
         , Inv_Items_Components.ItemComponentConv                 Inv_Items_Components___ItemComponentConv
         , Inv_Items_Components.ItemComponentrecipeQty            Inv_Items_Components___ItemComponentrecipeQty
         , ISNULL(Inv_Items_Components.AverageCost, 0)            Inv_Items_Components___AverageCost
         , ISNULL(Inv_Items_Components.AverageCost, 0) *
           ISNULL(Inv_Items_Components.ItemComponentrecipeQty, 0) Inv_Items_Components___TotalCost
         --Inv_Unit
         , Inv_Unit_2.ID                                          Inv_Unit_2___ID
         , Inv_Unit_2.Name                                        Inv_Unit_2___Name
         , Inv_Unit_2.Name_Ar                                     Inv_Unit_2___Name_Ar
         -- Inv_Items_2
         , Inv_Items_2.ID                                         Inv_Items_2___ID
         , Inv_Items_2.Item_Type                                  Inv_Items_2___Item_Type
         , Inv_Items_2.Code                                       Inv_Items_2___Code
         , Inv_Items_2.Name                                       Inv_Items_2___Name
         , Inv_Items_2.Name_Ar                                    Inv_Items_2___Name_Ar
		 , Sales_Cost  =(SELECT top 1 SUM(CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN d.AvgCost * d.QTY *
                                                     d.final_Conv
                                            ELSE 0
        END) 
FROM   Inv_Receipt_h H INNER JOIN
             Inv_Receipt_d d ON H.ID = d.Parent_ID INNER JOIN
             Inv_Items I ON  d.Item_ID = I.ID
			 where I.ID=Inv_Items.ID)
    FROM Inv_Items
             LEFT JOIN Inv_Unit
                       ON Inv_Items.Inventory_UnitId = Inv_Unit.Id
             LEFT JOIN Inv_Items_Units
                       ON Inv_Items.ID = Inv_Items_Units.Item_ID
                           AND Inv_Items.Inventory_UnitId = Inv_Items_Units.Unit_id
             LEFT JOIN Inv_Items_Components
                       ON Inv_Items.ID = Inv_Items_Components.Item_ID
             LEFT JOIN Inv_Items Inv_Items_2
                       ON Inv_Items_Components.ItemComponentID = Inv_Items_2.ID
             LEFT JOIN Inv_Unit Inv_Unit_2
                       ON Inv_Unit_2.ID = Inv_Items_Components.ItemComponentUnitID
             left join Inv_Items_Vendors
                       on Inv_Items.ID = Inv_Items_Vendors.ItemID
             left join GL_Accounts
                       on Inv_Items_Vendors.VendorID = GL_Accounts.AccountID
    WHERE (@SubsidaryID IS NULL
        OR inv_items.Subsidiary_ID = @SubsidaryID)
      AND (@Type IS NULL
        OR Inv_Items.Item_Type = @Type)
      AND (@Vendor IS NULL
        OR Inv_Items_Vendors.VendorID = @Vendor)
      AND (@Category IS NULL or @Category='-1'
        OR Inv_Items.ID IN
           (
               SELECT Inv_Items_Categories.Item_ID
               FROM Inv_Items_Categories
               WHERE (@Category IS NULL
                   OR Inv_Items_Categories.ItemCategory_ID in( SELECT item
                         FROM dbo.Split(@Category, ',')))
           ))


END

GO
/****** Object:  StoredProcedure [dbo].[Reports_Inv_Items_Trans_Summery]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
CREATE PROC [dbo].[Reports_Inv_Items_Trans_Summery] 
@StoreID INT = Null
 , @ItemType INT = NULL
, @ItemCategoryID nvarchar(max) = NULL
, @SubsidaryID INT = NULL
 
, @ItemId INT = NULL
, @FromDate DATEtime = '20331212'  
, @ToDate DATEtime = '20331212' 
 
AS
BEGIN
 IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@ItemCategoryID, ',')
            WHERE Item = -1
        )
        SET @ItemCategoryID = NULL
	Set @ToDate = @ToDate + ' 23:59:59'
select   i.id  itemId,i.code ItemCode, i.Name ItemName,i.Name_AR ItemNameAr

,u.Code UnitCode,u.Name UnitName,u.Name_AR UnitNameAr,iu.Conv,iu.FinalConv 
--,sum(iis.First_Conv*iis.First_Qty) as openBal
,
 NetPurchse = SUM(CASE
				   WHEN H.CODE IN (1)
                                                THEN D.qty
                                            ELSE 0
        END) - SUM(CASE
                       WHEN H.CODE IN (2)
                           THEN D.qty
                       ELSE 0
        END)
		,
 NetProduction = SUM(CASE
                                            WHEN H.CODE IN (82) and isnull(d.FinishedProductID,0)=0
                                                THEN D.qty
                                            ELSE 0
        END) - SUM(CASE
                       WHEN H.CODE IN (82) and isnull(d.FinishedProductID,0)<>0
                           THEN D.qty
                       ELSE 0
        END)
		,
 Sales = SUM(CASE
                                            WHEN H.CODE IN (51,52)  
                                                THEN D.qty
                                            ELSE 0
        END)  
			,
 Ret_Sales = SUM(CASE
                                            WHEN H.CODE IN (53,54)  
                                                THEN D.qty
                                            ELSE 0
        END),
 NetIssue = SUM(CASE
                                            WHEN H.CODE IN (63)  
                                                THEN D.qty
                                            ELSE 0
        END) - SUM(CASE
                       WHEN H.CODE IN (60,85)  
                           THEN D.qty
                       ELSE 0
        END) ,
		 Destruction  = SUM(CASE
                                            WHEN H.CODE IN (61)  
                                                THEN D.qty
                                            ELSE 0
        END) ,
		 Adjustment  = SUM(CASE
                                            WHEN H.CODE IN (83)  
                                                THEN D.qty
                                            ELSE 0
        END) ,
		Receiving= SUM(CASE
                                            WHEN H.CODE IN (3,4)  
                                                THEN D.qty
                                            ELSE 0
        END) ,
		 TransferFrom  = SUM(CASE
                                            WHEN H.CODE IN (81) and  (h.FromStoreID=@StoreID )
                                                THEN D.qty
                                            ELSE 0
        END),
		 TransferTo  = SUM(CASE
                                            WHEN H.CODE IN (81) and  (h.ToStoreID=@StoreID)
                                                THEN D.qty
                                            ELSE 0
        END)
from Inv_Items i
left join Inv_Unit u
on i.Inventory_UnitId=u.id
left join Inv_Items_Units iu
on i.id=iu.Item_ID and iu.Unit_id=i.Inventory_UnitId
--left outer join Inv_Items_Store iis on i.ID=iis.Item_ID

left outer join Inv_Receipt_D D on
i.ID=d.Item_ID
left join Inv_Receipt_H H
              on d.Parent_ID=h.id
    WHERE  (ISNULL(H.Is_Canceled, 0) <> 1)
      AND (ISNULL(H.IsHolded, 0) <> 1)
	and (@SubsidaryID IS NULL  OR i.Subsidiary_ID = @SubsidaryID)
        AND (@StoreID IS NULL   OR d.Store_ID = @StoreID)
      AND (@ItemType IS NULL  OR i.Item_Type = @ItemType)  
	   AND (@ItemCategoryID IS NULL
        OR i.ID IN
           (
               SELECT Inv_Items_Categories.Item_ID
               FROM Inv_Items_Categories
               WHERE ( Inv_Items_Categories.ItemCategory_ID  in (
                         SELECT item
                         FROM dbo.Split(@ItemCategoryID, ',')
                     ))
           )) 
		   AND (@ItemId IS NULL  OR i.ID = @ItemId) 
		    AND ((@ToDate IS NULL  OR CAST(h.Entry_Date AS DATE) <= @ToDate))
       AND ((@FromDate IS NULL  OR CAST(h.Entry_Date AS DATE) >= @FromDate))
  group by i.id,i.code , i.Name,i.Name_AR,u.Code,u.Name,u.Name_AR,iu.Conv,
  iu.FinalConv 
  
  
  
       
    
    
		   
     ORDER BY i.Code
        
END
GO
/****** Object:  StoredProcedure [dbo].[Reports_Inv_Production_Aggregation_Compilation]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Reports_Inv_Production_Aggregation_Compilation] @SubsidaryID    INT          = NULL
                                                         , @StoreId        INT          = NULL
                                                         , @FromDate       DATE         = '20190103'
                                                         , @ToDate         DATE         = '20190106'
                                                         , @ItemCategoryID INT          = NULL
                                                         , @ItemID         INT          = 3286
                                                         , @FilterType     NVARCHAR(50) = 'ShowComponents'--'ShowComponents'--'ShowComponents'
AS
    BEGIN

        SELECT H.ID                          H_ID
             , D.ID                          D_ID
             , D.Item_ID                     D_Item_ID
             , D.FinishedProductID           D_FinishedProductID
             , H.Entry_No                    H_Entry_No
             , H.Entry_Date                  H_Entry_Date
             , Inv_S.Code                    Inv_S_Code
             , I.Code                        I_Code
             , I.Name                        I_Name
             , I.Name_ar                     I_Name_ar
             , D.Conv                        D_Conv
             , INV_U.Name                    INV_U_Name
             , INV_U.Name_AR                 INV_U_Name_AR
             , ISNULL(D.Qty , 0)             D_Qty
             , ISNULL(AV_INV_T.AvgCost , 0)  D_AvgCost
             , ISNULL(D.Total , 0)           D_Total
             , ISNULL(D.DefaultItemCost , 0) D_DefaultItemCost
             , ISNULL(D.DefaultItemQty , 0)  D_DefaultItemQty
        INTO #Context
        FROM dbo.Inv_Receipt_h H
             LEFT JOIN Inv_Receipt_d D
             ON H.ID = D.Parent_ID
             LEFT JOIN Inv_Items I
             ON I.Id = D.Item_ID
             LEFT JOIN Inv_Store Inv_S
             ON D.Store_ID = Inv_S.ID
             LEFT JOIN Inv_Unit INV_U
             ON D.Unit_ID = INV_U.ID
             LEFT JOIN AV_INV_TransactionDetails AV_INV_T
             ON AV_INV_T.ID = D.ID
                AND AV_INV_T.Parent_ID = H.ID
        WHERE H.Code = 82
              AND (@SubsidaryID IS NULL
                   OR H.SubsidiaryID = @SubsidaryID)
              AND (@StoreId IS NULL
                   OR D.Store_ID = @StoreId)
              AND (@FromDate IS NULL
                   OR CAST(H.Entry_Date AS DATE) >= @FromDate)
              AND (@ToDate IS NULL
                   OR CAST(H.Entry_Date AS DATE) <= @ToDate)
              AND (@ItemCategoryID IS NULL
                   OR D.Item_ID IN
        (
         SELECT Inv_I_C.Item_ID
         FROM Inv_Items_Categories Inv_I_C
         WHERE Inv_I_C.ItemCategory_ID = @ItemCategoryID
        ))

        SELECT(CAST(I_Code AS NVARCHAR(50)) + ' ' + CAST(I_Name AS NVARCHAR(50)) + ' ' + CAST(I_Name_ar AS NVARCHAR(50)) + ' ' + CAST(D_Conv AS NVARCHAR(50)) + ' ' + CAST(INV_U_Name AS NVARCHAR(50)) + ' ' + CAST(INV_U_Name_AR AS NVARCHAR(50))) Sort
            , D_Item_ID
            , D_FinishedProductID
            , 'H'                                                                                                                                                                                                                                   Flag
            , Inv_S_Code
            , I_Code
            , I_Name
            , I_Name_ar
            , D_Conv
            , INV_U_Name
            , INV_U_Name_AR
            , SUM(D_Qty)                                                                                                                                                                                                                            D_Qty
            , SUM(D_Total)                                                                                                                                                                                                                          D_Total
            , 'Cost'                                                                                                                                                                                                                                Measruing_Unit
            , N'التكلفة'                                                                                                                                                                                                                            Measruing_Unit_Ar
            , AVG(D_DefaultItemCost)                                                                                                                                                                                                                D_DefaultItemCost
            , SUM(D_Total) / Sum(D_Qty)                                                                                                                                                                                                                  AvgCostItemQTY
            , (SUM(D_Total) / Sum(D_Qty)) - AVG(D_DefaultItemCost)                                                                                                                                                                                         UnitCostDifference
            , SUM(D_Qty) * (SUM(D_Total) / Sum(D_Qty) - AVG(D_DefaultItemCost))                                                                                                                                                                          Difference_For_Total_Quantity
        INTO #Details
        FROM #Context
        WHERE(D_FinishedProductID IS NULL)
        GROUP BY D_Item_ID
               , D_FinishedProductID
               , Inv_S_Code
               , I_Code
               , I_Name
               , I_Name_ar
               , D_Conv
               , INV_U_Name
               , INV_U_Name_AR

        SELECT D_FinishedProductID                           Parent_Item_ID
             , D_Item_ID                                     D_Item_ID
             , 'D'                                           Flag
             , Inv_S_Code                                    Inv_S_Code
             , I_Code
             , I_Name
             , I_Name_ar
             , D_Conv
             , INV_U_Name
             , INV_U_Name_AR
             , SUM(D_Qty) AS                                 D_Qty
             , SUM(D_Total)                                  D_Total
             , 'Quantity'                                    Measruing_Unit
             , N'الكمية'                                     Measruing_Unit_Ar
             , Sum(D_DefaultItemQty)                         D_DefaultItemQty
             , SUM(D_Total) / Sum(D_Qty)                           AvgCostItemQTY
             , Null/*SUM(D_Total / D_Qty) - AVG(D_DefaultItemCost)*/ UnitCostDifference
             , SUM(D_Qty) - (Sum(D_DefaultItemQty))          Difference_For_Total_Quantity
        INTO #ShowComponents
        FROM #Context
        WHERE(@FilterType = 'ShowComponents'
              AND D_FinishedProductID IS NOT NULL)
        GROUP BY D_FinishedProductID
               , D_Item_ID
               , Inv_S_Code
               , I_Code
               , I_Name
               , I_Name_ar
               , D_Conv
               , INV_U_Name
               , INV_U_Name_AR

        SELECT D.Sort
             , S.*
        INTO #Get_SortAble_Components
        FROM #ShowComponents S
             JOIN #Details D
             ON D.D_Item_ID = S.Parent_Item_ID
                AND D.Inv_S_Code = S.Inv_S_Code

        --       SELECT *
        --      FROM #Details
        --      WHERE #Details.D_Item_ID = 3287
        --      SELECT *
        --      FROM #ShowComponents
        --      WHERE #ShowComponents.Parent_Item_ID = 3287
        --      SELECT *
        --      FROM #Get_SortAble_Components
        --      WHERE #Get_SortAble_Components.Parent_Item_ID = 3287
        --Return

        SELECT *
        FROM
        (
         SELECT *
         FROM #Details
         UNION ALL
         SELECT *
         FROM #Get_SortAble_Components
        ) Final
        WHERE(@ItemId IS NULL
              OR Final.D_Item_ID = @ItemId)
        ORDER BY Inv_S_Code
               , D_Item_ID
               , Sort
               , CASE
                     WHEN FLAG = 'H'
                     THEN 1
                     ELSE 2
                 END
    END 
GO
/****** Object:  StoredProcedure [dbo].[Reports_Inv_Production_Details]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Reports_Inv_Production_Details] @SubsidaryID    INT          = NULL
                                         , @StoreId        INT          = NULL
                                         , @FromDate       DATE         = NULL
                                         , @ToDate         DATE         = NULL
                                         , @ItemCategoryID INT          = NULL
                                         , @ItemID         INT          = NULL
                                         , @FilterType     NVARCHAR(50) = 'ShowComponents'--'ShowComponents'
										 ,@HideExpense     INT          =NULL
AS
    BEGIN

        SELECT H.ID                                             H_ID
             , D.ID                                             D_ID
             , D.Item_ID                                        D_Item_ID
             , D.FinishedProductID                              D_FinishedProductID
             , H.Entry_No                                       H_Entry_No
			 ,D.ProductionUnitExpense                           ProductionUnitExpense
			 ,D.ProductionQtyExpense                            ProductionQtyExpense
             , CAST(H.Entry_Date AS DATE)                       H_Entry_Date
             , Inv_S.Code                                       Inv_S_Code
             , I.Code                                           I_Code
             , I.Name                                           I_Name
             , I.Name_ar                                        I_Name_ar
             , D.Conv                                           D_Conv
             , INV_U.Name                                       INV_U_Name
             , INV_U.Name_AR                                    INV_U_Name_AR
             , ISNULL(D.Qty , 0)                                D_Qty
             , ISNULL(AV_INV_T.AvgCost , 0)                     D_AvgCost
             , ISNULL(D.Qty , 0) * ISNULL(AV_INV_T.AvgCost , 0) D_Total,
			 st.Name  StoreNameEn,
			 st.Name_AR StoreNameAr,
		 
			H.Entry_Date ,
		 
			d.Final_conv
			,Mbr.Name as BranchName,Mbr.Name_AR as BranchNameAr

			 ,STUFF((SELECT    ','+cast( h2.Entry_No
			  as nvarchar(10))
    FROM Inv_Receipt_h h2
	inner join Inv_ReceiptReceipts Rec2 on
		rec2.ParentReceiptID=h.ID
		and
	Rec2.ReceiptID=	h2.id
  
    FOR XML PATH('')), 1, 1, '') RelEntryNo
	 ,STUFF((SELECT distinct   ','+cast( mstr_Branch.Name
			  as nvarchar(10))
    FROM Inv_Receipt_h h2
	inner join Inv_ReceiptReceipts Rec2 on
		rec2.ParentReceiptID=h.ID
		and
	Rec2.ReceiptID=	h2.id
	inner join mstr_Branch
	on mstr_Branch.id=h2.Branch_ID
  
    FOR XML PATH('')), 1, 1, '') RelBranchName
	  ,STUFF((SELECT distinct   ','+cast( mstr_Branch.Name_AR
			  as nvarchar(50))
    FROM Inv_Receipt_h h2
	inner join Inv_ReceiptReceipts Rec2 on
		rec2.ParentReceiptID=h.ID
		and
	Rec2.ReceiptID=	h2.id
	inner join mstr_Branch
	on mstr_Branch.id=h2.Branch_ID
  
    FOR XML PATH('')), 1, 1, '') RelBranchNameAr
	
        INTO #Context
        FROM dbo.Inv_Receipt_h H
		 inner join mstr_Branch Mbr
		 on Mbr.id=h.Branch_ID
             LEFT JOIN Inv_Receipt_d D
             ON H.ID = D.Parent_ID
			 left join Inv_Store st on 
			 st.id=d.Store_ID
             LEFT JOIN Inv_Items I
             ON I.Id = D.Item_ID
             LEFT JOIN Inv_Store Inv_S
             ON D.Store_ID = Inv_S.ID
             LEFT JOIN Inv_Unit INV_U
             ON D.Unit_ID = INV_U.ID
             LEFT JOIN AV_INV_TransactionDetails_nokit AV_INV_T
             ON AV_INV_T.ID = D.ID
                AND AV_INV_T.Parent_ID = H.ID
        WHERE H.Code = 82
              AND (@SubsidaryID IS NULL
                   OR H.SubsidiaryID = @SubsidaryID)
              AND (@StoreId IS NULL
                   OR D.Store_ID = @StoreId)
              AND (@FromDate IS NULL
                   OR CAST(H.Entry_Date AS DATE) >= @FromDate)
              AND (@ToDate IS NULL
                   OR CAST(H.Entry_Date AS DATE) <= @ToDate)
              AND (@ItemCategoryID IS NULL
                   OR D.Item_ID IN
        (
         SELECT Inv_I_C.Item_ID
         FROM Inv_Items_Categories Inv_I_C
         WHERE Inv_I_C.ItemCategory_ID = @ItemCategoryID
        ))

        SELECT H_ID
		     ,ISNULL((select Sum(Inv_Receipt_d.Qty*Inv_Receipt_d.Price) from Inv_Receipt_d where Inv_Receipt_d.Parent_ID=H_ID),0) as componentsCost
             , D_ID
             , D_Item_ID
             , 'H' Flag
             , D_FinishedProductID
             , H_Entry_No
             , H_Entry_Date
             , Inv_S_Code
             , I_Code
             , I_Name
             , I_Name_ar
             , D_Conv
             , INV_U_Name
             , INV_U_Name_AR
             , D_Qty
             , D_AvgCost
             , D_Total
			 ,ProductionUnitExpense
			 ,ProductionQtyExpense
			,Entry_Date ,
			  BranchName,BranchNameAr,
			  Final_conv,
			 
			 (select sum(Inv_Receipt_d.Qty*Inv_Receipt_d.Price)
			 
			  from Inv_Receipt_d
			where Inv_Receipt_d.Parent_ID=h_id and
			Inv_Receipt_d.FinishedProductID=D_Item_ID
			 
			)
		 as CalcCost
			  ,RelEntryNo,RelBranchName,RelBranchNameAr
			 ,StoreNameAr,StoreNameEn
        INTO #Details
        FROM #Context
        WHERE(D_FinishedProductID IS NULL)

        SELECT H_ID
		   ,ISNULL((select Sum(Inv_Receipt_d.Qty*Inv_Receipt_d.Price) from Inv_Receipt_d where Inv_Receipt_d.Parent_ID=H_ID),0) as componentsCost
             , D_ID
             , D_FinishedProductID
             , 'D'          Flag
             , D_Item_ID
             , H_Entry_No   H_Entry_No
             , H_Entry_Date H_Entry_Date
             , Inv_S_Code   Inv_S_Code
             , I_Code
             , I_Name
             , I_Name_ar
             , D_Conv
             , INV_U_Name
             , INV_U_Name_AR
             , D_Qty
             , D_AvgCost
             , D_Total
			 ,ProductionUnitExpense
			 ,ProductionQtyExpense
			,Entry_Date  ,BranchName,BranchNameAr,
			 
			  Final_conv,
			  0 as CalcCost,  RelEntryNo,RelBranchName,RelBranchNameAr
			  ,StoreNameAr,StoreNameEn
			
        INTO #ShowComponents
        FROM #Context
        WHERE(@FilterType = 'ShowComponents'
              AND D_FinishedProductID IS NOT NULL)

        SELECT *,
		  (select top 1 sum(AvgCost * Qty) from Inv_Receipt_d where Parent_ID =  H_ID and FinishedProductID is not null) as itemCost
        FROM
        (
         SELECT *
         FROM #Details
         UNION ALL
         SELECT *
         FROM #ShowComponents
        ) Final
        WHERE(@ItemID IS NULL
              OR Final.D_Item_ID = @ItemID)
        ORDER BY Inv_S_Code
               , H_Entry_Date
               , H_Entry_No
               , H_ID
               , D_Item_ID
               , D_FinishedProductID
    END 
GO
/****** Object:  StoredProcedure [dbo].[Reports_Inv_Production_GroupBy]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Reports_Inv_Production_GroupBy] @SubsidaryID    INT          = NULL
                                         , @StoreId        INT          = NULL
                                         , @FromDate       DATE         =NULL
                                         , @ToDate         DATE         = NULL
                                         , @ItemCategoryID INT          = NULL
                                         , @ItemID         INT          = NULL
                                         , @FilterType     NVARCHAR(50) = 'ShowComponents'--'ShowComponents'--'ShowComponents'
										 ,@HideExpense     INT          =NULL

AS
    BEGIN

        SELECT H.ID                         H_ID
             , D.ID                         D_ID
             , D.Item_ID                    D_Item_ID
             , D.FinishedProductID          D_FinishedProductID
			 ,D.ProductionQtyExpense        ProductionQtyExpense
             , H.Entry_No                   H_Entry_No
             , H.Entry_Date                 H_Entry_Date
             , Inv_S.Code                   Inv_S_Code
             , I.Code                       I_Code
             , I.Name                       I_Name
             , I.Name_ar                    I_Name_ar
             , D.Conv                       D_Conv
             , INV_U.Name                   INV_U_Name
             , INV_U.Name_AR                INV_U_Name_AR
             , ISNULL(D.Qty , 0)            D_Qty
             , ISNULL(AV_INV_T.AvgCost , 0) D_AvgCost
			 ,D.Price                       D_Price
             --, ISNULL(D.Total , 0)          D_Total
			 , ISNULL(D.Qty , 0) * ISNULL(AV_INV_T.AvgCost , 0) D_Total
			 ,d.Final_conv
        INTO #Context
        FROM dbo.Inv_Receipt_h H
             LEFT JOIN Inv_Receipt_d D
             ON H.ID = D.Parent_ID
             LEFT JOIN Inv_Items I
             ON I.Id = D.Item_ID
             LEFT JOIN Inv_Store Inv_S
             ON D.Store_ID = Inv_S.ID
             LEFT JOIN Inv_Unit INV_U
             ON D.Unit_ID = INV_U.ID
             LEFT JOIN AV_INV_TransactionDetails AV_INV_T
             ON AV_INV_T.ID = D.ID
                AND AV_INV_T.Parent_ID = H.ID
        WHERE H.Code = 82
              AND (@SubsidaryID IS NULL
                   OR H.SubsidiaryID = @SubsidaryID)
              AND (@StoreId IS NULL
                   OR D.Store_ID = @StoreId)
              AND (@FromDate IS NULL
                   OR CAST(H.Entry_Date AS DATE) >= @FromDate)
              AND (@ToDate IS NULL
                   OR CAST(H.Entry_Date AS DATE) <= @ToDate)
              AND (@ItemCategoryID IS NULL
                   OR D.Item_ID IN
        (
         SELECT Inv_I_C.Item_ID
         FROM Inv_Items_Categories Inv_I_C
         WHERE Inv_I_C.ItemCategory_ID = @ItemCategoryID
        ))

        SELECT(CAST(I_Code AS NVARCHAR(50)) + ' ' + CAST(I_Name AS NVARCHAR(50)) + ' ' + CAST(I_Name_ar AS NVARCHAR(50)) + ' ' + CAST(D_Conv AS NVARCHAR(50)) + ' ' + CAST(INV_U_Name AS NVARCHAR(50)) + ' ' + CAST(INV_U_Name_AR AS NVARCHAR(50))) Sort
            , D_Item_ID
            , D_FinishedProductID
			
			,SUM(ProductionQtyExpense) as ProductionQtyExpense
            , 'H'                                                                                                                                                                                                                                   Flag
            , Inv_S_Code
            , I_Code
            , I_Name
            , I_Name_ar
            , D_Conv
            , INV_U_Name
            , INV_U_Name_AR
            , SUM(D_Qty) AS                                                                                                                                                                                                                         D_Qty
            , SUM(D_Qty * D_AvgCost)              D_AvgCost
		    ,Final_conv
			,SUM(D_Total) AS D_Total

	        ,(select sum(Inv_Receipt_d.Qty*Inv_Receipt_d.Price) 			 
			from Inv_Receipt_d
			where Inv_Receipt_d.Parent_ID=h_id and
			 Inv_Receipt_d.FinishedProductID=D_Item_ID
			 
			)as CalcCost
        INTO #Details
        FROM #Context
        WHERE(D_FinishedProductID IS NULL)
        GROUP BY D_Item_ID
                 , D_FinishedProductID
                 , Inv_S_Code
                 , I_Code
                 , I_Name
                 , I_Name_ar
                 , D_Conv
                 , INV_U_Name
                 , INV_U_Name_AR
			     ,Final_conv
			     ,H_ID


			   -------------------------------------
			   select Sort
			         ,D_Item_ID
					 ,D_FinishedProductID
					 ,Sum(ProductionQtyExpense)as ProductionQtyExpense
			         ,Flag
					 ,Inv_S_Code
					 ,I_Code
					 ,I_Name
					 ,I_Name_ar
					 ,D_Conv
					 ,INV_U_Name
					 ,INV_U_Name_AR
					 ,Sum(D_Qty) as D_Qty
					 ,sum(D_AvgCost) as D_AvgCost
					 ,Final_conv
					 ,Sum(D_Total) as D_Total
					 ,Sum(CalcCost) as CalcCost
			   
			   into #D
			   from #Details
			   group by Sort
			            ,Flag
			            ,D_Item_ID
						, D_FinishedProductID
						, Inv_S_Code
						, I_Code
						, I_Name
						, I_Name_ar
						, D_Conv
						, INV_U_Name
						, INV_U_Name_AR
						,Final_conv
			   -------------------------------------

        SELECT D_FinishedProductID    Parent_Item_ID
		     ,SUM(ProductionQtyExpense) as ProductionQtyExpense
             , D_Item_ID              D_Item_ID
             , 'D'                    Flag
             , Inv_S_Code             Inv_S_Code
             , I_Code
             , I_Name
             , I_Name_ar
             , D_Conv
             , INV_U_Name
             , INV_U_Name_AR
             , SUM(D_Qty) AS          D_Qty
             , SUM(D_Qty * D_AvgCost) D_AvgCost
			 ,Final_conv
			 ,SUM(D_Total)   as D_Total
			 ,0 as CalcCost
        INTO #ShowComponents
        FROM #Context
        WHERE(@FilterType = 'ShowComponents'
              AND D_FinishedProductID IS NOT NULL)
        GROUP BY D_FinishedProductID
               , D_Item_ID
               , Inv_S_Code
               , I_Code
               , I_Name
               , I_Name_ar
               , D_Conv
               , INV_U_Name
               , INV_U_Name_AR
			   ,Final_conv
			 
        SELECT D.Sort
             , S.*
        INTO #Get_SortAble_Components
        FROM #ShowComponents S
                JOIN #D D
             ON D.D_Item_ID = S.Parent_Item_ID
			 AND D.Inv_S_Code = S.Inv_S_Code
 

  --       SELECT *
  --      FROM #Details
  --      WHERE #Details.D_Item_ID = 3287
 
  --      SELECT *
  --      FROM #ShowComponents
  --      WHERE #ShowComponents.Parent_Item_ID = 3287


  --      SELECT *
  --      FROM #Get_SortAble_Components
  --      WHERE #Get_SortAble_Components.Parent_Item_ID = 3287

		--Return

        SELECT *
        FROM
        (
         SELECT *
         FROM #D
         UNION ALL
         SELECT *
         FROM #Get_SortAble_Components
        ) Final
        WHERE(@ItemId IS NULL
              OR Final.D_Item_ID = @ItemId)
        ORDER BY  Inv_S_Code
               , D_Item_ID
			   ,Sort
               , CASE
                     WHEN FLAG = 'H'
                     THEN 1
                     ELSE 2
                 END
    END
GO
/****** Object:  StoredProcedure [dbo].[Reports_Inv_purchase_Return_Group_By_Invoice_Details]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Reports_Inv_purchase_Return_Group_By_Invoice_Details] 
@FromDate DATE = '2010-01-01'
, @ToDate DATE  = '2020-01-01'
, @BrachID INT = NULL 
, @FromInvoiceNumber INT = NULL
, @ToInvoiceNumber INT = NULL
, @TransactionType NVARCHAR(MAX) = NULL
, @ItemCategoryID NVARCHAR(MAX) = NULL
, @SubsidaryID INT = NULL
, @ItemId INT = NULL
, @Item_vendor INT = NULL
, @SalesManId INT = NULL 
, @FromTime TIME = NULL
, @ToTime TIME = NULL

, @Payment_Type INT = NULL
, @User_Role_Sale INT = NULL 
,@userId int =null
, @TransactionType2 INT = NULL
, @StatusId INT = NULL
AS
BEGIN
	IF OBJECT_ID('#ERPstatusTemp', 'U') IS NOT NULL 
      DROP TABLE #ERPstatusTemp; 
		CREATE TABLE #ERPstatusTemp

	(
	ID int NOT NULL,
	StatusName nvarchar(200),
	StatusName_AR nvarchar(200)
	)
	insert into #ERPstatusTemp
	values (1,N'Draft',N'قيد الانتظار"' )
	insert into #ERPstatusTemp
	values (2,N'Open',N'مفتوح')
	insert into #ERPstatusTemp
	values (3,N'Disapproved',N'مرفوض')
		insert into #ERPstatusTemp
	values (4,N'Received',N'تم الاستلام')
		insert into #ERPstatusTemp
	values (5,N'Invoiced',N'فاتورة')
		insert into #ERPstatusTemp
	values (6,N'Close',N'مغلق')

   Declare @transStr nvarchar(max)=NULL;
    IF @TransactionType2 IS NULL
	BEGIN
	SET @transStr='1,2';
	SET @StatusId=NULL;
	END
	ELSE
	BEGIN
	SET @transStr=CONVERT(nvarchar(max),@TransactionType2);
	END
	--,@TimeFlag Int,@DateFlag Int ,@DateTimeFlage Int
	--IF @FromTime IS Null Set @TimeFlag = 0 Else Set @TimeFlag = 1 
	--IF @FromDate IS Null Set @DateFlag = 0 
	--Else 
	--Begin
	--	Set @TimeFlag = 0 
	--	Set @DateFlag = 1 
	--	SET @FDateTime = CAST   ( CONVERT(Varchar(10), @FromDate, 112) + '00:00:00'   AS DateTime)
	--	SET @TDateTime = CAST   ( CONVERT(Varchar(10), @ToDate, 112) + '23:59:00'   AS DateTime)
		 
	--END
	--IF @FromTime IS Null  and @FromDate IS Null Set @DateTimeFlage = 0 
	--Else IF @FromTime IS Not Null  and @FromDate IS Not  Null 
	--Begin
	--	Set @TimeFlag = 0 
	--	 SET @FDateTime = CAST   (  CONVERT(Varchar(10), @FromDate, 112) + ' ' + CONVERT(Varchar(8), @FromTime) AS DateTime)
	--	 SET @TDateTime = CAST   (  CONVERT(Varchar(10), @ToDate, 112) + ' ' + CONVERT(Varchar(8), @ToTime) AS DateTime)
	--END

	
    --IF @FromTime   IS   NULL
    --    SET @FromTime = '00:00:00';
    --IF @ToTime IS   NULL
    --    SET @ToTime = '23:59:59';

    --IF EXISTS
    --    (
    --        SELECT Split.Item
    --        FROM dbo.Split(@TransactionType, ',')
    --        WHERE Item = -1
    --    )
    --    SET @TransactionType = NULL

    --IF EXISTS
    --    (
    --        SELECT *
    --        FROM dbo.Split(@ItemCategoryID, ',')
    --        WHERE Item = -1
    --    )
    --    SET @ItemCategoryID = NULL

    SELECT H.ID
         , H.Entry_Date                                             AS [Date]
         , H.Entry_No                                               AS [Entry_No]
		-- ,D.Qty                       as Qty
		 ,D.IssueQty      as IssueQty
         , CASE
               WHEN H.Vendor_ID IS NULL
                   THEN ''
               ELSE GL_Accounts.Code
        END                                                         AS VendorNo

	 
         , CASE
                WHEN H.Vendor_ID IS NULL
                   THEN ''
               ELSE GL_Accounts.Name
        END                                                         AS VendorName
         , CASE
               WHEN H.Vendor_ID IS NULL
                   THEN ''
               ELSE GL_Accounts.Name_Ar
        END                                                         AS vENDORrName_Ar
         , Security_Users.Name                                      AS [S.Name]
         , Security_Users.Name_Ar                                   AS [S.NameAr]
         , Inv_Store.Code                                           AS StoreCode
		 ,Inv_Store.Name                                            AS[StoreName]
		 ,Inv_Store.Name_AR											AS[StoreNameAR]
         , Inv_Items.Code                                           AS [Item Code]
         , Inv_Items.Name                                           AS [Item Name]
		 , H.Status_ID                                           AS [Status_ID]
		 ,(select top 1 Inv_Items_Units.BarCode from Inv_Items_Units where Inv_Items_Units.Item_ID=D.Item_ID) AS[Barcode]
	 , (CASE 
	   WHEN @transStr='11'
	   THEN (select top 1 INVS.StatusName_AR from #ERPstatusTemp INVS where INVS.ID =H.PurchaseOrderStatusId) 
	   WHEN @transStr='12'
	   THEN (select top 1 INVS.StatusName_AR from #ERPstatusTemp INVS where INVS.ID =H.PurchaseRequestStatusId) 
	   ELSE ''
	   END )  as StatusName_Ar
	   ,(CASE 
	   WHEN @transStr='11'
	   THEN (select top 1 INVS.StatusName from #ERPstatusTemp INVS where INVS.ID =H.PurchaseOrderStatusId) 
	   WHEN @transStr='12'
	   THEN (select top 1 INVS.StatusName from #ERPstatusTemp INVS where INVS.ID =H.PurchaseRequestStatusId) 
	   ELSE ''
	   END )   as StatusName
         , Inv_Items.Name_AR                                        AS [Item Name_Ar]
         , ISNULL(D.Conv, 0)                                        AS pack
         , ISNULL(D.Qty, 0)                                         AS QTy
         , Inv_Unit.Name                                               Inv_Unit_Name
         , Inv_Unit.Name_Ar                                            Inv_Unit_Name_AR
         , ISNULL(D.Price, 0) / ISNULL(H.Currency_Rate, 1)          AS Price
         , ISNULL(D.Discount_Value, 0) / ISNULL(H.Currency_Rate, 1) AS Disc
         , ISNULL(D.Discount_Percent, 0)                            AS [Tot.Disc]
         , ISNULL(H.Discount_Value, 0)                              AS [Discount_Value]
         , ISNULL(H.DeliveryFees, 0)                                AS [H.DeliveryFees]
		--   ,H.               CustomerActualDeliverDate              
         , ISNULL(D.Total, 0)                                       AS Total
         , D.AvgCost * d.Final_conv                           AS Cost
      --   , D.Total - (D.Qty * AV_TransactionDetails.AvgCost)        AS Profit
         , CASE WHEN H.CODE = 1 THEN 'PURCHASE'   ELSE 'Return'   end                                  C_Name
         ,  CASE WHEN H.CODE = 2 THEN  N'مردود'   ELSE  N'مشتريات' end  C_Name_Ar
         , h.Code                                                      C_Code
,ISNULL(H.Currency_Rate, 1)		 Currency_Rate,
mstr_Currencies.Name CUR_NAMER
,mstr_Currencies.Name_AR CUR_NAMER_AR
    FROM Inv_Receipt_h H 
             LEFT JOIN GL_Accounts
                       ON GL_Accounts.AccountID = H.Vendor_ID
           
             LEFT JOIN mstr_Currencies
                       ON mstr_Currencies.ID = H.Currency_ID
           
		   LEFT JOIN Security_Users
                       ON Security_Users.Id = H.Empoyee_ID
            
             LEFT JOIN Inv_Receipt_D D
                       ON D.Parent_ID = H.ID
             LEFT JOIN Inv_Unit
                       ON D.Unit_ID = Inv_Unit.ID
             LEFT JOIN Inv_Items
                       ON Inv_Items.ID = D.Item_ID
		     
             LEFT JOIN Inv_Store
                       ON Inv_Store.ID = D.Store_ID 
    WHERE 
	--H.Code IN(1,2)  
	  H.Code IN (
	  SELECT item
               FROM dbo.Split(@transStr, ',')
	  )
		AND (@StatusId IS NULL
		OR
		  H.PurchaseOrderStatusId=@StatusId
		OR
		H.PurchaseRequestStatusId=@StatusId
		)
      AND (ISNULL(H.Is_Canceled, 0) <> 1)
      AND (ISNULL(H.IsHolded, 0) <> 1)
      AND (@User_Role_Sale IS NULL
        OR D.SalesManId IN (@User_Role_Sale))
      AND D.Item_ID IS NOT NULL
      AND D.FinishedProductID IS NULL
      AND (@FromDate IS NULL
        OR CAST(H.Entry_Date AS DATETIME) >= CAST(@FromDate AS DATETIME))-- + CAST(@FromTime AS DATETIME))
      AND (@ToDate IS NULL
        OR CAST(H.Entry_Date AS DATETIME) <= CAST( (CONVERT(Varchar(10), @ToDate, 112) +' '+ '23:59:00') AS DATETIME) )--+ CAST(@ToTime AS DATETIME))
	 -- AND ((@TimeFlag = 1 AND CAST(H.Entry_Date AS time) >= @FromTime AND CAST(H.Entry_Date AS time) <= @ToTime) 
		--or (@DateFlag = 1 AND      H.Entry_Date          >= @FDateTime AND  H.Entry_Date  <= @TDateTime)  
		--or (@TimeFlag = 0 AND @DateFlag =0  )  )
      AND (@SubsidaryID IS NULL
        OR H.SubsidiaryID = @SubsidaryID)
      AND (@ItemId IS NULL
        OR D.Item_ID = @ItemId)
      AND (@Item_vendor IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
                        left join Inv_Items on Inv_Receipt_d.Item_ID = Inv_Items.ID
                        left join Inv_Items_Vendors on Inv_Items.ID = Inv_Items_Vendors.ItemID
               WHERE (@item_vendor is null or Inv_Items_Vendors.VendorID = @item_vendor)
           ))
      AND (@SalesManId IS NULL
        OR H.Empoyee_ID = @SalesManId)
      AND (@BrachID IS NULL
        OR H.Branch_ID IN (@BrachID))
		--and (@BrachID IS NULL or H.Branch_ID in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId))
      AND (@FromInvoiceNumber IS NULL
        OR H.Entry_No >= @FromInvoiceNumber)
      AND (@ToInvoiceNumber IS NULL
        OR H.Entry_No <= @ToInvoiceNumber)
      --AND (@TransactionType IS NULL OR  @TransactionType ='-1'
      --  OR H.Code IN
      --     (
      --         SELECT item
      --         FROM dbo.Split(@TransactionType, ',')
      --     ))
      --AND (@ItemCategoryID IS NULL
      --  OR H.ID IN
      --     (
      --         SELECT Parent_ID
      --         FROM Inv_Receipt_d
      --                  LEFT JOIN Inv_Items_Categories
      --                            ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
      --         WHERE Inv_Receipt_d.Parent_ID = H.ID
      --           AND Inv_Items_Categories.ItemCategory_ID IN
      --               (
      --                   SELECT item
      --                   FROM dbo.Split(@ItemCategoryID, ',')
      --               )
      --     ))
      AND (@FromTime IS NULL
        OR CAST(H.Entry_Date AS TIME) >= @FromTime)
      AND (@ToTime IS NULL
        OR CAST(H.Entry_Date AS TIME) <= @ToTime)
      --AND (@FromCustomerActualDeliverDate IS NULL
      --  OR CAST(H.CustomerActualDeliverDate AS DATE) >= @FromCustomerActualDeliverDate)
      --AND (@ToCustomerActualDeliverDate IS NULL
      --  OR CAST(H.CustomerActualDeliverDate AS DATE) <= @ToCustomerActualDeliverDate)
      --AND (@CustomerStatusID IS NULL
      --  OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
      AND (@Payment_Type IS NULL
        OR H.Payment_Type = @Payment_Type)
    ORDER BY H.Entry_Date
END 
GO
/****** Object:  StoredProcedure [dbo].[Reports_Inv_Sales_Batch_Orders]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 

CREATE PROC [dbo].[Reports_Inv_Sales_Batch_Orders] @SubsidaryID INT = NULL
, @BrachID INT = NULL
, @FromDate DATE = NULL
, @ToDate DATE = NULL
, @Status INT = NULL --SELECT * FROM  Inv_WorkOrderStatus
, @CustomerID INT = NULL
, @ItemId INT = NULL
AS
BEGIN

    SELECT
         -- Inv_Receipt_h H
        H.ID                                                     H___ID
         , H.Entry_No                                            H__Entry___No
         , H.Entry_Date                                          H__Entry___Date
         , 'BatchOrder/AddEdit?Id=' + cast(H.ID as nvarchar(10)) H__Path
         --GL_Accounts
         , GL_Accounts.Name                                      GL__Accounts___Name
         , GL_Accounts.Name_Ar                                   GL__Accounts___Name_Ar
         --Inv_WorkOrderStatus
         , Inv_WorkOrderStatus.ID                                Inv_WorkOrderStatus___ID
         , Inv_WorkOrderStatus.Sort                              Inv_WorkOrderStatus___Sort
         , Inv_WorkOrderStatus.Name                              Inv_WorkOrderStatus___Name
         , Inv_WorkOrderStatus.Name_Ar                           Inv_WorkOrderStatus___Name_Ar
         --Inv_Receipt_d D
         , D.ID                                                  D___ID
         , D.Qty                                                 D___Qty
         , D.Price                                               D___Price
         , D.Discount_Value                                      D___Discount_Value
         , D.Total                                               D___Total
         , ISNULL(D.Total, 0) / ISNULL(D.Qty, 0)                 D___Price_Discount
         --Inv_Items
         , Inv_Items.Code                                        Inv_Items___Code
         , Inv_Items.Name                                        Inv_Items___Name
         , Inv_Items.Name_Ar                                     Inv_Items___Name_Ar
		  ,STUFF((SELECT    ','+cast( h2.Entry_No
			  as nvarchar(10))
    FROM Inv_Receipt_h h2
	inner join Inv_ReceiptReceipts Rec2 on
		rec2.ParentReceiptID=h.ID
		and
	Rec2.ReceiptID=	h2.id
  
    FOR XML PATH('')), 1, 1, '') RelEntryNo
	 ,STUFF((SELECT distinct   ','+cast( mstr_Branch.Name
			  as nvarchar(10))
    FROM Inv_Receipt_h h2
	inner join Inv_ReceiptReceipts Rec2 on
		rec2.ParentReceiptID=h.ID
		and
	Rec2.ReceiptID=	h2.id
	inner join mstr_Branch
	on mstr_Branch.id=h2.Branch_ID
  
    FOR XML PATH('')), 1, 1, '') RelBranchName
	  ,STUFF((SELECT distinct   ','+cast( mstr_Branch.Name_AR
			  as nvarchar(50))
    FROM Inv_Receipt_h h2
	inner join Inv_ReceiptReceipts Rec2 on
		rec2.ParentReceiptID=h.ID
		and
	Rec2.ReceiptID=	h2.id
	inner join mstr_Branch
	on mstr_Branch.id=h2.Branch_ID
  
    FOR XML PATH('')), 1, 1, '') RelBranchNameAr
	 
      ,STUFF((SELECT distinct   ','+cast( Inv_Transaction_Codes.Name_AR
			  as nvarchar(50))
    FROM Inv_Receipt_h h2
	inner join Inv_ReceiptReceipts Rec2 on
		rec2.ParentReceiptID=h.ID
		and
	Rec2.ReceiptID=	h2.id
	inner join Inv_Transaction_Codes
	on Inv_Transaction_Codes.Code=h2.Code
  
    FOR XML PATH('')), 1, 1, '') RelTransNameAr
	 ,STUFF((SELECT distinct   ','+cast( Inv_Transaction_Codes.Name
			  as nvarchar(50))
    FROM Inv_Receipt_h h2
	inner join Inv_ReceiptReceipts Rec2 on
		rec2.ParentReceiptID=h.ID
		and
	Rec2.ReceiptID=	h2.id
	inner join Inv_Transaction_Codes
	on Inv_Transaction_Codes.Code=h2.Transaction_Code
  
    FOR XML PATH('')), 1, 1, '') RelTransNameEn
        
		 
		 
    FROM Inv_Receipt_h H
         
		left join mstr_Branch b
		on b.ID=h.Branch_ID 
	 
		     LEFT JOIN Inv_CashCustomer
                       ON Inv_CashCustomer.id = H.CashCustomerID
             LEFT JOIN GL_Accounts
                       ON GL_Accounts.AccountID = H.Vendor_ID
             LEFT JOIN Inv_WorkOrderStatus
                       ON Inv_WorkOrderStatus.id = H.WOstatusID
             LEFT JOIN Inv_Receipt_d D
                       ON H.ID = D.Parent_ID
             LEFT JOIN Inv_Items
                       ON Inv_Items.ID = D.Item_ID
    WHERE H.Code IN (84)
      AND (ISNULL(H.Is_Canceled, 0) <> 1)
      AND (ISNULL(H.IsHolded, 0) <> 1)
      AND D.Item_ID IS NOT NULL
      AND D.FinishedProductID IS NULL
      AND (@SubsidaryID IS NULL
        OR H.SubsidiaryID = @SubsidaryID)
      AND (@BrachID IS NULL
        OR H.Branch_ID IN (@BrachID))
      AND (@FromDate IS NULL
        OR CAST(H.Entry_Date AS DATE) >= @FromDate)
      AND (@ToDate IS NULL
        OR CAST(H.Entry_Date AS DATE) <= @ToDate)
      AND (@Status IS NULL
        OR H.WOstatusID = @Status)
      AND (@CustomerID IS NULL
        OR H.Vendor_ID = @CustomerID)
      AND (@ItemId IS NULL
        OR D.Item_ID = @ItemId)
    ORDER BY H.ID
END
GO
/****** Object:  StoredProcedure [dbo].[Reports_Inv_Sales_Return_Group_By_Invoice_Details]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Reports_Inv_Sales_Return_Group_By_Invoice_Details] @FromDate DATE = '2015-08-05'
, @ToDate DATE =  '2019-12-31'
, @BrachID INT = null
, @CustomerID INT = NULL
, @CashCustomerID INT = NULL
, @CustomerCatID INT = NULL
, @FromInvoiceNumber INT = NULL
, @ToInvoiceNumber INT = NULL
, @TransactionType NVARCHAR(MAX) = null
, @ItemCategoryID NVARCHAR(MAX) = NULL
, @ItemId INT = NULL
, @Item_vendor INT = NULL
, @SalesManId INT = null
, @SubsidaryID INT = 1
, @FromCustomerActualDeliverDate DATE = NULL
, @ToCustomerActualDeliverDate DATE = NULL
, @FromTime TIME = NULL
, @ToTime TIME = NULL
, @CustomerStatusID INT = NULL
, @Payment_Type INT = NULL
, @User_Role_Sale INT = NULL
,@userId int =13
,@CashDrawer int =NULL
AS
--select *  from Inv_Receipt_h where  entry_no = '463'  cast(Entry_Date as date) >='2020-03-23' and cast(Entry_Date as date) < '2020-03-24'
BEGIN
 
   
  IF OBJECT_ID('tbl') IS NOT NULL
begin
        drop table tbl
end
    if @FromTime is null set @FromTime = ' 00:00:00';
    if @ToTime is null set @ToTime = ' 23:59:59';

    IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@TransactionType, ',')
            WHERE Item = -1
        )
        SET @TransactionType = NULL

    IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@ItemCategoryID, ',')
            WHERE Item = -1
        )
        SET @ItemCategoryID = NULL
		
   select * Into #tbl from (
    SELECT   H.ID
         , H.Entry_Date                                             AS [Date]
         , H.Entry_No                                               AS [No.]
		 , (select top 1 cTb.Name_AR from dbo.mstr_Costcenter cTb where cTb.ID =H.CostCenterID) as CostCenterNameAr
		 , (select top 1 cTb.Name from dbo.mstr_Costcenter cTb where cTb.ID =H.CostCenterID) as CostCenterName
         , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN ''
               ELSE GL_Accounts.Code
        END                                                         AS CustomerNo
         , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN Inv_CashCustomer.Name
               ELSE GL_Accounts.Name
        END                                                         AS CustomerName
         , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN Inv_CashCustomer.Name_Ar
               ELSE GL_Accounts.Name_Ar
        END                                                         AS CustomerName_Ar
         , Security_Users.Name                                      AS [S.Name]
         , Security_Users.Name_Ar                                   AS [S.NameAr]
         , Inv_Store.Code                                           AS StoreCode
         , Inv_Items.Code                                           AS [Item Code]
         , Inv_Items.Name                                           AS [Item Name]
         , Inv_Items.Name_AR                                        AS [Item Name_Ar]
         , ISNULL(D.Conv, 0)                                        AS pack
         , ISNULL(D.Qty, 0)                                         AS QTy
         , Inv_Unit.Name                                               Inv_Unit_Name
         , Inv_Unit.Name_Ar                                            Inv_Unit_Name_AR
         , ISNULL(D.Price, 0) / ISNULL(H.Currency_Rate, 1)          AS Price
         , (ISNULL(D.Discount_Value, 0) / ISNULL(H.Currency_Rate, 1))  +  (ISNULL(D.H_Discount_Value, 0) / ISNULL(H.Currency_Rate, 1))   AS Disc
         , case when D.H_Discount_Value >0 and d.price >0 and d.qty > 0 then (((ISNULL(D.Discount_Value, 0) / ISNULL(H.Currency_Rate, 1))  +  (ISNULL(D.H_Discount_Value, 0) / ISNULL(H.Currency_Rate, 1))) / (d.qty * d.Price)  )    * 100  else   (ISNULL(D.Discount_Percent, 0) )  end                AS [Tot.Disc]
         , ISNULL(H.Discount_Value, 0)                              AS [Discount_Value]
         , ISNULL(H.DeliveryFees, 0)                                AS [H.DeliveryFees]
		   ,H.               CustomerActualDeliverDate              
         , ISNULL(D.Total, 0)                                          AS Total
         , d.AvgCost * d.Final_conv                      AS Cost
		 , D_H_Discount_Value     = CASE
                                            WHEN H.CODE IN (51, 52)
                                                THEN ISNULL( D.H_Discount_Value,0) / ISNULL(H.Currency_Rate, 1)
                                            ELSE ISNULL( D.H_Discount_Value,0) / ISNULL(H.Currency_Rate, 1)
          END
        -- ,  (ISNULL(D.Total, 0)     -   ISNULL(D.H_Discount_Value, 0)   )   - ( D.AvgCost *  D.QTY*D.Final_conv )    AS Profit
		    , CASE
               WHEN C.Code =53
                   THEN ((ISNULL(D.Total, 0)     -   ISNULL(D.H_Discount_Value, 0)- ( D.AvgCost *  D.QTY*D.Final_conv ))*-1)
				   WHEN C.Code =54
                   THEN ((ISNULL(D.Total, 0)     -   ISNULL(D.H_Discount_Value, 0)- ( D.AvgCost *  D.QTY*D.Final_conv ))*-1)
               ELSE ((ISNULL(D.Total, 0)     -   ISNULL(D.H_Discount_Value, 0)   )   - ( D.AvgCost *  D.QTY*D.Final_conv ))
        END                                                         AS Profit

         , C.Name                                                      C_Name
         , C.Name_Ar                                                   C_Name_Ar
         , C.Code                                                      C_Code
	
    FROM Inv_Receipt_d D
	    LEFT JOIN Inv_Unit
                       ON D.Unit_ID = Inv_Unit.ID
             LEFT JOIN Inv_Items
                       ON Inv_Items.ID = D.Item_ID
             LEFT JOIN Inv_Store
                       ON Inv_Store.ID = D.Store_ID,Inv_Receipt_H H
             LEFT JOIN
         Inv_CashCustomer ON Inv_CashCustomer.id = H.CashCustomerID
             LEFT JOIN
         GL_Accounts ON GL_Accounts.AccountID = H.Vendor_ID
             LEFT JOIN
         Inv_Transaction_Codes C ON H.Code = C.Code
             LEFT JOIN
         Security_Users ON Security_Users.Id = H.Empoyee_ID
             LEFT JOIN
         Inv_PaymentType ON Inv_PaymentType.id = H.Payment_Type
		  
    WHERE D.parent_id =H.ID and H.Code IN (51, 52, 53, 54)
      AND (ISNULL(H.Is_Canceled, 0) <> 1)
      AND (ISNULL(H.IsHolded, 0) <> 1)
      AND (@User_Role_Sale IS NULL
        OR D.Item_ID IN
           (
               SELECT Inv_Receipt_D.Item_ID
               FROM Inv_Receipt_D
               WHERE Inv_Receipt_D.SalesManId = @User_Role_Sale
           ))
      AND EXISTS
        (
            SELECT Parent_ID
            FROM Inv_Receipt_D D
            WHERE D.Parent_ID = H.ID
        )
      AND (@SubsidaryID IS NULL
        OR H.SubsidiaryID = @SubsidaryID)
      AND (@FromDate IS NULL
        OR
           CAST(H.Entry_Date AS DATETIME) >= cast(@FromDate as datetime) + cast(@FromTime as datetime)
        )
      AND (@ToDate IS NULL
        OR
           CAST(H.Entry_Date AS DATETIME) <= cast(@ToDate as datetime) + cast(@ToTime as datetime)
        )
      AND (@ItemId IS NULL
        OR d.Item_ID IN
           (
               SELECT Inv_Receipt_D.Item_ID
               FROM Inv_Receipt_D
               WHERE (@ItemId is null or Inv_Receipt_D.Item_ID = @ItemId)
           ))
	AND (@CashDrawer IS NULL
        OR H.CashDrawerId = @CashDrawer)
      AND (@Item_vendor IS NULL
        OR d.Item_ID IN
           (
               SELECT Inv_Receipt_D.Item_ID
               FROM Inv_Receipt_D
                        left join Inv_Items on Inv_Receipt_d.Item_ID = Inv_Items.ID
                        left join Inv_Items_Vendors on Inv_Items.ID = Inv_Items_Vendors.ItemID
               WHERE ( Inv_Items_Vendors.VendorID = @item_vendor)
           ))

      AND (@SalesManId IS NULL
        OR H.Empoyee_ID = @SalesManId)
      AND (@BrachID IS NULL
        OR H.Branch_ID IN (@BrachID))
		and H.Branch_ID in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId)
      AND (@CustomerID IS NULL
        OR H.Vendor_ID = @CustomerID)
      AND (@CashCustomerID IS NULL
        OR H.CashCustomerID = @CashCustomerID)
      AND (@CustomerCatID IS NULL
        OR Inv_CashCustomer.CategoryID IN (@CustomerCatID)
        OR Gl_Accounts.VendorCategoryID IN (@CustomerCatID))
      AND (@FromInvoiceNumber IS NULL
        OR H.Entry_No >= @FromInvoiceNumber)
      AND (@ToInvoiceNumber IS NULL
        OR H.Entry_No <= @ToInvoiceNumber)
      AND (@TransactionType IS NULL
        OR H.Code IN
           (
               SELECT item
               FROM dbo.Split(@TransactionType, ',')
           ))
      AND (@ItemCategoryID IS NULL
        OR D.Item_ID IN
           (
               SELECT Inv_Receipt_D.Item_ID
               FROM Inv_Receipt_d
                        LEFT JOIN
                    Inv_Items_Categories ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
               WHERE Inv_Receipt_d.Parent_ID = H.ID
                 AND Inv_Items_Categories.ItemCategory_ID IN
                     (
                         SELECT item
                         FROM dbo.Split(@ItemCategoryID, ',')
                     )
           ))
      AND (@FromDate IS not NULL
        OR CAST(Entry_Date AS TIME) >= @FromTime)
      AND (@ToDate IS not NULL
        OR CAST(Entry_Date AS TIME) <= @ToTime)
      AND (@FromCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) >= @FromCustomerActualDeliverDate)
      AND (@ToCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerDeliverDate AS DATE) <= @ToCustomerActualDeliverDate)
      AND (@CustomerStatusID IS NULL
        OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
      AND (@Payment_Type IS NULL
        OR H.Payment_Type = @Payment_Type)
		) as Q;
 -- Select Count(distinct id)   from #tbl
  Select *   from #tbl
END
GO
/****** Object:  StoredProcedure [dbo].[Reports_Inv_Sales_Return_Group_By_Invoice_Details_For_United]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Reports_Inv_Sales_Return_Group_By_Invoice_Details_For_United] 
@FromDate DATE = '2010-01-01'
, @ToDate DATE  = '2020-03-18'
, @BrachID INT = NULL
, @CustomerID INT = NULL
, @CashCustomerID INT = NULL
, @CustomerCatID INT = NULL
, @FromInvoiceNumber INT = NULL
, @ToInvoiceNumber INT = NULL
, @TransactionType NVARCHAR(MAX) = NULL
, @ItemCategoryID NVARCHAR(MAX) = NULL
, @SubsidaryID INT = NULL
, @ItemId INT = NULL
, @Item_vendor INT = NULL
, @SalesManId INT = NULL
, @FromCustomerActualDeliverDate DATE = NULL
, @ToCustomerActualDeliverDate DATE = NULL
, @FromTime TIME = NULL
, @ToTime TIME = NULL
, @CustomerStatusID INT = NULL
, @Payment_Type INT = NULL
, @User_Role_Sale INT = NULL
--,@TimeFlag Int = 0
--,@DateFlag Int =0
--,@DateTimeFlage Int =0
--,@FDateTime DateTime = NULL
--,@TDateTime DateTime= NULL
,@userId int =null
AS
BEGIN

	--,@TimeFlag Int,@DateFlag Int ,@DateTimeFlage Int
	--IF @FromTime IS Null Set @TimeFlag = 0 Else Set @TimeFlag = 1 
	--IF @FromDate IS Null Set @DateFlag = 0 
	--Else 
	--Begin
	--	Set @TimeFlag = 0 
	--	Set @DateFlag = 1 
	--	SET @FDateTime = CAST   ( CONVERT(Varchar(10), @FromDate, 112) + '00:00:00'   AS DateTime)
	--	SET @TDateTime = CAST   ( CONVERT(Varchar(10), @ToDate, 112) + '23:59:00'   AS DateTime)
		 
	--END
	--IF @FromTime IS Null  and @FromDate IS Null Set @DateTimeFlage = 0 
	--Else IF @FromTime IS Not Null  and @FromDate IS Not  Null 
	--Begin
	--	Set @TimeFlag = 0 
	--	 SET @FDateTime = CAST   (  CONVERT(Varchar(10), @FromDate, 112) + ' ' + CONVERT(Varchar(8), @FromTime) AS DateTime)
	--	 SET @TDateTime = CAST   (  CONVERT(Varchar(10), @ToDate, 112) + ' ' + CONVERT(Varchar(8), @ToTime) AS DateTime)
	--END

	
    --IF @FromTime   IS   NULL
    --    SET @FromTime = '00:00:00';
    --IF @ToTime IS   NULL
    --    SET @ToTime = '23:59:59';

    IF EXISTS
        (
            SELECT Split.Item
            FROM dbo.Split(@TransactionType, ',')
            WHERE Item = -1
        )
        SET @TransactionType = NULL

    IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@ItemCategoryID, ',')
            WHERE Item = -1
        )
        SET @ItemCategoryID = NULL

    SELECT H.ID
         , H.Entry_Date                                             AS [Date]
         , H.Entry_No                                               AS [No.]
         , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN ''
               ELSE GL_Accounts.Code
        END                                                         AS CustomerNo
         , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN Inv_CashCustomer.Name
               ELSE GL_Accounts.Name
        END                                                         AS CustomerName
         , CASE
               WHEN GL_Accounts.AccountID IS NULL
                   THEN Inv_CashCustomer.Name_Ar
               ELSE GL_Accounts.Name_Ar
        END                                                         AS CustomerName_Ar
         , Security_Users.Name                                      AS [S.Name]
         , Security_Users.Name_Ar                                   AS [S.NameAr]
         , Inv_Store.Code                                           AS StoreCode
         , Inv_Items.Code                                           AS [Item Code]
         , Inv_Items.Name                                           AS [Item Name]
         , Inv_Items.Name_AR                                        AS [Item Name_Ar]
         , ISNULL(D.Conv, 0)                                        AS pack
         , --ISNULL(D.Qty, 0)                              
		 CASE
         WHEN H.Code = 51 or H.Code =  52 THEN   ISNULL(D.Qty, 0)          
         When  H.Code = 53 or H.Code =  54 THEN   ISNULL(D.Qty, 0) * -1 
		 else 0 end											       AS QTy
         , Inv_Unit.Name                                               Inv_Unit_Name
         , Inv_Unit.Name_Ar                                            Inv_Unit_Name_AR
         , ISNULL(D.Price, 0) / ISNULL(H.Currency_Rate, 1)          AS Price
		 
         , ISNULL(D.Discount_Value, 0) / ISNULL(H.Currency_Rate, 1) AS Disc
         , ISNULL(D.Discount_Percent, 0)                            AS [Tot.Disc]
         , ISNULL(H.Discount_Value, 0)                              AS [Discount_Value]
         , ISNULL(H.DeliveryFees, 0)                                AS [H.DeliveryFees]
		   ,H.               CustomerActualDeliverDate              
         , ISNULL(D.Total, 0)                                       AS Total
         , AV_TransactionDetails.AvgCost                            AS Cost
         , D.Total - (D.Qty * AV_TransactionDetails.AvgCost)        AS Profit
         , C.Name                                                      C_Name
         , C.Name_Ar                                                   C_Name_Ar
         , C.Code                                                      C_Code
		 ,H.Code                                                       H_Code
		 ,CASE
         WHEN H.Code = 53 THEN ISNULL(D.Price, 0) / ISNULL(H.Currency_Rate, 1) * ISNULL(D.Qty, 0) * -1
         WHEN H.Code = 54 THEN ISNULL(D.Price, 0) / ISNULL(H.Currency_Rate, 1) * ISNULL(D.Qty, 0) * -1
         ELSE ISNULL(D.Price, 0) / ISNULL(H.Currency_Rate, 1) * ISNULL(D.Qty, 0)
         END                                                        AS TotalSales
    FROM Inv_Receipt_h H
             LEFT JOIN Inv_CashCustomer
                       ON Inv_CashCustomer.id = H.CashCustomerID
             LEFT JOIN GL_Accounts
                       ON GL_Accounts.AccountID = H.Vendor_ID
             LEFT JOIN Security_Users
                       ON Security_Users.Id = H.Empoyee_ID
             LEFT JOIN Inv_Transaction_Codes C
                       ON H.Code = C.Code
             LEFT JOIN Inv_Receipt_D D
                       ON D.Parent_ID = H.ID
             LEFT JOIN Inv_Unit
                       ON D.Unit_ID = Inv_Unit.ID
             LEFT JOIN Inv_Items
                       ON Inv_Items.ID = D.Item_ID
             LEFT JOIN Inv_Store
                       ON Inv_Store.ID = D.Store_ID
             LEFT JOIN AV_INV_TransactionDetails AV_TransactionDetails
                       ON AV_TransactionDetails.ID = D.ID
                           AND AV_TransactionDetails.Parent_ID = H.ID
    WHERE H.Code IN (51, 52, 53, 54)
      AND (ISNULL(H.Is_Canceled, 0) <> 1)
      AND (ISNULL(H.IsHolded, 0) <> 1)
      AND (@User_Role_Sale IS NULL
        OR D.SalesManId IN (@User_Role_Sale))
      AND D.Item_ID IS NOT NULL
      AND D.FinishedProductID IS NULL
      AND (@FromDate IS NULL
        OR CAST(H.Entry_Date AS DATETIME) >= CAST(@FromDate AS DATETIME))-- + CAST(@FromTime AS DATETIME))
      AND (@ToDate IS NULL
        OR CAST(H.Entry_Date AS DATETIME) <= CAST( (CONVERT(Varchar(10), @ToDate, 112) +' '+ '23:59:00') AS DATETIME) )--+ CAST(@ToTime AS DATETIME))
	 -- AND ((@TimeFlag = 1 AND CAST(H.Entry_Date AS time) >= @FromTime AND CAST(H.Entry_Date AS time) <= @ToTime) 
		--or (@DateFlag = 1 AND      H.Entry_Date          >= @FDateTime AND  H.Entry_Date  <= @TDateTime)  
		--or (@TimeFlag = 0 AND @DateFlag =0  )  )
      AND (@SubsidaryID IS NULL
        OR H.SubsidiaryID = @SubsidaryID)
      AND (@ItemId IS NULL
        OR D.Item_ID = @ItemId)
      AND (@Item_vendor IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_D
                        left join Inv_Items on Inv_Receipt_d.Item_ID = Inv_Items.ID
                        left join Inv_Items_Vendors on Inv_Items.ID = Inv_Items_Vendors.ItemID
               WHERE (@item_vendor is null or Inv_Items_Vendors.VendorID = @item_vendor)
           ))

      AND (@SalesManId IS NULL
        OR H.Empoyee_ID = @SalesManId)
      AND (@BrachID IS NULL
        OR H.Branch_ID IN (@BrachID))
		--and (@BrachID IS NULL or H.Branch_ID in(select UserBranch.BranchID from UserBranch where UserBranch.UserID=@userId))
      AND (@CustomerID IS NULL
        OR H.Vendor_ID = @CustomerID)
      AND (@CashCustomerID IS NULL
        OR H.CashCustomerID = @CashCustomerID)
      AND (@CustomerCatID IS NULL
        OR Inv_CashCustomer.CategoryID IN (@CustomerCatID)
        OR Gl_Accounts.VendorCategoryID IN (@CustomerCatID))
      AND (@FromInvoiceNumber IS NULL
        OR H.Entry_No >= @FromInvoiceNumber)
      AND (@ToInvoiceNumber IS NULL
        OR H.Entry_No <= @ToInvoiceNumber)
      AND (@TransactionType IS NULL
        OR H.Code IN
           (
               SELECT item
               FROM dbo.Split(@TransactionType, ',')
           ))
      AND (@ItemCategoryID IS NULL
        OR H.ID IN
           (
               SELECT Parent_ID
               FROM Inv_Receipt_d
                        LEFT JOIN Inv_Items_Categories
                                  ON Inv_Items_Categories.Item_ID = Inv_Receipt_d.Item_ID
               WHERE Inv_Receipt_d.Parent_ID = H.ID
                 AND Inv_Items_Categories.ItemCategory_ID IN
                     (
                         SELECT item
                         FROM dbo.Split(@ItemCategoryID, ',')
                     )
           ))
      AND (@FromTime IS NULL
        OR CAST(H.Entry_Date AS TIME) >= @FromTime)
      AND (@ToTime IS NULL
        OR CAST(H.Entry_Date AS TIME) <= @ToTime)
      AND (@FromCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerActualDeliverDate AS DATE) >= @FromCustomerActualDeliverDate)
      AND (@ToCustomerActualDeliverDate IS NULL
        OR CAST(H.CustomerActualDeliverDate AS DATE) <= @ToCustomerActualDeliverDate)
      AND (@CustomerStatusID IS NULL
        OR Gl_Accounts.CustomerStatusId = @CustomerStatusID)
      AND (@Payment_Type IS NULL
        OR H.Payment_Type = @Payment_Type)
    ORDER BY CustomerName,[No.]
END 
GO
/****** Object:  StoredProcedure [dbo].[Reports_Inv_Sales_Serial]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Reports_Inv_Sales_Serial] @Serial      INT = NULL
                                   , @SubsidaryID INT = NULL
AS
    BEGIN
        SELECT Inv_Receipt_h.ID
             , Inv_Receipt_h.Entry_Date AS                                                  [Date]
             , Inv_Receipt_h.Entry_No AS                                                    [No.]
             , CASE
                   WHEN GL_Accounts.AccountID IS NULL
                   THEN Inv_CashCustomer.id
                   ELSE GL_Accounts.Code
               END AS                                                                       CustomerNo
             , CASE
                   WHEN GL_Accounts.AccountID IS NULL
                   THEN Inv_CashCustomer.Name
                   ELSE GL_Accounts.Name
               END AS                                                                       CustomerName
             , CASE
                   WHEN GL_Accounts.AccountID IS NULL
                   THEN Inv_CashCustomer.Name_Ar
                   ELSE GL_Accounts.Name_Ar
               END AS                                                                       CustomerName_Ar
             , Security_Users.Name AS                                                       [S.Name]
             , Security_Users.Name_Ar AS                                                    [S.NameAr]
             , Inv_Store.Code AS                                                            StoreCode
             , Inv_Items.Code AS                                                            [Item Code]
             , Inv_Items.Name AS                                                            [Item Name]
             , Inv_Items.Name_AR AS                                                         [Item Name_Ar]
             , Inv_Receipt_D.Conv AS                                                        pack
             , Inv_Receipt_D.Qty AS                                                         QTy
             , Inv_Receipt_D.Price / ISNULL(Inv_Receipt_h.Currency_Rate , 1) AS             Price
             , Inv_Receipt_D.Discount_Value / ISNULL(Inv_Receipt_h.Currency_Rate , 1) AS    Disc
             , Inv_Receipt_D.Discount_Percent AS                                            [Tot.Disc]
               --, Inv_Receipt_h.Discount_Percent As                                   [Tot.Disc]
             , Inv_Receipt_D.Total / ISNULL(Inv_Receipt_h.Currency_Rate , 1) AS             Total
             , AV_TransactionDetails.AvgCost AS                                             Cost
             , Inv_Receipt_D.Total - (Inv_Receipt_D.Qty * AV_TransactionDetails.AvgCost) AS Profit
             , C.Name                                                                       C_Name
             , C.Name_Ar                                                                    C_Name_Ar
             , C.Code                                                                       C_Code
        FROM Inv_Receipt_h
             LEFT JOIN Inv_CashCustomer
             ON Inv_CashCustomer.id = Inv_Receipt_h.CashCustomerID
             LEFT JOIN GL_Accounts
             ON GL_Accounts.AccountID = Inv_Receipt_h.Vendor_ID
             LEFT JOIN Security_Users
             ON Security_Users.Id = Inv_Receipt_h.Empoyee_ID
             LEFT JOIN Inv_Transaction_Codes C
             ON Inv_Receipt_h.Code = C.Code
             LEFT JOIN Inv_Receipt_D
             ON Inv_Receipt_D.Parent_ID = Inv_Receipt_h.ID
             LEFT JOIN Inv_Items
             ON Inv_Items.ID = Inv_Receipt_D.Item_ID
             LEFT JOIN Inv_Store
             ON Inv_Store.ID = Inv_Receipt_D.Store_ID
             LEFT JOIN Inv_Receipt_d_Serial
             ON Inv_Receipt_d_Serial.Inv_Receipt_d_ID = Inv_Receipt_D.ID
             LEFT JOIN AV_INV_TransactionDetails AV_TransactionDetails
             ON AV_TransactionDetails.ID = Inv_Receipt_D.ID
                AND AV_TransactionDetails.Parent_ID = Inv_Receipt_h.ID
        WHERE Inv_Receipt_h.Code IN(51 , 52 , 53 , 54)
        AND (ISNULL(Inv_Receipt_h.Is_Canceled , 0) <> 1)
        AND (ISNULL(Inv_Receipt_h.IsHolded , 0) <> 1)
             AND (@Serial IS NULL
                  OR @Serial BETWEEN Serialfrom AND SerialTo)
             AND (@SubsidaryID IS NULL
                  OR inv_receipt_h.SubsidiaryID IN(@SubsidaryID))
        AND Inv_Receipt_D.Item_ID IS NOT NULL
        AND Inv_Receipt_D.FinishedProductID IS NULL
        ORDER BY Inv_Receipt_h.Entry_Date
    END
GO
/****** Object:  StoredProcedure [dbo].[Reports_Inv_Stock_Items_Balance]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Reports_Inv_Stock_Items_Balance] @StoreID INT = Null
, @VendorID INT = NULL
, @ItemType INT = NULL
, @ItemCategoryID nvarchar(max) = NULL
, @SubsidaryID INT = NULL
, @UnitType NVARCHAR(50) = NULL
, @ClearZero INT = NULL
, @ItemId INT = 991
, @Operator INT = NULL
, @OperatorQValue INT = NULL
, @ToDate DATEtime = '2019-01-01' 
, @ItemCode NVARCHAR(50) = NULL
, @Min_Qty INT = NULL
, @Max_Qty INT = NULL
, @Reorder_Qty INT = NULL
AS
BEGIN
IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@ItemCategoryID, ',')
            WHERE Item = -1
        )
        SET @ItemCategoryID = NULL
	Set @ToDate = @ToDate + '23:59:59'
    CREATE TABLE #AV_Inv_items_storeT
    (  
		  maxDate DATETIME 
          ,TransID INT              
          ,item_id INT
          ,store_id  INT
          ,AvgCost DECIMAL(38, 20)
          ,Balance DECIMAL(38, 20)
          ,TotalReservedQTy DECIMAL(38, 20)
    );
	




 INSERT INTO #AV_Inv_items_storeT
            
	 SELECT    maxDate
          ,TransID
          ,item_id
          ,store_id
          ,AvgCost
          ,Balance
          ,TotalReservedQTy
From

(SELECT  
             row_number() over(partition by  Inv_Receipt_d.item_id, Inv_Receipt_d.store_id
			 order by Entry_Date desc,Inv_Receipt_d.id desc) as rn
				  ,  Inv_Receipt_d.item_id
                  , Inv_Receipt_d.store_id
                  , Inv_Receipt_h.Entry_Date maxDate
                  , Inv_Receipt_d.ID  TransID 
                  , Inv_Receipt_d.totalQTy     Balance                               
                  , Inv_Receipt_d.TotalReservedQTy  TotalReservedQTy
                 , AvgCost = Cast((SELECT  top 1  invD.AvgCost FROM     dbo.Inv_Receipt_d as invD INNER JOIN dbo.Inv_Receipt_h as invH ON invD.Parent_ID = invH.ID WHERE (ISNULL(invH.Is_Canceled, 0) <> 1) AND (ISNULL(invH.IsHolded, 0) <> 1) and invD.Transaction_move <> 0  and invH.Entry_Date<= @ToDate and  invD.Item_ID=Inv_Receipt_d.item_id order by Entry_Date DESC  ,invD.ID DESC ) as float)

FROM   Inv_Receipt_h ,Inv_Receipt_d        
 WHERE(ISNULL(Inv_Receipt_h.Is_Canceled , 0) <> 1)
      AND (ISNULL(Inv_Receipt_h.IsHolded , 0) <> 1) 
	  and Inv_Receipt_d.Parent_ID = Inv_Receipt_h.ID  
	  and(@ToDate = null or Entry_Date <=  @ToDate) and Transaction_move <> 0
	  ) as T
	  Where rn = 1


UNION
SELECT DISTINCT 
       maxDate = CAST('2000/01/01' AS DATETIME)
     , TransID = 0
     , [item_id]
     , [store_id]
     ,   cast( cast(First_Cost as float) / cast(FinalConv as float)   as float)  
     , Balance = ISNULL([First_Qty] , 0) * ISNULL(FinalConv , 1)
	 ,0
FROM [dbo].[Inv_Items_Store] , [dbo].[Inv_Items] 
WHERE [Inv_Items].Item_Type <> 3 and  [dbo].[Inv_Items_Store] .ITEM_ID =  [dbo].[Inv_Items].ID  AND 1 NOT IN
(
 SELECT 1
 FROM AV_INV_TransactionDetails a
 WHERE a.[item_id] = [dbo].[Inv_Items_Store].[item_id]
       AND a.[store_id] = [dbo].[Inv_Items_Store].[store_id] and a.entry_date < =@ToDate)
	    




	    
    SELECT Inv_Store.Code                                                     SroteCode
	      ,Inv_Items.ID                                                    item_id
         , Inv_Items.Code                                                     ItemCode
		  ,(select top 1 Inv_Item_Vw.Barcode from Inv_Item_Vw where Inv_Item_Vw.ID=Inv_Items.ID  ) as Barcode
         , Inv_Items.Name                                                     ItemName
         , Inv_Items.Name_AR                                                  ItemName_Ar
         , Inv_Unit.Name                                                      Inventory_Unit
         , Inv_Unit.Name_Ar                                                   Inventory_Unit_AR
         , Inventory_Unit_Conv.Conv                                           Inventory_Unit_Conv
         , Inventory_Unit_Conv.FinalConv                                      Inventory_Unit_FinalConv
         , CAST(ISNULL(AV_Inv_items_storeT.Balance, 0) AS DECIMAL(38, 20))      AV_Inv_items_storeT_Balance
         , CAST(ISNULL(Inv_items_store.First_Qty, 0) AS DECIMAL(38, 20))       Inv_items_store_First_Qty
         , CAST(ISNULL(Inv_items_store.First_Qty, 0) *
                ISNULL(Inv_items_store.FinalConv, 0) AS DECIMAL(38, 20))       Inv_items_store_First_Min_Qty
         , CAST((ISNULL(AV_Inv_items_storeT.Balance, 0) /
                 ISNULL(Inventory_Unit_Conv.FinalConv, 1)) AS DECIMAL(38, 20)) Inventory_Unit_Qty
--		 ,(select top 1 AV_Inv_items_storeDate_noKit.totalQTy from AV_Inv_items_storeDate_noKit
--where AV_Inv_items_storeDate_noKit.item_id=Inv_Items.ID  
--order by Entry_Date desc) Inventory_Unit_Qty
         , Purchasing_Unit.Name                                               Purchasing_Unit
         , Purchasing_Unit.Name_Ar                                            Purchasing_Unit_AR
         , Purchasing_Unit_Conv.Conv                                          Purchasing_Unit_Conv
         , Purchasing_Unit_Conv.FinalConv                                     Purchasing_Unit_FinalConv
         , CAST(ISNULL(AV_Inv_items_storeT.Balance, 0) /
                ISNULL(Purchasing_Unit_Conv.FinalConv, 1) AS DECIMAL(38, 20))  Purchasing_Unit_Qty
         , Selling_Unit.Name                                                  Selling_Unit
         , Selling_Unit.Name_Ar                                               Selling_Unit_AR
         , Selling_Unit_Conv.Conv                                             Selling_Unit_Conv
         , Selling_Unit_Conv.FinalConv                                        Selling_Unit_FinalConv
         , CAST(ISNULL(AV_Inv_items_storeT.Balance, 0) /
                ISNULL(Selling_Unit_Conv.FinalConv, 1) AS DECIMAL(38, 20))     Selling_Unit_Qty
         , CAST(ISNULL(Inv_items_store.Min_Qty, 0) AS DECIMAL(38, 20))         Min_Qty
         , CAST(ISNULL(Inv_items_store.Max_Qty, 0) AS DECIMAL(38, 20))         Max_Qty
         , CAST(ISNULL(Inv_items_store.Reorder_Qty, 0) AS DECIMAL(38, 20))     Reorder_Qty
         , CAST(ISNULL(AV_Inv_items_storeT.AvgCost, 0) AS DECIMAL(38, 20))      AvrCost
         , CAST(ISNULL(AV_Inv_items_storeT.AvgCost, 0) * ISNULL(AV_Inv_items_storeT.Balance, 0) /
                ISNULL(Inventory_Unit_Conv.FinalConv, 1) AS DECIMAL(38, 20))   TotalCost
         , CAST(ISNULL(AV_Inv_items_storeT.TotalReservedQTy, 0) /
                ISNULL(Inventory_Unit_Conv.FinalConv, 1) AS DECIMAL(38, 20))   TotalReservedQTy
         , CAST((ISNULL(AV_Inv_items_storeT.Balance, 0) - ISNULL(AV_Inv_items_storeT.TotalReservedQTy, 0)) /
                ISNULL(Inventory_Unit_Conv.FinalConv, 1) AS DECIMAL(38, 20))   availableQty
				,NEWcOST = CAST(ISNULL(AV_Inv_items_storeT.AvgCost, 0) AS DECIMAL(38, 20)) * ( ISNULL(Inventory_Unit_Conv.FinalConv, 1)  ) 
				,Selling_Unit_Conv.Sale_price1 as Itemsaleprice1
				 ,(SELECT Top 1 Inv_ProductCategories.Name FROM   Inv_Items_Categories INNER JOIN Inv_ProductCategories ON Inv_Items_Categories.ItemCategory_ID = Inv_ProductCategories.ID where Inv_Items_Categories.Item_ID=Inv_Items.ID ) as CategoryName
  ,(SELECT Top 1 Inv_ProductCategories.Name_AR FROM   Inv_Items_Categories INNER JOIN Inv_ProductCategories ON Inv_Items_Categories.ItemCategory_ID = Inv_ProductCategories.ID where Inv_Items_Categories.Item_ID=Inv_Items.ID ) as CategoryNameAr
   ,Inv_Items.Notes   Notes
  ,Inventory_Unit_Conv.BarCode Barcode
	--into item_balance
	FROM Inv_Items
             LEFT JOIN #AV_Inv_items_storeT AV_Inv_items_storeT
                       ON Inv_Items.ID = AV_Inv_items_storeT.item_id
             LEFT JOIN Inv_Store
                       ON Inv_Store.ID = AV_Inv_items_storeT.Store_ID
             LEFT JOIN Inv_Unit
                       ON Inv_Unit.ID = Inv_Items.Inventory_UnitId
             LEFT JOIN Inv_Unit Purchasing_Unit
                       ON Purchasing_Unit.ID = Inv_Items.Purchasing_UnitId
             LEFT JOIN Inv_Unit Selling_Unit
                       ON Selling_Unit.ID = Inv_Items.Selling_UnitId
             LEFT JOIN Inv_Items_Units Inventory_Unit_Conv
                       ON Inventory_Unit_Conv.Item_ID = Inv_Items.ID
                           AND Inventory_Unit_Conv.Unit_id = Inv_Items.Inventory_UnitId
             LEFT JOIN Inv_Items_Units Purchasing_Unit_Conv
                       ON Purchasing_Unit_Conv.Item_ID = Inv_Items.ID
                           AND Purchasing_Unit_Conv.Unit_id = Inv_Items.Purchasing_UnitId
             LEFT JOIN Inv_Items_Units Selling_Unit_Conv
                       ON Selling_Unit_Conv.Item_ID = Inv_Items.ID
                           AND Selling_Unit_Conv.Unit_id = Inv_Items.Selling_UnitId
             LEFT JOIN Inv_items_store
                       ON Inv_items_store.Item_ID = Inv_Items.ID
                           AND Inv_items_store.Store_ID = Inv_Store.ID
    WHERE (@SubsidaryID IS NULL  OR Inv_Items.Subsidiary_ID = @SubsidaryID)
      AND ( Inv_Items.Item_Type  = 1 or  Inv_Items.Item_Type =  4) 
      AND (@StoreID IS NULL   OR AV_Inv_items_storeT.Store_ID = @StoreID)
      AND (@ItemType IS NULL  OR Inv_ITems.Item_Type = @ItemType)
      AND (@VendorID IS NULL OR Inv_Items.ID IN
							   (
								   SELECT Inv_Items_Vendors.ItemID
								   FROM Inv_Items_Vendors
								   WHERE Inv_Items_Vendors.ItemID = Inv_Items.ID
									 AND Inv_Items_Vendors.VendorID =@VendorID
							   ))
     
	    AND (@ItemCategoryID IS NULL or @ItemCategoryID='-1'
        OR Inv_Items.ID IN
           (
               SELECT Inv_Items_Categories.Item_ID
               FROM Inv_Items_Categories
               WHERE ( Inv_Items_Categories.ItemCategory_ID  in (
                         SELECT item
                         FROM dbo.Split(@ItemCategoryID, ',')
                     ))
           ))
	   
      AND (@ClearZero IS NULL OR AV_Inv_items_storeT.Balance <> 0)
      AND (@ItemId IS NULL  OR Inv_Items.ID = @ItemId)
      AND (@Operator IS NULL OR (@Operator = 1 AND AV_Inv_items_storeT.Balance > ISNULL(@OperatorQValue, 0))
							 OR ( @Operator = 2 AND AV_Inv_items_storeT.Balance >= ISNULL(@OperatorQValue, 0))
							 OR (@Operator = 3 AND AV_Inv_items_storeT.Balance < ISNULL(@OperatorQValue, 0))
							 OR (@Operator = 4 AND AV_Inv_items_storeT.Balance <= ISNULL(@OperatorQValue, 0))
							OR (@Operator = 5 AND AV_Inv_items_storeT.Balance = ISNULL(@OperatorQValue, 0))
							OR (@Operator = 6 AND AV_Inv_items_storeT.Balance <> ISNULL(@OperatorQValue, 0))
			)
      AND ((@ToDate IS NULL  OR CAST(AV_Inv_items_storeT.maxDate AS DATE) <= @ToDate))
      AND (@ItemCode IS NULL OR Inv_items.Code LIKE @ItemCode + '%')
      AND (@Min_Qty =1  OR Inv_items_store.Min_Qty >= Inv_items_store.Qty  OR isnull(Inv_items_store.Min_Qty,0)=0)
      AND (@Max_Qty =1  OR Inv_items_store.Max_Qty <=Inv_items_store.Qty OR isnull(Inv_items_store.Max_Qty,0)=0)
      AND (@Reorder_Qty =1 OR Inv_items_store.Reorder_Qty >= Inv_items_store.Qty OR isnull(Inv_items_store.Reorder_Qty,0)=0)
    ORDER BY Inv_Items.Code
           , Inv_Store.Code;
END


GO
/****** Object:  StoredProcedure [dbo].[Reports_Inv_Summary]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Reports_Inv_Summary] @StoreID        INT = NULL
                              , @VendorID       INT = NULL
                              , @ItemCategoryID nvarchar(max) = NULL
                              , @SubsidaryID    INT = NULL
                              , @ItemId         INT = NULL
                              , @ItemType       INT = NULL
AS
    BEGIN
	 IF EXISTS
        (
            SELECT *
            FROM dbo.Split(@ItemCategoryID, ',')
            WHERE Item = -1
        )
        SET @ItemCategoryID = NULL
       
        SELECT 
		 Inv_Store.Code as ID
		,Inv_Store.Name
             , Inv_Store.Name_AR                                              Name_Ar
             , SUM(Inv_Items_Store.First_Cost * Inv_Items_Store.First_Qty) AS Total_Cost
        FROM Inv_Items_Store
             LEFT JOIN Inv_Items
             ON Inv_Items.ID = Inv_Items_Store.Item_ID
             LEFT JOIN Inv_Store
             ON Inv_Store.ID = Inv_Items_Store.Store_ID
        WHERE(@SubsidaryID IS NULL
              OR Inv_Items.Subsidiary_ID = @SubsidaryID)
             AND (@StoreID IS NULL
                  OR Inv_Items_Store.Store_ID IN(@StoreID))
             AND (@ItemId IS NULL
                  OR Inv_Items.id IN(@ItemId))
             AND (@ItemType IS NULL
                  OR Inv_Items.Item_Type IN(@ItemType))
        AND (@VendorID IS NULL
             OR Inv_Items.ID IN
        (
         SELECT Inv_Items_Vendors.ItemID
         FROM Inv_Items_Vendors
         WHERE Inv_Items_Vendors.ItemID IN(@VendorID)
        ))
         AND (@ItemCategoryID IS NULL
        OR Inv_Items.ID IN
           (
               SELECT Inv_Items_Categories.Item_ID
               FROM Inv_Items_Categories
               WHERE ( Inv_Items_Categories.ItemCategory_ID  in (
                         SELECT item
                         FROM dbo.Split(@ItemCategoryID, ',')
                     ))
           ))
        GROUP BY Inv_Store.Name
               , Inv_Store.Name_AR
			   , Inv_Store.Code
	     Order by Inv_Store.Code
    END
GO
/****** Object:  StoredProcedure [dbo].[Reports_Tools_DataSets]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Proc [dbo].[Reports_Tools_DataSets]
     @StoreID        INT = Null
   , @ItemID         INT = Null
   , @ItemCategoryID INT = Null
   , @VendorID       INT = Null
   , @BrachID        INT = Null
   , @CustomerCatID  INT = Null
   , @VendorCatID    INT = Null
   , @AccountID      INT = Null
   , @CostCenterID   INT = Null
   , @DepartMentID   INT = Null
   , @LocationID     INT = Null
   , @ClassID        INT = Null
As
         Begin

/*******************
 Validate Parameters
*******************/

             If @StoreID Is Null
                 Set @StoreID = 0

             If @ItemID Is Null
                 Set @ItemID = 0

             If @ItemCategoryID Is Null
                 Set @ItemCategoryID = 0

             If @VendorID Is Null
                 Set @VendorID = 0

             If @BrachID Is Null
                 Set @BrachID = 0

             If @CustomerCatID Is Null
                 Set @CustomerCatID = 0

             If @VendorCatID Is Null
                 Set @VendorCatID = 0

             If @AccountID Is Null
                 Set @AccountID = 0

             If @CostCenterID Is Null
                 Set @CostCenterID = 0

             If @DepartMentID Is Null
                 Set @DepartMentID = 0

             If @LocationID Is Null
                 Set @LocationID = 0

             If @ClassID Is Null
                 Set @ClassID = 0                                                                                        


/**********
 mainSelect
**********/

             Select Top 1

/*************
 Inv_Item	    
*************/

                    ItemId = Case
                                 When @ItemId != 0
                                 Then I.Id
                                 Else Null
                             End
                  , ItemNameEn = Case
                                     When @ItemId != 0
                                     Then I.Name
                                     Else Null
                                 End
                  , ItemNameAr = Case
                                     When @ItemId != 0
                                     Then I.Name_Ar
                                     Else Null
                                 End

/*********
 Inv_Store
*********/

                  , StoreID = Case
                                  When @StoreID != 0
                                  Then S.Id
                                  Else Null
                              End
                  , StoreNameEn = Case
                                      When @StoreID != 0
                                      Then S.Name
                                      Else Null
                                  End
                  , StoreNameAr = Case
                                      When @StoreID != 0
                                      Then S.Name_ar
                                      Else Null
                                  End

/********************
 Inv_Items_Categories
********************/

                  , ItemCategoryID = Case
                                         When @ItemCategoryID != 0
                                         Then IPC.Id
                                         Else Null
                                     End
                  , ItemCategoryNameEn = Case
                                             When @ItemCategoryID != 0
                                             Then IPC.Name
                                             Else Null
                                         End
                  , ItemCategoryNameAr = Case
                                             When @ItemCategoryID != 0
                                             Then IPC.Name_ar
                                             Else Null
                                         End

/*****
Vendor
*****/

                  , VendorID = Case
                                   When @VendorID != 0
                                   Then Vendor.AccountID
                                   Else Null
                               End
                  , VendorNameEn = Case
                                       When @VendorID != 0
                                       Then Vendor.Name
                                       Else Null
                                   End
                  , VendorNameAr = Case
                                       When @VendorID != 0
                                       Then Vendor.Name_ar
                                       Else Null
                                   End

/*****
Branch
*****/

                  , BrachID = Case
                                  When @BrachID != 0
                                  Then MB.ID
                                  Else Null
                              End
                  , BrachNameEn = Case
                                      When @BrachID != 0
                                      Then MB.Name
                                      Else Null
                                  End
                  , BrachNameAr = Case
                                      When @BrachID != 0
                                      Then MB.Name_ar
                                      Else Null
                                  End

/************
CustomerCatID
************/

                  , CustomerCategoryID = Case
                                             When @CustomerCatID != 0
                                             Then CustomerCategory.ID
                                             Else Null
                                         End
                  , CustomerCategoryNameEN = Case
                                                 When @CustomerCatID != 0
                                                 Then CustomerCategory.CatName
                                                 Else Null
                                             End
                  , CustomerCategoryNameAr = Case
                                                 When @CustomerCatID != 0
                                                 Then CustomerCategory.CatName_AR
                                                 Else Null
                                             End
                                             
/**********
VendorCatID
**********/

                  , VendorCategoryID = Case
                                           When @VendorCatID != 0
                                           Then VendorCategory.ID
                                           Else Null
                                       End
                  , VendorCategoryNameEN = Case
                                               When @VendorCatID != 0
                                               Then VendorCategory.CatName
                                               Else Null
                                           End
                  , VendorCategoryNameAr = Case
                                               When @VendorCatID != 0
                                               Then VendorCategory.CatName_Ar
                                               Else Null
                                           End

/******
Account
******/

                  , AccountID = Case
                                    When @AccountID != 0
                                    Then Accounts.AccountID
                                    Else Null
                                End
                  , AccountNameEn = Case
                                        When @AccountID != 0
                                        Then Accounts.Name
                                        Else Null
                                    End
                  , AccountNameAr = Case
                                        When @AccountID != 0
                                        Then Accounts.Name_ar
                                        Else Null
                                    End
                                    
/*********
CostCenter
*********/

                  , CostcenterID = Case
                                       When @CostCenterID != 0
                                       Then Costcenter.ID
                                       Else Null
                                   End
                  , CostcenterNameEn = Case
                                           When @CostCenterID != 0
                                           Then Costcenter.Name
                                           Else Null
                                       End
                  , CostcenterNameAr = Case
                                           When @CostCenterID != 0
                                           Then Costcenter.Name_ar
                                           Else Null
                                       End

/**********
Departments
**********/

                  , DepartmentID = Case
                                       When @DepartMentID != 0
                                       Then Departments.ID
                                       Else Null
                                   End
                  , DepartmentNameEn = Case
                                           When @DepartMentID != 0
                                           Then Departments.Name
                                           Else Null
                                       End
                  , DepartmentNameAr = Case
                                           When @DepartMentID != 0
                                           Then Departments.Name_ar
                                           Else Null
                                       End

/********
Locations
********/

                  , LocationsID = Case
                                      When @LocationID != 0
                                      Then Locations.ID
                                      Else Null
                                  End
                  , LocationsNameEn = Case
                                          When @LocationID != 0
                                          Then Locations.Name
                                          Else Null
                                      End
                  , LocationsNameAr = Case
                                          When @LocationID != 0
                                          Then Locations.Name_ar
                                          Else Null
                                      End  

/******
Classes
******/

                  , ClassesID = Case
                                    When @ClassID != 0
                                    Then Classes.ID
                                    Else Null
                                End
                  , ClassesNameEn = Case
                                        When @ClassID != 0
                                        Then Classes.Name
                                        Else Null
                                    End
                  , ClassesNameAr = Case
                                        When @ClassID != 0
                                        Then Classes.Name_ar
                                        Else Null
                                    End
             From
                  Inv_Items I
                , Inv_Store S
                , Inv_ProductCategories IPC
                , GL_Accounts Vendor
                , mstr_Branch MB
                , GL_VendorCategory VendorCategory
                , GL_VendorCategory CustomerCategory
                , Gl_Accounts Accounts
                , mstr_Costcenter Costcenter
                , mstr_Departments Departments
                , mstr_Locations Locations
                , mstr_Classes Classes
             Where
                         (
                                     @StoreID = 0
                                     Or S.id = @StoreID)
                         And (
                                         @ItemId = 0
                                         Or I.id = @ItemId)
                         And (
                                         @ItemCategoryID = 0
                                         Or IPC.id = @ItemCategoryID)
                         And Vendor.IsVendor = 1
                         And Vendor.LevelNo = 0
                         And (
                                         @VendorID = 0
                                         Or Vendor.AccountID = @VendorID)
                         And (
                                         @BrachID = 0
                                         Or MB.ID = @BrachID)
                         And VendorCategory.IsActive = 1
                         And VendorCategory.CategoryType = 1
                         And CustomerCategory.IsActive = 1
                         And CustomerCategory.CategoryType = 0
                         And (
                                         @CustomerCatID = 0
                                         Or CustomerCategory.ID = @CustomerCatID)
                         And (
                                         @VendorCatID = 0
                                         Or VendorCategory.ID = @VendorCatID)
                         And (
                                         @AccountID = 0
                                         Or Accounts.AccountID = @AccountID)
                         And (
                                         @CostCenterID = 0
                                         Or Costcenter.ID = @CostCenterID)
                         And (
                                         @DepartMentID = 0
                                         Or Departments.ID = @DepartMentID)
                         And (
                                         @LocationID = 0
                                         Or Locations.ID = @LocationID)
                         And (
                                         @ClassID = 0
                                         Or Classes.ID = @ClassID)
         End
GO
/****** Object:  StoredProcedure [dbo].[Reports_Tools_Style]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Proc [dbo].[Reports_Tools_Style]
	as
	Begin
DECLARE @VarTable Table (StyleID int,Name Nvarchar(50))

INSERT INTO @VarTable (Styleid,Name) VALUES(1,'Corporate')

INSERT INTO @VarTable (Styleid,Name) VALUES(2,'Forest')

INSERT INTO @VarTable (Styleid,Name) VALUES(3,'Default')

INSERT INTO @VarTable (Styleid,Name) VALUES(4,'Mahogany')

INSERT INTO @VarTable (Styleid,Name) VALUES(5,'Ocens')

INSERT INTO @VarTable (Styleid,Name) VALUES(6,'Slate')

SELECT * FROM @VarTable
	End
--Go

--Reports_Tools_Style
GO
/****** Object:  StoredProcedure [dbo].[SelectUserRolesByUserID]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



Create proc [dbo].[SelectUserRolesByUserID]
(@UserID int)
AS
select * from Security_Roles
where (Security_Roles.RoleID in 
(Select Security_UserRoles.RoleID from Security_UserRoles where Security_UserRoles.UserID = @UserID))

GO
/****** Object:  StoredProcedure [dbo].[ShowStockBalanceInPos]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  PROCEDURE [dbo].[ShowStockBalanceInPos]
(
	@subsidaryid int,
	@brachId int
)
AS
BEGIn

	IF( (SELECT COUNT(1) from  mstr_BranchesMenu WHERE SubsidaryId =@subsidaryid and BranchId = @brachId AND showStockBalance = 1 ) > 0 )
	BEGIN
		SELECT 1 AS showStockBalance
	END
	ELSE
	BEGIN
		SELECT 0 AS showStockBalance
	END
END
GO
/****** Object:  StoredProcedure [dbo].[SP_CompanyItemStoreWiseMinimumQty]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_CompanyItemStoreWiseMinimumQty]
(
	@SubsiduryId int,
	@storeID int
)
AS 
BEGIN

Set Transaction Isolation Level read Uncommitted

SELECT 
DISTINCT
ROW_NUMBER() OVER(ORDER BY INVITMSTR.Item_ID) AS RowNum,
INVITM.Code AS ItemCode,
INVITM.Name AS ItemName,
INVITM.Name_AR AS ItemName_Ar,
INVITMSTR.Item_ID,
Convert(decimal(18,3), INVITMSTR.Qty ) AS ActualQty,
Convert(decimal(18,3), INVITMSTR.Min_Qty ) PreferdBalance,
Convert(decimal(18,3),ISNULL ( PO.POQTY , 0 ) ) AS POQTY,
Convert(decimal(18,3), ( INVITMSTR.Min_Qty - INVITMSTR.Qty ) - ISNULL ( PO.POQTY , 0 ) ) AS Requried,
ISNULL( ITMVD.VendorID, 0) AS VendorID,
ISNULL( AC.Name , '' ) AS VendorName,
ISNULL( AC.Name_AR , '' ) AS VendorNameAr,
ISNULL( ITMVD.LastPrice ,  0) AS LastPrice,
Convert(decimal(18,3), ( ( INVITMSTR.Min_Qty - INVITMSTR.Qty ) - ISNULL ( PO.POQTY , 0 ) ) * ISNULL( ITMVD.LastPrice ,  0) ) AS Total,
Convert(decimal(18,0) ,ISNULL( ITMVD.Price , 0 )) As QutationPrice,
Convert(decimal(18,3),( ( INVITMSTR.Min_Qty - INVITMSTR.Qty ) - ISNULL ( PO.POQTY , 0 ) ) * ISNULL( ITMVD.Price , 0 )) AS Total1,
Convert(decimal(18,3),INVITMSTR.Qty + INVITMSTR.Min_Qty ) AS QtyInAllStore
INTO #HT_VenoreWiseRecode
FROM Inv_Items INVITM 
INNER JOIN Inv_Items_Store INVITMSTR
ON INVITM.ID = INVITMSTR.Item_ID 
INNER JOIN Inv_Store INVSTR
ON INVITMSTR.Store_ID = INVSTR.ID 
AND INVITMSTR.Min_Qty  > 0
LEFT JOIN Inv_Items_Vendors ITMVD
ON ITMVD.ItemID = INVITM.ID
LEFT JOIN GL_Accounts AC
ON AC.AccountID = ITMVD.VendorID
LEFT JOIN ( SELECT SUM(D.Qty) AS POQTY,H.Vendor_ID ,D.Item_ID,D.Store_ID
FROM Inv_Receipt_h H
INNER JOIN Inv_Receipt_d D
ON H.ID = D.Parent_ID
AND H.SubsidiaryID = @SubsiduryId
AND H.Code = 11 
AND H.Status_ID = 1
GROUP BY H.Vendor_ID ,D.Item_ID,D.Store_ID ) AS PO
ON PO.Item_ID = ITMVD.ItemID
AND PO.Store_ID = INVSTR.ID
AND PO.Vendor_ID = ITMVD.VendorID
WHERE INVITMSTR.Qty <= INVITMSTR.Min_Qty 
AND INVITM.Item_Type IN (1,4) 
AND INVSTR.SubsidiaryID = @SubsiduryId
AND INVSTR.ID = @storeID

--UPDATE A SET 
--A.ItemCode = I.Code,
--A.ItemName = I.Name,
--A.ItemName_Ar = I.Name_AR 
--from #HT_VenoreWiseRecode A
--INNER JOIN Inv_Items I 
--ON I.ID = A.Item_ID
--WHERE A.RowNum = 1

select * from #HT_VenoreWiseRecode Order by Item_ID,RowNum

IF OBJECT_ID('tempdb..#HT_VenoreWiseRecode') IS NOT NULL DROP TABLE #HT_VenoreWiseRecode

IF OBJECT_ID('tempdb..#HT_itemDt') IS NOT NULL DROP TABLE #HT_itemDt


END
GO
/****** Object:  StoredProcedure [dbo].[SP_Consumptionreport]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_Consumptionreport]
(
    @subsidiaryID int,
    @storeId int,
    @vendorId int,
    @categoryIds varchar( MAX ),-- '229,228,227,226,225,224,170,288'
    @fromDate date,
    @toDate date,
    @requriedDays int
)
AS 
BEGIN

	Declare @l_days int =  DATEDIFF(DAY,  @fromDate, @toDate )
	Declare @l_str varchar(MAX) = ''

	Create table #HT_ItemDeatils
	(
		Id int,
		Code nvarchar(MAX),
		Name nvarchar(MAX),
		Name_AR nvarchar(MAX)
	)

	SET @l_str = 'SELECT
				  DISTINCT
				  IM.ID,
				  IM.Code,
				  IM.Name,
				  IM.Name_AR
				  from Inv_Items IM 
				  INNER JOIN Inv_Items_Categories IMC
				  ON IMC.Item_ID = IM.ID
				  ' + CASE WHEN @categoryIds IS NULL 
						   THEN '' 
						   ELSE 'AND IMC.ItemCategory_ID  IN ( ' + @categoryIds + ')'
					   END
			  
	INSERT INTO #HT_ItemDeatils
	EXEC(@l_str)

	select * into #hp_tempview from AV_Inv_items_store

	SELECT 
	IM.ID AS ItemId,
	SI.ID AS StoreId,
	SUM (RD.Qty) TotalSold
	INTO #HT_ItemWiseSales
	FROM #HT_ItemDeatils IM 
	INNER JOIN Inv_Items_Store IMS
	ON IMS.Item_ID = IM.ID
	INNER JOIN Inv_Store SI
	ON SI.ID = IMS.Store_ID
	AND ( SI.id = @storeId or @storeId IS NULL )
	AND SI.SubsidiaryID = @subsidiaryID 
	INNER JOIN Inv_Receipt_d RD
	ON RD.Item_ID = IM.ID
	AND RD.Store_ID = SI.ID
	INNER JOIN Inv_Receipt_h RH
	ON RH.ID = RD.Parent_ID
	AND RH.Code IN (51,52)
	AND RH.Entry_Date BETWEEN @fromDate and @toDate
	GROUP BY IM.ID,SI.ID

	SELECT 
	IM.ID AS ItemId,
	SI.ID AS StoreId,
	SUM (RD.Qty) TotalSoldReturn
	INTO #HT_ItemWiseSalesReturn
	FROM #HT_ItemDeatils IM 
	INNER JOIN Inv_Items_Store IMS
	ON IMS.Item_ID = IM.ID
	INNER JOIN Inv_Store SI
	ON SI.ID = IMS.Store_ID
	AND ( SI.id = @storeId or @storeId IS NULL )
	AND SI.SubsidiaryID = @subsidiaryID 
	INNER JOIN Inv_Receipt_d RD
	ON RD.Item_ID = IM.ID
	AND RD.Store_ID = SI.ID
	INNER JOIN Inv_Receipt_h RH
	ON RH.ID = RD.Parent_ID
	AND RH.Code IN (53,54)
	AND RH.Entry_Date BETWEEN @fromDate and @toDate
	GROUP BY IM.ID,SI.ID


	SELECT 
	RD.Item_ID, 
	RD.Store_ID,
	SUM(RD.Qty) AS OnOrder 
	INTO #HT_PendingPrchaseOrder
	FROM Inv_Receipt_h RH
	INNER JOIN Inv_Receipt_d RD
	ON RD.Parent_ID = RH.ID
	INNER JOIN #HT_ItemDeatils IM
	ON IM.Id = RD.Item_ID
	LEFT JOIN Inv_ReceiptReceipts LR
	ON LR.ParentReceiptID = RH.ID
	WHERE RH.Code = 11
	AND RH.SubsidiaryID = @subsidiaryID
	AND RH.Entry_Date BETWEEN @fromDate and @toDate 
	AND LR.ID IS NULL
	AND ( RH.Vendor_ID = @vendorId OR @vendorId IS NULL )
	AND ( RD.Store_ID = @storeId OR @storeId IS NULL )
	GROUP BY RD.Item_ID,RD.Store_ID

	IF(@storeId IS null)
	BEGIN
		
		SELECT 
		IM.Code AS ItemCode,
		IM.Id As Item_ID,
		SUM(ISNULL( IMSV.Balance , 0 )) AS Currentstock,
		(SUM(ISNULL( IMWS.TotalSold , 0 )) -  SUM(ISNULL( IMWSR.TotalSoldReturn , 0 ))) AS TotalSold,
		SUM(ISNULL( PPO.OnOrder , 0 )) AS OnOrder ,
		AVG(ISNULL( IMSV.AvgCost , 0 )) AS Cost,
		CASE WHEN (SUM(ISNULL( IMWS.TotalSold , 0 )) -  SUM(ISNULL( IMWSR.TotalSoldReturn , 0 ))) IS NULL THEN 0 ELSE (SUM(ISNULL( IMWS.TotalSold , 0 )) -  SUM(ISNULL( IMWSR.TotalSoldReturn , 0 ))) / @l_days END AS Dailysales,
		( CASE WHEN (SUM(ISNULL( IMWS.TotalSold , 0 )) -  SUM(ISNULL( IMWSR.TotalSoldReturn , 0 ))) IS NULL THEN 0 ELSE (SUM(ISNULL( IMWS.TotalSold , 0 )) -  SUM(ISNULL( IMWSR.TotalSoldReturn , 0 ))) / @l_days END )* @requriedDays AS EstimatedQty,
		SUM(IMS.Min_Qty) AS Min_Qty,
		CASE WHEN  ( ( ( @requriedDays * (CASE WHEN (SUM(ISNULL( IMWS.TotalSold , 0 )) -  SUM(ISNULL( IMWSR.TotalSoldReturn , 0 ))) IS NULL THEN 0 ELSE (SUM(ISNULL( IMWS.TotalSold , 0 )) -  SUM(ISNULL( IMWSR.TotalSoldReturn , 0 ))) / @l_days END) ) + SUM(IMS.Min_Qty ))- ( SUM(ISNULL( PPO.OnOrder , 0 )) + SUM(ISNULL( IMSV.Balance , 0 )) ) ) < 0 
			 THEN 0 
			 ELSE ( ( @requriedDays * (CASE WHEN (SUM(ISNULL( IMWS.TotalSold , 0 )) -  SUM(ISNULL( IMWSR.TotalSoldReturn , 0 ))) IS NULL THEN 0 ELSE (SUM(ISNULL( IMWS.TotalSold , 0 )) -  SUM(ISNULL( IMWSR.TotalSoldReturn , 0 ))) / @l_days END) ) + SUM(IMS.Min_Qty) ) - ( SUM(ISNULL( PPO.OnOrder , 0 )) + SUM(ISNULL( IMSV.Balance , 0 )) )
		END AS Requriedqty,
		CASE WHEN  ( ( ( @requriedDays * (CASE WHEN (SUM(ISNULL( IMWS.TotalSold , 0 )) -  SUM(ISNULL( IMWSR.TotalSoldReturn , 0 ))) IS NULL THEN 0 ELSE (SUM(ISNULL( IMWS.TotalSold , 0 )) -  SUM(ISNULL( IMWSR.TotalSoldReturn , 0 ))) / @l_days END) ) + SUM(IMS.Min_Qty) ) -( SUM(ISNULL( PPO.OnOrder , 0 )) + SUM(ISNULL( IMSV.Balance , 0 )) ) ) < 0 
			 THEN 0 
			 ELSE ( ( @requriedDays * (CASE WHEN (SUM(ISNULL( IMWS.TotalSold , 0 )) -  SUM(ISNULL( IMWSR.TotalSoldReturn , 0 ))) IS NULL THEN 0 ELSE (SUM(ISNULL( IMWS.TotalSold , 0 )) -  SUM(ISNULL( IMWSR.TotalSoldReturn , 0 ))) / @l_days END) ) + SUM(IMS.Min_Qty) ) - ( SUM(ISNULL( PPO.OnOrder , 0 )) + SUM(ISNULL( IMSV.Balance , 0 ) ))
		END * AVG(ISNULL( IMSV.AvgCost , 0 )) AS TotalCost
		,(select top 1 mstr_Subsidaries.Name from mstr_Subsidaries where Id=@subsidiaryID) as SubName
		,(select top 1 mstr_Subsidaries.Name_AR from mstr_Subsidaries where Id=@subsidiaryID) as SubNameAr
		FROM #HT_ItemDeatils IM 
		INNER JOIN Inv_Items_Store IMS
		ON IMS.Item_ID = IM.ID
		INNER JOIN Inv_Store SI
		ON SI.ID = IMS.Store_ID
		AND SI.SubsidiaryID = @subsidiaryID
		AND ( SI.ID = @storeId  OR @storeId IS NULL )
		LEFT JOIN #hp_tempview IMSV
		ON IMSV.item_id = IM.ID
		AND IMSV.store_id = SI.ID
		LEFT JOIN #HT_ItemWiseSales IMWS
		ON IMWS.ItemId = IM.ID
		AND IMWS.StoreId = SI.ID
		LEFT JOIN #HT_ItemWiseSalesReturn IMWSR
		ON IMWSR.ItemId = IM.ID
		AND IMWSR.StoreId = SI.ID
		LEFT JOIN #HT_PendingPrchaseOrder PPO
		ON PPO.Item_ID = IM.ID
		AND PPO.Store_ID = SI.ID
		GROUP BY IM.Code,IM.Id
		ORDER BY IM.Code

	END
	ELSE
	BEGIN
		SELECT 
		IM.Code AS ItemCode,
		IM.Id As Item_ID,
		SI.Code AS StoreCode,
		ISNULL( IMSV.Balance , 0 ) AS Currentstock,
		(ISNULL( IMWS.TotalSold , 0 ) -  ISNULL( IMWSR.TotalSoldReturn , 0 )) AS TotalSold,
		ISNULL( PPO.OnOrder , 0 ) AS OnOrder ,
		ISNULL( IMSV.AvgCost , 0 ) AS Cost,
		CASE WHEN (ISNULL( IMWS.TotalSold , 0 ) -  ISNULL( IMWSR.TotalSoldReturn , 0 )) IS NULL THEN 0 ELSE (ISNULL( IMWS.TotalSold , 0 ) -  ISNULL( IMWSR.TotalSoldReturn , 0 )) / @l_days END AS Dailysales,
		( CASE WHEN (ISNULL( IMWS.TotalSold , 0 ) -  ISNULL( IMWSR.TotalSoldReturn , 0 )) IS NULL THEN 0 ELSE (ISNULL( IMWS.TotalSold , 0 ) -  ISNULL( IMWSR.TotalSoldReturn , 0 )) / @l_days END )* @requriedDays AS EstimatedQty,
		IMS.Min_Qty,
		CASE WHEN  ( ( ( @requriedDays * (CASE WHEN (ISNULL( IMWS.TotalSold , 0 ) -  ISNULL( IMWSR.TotalSoldReturn , 0 )) IS NULL THEN 0 ELSE (ISNULL( IMWS.TotalSold , 0 ) -  ISNULL( IMWSR.TotalSoldReturn , 0 )) / @l_days END) ) + IMS.Min_Qty ) - ( ISNULL( PPO.OnOrder , 0 ) + ISNULL( IMSV.Balance , 0 ) ) ) < 0 
			 THEN 0 
			 ELSE ( ( @requriedDays * (CASE WHEN (ISNULL( IMWS.TotalSold , 0 ) -  ISNULL( IMWSR.TotalSoldReturn , 0 )) IS NULL THEN 0 ELSE (ISNULL( IMWS.TotalSold , 0 ) -  ISNULL( IMWSR.TotalSoldReturn , 0 )) / @l_days END) ) + IMS.Min_Qty ) - ( ISNULL( PPO.OnOrder , 0 ) + ISNULL( IMSV.Balance , 0 ) )
		END AS Requriedqty,
		CASE WHEN  ( ( ( @requriedDays * (CASE WHEN (ISNULL( IMWS.TotalSold , 0 ) -  ISNULL( IMWSR.TotalSoldReturn , 0 )) IS NULL THEN 0 ELSE (ISNULL( IMWS.TotalSold , 0 ) -  ISNULL( IMWSR.TotalSoldReturn , 0 )) / @l_days END) ) + IMS.Min_Qty ) -( ISNULL( PPO.OnOrder , 0 ) + ISNULL( IMSV.Balance , 0 ) ) ) < 0 
			 THEN 0 
			 ELSE ( ( @requriedDays * (CASE WHEN (ISNULL( IMWS.TotalSold , 0 ) -  ISNULL( IMWSR.TotalSoldReturn , 0 )) IS NULL THEN 0 ELSE (ISNULL( IMWS.TotalSold , 0 ) -  ISNULL( IMWSR.TotalSoldReturn , 0 )) / @l_days END) ) + IMS.Min_Qty ) - ( ISNULL( PPO.OnOrder , 0 ) + ISNULL( IMSV.Balance , 0 ) )
		END * ISNULL( IMSV.AvgCost , 0 ) AS TotalCost
	    ,(select top 1 mstr_Subsidaries.Name from mstr_Subsidaries where Id=@subsidiaryID) as SubName
		,(select top 1 mstr_Subsidaries.Name_AR from mstr_Subsidaries where Id=@subsidiaryID) as SubNameAr
		FROM #HT_ItemDeatils IM 
		INNER JOIN Inv_Items_Store IMS
		ON IMS.Item_ID = IM.ID
		INNER JOIN Inv_Store SI
		ON SI.ID = IMS.Store_ID
		AND SI.SubsidiaryID = @subsidiaryID
		AND ( SI.ID = @storeId  OR @storeId IS NULL )
		LEFT JOIN #hp_tempview IMSV
		ON IMSV.item_id = IM.ID
		AND IMSV.store_id = SI.ID
		LEFT JOIN #HT_ItemWiseSales IMWS
		ON IMWS.ItemId = IM.ID
		AND IMWS.StoreId = SI.ID
		LEFT JOIN #HT_ItemWiseSalesReturn IMWSR
		ON IMWSR.ItemId = IM.ID
		AND IMWSR.StoreId = SI.ID
		LEFT JOIN #HT_PendingPrchaseOrder PPO
		ON PPO.Item_ID = IM.ID
		AND PPO.Store_ID = SI.ID
		ORDER BY IM.Code
	END
	

	IF OBJECT_ID('tempdb..#HT_ItemWiseSales') IS NOT NULL DROP TABLE #HT_ItemWiseSales
	IF OBJECT_ID('tempdb..#HT_PendingPrchaseOrder') IS NOT NULL DROP TABLE #HT_PendingPrchaseOrder
	IF OBJECT_ID('tempdb..#HT_ItemDeatils') IS NOT NULL DROP TABLE #HT_ItemDeatils
	IF OBJECT_ID('tempdb..#HT_ItemWiseSalesReturn') IS NOT NULL DROP TABLE #HT_ItemWiseSalesReturn
	IF OBJECT_ID('tempdb..#hp_tempview') IS NOT NULL DROP TABLE #hp_tempview
END
GO
/****** Object:  StoredProcedure [dbo].[Sp_CreateActualProductionVoucher]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[Sp_CreateActualProductionVoucher]
	@SubId int,
	@DistributionTransLastDate date = null,
	@DistributionToDate date
AS
BEGIN

 CREATE TABLE #TempTable(
 AccountID int ,
 TotalDebit float ,
 TotalCredit float ,
 Diff float )

  CREATE TABLE #CreditValuesTempTable(
   AccountID int ,
   CostCenterId int ,
   CreditValue float ,
   DebitValue float)

INSERT INTO #TempTable (AccountID, TotalDebit,TotalCredit,Diff) 
Select   GL_VoucherDetails.AccountNoID, ISNULL(SUM(Debit),0) as TotalDebit , ISNULL(SUM(Credit),0) as TotalCredit , ISNULL(SUM(Debit) - SUM(Credit),0)  as Diff   
from GL_Vouchers
JOIN GL_VoucherDetails on GL_Vouchers.ID = GL_VoucherDetails.VoucherID
Where GL_VoucherDetails.AccountNoID IN (Select AccountID from GL_Accounts
						Where CategoryID IN (Select ID from GL_AccountCategory Where Code = 11)
						AND AccountID Not IN (Select top 1 ProductionExpensesId from GL_Setup )
						AND Type = 2)
AND GL_Vouchers.SubsidaryID = @SubId
AND ((GL_Vouchers.VouhcerDate >= @DistributionTransLastDate and GL_Vouchers.VouhcerDate <= @DistributionToDate)
	  OR 
	(@DistributionTransLastDate Is NULL and GL_Vouchers.VouhcerDate <= @DistributionToDate))  

Group By GL_VoucherDetails.AccountNoID

--Select * from #TempTable

Declare @TotalOfProductionQty float = (Select  SUM(Qty * Inv_Items.IndirectExpensesUnit)
from Inv_Receipt_h 
Join Inv_Receipt_d On Inv_Receipt_h.ID = Inv_Receipt_d.Parent_ID
Join Inv_Items on Inv_Items.ID = Inv_Receipt_d.Item_ID
Where 
((CAST(Entry_Date as date) >= @DistributionTransLastDate and CAST(Entry_Date as date) <= @DistributionToDate)
	  OR 
	(@DistributionTransLastDate Is NULL and CAST(Entry_Date as date) <= @DistributionToDate))
 and Inv_Receipt_h.Code = 82 and FinishedProductID IS NULL)

DECLARE @MyCursor CURSOR;
DECLARE @receiptId int , @ItemQty float  , @CostCenterId int ,@TotalProductionCost float ,@StoreAccount int;

BEGIN
    SET @MyCursor = CURSOR FOR
    Select  Inv_Receipt_h.ID, (Inv_Receipt_d.Qty * Inv_Items.IndirectExpensesUnit) as ItemQty , mstr_Branch.CostCenterId, TotalProductionCost , Inv_Store.StoreAccount
	from Inv_Receipt_h 
	Join Inv_Receipt_d On Inv_Receipt_h.ID = Inv_Receipt_d.Parent_ID
	Join Inv_Items on Inv_Items.ID = Inv_Receipt_d.Item_ID
	Join mstr_Branch on mstr_Branch.ID = Inv_Receipt_h.Branch_ID
	Join Inv_Store on Inv_Store.ID = Inv_Receipt_d.Store_ID
	Where 
	((CAST(Entry_Date as date) >= @DistributionTransLastDate and CAST(Entry_Date as date) <= @DistributionToDate)
	  OR 
	(@DistributionTransLastDate Is NULL and CAST(Entry_Date as date) <= @DistributionToDate)) 
	AND Inv_Items.IndirectExpensesUnit != 0
	AND Inv_Receipt_h.Code = 82 and FinishedProductID IS NULL

    OPEN @MyCursor 
    FETCH NEXT FROM @MyCursor 
    INTO @receiptId , @ItemQty , @CostCenterId,@TotalProductionCost  ,@StoreAccount 

    WHILE @@FETCH_STATUS = 0
    BEGIN

      INSERT INTO #CreditValuesTempTable (AccountId, CostCenterId,CreditValue,DebitValue) 
	  Select  AccountID , @CostCenterId ,Diff * (@ItemQty / @TotalOfProductionQty) , 0  from #TempTable

      FETCH NEXT FROM @MyCursor 
      INTO @receiptId , @ItemQty , @CostCenterId,@TotalProductionCost  ,@StoreAccount 
    END; 

    CLOSE @MyCursor ;
    DEALLOCATE @MyCursor;
END;

--====================================================================
DECLARE @MyCursor2 CURSOR;
DECLARE @TotalProductionCost2 float  , @CostCenterId2  int ,@StoreAccount2 int ;

BEGIN
    SET @MyCursor2 = CURSOR FOR
    Select Sum(CreditValue) , Stores.CostCenterId , Stores.StoreAccount from #CreditValuesTempTable 
	JOIN(Select distinct mstr_Branch.CostCenterId , Inv_Store.StoreAccount
	from Inv_Receipt_h 
	Join Inv_Receipt_d On Inv_Receipt_h.ID = Inv_Receipt_d.Parent_ID
	Join Inv_Items on Inv_Items.ID = Inv_Receipt_d.Item_ID
	Join mstr_Branch on mstr_Branch.ID = Inv_Receipt_h.Branch_ID
	Join Inv_Store on Inv_Store.ID = Inv_Receipt_d.Store_ID
	Where 
	((CAST(Entry_Date as date) >= @DistributionTransLastDate and CAST(Entry_Date as date) <= @DistributionToDate)
	  OR 
	(@DistributionTransLastDate Is NULL and CAST(Entry_Date as date) <= @DistributionToDate)) 
	AND Inv_Items.IndirectExpensesUnit != 0
	AND Inv_Receipt_h.Code = 82 and FinishedProductID IS NULL) Stores ON Stores.CostCenterId = #CreditValuesTempTable.CostCenterId
	Group By Stores.CostCenterId, Stores.StoreAccount

    OPEN @MyCursor2 
    FETCH NEXT FROM @MyCursor2 
    INTO @TotalProductionCost2   , @CostCenterId2   ,@StoreAccount2  ;

    WHILE @@FETCH_STATUS = 0
    BEGIN

     INSERT INTO #CreditValuesTempTable (AccountId, CostCenterId,CreditValue,DebitValue) 
	  Select  @StoreAccount2 , 0 ,0 , @TotalProductionCost2 

      FETCH NEXT FROM @MyCursor2 
    INTO @TotalProductionCost2   , @CostCenterId2   ,@StoreAccount2  ;
    END; 

    CLOSE @MyCursor2 ;
    DEALLOCATE @MyCursor2;
END;
--==============

Select AccountID , CostCenterId  , SUM(CreditValue) as CreditValue  ,SUM(DebitValue) as DebitValue
from #CreditValuesTempTable 
Group By CostCenterId , AccountID
DROP TABLE #TempTable
DROP TABLE #CreditValuesTempTable
END
GO
/****** Object:  StoredProcedure [dbo].[SP_DeshbordNotificationForItemMinStock]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[SP_DeshbordNotificationForItemMinStock]
(
	@subsidiaryId int,
	@userId int,
	@lang varchar(10)
)
As
BEGIN

	IF(@lang = 'en-US')
	BEGIN

		SELECT INVSTR.Code, 
		INVSTR.Name,
		count(1) ItemCount,
		INVSTR.ID
		FROM Inv_Items INVITM 
		INNER JOIN Inv_Items_Store INVITMSTR
		ON INVITM.ID = INVITMSTR.Item_ID 
		INNER JOIN Inv_Store INVSTR
		ON INVITMSTR.Store_ID = INVSTR.ID 
		AND INVITMSTR.Min_Qty  > 0
		where INVITMSTR.Qty <= INVITMSTR.Min_Qty 
		AND Item_Type in (1,4) 
		AND INVSTR.SubsidiaryID= @subsidiaryId
		GROUP BY INVSTR.Code,INVSTR.Name,INVSTR.ID

	END
	ELSE
	BEGIN
		
		SELECT INVSTR.Code, 
		INVSTR.Name_AR AS Name,
		count(1) ItemCount,
		INVSTR.ID
		FROM Inv_Items INVITM 
		INNER JOIN Inv_Items_Store INVITMSTR
		ON INVITM.ID = INVITMSTR.Item_ID 
		INNER JOIN Inv_Store INVSTR
		ON INVITMSTR.Store_ID = INVSTR.ID 
		AND INVITMSTR.Min_Qty  > 0
		where INVITMSTR.Qty <= INVITMSTR.Min_Qty 
		AND Item_Type in (1,4) 
		AND INVSTR.SubsidiaryID= @subsidiaryId
		GROUP BY INVSTR.Code,INVSTR.Name_AR,INVSTR.ID

	END


	
	
END
GO
/****** Object:  StoredProcedure [dbo].[SP_DeshbordNotificationForTransferOrdersPendingApporve]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[SP_DeshbordNotificationForTransferOrdersPendingApporve]
(
	@subsidiaryId int,
	@userId int,
	@lang varchar(10)
)
As
BEGIN

	IF(@lang = 'en-US')
	BEGIN
		SELECT 
		ST.ID,
		ST.Code,
		ST.Name,
		count(1) As ApprovePendingCount
		FROM Inv_Receipt_h  Header 
		INNER JOIN UserBranch UB
		ON Header.Branch_ID = UB.BranchID
		AND UB.UserID = @userId
		AND Header.SubsidiaryID = @subsidiaryId
		AND ((Header.Code = 80 and '-1' <> '-1' ) or (Header.Code = 80 and '-1' = '-1'  
		AND (Header.isApproved = 0 or Header.isApproved is null)))
		INNER JOIN Inv_Store ST
		ON ST.ID = Header.ToStoreID
		WHERE (Header.ERPStatus =1 or Header.ERPStatus is null or Header.ERPStatus =0)
		GROUP BY ST.Name,ST.Code,ST.ID
	END
	BEGIN
		SELECT 
		ST.ID,
		ST.Code,
		ST.Name_AR AS Name ,
		count(1) As ApprovePendingCount
		FROM Inv_Receipt_h  Header 
		INNER JOIN UserBranch UB
		ON Header.Branch_ID = UB.BranchID
		AND UB.UserID = @userId
		AND Header.SubsidiaryID = @subsidiaryId
		AND ((Header.Code = 80 and '-1' <> '-1' ) or (Header.Code = 80 and '-1' = '-1'  
		AND (Header.isApproved = 0 or Header.isApproved is null)))
		INNER JOIN Inv_Store ST
		ON ST.ID = Header.ToStoreID
		WHERE (Header.ERPStatus =1 or Header.ERPStatus is null or Header.ERPStatus =0)
		GROUP BY ST.ID,ST.Name_AR,ST.Code
	END

END
GO
/****** Object:  StoredProcedure [dbo].[Sp_ExpensesDetails]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[Sp_ExpensesDetails]
(
	@Status int= 0,
    @CustomerId int= 0,
    @FromDate date= '',
    @ToDate date= '',
    @EmployeeId int= 0,
    @CostCenterId int= 0,
    @PaidBy int= 0,
    @SubsidaryId int= 0,
    @Language varchar(15)=''

)
AS
BEGIN
	Declare @l_str nvarchar(MAX) = ''
	Declare @l_strcriteria nvarchar(MAX) = ''
	SET @l_str = '	SELECT 
					EXP.ID,
					'+CASE WHEN @Language = 'en-US' THEN 'BRN.Name ' ELSE 'BRN.Name_AR' END +' AS Branch, 
					EXP.Date,
					EXP.Status,
					EXP.Description,
					'+CASE WHEN @Language = 'en-US' THEN 'IM.Name' ELSE 'IM.Name_AR' END +' AS Prosuct,
					EXP.Qty,
					EXp.Price,
					EXP.Total,
					EXP.PaidBy,
					'+CASE WHEN @Language = 'en-US' THEN 'US.Name' ELSE 'US.Name_AR' END +' AS Employee,
					'+CASE WHEN @Language = 'en-US' THEN 'AC.Name' ELSE 'AC.Name_AR' END +' AS ReinvoiceCustomer,
					'+CASE WHEN @Language = 'en-US' THEN 'COST.Name' ELSE 'COST.Name_AR' END +' AS CostCenter,
					EXP.Notes
					from GL_Expenses EXP
					INNER JOIN Inv_Items IM
					ON IM.ID =EXP.ProductId
					AND EXP.SubsidaryId =  '+Convert( varchar(10), @SubsidaryId )+'
					INNER JOIN Security_Users US
					ON US.Id = EXP.EmployeeId
					INNER JOIN GL_Accounts AC
					ON AC.AccountID = EXP.ReinvoiceCustomerId
					INNER JOIN mstr_Branch BRN
					ON BRN.ID = EXP.BranchId
					INNER JOIN mstr_Costcenter COST
					ON COST.ID = EXP.CostCenterId
					'


	IF( @Status > 0 )
	BEGIN
		SET @l_strcriteria = 'EXP.Status = '+Convert( varchar(10), @Status )+'' 
	END

	IF( @fromDate != '' and @todate != '' )
	BEGIN

		IF(@l_strcriteria != '')
		BEGIN
			SET @l_strcriteria = @l_strcriteria + 'AND EXP.Date between '''+Convert( varchar(20), @fromDate )+''' AND  '''+Convert( varchar(20), @todate )+''''
		END
		ELSE
		BEGIN
			SET @l_strcriteria = 'EXP.Date between '''+Convert( varchar(20), @fromDate )+''' AND  '''+Convert( varchar(20), @todate )+''''
		END

	END

	IF( @CustomerId > 0 )
	BEGIN

		IF(@l_strcriteria != '')
		BEGIN
			SET @l_strcriteria = @l_strcriteria + 'AND EXP.ReinvoiceCustomerId = '+Convert( varchar(10), @CustomerId )+''
		END
		ELSE
		BEGIN
			SET @l_strcriteria = 'EXP.ReinvoiceCustomerId = '+Convert( varchar(10), @CustomerId )+''
		END
	END

	IF( @EmployeeId > 0 )
	BEGIN

		IF(@l_strcriteria != '')
		BEGIN
			SET @l_strcriteria = @l_strcriteria + 'AND EXP.EmployeeId  = '+Convert( varchar(10), @EmployeeId )+''
		END
		ELSE
		BEGIN
			SET @l_strcriteria = 'EXP.EmployeeId  = '+Convert( varchar(10), @EmployeeId )+''
		END
	END

	IF( @CostCenterId > 0 )
	BEGIN

		IF(@l_strcriteria != '')
		BEGIN
			SET @l_strcriteria = @l_strcriteria + 'AND EXP.CostCenterId  = '+Convert( varchar(10), @CostCenterId )+''
		END
		ELSE
		BEGIN
			SET @l_strcriteria = 'EXP.CostCenterId  = '+Convert( varchar(10), @CostCenterId )+''
		END
	END

	IF( @PaidBy > 0 )
	BEGIN

		IF(@l_strcriteria != '')
		BEGIN
			SET @l_strcriteria = @l_strcriteria + 'AND EXP.PaidBy  = '+Convert( varchar(10), @PaidBy )+''
		END
		ELSE
		BEGIN
			SET @l_strcriteria = 'EXP.PaidBy  = '+Convert( varchar(10), @PaidBy )+''
		END
	END

	IF(@l_strcriteria <> '' )
	BEGIN 
		SET @l_str = @l_str + ' WHERE ' + @l_strcriteria
	END
	
	EXEC (@l_str )
END

GO
/****** Object:  StoredProcedure [dbo].[SP_FinanceBudgetReport]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_FinanceBudgetReport]
(
	@subsidiaryID int,
	@budgetId Int,
	@language varchar(10)
)
AS 
BEGIN

	SELECT *
	INTO #HT_Account
	FROM ( 
			SELECT 
			AccountID,
			Code,
			Name,
			Name_AR,
			ParentID,
			Type,
			LevelNo
			FROM GL_Accounts 
			WHERE LevelNo <= 3 
			AND Type = 1
			UNION ALL
			SELECT 
			AC.AccountID,
			AC.Code,
			AC.Name,
			AC.Name_AR,
			AC.ParentID,
			AC.Type,
			AC.LevelNo 
			FROM GL_Accounts AC
			INNER JOIN GL_AccountSubsidiary ACS
			ON ACS.AccountID = AC.AccountID
			AND ACS.SubsidiaryID = @subsidiaryID
			WHERE AC.LevelNo >= 4 
	) Account

	SELECT  
	BSD.AccountId,
	BSD.CreditAmount AS BudgetCredit ,
	BSD.DebitAmount AS BudgetDebit,
	ISNULL(SUM(VD.Credit),0) AS ActualCredit,
	ISNULL(SUM(VD.Debit),0) AS ActualDebit
	INTO #BudgetDetails
	FROM Budget_Setup BS
	INNER JOIN Sub_BudgetSetup BSD
	ON BSD.BudgetId = BS.ID
	LEFT JOIN GL_VoucherDetails VD
	ON VD.CostcenterID = BS.Cost_Center
	AND BSD.AccountId = VD.AccountNoID
	LEFT JOIN GL_Vouchers VS
	ON VS.ID = VD.VoucherID
	AND VS.VouhcerDate Between BS.FromDate AND BS.ToDate 
	INNER JOIN GL_Accounts AC
	ON AC.AccountID = BSD.AccountId
	WHere BS.id=@budgetId
	GROUP BY BSD.AccountId,
	BSD.CreditAmount,
	BSD.DebitAmount

	select 
	AC.*,
	ISNULL( BD.BudgetCredit , 0) AS BudgetCredit ,
	ISNULL( BD.BudgetDebit, 0) AS BudgetDebit,
	ISNULL( BD.ActualCredit , 0 ) AS ActualCredit,
	ISNULL( BD.ActualDebit , 0 ) AS ActualDebit
	INTO #FinalBudGetReport
	FROM #HT_Account AC 
	LEFT JOIN #BudgetDetails BD
	ON AC.AccountID = BD.AccountId

	UPDATE A  SET 
	BudgetCredit = B.BudgetCredit ,
	BudgetDebit = B.BudgetDebit,
	ActualCredit = B.ActualCredit, 
	ActualDebit = B.ActualDebit
	FROM #FinalBudGetReport  A
	INNER JOIN ( SELECT 
				ParentID,
				SUM(BudgetCredit) AS BudgetCredit,
				SUM(BudgetDebit) AS BudgetDebit,
				SUM(ActualCredit) AS ActualCredit,
				SUM(ActualDebit) AS ActualDebit 
				FROM #FinalBudGetReport 
				WHERE Type = 2
				GROUP BY ParentID ) B
	ON A.AccountID = B.ParentID

	Declare @MaxLevel int =( SELECT MAX(LevelNo) FROM #FinalBudGetReport WHERE Type = 1 )

	WHILE( @MaxLevel != 0 )
	BEGIN 

		UPDATE A  SET 
		BudgetCredit = B.BudgetCredit ,
		BudgetDebit = B.BudgetDebit,
		ActualCredit = B.ActualCredit, 
		ActualDebit = B.ActualDebit
		FROM #FinalBudGetReport  A
		INNER JOIN ( SELECT 
					ParentID,
					SUM(BudgetCredit) AS BudgetCredit,
					SUM(BudgetDebit) AS BudgetDebit,
					SUM(ActualCredit) AS ActualCredit,
					SUM(ActualDebit) AS ActualDebit 
					FROM #FinalBudGetReport 
					WHERE Type = 1
					AND LevelNo = @MaxLevel
					GROUP BY ParentID ) B
		ON A.AccountID = B.ParentID

		SET @MaxLevel = @MaxLevel - 1

	END

		
	Select 
	Code,
	CASE WHEN @language = 'en-US' THEN Name ELSE Name_AR END AS Name,
	Type,
	LevelNo,
	BudgetCredit,
	BudgetDebit,
	ActualCredit,
	ActualDebit,
 	( CASE WHEN  (BudgetDebit - BudgetCredit) < 0 THEN (BudgetDebit - BudgetCredit) * -1 ELSE (BudgetDebit - BudgetCredit) END )     
	 - (CASE WHEN  (ActualDebit - ActualCredit ) < 0 THEN (ActualDebit - ActualCredit ) * -1 ELSE (ActualDebit - ActualCredit ) END)
	 AS Difference,
	CONVERT(Decimal(18,2), CASE WHEN (BudgetDebit- BudgetCredit) != 0 THEN 
		(( ( CASE WHEN  (BudgetDebit - BudgetCredit) < 0 THEN (BudgetDebit - BudgetCredit) * -1 ELSE (BudgetDebit - BudgetCredit) END )     
	 - (CASE WHEN  (ActualDebit - ActualCredit ) < 0 THEN (ActualDebit - ActualCredit ) * -1 ELSE (ActualDebit - ActualCredit ) END) ) /   
	 (BudgetDebit- BudgetCredit))*100
	ELSE 0 END ) AS Deviation 
	INTO #FinalBudGetReportResult
	FROM #FinalBudGetReport 
	order by Code

	select * from #FinalBudGetReportResult
	WHERE BudgetCredit <> 0 OR BudgetDebit <> 0 OR ActualCredit<> 0 OR ActualDebit <> 0 OR Difference <> 0 OR Deviation <> 0

	IF OBJECT_ID('tempdb..#HT_Account') IS NOT NULL DROP TABLE #HT_Account
	IF OBJECT_ID('tempdb..#BudgetDetails') IS NOT NULL DROP TABLE #BudgetDetails
	IF OBJECT_ID('tempdb..#FinalBudGetReport') IS NOT NULL DROP TABLE #FinalBudGetReport
	IF OBJECT_ID('tempdb..#FinalBudGetReportResult') IS NOT NULL DROP TABLE #FinalBudGetReportResult
	
END


GO
/****** Object:  StoredProcedure [dbo].[Sp_GetCreditProductionTransactiona]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create PROCEDURE [dbo].[Sp_GetCreditProductionTransactiona]
	@SubId int,
	@DistributionTransLastDate date = null,
	@DistributionToDate date
AS
BEGIN

Select GL_VoucherDetails.*  from GL_Vouchers
Join GL_VoucherDetails on GL_Vouchers.ID = GL_VoucherDetails.VoucherID
Where GL_VoucherDetails.AccountNoID IN (Select AccountID from GL_Accounts
						Where CategoryID IN (Select ID from GL_AccountCategory Where Code = 11)
						AND AccountID Not IN (Select top 1 ProductionExpensesId from GL_Setup )
						AND Type = 2)
AND ((GL_Vouchers.VouhcerDate >= @DistributionTransLastDate and GL_Vouchers.VouhcerDate <= @DistributionToDate)
	  OR 
	(@DistributionTransLastDate Is NULL and GL_Vouchers.VouhcerDate <= @DistributionToDate))   
AND Credit > 0
END
GO
/****** Object:  StoredProcedure [dbo].[Sp_GetDebitProductionTransactiona]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create PROCEDURE [dbo].[Sp_GetDebitProductionTransactiona]
	@SubId int,
	@DistributionTransLastDate date = null,
	@DistributionToDate date
AS
BEGIN

Select GL_VoucherDetails.*  from GL_Vouchers
Join GL_VoucherDetails on GL_Vouchers.ID = GL_VoucherDetails.VoucherID
Where GL_VoucherDetails.AccountNoID IN (Select AccountID from GL_Accounts
						Where CategoryID IN (Select ID from GL_AccountCategory Where Code = 11)
						AND AccountID Not IN (Select top 1 ProductionExpensesId from GL_Setup )
						AND Type = 2)
AND ((GL_Vouchers.VouhcerDate >= @DistributionTransLastDate and GL_Vouchers.VouhcerDate <= @DistributionToDate)
	  OR 
	(@DistributionTransLastDate Is NULL and GL_Vouchers.VouhcerDate <= @DistributionToDate))   
AND Credit > 0
END
GO
/****** Object:  StoredProcedure [dbo].[SP_GetItemPricingDetails]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_GetItemPricingDetails] --34,'232,124,234',null,null,'en-US'
(
	@subsidiaryID int,
	@vendorId int,
	@procductCategory varchar(MAX),
	@branch int,
	@invoiceno int,
	@lang varchar(10)
)
AS 
BEGIN 

	SELECT 
	item_id,
	AvgCost 
	INTO #HT_ItemWiseAvgCost
	FROM ( select item_id,
				AvgCost, 
				ROW_NUMBER() OVER(PARTITION BY item_id ORDER BY Entry_Date DESC) AS RowNumber  
		   FROM AV_Inv_items_storeDate ) ItemWiseAvgCost 
	WHERE RowNumber = 1

	declare @l_str varchar(max) = ''
	SET @l_str ='
	SELECT 
	DISTINCT
	IM.ID AS Item_Id,
	IM.Code,
	'+CASE WHEN @lang = 'en-US' THEN 'IM.Name As ItemName,' ELSE 'IM.Name_Ar As ItemName,' END +'
	'+CASE WHEN @lang = 'en-US' THEN 'IU.Name As UnitName,' ELSE 'IU.Name As UnitName,' END +'
	IMU.Unit_id,
	CONVERT( decimal(18,3), ISNULL(IMU.Sale_price1,0) ) AS price1,
	CONVERT( decimal(18,3), ISNULL(IMU.Sale_price2,0) ) AS price2,
	CONVERT( decimal(18,3), ISNULL(IMU.Sale_price3,0) ) AS price3,
	CONVERT( decimal(18,3), ISNULL(IMU.Sale_price4,0) ) AS price4,
	CONVERT( decimal(18,3), ISNULL( IMV.LastPrice , 0)) AS LastPrice,
	CONVERT( decimal(18,3), ISNULL(IMV.Price,0)) AS Price,
	CONVERT( decimal(18,3), ( ISNULL(HTIMAC.AvgCost,0) * ISNULL(IMU.FinalConv,0) )) AS COST,
	CONVERT( decimal(18,3), ISNULL(IM.SpecialPriceValue,0)) AS SpecialPrice
	FROM Inv_Items IM
	INNER JOIN Inv_Items_Units IMU
	ON IM.ID = IMU.Item_ID
	AND IM.Subsidiary_ID = '+ CONVERT( varchar(10), @subsidiaryID )  +'
	INNER JOIN Inv_Unit IU
	ON IU.ID = IMU.Unit_id
	INNER JOIN Inv_Items_Categories IMC
	ON IM.ID = IMC.Item_ID
	'+CASE WHEN @procductCategory Is NULL  THEN  '' ELSE ' AND IMC.ItemCategory_ID IN  ( '+ @procductCategory +' ) ' END +'
	LEFT JOIN Inv_Items_Vendors IMV
	ON IMV.ItemID = IM.ID
	'+CASE WHEN @vendorId Is NULL  THEN  '' ELSE ' AND IMV.VendorID =    '+ CONVERT( varchar(10), @vendorId )  END +'
	LEFT JOIN #HT_ItemWiseAvgCost HTIMAC
	ON HTIMAC.item_id = IM.ID
	LEFT JOIN Inv_Receipt_d INVD
	ON INVD.Item_ID = IM.ID
	AND INVD.Unit_ID = IMU.Unit_id
	LEFT JOIN Inv_Receipt_h INVH
	ON INVH.ID = INVD.Parent_ID
	AND INVH.Vendor_ID = IMV.VendorID
	AND INVH.Code = 1
	'+CASE WHEN @invoiceno Is NULL  THEN  '' ELSE 'AND INVH.Entry_No =   '+ CONVERT( varchar(10), @invoiceno )  END +'
	'+CASE WHEN @branch Is NULL  THEN  '' ELSE 'AND INVH.Branch_ID =   '+ CONVERT( varchar(10), @branch ) +' WHERE INVH.ID IS NOT NULL'  END 
	
	PRINT (@l_str)
	EXEC (@l_str)

	IF OBJECT_ID('tempdb..#HT_ItemWiseAvgCost') IS NOT NULL DROP TABLE #HT_ItemWiseAvgCost
END
GO
/****** Object:  StoredProcedure [dbo].[Sp_GetProductionExpenses]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[Sp_GetProductionExpenses]
	@SubId int,
	@DistributionTransLastDate date = null,
	@DistributionToDate date
AS
BEGIN

Select ISNULL(SUM(Debit),0) as TotalDebit , ISNULL(SUM(Credit),0) as TotalCredit , ISNULL(SUM(Debit) - SUM(Credit),0)  as Diff  from GL_Vouchers
Join GL_VoucherDetails on GL_Vouchers.ID = GL_VoucherDetails.VoucherID
Where GL_VoucherDetails.AccountNoID IN (Select AccountID from GL_Accounts
						Where CategoryID IN (Select ID from GL_AccountCategory Where Code = 11)
						AND AccountID Not IN (Select top 1 ProductionExpensesId from GL_Setup )
						AND Type = 2)
AND GL_Vouchers.SubsidaryID = @SubId
AND ((GL_Vouchers.VouhcerDate >= @DistributionTransLastDate and GL_Vouchers.VouhcerDate <= @DistributionToDate)
	  OR 
	(@DistributionTransLastDate Is NULL and GL_Vouchers.VouhcerDate <= @DistributionToDate))   

END
GO
/****** Object:  StoredProcedure [dbo].[SP_GetSalesBudgetDetails]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_GetSalesBudgetDetails]
(
	@subsidiaryId int,
	@itemId int,
	@vendorId int,
	@productCategory varchar(max),
	@salesMenid int,
	@groupby int
)
AS
BEGIN
	
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	DECLARE @l_Str varchar(MAX) = ''

	IF(@productCategory != '')
	BEGIN

		CREATE TABLE #HT_Category
		(
			id int,
			ParentID int,
			Name varchar(max)

		)

		Declare @l_Str2 varchar(max) = ';WITH cte AS (
								SELECT id
								   ,ParentID
								   ,Name
								FROM Inv_ProductCategories
								WHERE ID IN (' + @productCategory +' )

								UNION ALL

								SELECT
								   t.id
								   ,t.parentID
								   ,t.Name      
								FROM
								   Inv_ProductCategories t
								   INNER JOIN cte c
								   ON t.ParentId = c.id
							)

							SELECT distinct *
							FROM cte '

	
		INSERT INTO #HT_Category
		EXEC (@l_Str2)

		SET @productCategory = ''
		
		SELECT 
		@productCategory = coalesce(@productCategory + ', ', '') + cast(id as nvarchar(5))
		FROM #HT_Category

		SET @productCategory =  right(@productCategory, len(@productCategory)-1) 

	END

	IF(@groupby =  1 ) --GROOP BY ITEM WISE
	BEGIN

		SET @l_Str = 'SELECT 
					  ITM.ID AS ItemId, 
					  ITM.Code,
					  ITM.Name,
					  ITM.Name_AR
					  FROM Inv_Items ITM
					  LEFT JOIN Inv_Items_Vendors ITMV
					  ON ITMV.ItemID = ITM.ID
					  LEFT JOIN GL_Accounts AC
					  ON AC.AccountID = ITMV.VendorID
					  LEFT JOIN Inv_Items_Categories ITMCAT
					  ON ITMCAT.Item_ID = ITM.ID
					  LEFT JOIN Inv_ProductCategories PROCAT
					  ON PROCAT.ID = ITMCAT.ItemCategory_ID
					  LEFT JOIN Crm_LeadOwnerItemCategories USD
					  ON USD.ItemCategoryId = PROCAT.ID
					  LEFT JOIN Security_Users US
					  ON US.Id = USD.UserId
					  WHERE Subsidiary_ID = '+ CONVERT(VARCHAR(18),@subsidiaryId ) +' 
					  #itemId
					  #vendorId
					  #productCategory
					  #salesMenid
					  GROUP BY  ITM.ID, 
					  ITM.Code,
					  ITM.Name,
					  ITM.Name_AR'

	END
	ELSE IF(@groupby =  2) --GROOP BY Prodct Category wise
	BEGIN
		
		SET @l_Str = 'SELECT 
					  DISTINCT
					  ITMCAT.ItemCategory_ID AS ProductCategoryId, 
					  PROCAT.Code,
					  PROCAT.Name,
					  PROCAT.Name AS Name_AR
					  FROM Inv_Items ITM
					  LEFT JOIN Inv_Items_Vendors ITMV
					  ON ITMV.ItemID = ITM.ID
					  LEFT JOIN GL_Accounts AC
					  ON AC.AccountID = ITMV.VendorID
					  LEFT JOIN Inv_Items_Categories ITMCAT
					  ON ITMCAT.Item_ID = ITM.ID
					  LEFT JOIN Inv_ProductCategories PROCAT
					  ON PROCAT.ID = ITMCAT.ItemCategory_ID
					  LEFT JOIN Crm_LeadOwnerItemCategories USD
					  ON USD.ItemCategoryId = PROCAT.ID
					  LEFT JOIN Security_Users US
					  ON US.Id = USD.UserId
					  WHERE ITMCAT.ItemCategory_ID IS NOT NULL
					  AND Subsidiary_ID = '+ CONVERT(VARCHAR(18),@subsidiaryId ) +' 
					  #itemId
					  #vendorId
					  #productCategory
					  #salesMenid
					  GROUP BY  
					  ITMCAT.ItemCategory_ID, 
					  PROCAT.Code,
					  PROCAT.Name'

	END
	ELSE IF(@groupby =  3) --GROOP BY Prodct Vendor wise
	BEGIN
		
		SET @l_Str = 'SELECT 
					  ITMV.VendorID AS VendorId, 
					  AC.Code,
					  AC.Name,
					  AC.Name_AR
					  FROM Inv_Items ITM
					  LEFT JOIN Inv_Items_Vendors ITMV
					  ON ITMV.ItemID = ITM.ID
					  LEFT JOIN GL_Accounts AC
					  ON AC.AccountID = ITMV.VendorID
					  LEFT JOIN Inv_Items_Categories ITMCAT
					  ON ITMCAT.Item_ID = ITM.ID
					  LEFT JOIN Inv_ProductCategories PROCAT
					  ON PROCAT.ID = ITMCAT.ItemCategory_ID
					  LEFT JOIN Crm_LeadOwnerItemCategories USD
					  ON USD.ItemCategoryId = PROCAT.ID
					  LEFT JOIN Security_Users US
					  ON US.Id = USD.UserId
					  WHERE ITMV.VendorID IS NOT NULL
					  AND Subsidiary_ID = '+ CONVERT(VARCHAR(18),@subsidiaryId ) +' 
					  #itemId
					  #vendorId
					  #productCategory
					  #salesMenid
					  GROUP BY  
					  ITMV.VendorID, 
					  AC.Code,
					  AC.Name,
					  AC.Name_AR'

	END
	ELSE IF(@groupby =  4)--GROOP BY SalesMen wise
	BEGIN
		
		SET @l_Str = 'SELECT 
					  USD.UserId AS SalesMenId, 
					  US.Code,
					  US.Name,
					  US.Name AS Name_AR
					  FROM Inv_Items ITM
					  LEFT JOIN Inv_Items_Vendors ITMV
					  ON ITMV.ItemID = ITM.ID
					  LEFT JOIN GL_Accounts AC
					  ON AC.AccountID = ITMV.VendorID
					  LEFT JOIN Inv_Items_Categories ITMCAT
					  ON ITMCAT.Item_ID = ITM.ID
					  LEFT JOIN Inv_ProductCategories PROCAT
					  ON PROCAT.ID = ITMCAT.ItemCategory_ID
					  LEFT JOIN Crm_LeadOwnerItemCategories USD
					  ON USD.ItemCategoryId = PROCAT.ID
					  LEFT JOIN Security_Users US
					  ON US.Id = USD.UserId
					  WHERE USD.UserId IS NOT NULL 
					  AND Subsidiary_ID = '+ CONVERT(VARCHAR(18),@subsidiaryId ) +' 
					  #itemId
					  #vendorId
					  #productCategory
					  #salesMenid
					  GROUP BY 
					  USD.UserId, 
					  US.Code,
					  US.Name'

	END

	IF(@itemId > 0 )
	BEGIN
		SET @l_Str = REPLACE(@l_Str,'#itemId',' AND ITM.ID = ' + CONVERT(varchar(18), @itemId ) )
	END
	ELSE
	BEGIN
		SET @l_Str = REPLACE(@l_Str,'#itemId','' )
	END
	IF(@vendorId > 0 )
	BEGIN
		SET @l_Str = REPLACE(@l_Str,'#vendorId',' AND ITMV.VendorID = ' + CONVERT(varchar(18), @vendorId ) )
	END
	ELSE
	BEGIN
		SET @l_Str = REPLACE(@l_Str,'#vendorId','' )
	END
	IF( @productCategory != '' )
	BEGIN
		SET @l_Str = REPLACE(@l_Str,'#productCategory',' AND ITMCAT.ItemCategory_ID IN ( ' +  @productCategory +' )')
	END
	ELSE
	BEGIN
		SET @l_Str = REPLACE(@l_Str,'#productCategory','' )
	END
	IF(@salesMenid > 0 )
	BEGIN
		SET @l_Str = REPLACE(@l_Str,'#salesMenid',' AND USD.UserId = ' + CONVERT(varchar(18), @salesMenid ) )
	END
	ELSE
	BEGIN
		SET @l_Str = REPLACE(@l_Str,'#salesMenid','')
	END
	
	EXEC (@l_Str)

END
GO
/****** Object:  StoredProcedure [dbo].[SP_GetSalesBudgetDetailsEdit]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_GetSalesBudgetDetailsEdit]
(
	@ID int
)
AS
BEGIN
	
	select 
	ISNULL(IM.Code,ISNULL(VD.Code,ISNULL(POD.Code,ISNULL(US.Code,'')))) AS Code,
	ISNULL(IM.Name,ISNULL(VD.Name,ISNULL(POD.Name,ISNULL(US.Name,'')))) AS Name,
	ISNULL(IM.Name_AR,ISNULL(VD.Name_AR,ISNULL(POD.Name_AR,ISNULL(US.Name,'')))) AS Name_AR,
	D.*
	from Sales_Budget_Details D
	LEFT JOIN Inv_Items IM
	ON IM.ID = D.ItemId
	LEFT JOIN GL_Accounts VD
	ON VD.AccountID = D.VendorId
	LEFT JOIN Inv_ProductCategories POD
	ON POD.ID = D.ProductCategoryId
	LEFT JOIN Security_Users US
	ON US.Id = D.SalesmenId
	WHERE D.HeaderId =@ID

END
GO
/****** Object:  StoredProcedure [dbo].[Sp_InvoiceFollowupDetails]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[Sp_InvoiceFollowupDetails]
(
	 @branchMasterId int = 0,
	 @fromDate date = null,
	 @todate date =null,
	 @fromInvNo int = 0,
	 @toInvNo int= 0,
	 @salesManId int = 0,
	 @customerId int = 0,
	 @custCategory1Id int = 0,
	 @custCategory2Id int = 0,
	 @lang varchar(15) = ''

)
AS
BEGIN

	Declare @l_str nvarchar(MAX) = ''
	Declare @l_strcriteria nvarchar(MAX) = ''
	SET @l_str = '	SELECT 
					H.ID,
					Entry_No As BillNo,
					'+CASE WHEN @lang = 'en-US' THEN 'TC.Name As [Transaction]' ELSE 'TC.Name_AR As [Transaction]' END +', 
					CONVERT(date,H.Entry_Date) As Date,
					'+CASE WHEN @lang = 'en-US' THEN 'ISNULL(AC.Name,'''')AS CustomerName' ELSE 'ISNULL(AC.Name_AR,'''')AS CustomerName' END +', 
					ISNULL( H.Vendor_ID, 0 ) AS Vendor_ID,
					'+CASE WHEN @lang = 'en-US' THEN 'ISNULL( US.Name , '''') AS SalesMan' ELSE 'ISNULL( US.Name_AR , '''') AS SalesMan' END +', 
					'+CASE WHEN @lang = 'en-US' THEN 'ISNULL( DR.Name ,'''') AS Driver' ELSE 'ISNULL( DR.Name_AR ,'''') AS Driver' END +', 
					ISNULL ( H.DriverId,0)AS DriverId,
					H.Printing,
					H.StoreDelivery,
					H.CustomerRecieve,
					ISNULL( H.NetValue, 0) AS Amount
					FROM Inv_Receipt_h H
					INNER JOIN Inv_Transaction_Codes TC
					ON TC.Code = H.Code
					AND H.Code IN (51,52)
					LEFT JOIN GL_Accounts AC
					ON AC.AccountID = H.Vendor_ID
					Left JOIN Security_Users US
					ON US.Id = H.Empoyee_ID
					LEFT JOIN Security_Users DR
					ON Dr.Id = H.DriverId
					LEFT JOIN GL_CustomerStatuses CS
					ON CS.Id = AC.CustomerStatusId
					'


	IF( @branchMasterId > 0 )
	BEGIN
		SET @l_strcriteria = 'H.Branch_ID = '+Convert( varchar(10), @branchMasterId )+'' 
	END

	IF( @fromDate != '' and @todate != '' )
	BEGIN

		IF(@l_strcriteria != '')
		BEGIN
			SET @l_strcriteria = @l_strcriteria + 'AND H.Entry_Date between '''+Convert( varchar(20), @fromDate )+''' AND  '''+Convert( varchar(20), @todate )+' 23:59:00'''
		END
		ELSE
		BEGIN
			SET @l_strcriteria = 'H.Entry_Date between '''+Convert( varchar(20), @fromDate )+''' AND  '''+Convert( varchar(20), @todate )+' 23:59:00'''
		END

	END

	IF( @fromInvNo > 0 and @toInvNo > 0 )
	BEGIN

		IF(@l_strcriteria != '')
		BEGIN
			SET @l_strcriteria = @l_strcriteria + 'AND H.Entry_No between '+Convert( varchar(10), @fromInvNo )+' AND  '+Convert( varchar(10), @toInvNo )+''
		END
		ELSE
		BEGIN
			SET @l_strcriteria = 'H.Entry_No between '+Convert( varchar(10), @fromInvNo )+' AND  '+Convert( varchar(10), @toInvNo )+''
		END
	END

	IF( @salesManId > 0 )
	BEGIN

		IF(@l_strcriteria != '')
		BEGIN
			SET @l_strcriteria = @l_strcriteria + 'AND H.Empoyee_ID  = '+Convert( varchar(10), @salesManId )+''
		END
		ELSE
		BEGIN
			SET @l_strcriteria = 'H.Empoyee_ID  = '+Convert( varchar(10), @salesManId )+''
		END
	END

	IF( @customerId > 0 )
	BEGIN

		IF(@l_strcriteria != '')
		BEGIN
			SET @l_strcriteria = @l_strcriteria + 'AND H.Vendor_ID  = '+Convert( varchar(10), @customerId )+''
		END
		ELSE
		BEGIN
			SET @l_strcriteria = 'H.Vendor_ID  = '+Convert( varchar(10), @customerId )+''
		END
	END

	IF( @customerId > 0 )
	BEGIN

		IF(@l_strcriteria != '')
		BEGIN
			SET @l_strcriteria = @l_strcriteria + 'AND H.Vendor_ID  = '+Convert( varchar(10), @customerId )+''
		END
		ELSE
		BEGIN
			SET @l_strcriteria = 'H.Vendor_ID  = '+Convert( varchar(10), @customerId )+''
		END
	END

	IF( @custCategory2Id > 0 )
	BEGIN

		IF(@l_strcriteria != '')
		BEGIN
			SET @l_strcriteria = @l_strcriteria + 'AND CS.Id  = '+Convert( varchar(10), @custCategory2Id )+''
		END
		ELSE
		BEGIN
			SET @l_strcriteria = 'CS.Id  = '+Convert( varchar(10), @custCategory2Id )+''
		END
	END

	IF(@l_strcriteria <> '' )
	BEGIN 
		SET @l_str = @l_str + ' WHERE ' + @l_strcriteria
	END
	PRINT @l_str
	EXEC (@l_str )
END
GO
/****** Object:  StoredProcedure [dbo].[SP_ItemUnitWisePriceUpdate]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[SP_ItemUnitWisePriceUpdate]
(
	@fromDate date,
	@toDate date,
	@data ItemUnitWisePriceUpdate READONLY
)
AS
Begin
	
	Select * INTO #PriceDetails from @data

	Select DISTINCT ItemId,SpecialPrice INTO #SpecialPriceDetails from @data

	UPDATE IMU
	SET
	IMU.Sale_price1 = HT.Price1,
	IMU.Sale_price2 = HT.Price2,
	IMU.Sale_price3 = HT.Price3,
	IMU.Sale_price4 = HT.Price4
	FROM Inv_Items_Units IMU
	INNER JOIN #PriceDetails  HT
	ON HT.ItemId = IMU.Item_ID
	AND HT.UnitId = IMU.Unit_id

	UPDATE IM 
	SET IM.SpecialPriceValue = HT.SpecialPrice,
	IM.AvailableForSaleFromDate = ( case when IM.AvailableForSale = 2 AND @fromDate Is not Null THEN @fromDate ELSE IM.AvailableForSaleFromDate  END   ),
	IM.AvailableForSaleToDate = ( case when IM.AvailableForSale = 2 AND @fromDate Is not Null THEN @toDate ELSE IM.AvailableForSaleToDate  END   )
	FROM Inv_Items IM
	INNER JOIN #SpecialPriceDetails HT
	ON HT.ItemId = IM.ID

	IF OBJECT_ID('tempdb..#PriceDetails') IS NOT NULL DROP TABLE #PriceDetails

	IF OBJECT_ID('tempdb..#SpecialPriceDetails') IS NOT NULL DROP TABLE #SpecialPriceDetails

END
GO
/****** Object:  StoredProcedure [dbo].[SP_MonthlyAssetdepressionReport]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_MonthlyAssetdepressionReport] --2019,63,null,null,'en-US'
(
	 @Year int,
	 @subsidaryId int,
	 @AssetTypeId int,
	 @costCenterId int,
	 @lang varchar(10)
)
AS 
BEGIN 

	/*Declare Variable*/  
	DECLARE @Pivot_Column [nvarchar](max);  
	DECLARE @has_Column [nvarchar](max);  
	DECLARE @Query [nvarchar](max);  
  
	/*Select Pivot Column*/  
	SELECT @Pivot_Column= COALESCE(@Pivot_Column+',','')+ QUOTENAME(Months) FROM  
	( SELECT DISTINCT FORMAT(CONVERT(date, FromDate) ,'MMMM', 'en-US') As Months 
	  FROM GL_AssetDepreciations where subsedaryid = @subsidaryId 
	  AND YEAR(CONVERT(date, FromDate) ) = @Year )Tab  
  
	SET @has_Column =  @Pivot_Column 

	SET @has_Column = REPLACE(@has_Column,',',' [numeric](18, 6) NULL, ')
	set @has_Column = @has_Column + ' [numeric](18, 6) NULL'


	/*Create Dynamic Query*/  
	SELECT @Query=' 
	CREATE TABLE #HT_AssetDepreciations (AssetMoveID int,AssetsID int,  '+ @has_Column  + ' ) 

	INSERT INTO #HT_AssetDepreciations
	SELECT AssetMoveID,AssetsID, '+@Pivot_Column+'FROM   
	(SELECT D.AssetMoveID,M.AssetsID, FORMAT(CONVERT(date, FromDate) ,''MMMM'', ''en-US'') as TMonth , D.DepreciationValue FROM GL_AssetDepreciations D
	INNER JOIN GL_AssetMoves M ON D.AssetMoveID = M.Id
	Where D.subsedaryid = '+( CONVERT(varchar(8), @subsidaryId ) )+' AND YEAR(CONVERT(date, D.FromDate) ) = '+( CONVERT(varchar(8), @Year ) )+' )Tab1  
	PIVOT  
	(  
	SUM(DepreciationValue) FOR TMonth IN ('+@Pivot_Column+')) AS Tab2  
	ORDER BY AssetMoveID

	SELECT ASE.Code,
	Convert(date,ASE.PurchaseDate) AS PurchaseDate,
	'+ CASE WHEN @lang = 'en-US' THEN  'ASE.AssetName' ELSE 'ASE.AssetName_AR' END + ' As AssetName ,
	'+ CASE WHEN @lang = 'en-US' THEN  'ASET.Name' ELSE 'ASET.Name_AR' END + ' AS AsetTypeName,
	'+ CASE WHEN @lang = 'en-US' THEN  'COC.Name' ELSE 'COC.Name_AR' END + ' AS CostCenter,
	ASE.OriginalCost,
	ASE.CumulativDepriciation,
	ASP.PurchaseValue,
	ASS.SalesValue,
	ASPY.PrvDepreciationValue,
	ASD.*
	FROM GL_Assets ASE
	INNER JOIN  GL_AssetsType ASET
	ON ASET.ID = ASE.AssetType
	INNER JOIN  (
	SELECT CostCenterID,AssetsID FROM(
	select 
	ROW_Number() OVER(Partition by AssetsID ORDER BY ID desc) AS RowNumber,
	CostCenterID,
	AssetsID
	from GL_AssetMoves) AssetMoves
	Where RowNumber = 1 ) ASM
	ON ASM.AssetsID = ASE.ID
	LEFT JOIN #HT_AssetDepreciations ASD
	ON ASD.AssetsID = ASE.ID
	INNER JOIN mstr_Costcenter COC
	ON COC.ID = ASM.CostCenterID
	LEFT JOIN (
	select AssetsID, SUM(AssetCosts) PurchaseValue
	FROM GL_AssetCosts 
	WHERE  YEAR( convert(date, MoveDate)) = '+( CONVERT(varchar(8), @Year ) )+'  
	AND RecordType = 3  
	GROUP BY AssetsID
	) AS ASP 
	ON ASP.AssetsID = ASE.Id
	LEFT JOIN (
	select AssetsID, SUM(AssetCosts) SalesValue
	FROM GL_AssetCosts 
	WHERE  YEAR( convert(date, MoveDate)) = '+( CONVERT(varchar(8), @Year ) )+'  
	AND RecordType IN (2,6,5,4)  
	GROUP BY AssetsID
	) AS ASS 
	ON ASS.AssetsID = ASE.Id
	LEFT JOIN (
	SELECT C.ID,
	C.Subsidary,
	SUM( A.DepreciationValue) PrvDepreciationValue 
	FROM GL_AssetDepreciations A
	INNER JOIN GL_AssetMoves B
	ON A.AssetMoveID= B.ID
	INNER JOIN GL_Assets C 
	ON B.AssetsID =C.ID
	WHERE C.Subsidary = '+( CONVERT(varchar(8), @subsidaryId ) )+'
	AND  YEAR(CONVERT(date, FromDate) ) <  '+( CONVERT(varchar(8), @Year ) )+'
	GROUP BY C.ID,C.Subsidary
	) ASPY
	ON ASPY.Id = ASE.Id
	WHERE ASE.Subsidary = '+ ( CONVERT( varchar(8), @subsidaryId ) ) +'
	AND YEAR(CONVERT(date, ASE.PurchaseDate) ) <= '+ ( CONVERT(varchar(8), @Year ) ) +' 
	'+ CASE WHEN @AssetTypeId IS NULL THEN '' ELSE +' AND ASE.AssetType = '+ ( CONVERT( varchar(8), @AssetTypeId ) )  END +'
	'+ CASE WHEN @costCenterId IS NULL THEN '' ELSE +' AND COC.ID = '+ ( CONVERT( varchar(8), @costCenterId ) )  END +'

	IF OBJECT_ID(''tempdb..#HT_AssetDepreciations'') IS NOT NULL DROP TABLE #HT_AssetDepreciations'  

	PRINT @Query
  
	--INSERT INTO #HT_AssetDepreciations
	EXEC  sp_executesql  @Query 

END
GO
/****** Object:  StoredProcedure [dbo].[SP_MonthlyAssetPartBuyOrSales]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_MonthlyAssetPartBuyOrSales] --2019,63,null,null,'en-US'
(
	 @Year int,
	 @subsidaryId int,
	 @AssetTypeId int,
	 @costCenterId int,
	 @lang varchar(10)
) 
AS 
BEGIN 

	/*Declare Variable*/  
	DECLARE @Pivot_Column [nvarchar](max);  
	DECLARE @has_Column [nvarchar](max);  
	DECLARE @Query [nvarchar](max);  
  
	/*Select Pivot Column*/  
	SELECT @Pivot_Column= COALESCE(@Pivot_Column+',','')+ QUOTENAME(Months) FROM  
	(SELECT DISTINCT FORMAT(CONVERT(date, MoveDate),'MMMM', 'en-US') Months FROM GL_AssetCosts A 
	INNER JOIN GL_Assets B
	ON A.AssetsID = B.ID
	WHERE B.Subsidary = @subsidaryId AND YEAR(CONVERT(date, A.MoveDate) ) = @Year )Tab  
  
	SET @has_Column =  @Pivot_Column 

	SET @has_Column = REPLACE(@has_Column,',',' [numeric](18, 6) NULL, ')
	set @has_Column = @has_Column + ' [numeric](18, 6) NULL'


	/*Create Dynamic Query*/  
	SELECT @Query=' 
	CREATE TABLE #HT_AssetPurchase (AssetsID int,  '+ @has_Column  + ' ) 

	INSERT INTO #HT_AssetPurchase
	SELECT AssetsID, '+@Pivot_Column+'FROM   
	(SELECT A.AssetsID, A.AssetCosts,FORMAT(CONVERT(date, A.MoveDate),''MMMM'', ''en-US'' ) TMonth
		FROM GL_AssetCosts A 
		INNER JOIN GL_Assets B
		ON A.AssetsID = B.ID
		WHERE  B.Subsidary =  '+( CONVERT(varchar(8), @subsidaryId ) )+'
		AND YEAR( convert(date, A.MoveDate)) = '+( CONVERT(varchar(8), @Year ) )+' )Tab1  
	PIVOT  
	(  
	SUM(AssetCosts) FOR TMonth IN ('+@Pivot_Column+')) AS Tab2  
	ORDER BY AssetsID

	SELECT ASE.Code,
	Convert(date,ASE.PurchaseDate) AS PurchaseDate,
	'+ CASE WHEN @lang = 'en-US' THEN  'ASE.AssetName' ELSE 'ASE.AssetName_AR' END + ' As AssetName ,
	'+ CASE WHEN @lang = 'en-US' THEN  'ASET.Name' ELSE 'ASET.Name_AR' END + ' AS AsetTypeName,
	'+ CASE WHEN @lang = 'en-US' THEN  'COC.Name' ELSE 'COC.Name_AR' END + ' AS CostCenter,
	ASE.OriginalCost,
	ASE.CumulativDepriciation,
	ASPY.PrvDepreciationValue,
	ASS.SalesValue,
	ASP.*
	FROM GL_Assets ASE
	INNER JOIN  GL_AssetsType ASET
	ON ASET.ID = ASE.AssetType
	INNER JOIN  (
	SELECT CostCenterID,AssetsID FROM(
	select 
	ROW_Number() OVER(Partition by AssetsID ORDER BY ID desc) AS RowNumber,
	CostCenterID,
	AssetsID
	from GL_AssetMoves) AssetMoves
	Where RowNumber = 1 ) ASM
	ON ASM.AssetsID = ASE.ID
	LEFT JOIN #HT_AssetPurchase ASP
	ON ASP.AssetsID = ASE.ID
	INNER JOIN mstr_Costcenter COC
	ON COC.ID = ASM.CostCenterID
	LEFT JOIN (
	select AssetsID, SUM(AssetCosts) SalesValue
	FROM GL_AssetCosts 
	WHERE  YEAR( convert(date, MoveDate)) = '+( CONVERT(varchar(8), @Year ) )+'  
	AND RecordType <> 1  
	GROUP BY AssetsID
	) AS ASS 
	ON ASS.AssetsID = ASE.Id
	LEFT JOIN (
	SELECT C.ID,
	C.Subsidary,
	SUM( A.DepreciationValue) PrvDepreciationValue 
	FROM GL_AssetDepreciations A
	INNER JOIN GL_AssetMoves B
	ON A.AssetMoveID= B.ID
	INNER JOIN GL_Assets C 
	ON B.AssetsID =C.ID
	WHERE C.Subsidary = '+( CONVERT(varchar(8), @subsidaryId ) )+'
	AND  YEAR(CONVERT(date, FromDate) ) <  '+( CONVERT(varchar(8), @Year ) )+'
	GROUP BY C.ID,C.Subsidary
	) ASPY
	ON ASPY.Id = ASE.Id
	WHERE ASE.Subsidary = '+ ( CONVERT( varchar(8), @subsidaryId ) ) +'
	AND YEAR(CONVERT(date, ASE.PurchaseDate) ) <= '+ ( CONVERT(varchar(8), @Year ) ) +' 
	'+ CASE WHEN @AssetTypeId IS NULL THEN '' ELSE +' AND ASE.AssetType = '+ ( CONVERT( varchar(8), @AssetTypeId ) )  END +'
	'+ CASE WHEN @costCenterId IS NULL THEN '' ELSE +' AND COC.ID = '+ ( CONVERT( varchar(8), @costCenterId ) )  END +'

	IF OBJECT_ID(''tempdb..#HT_AssetPurchase'') IS NOT NULL DROP TABLE #HT_AssetPurchase'  

	PRINT @Query
  
	--INSERT INTO #HT_AssetDepreciations
	EXEC  sp_executesql  @Query 

END
GO
/****** Object:  StoredProcedure [dbo].[SP_outstandingInvoicesCustomerWise]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_outstandingInvoicesCustomerWise]--9264
(
	@Language varchar(5),
    @SubsidiaryID int,
	@AccountId int,
	@date date
)
AS 
BEGIN 

	SELECT Distinct
	IRH.Entry_No AS InvoiceNo,
	GA.Code,
	CASE WHEN @Language = 'en-US' THEN GA.Name ELSE GA.Name_AR END AS Name,
	IRH.Entry_Date AS VouhcerDate,
	IRH.DueDate AS DueDate,
	(ISNULL(IRH.NetValue,0)) AS Value,
	ISNULL( (GVP.PreviouslyPaidAmount),0) AS PreviouslyPaidAmount,
	ISNULL(IRH.NetValue,0) - ISNULL(GVP.PreviouslyPaidAmount,0) AS Remaining,
	DATEDIFF(DAY, convert(date, IRH.Entry_Date ) , (CASE WHEN @date IS NULL THEN convert(date, getdate()) ELSE @date END ) ) AS Days
	FROM GL_Vouchers GV
	INNER JOIN GL_VoucherDetails GVD
	ON GVD.VoucherID = GV.ID
	INNER JOIN GL_Accounts GA
	ON GA.AccountID = GVD.AccountNoID
	AND GA.Type = 2
	AND GA.IsVendor = 0  
	INNER JOIN GL_VoucherType GVT
	ON GVT.ID = GV.VoucherTypeID
	INNER JOIN mstr_Currencies MC
	ON MC.ID = GV.CurrencyID
	INNER JOIN Inv_Receipt_h IRH
	ON IRH.ID = GV.ReceiptID
	AND ( CONVERT(date, IRH.DueDate ) <= @date Or @date is null ) 
	INNER JOIN mstr_Branch MB
	ON MB.ID = IRH.Branch_ID
	LEFT JOIN GL_VoucherPayments GVP
	ON GVP.ReceiptId = IRH.ID
	Where GV.SubsidaryID = @SubsidiaryID 
	AND ( GVD.AccountNoID = @AccountID OR @AccountId IS NULL  )
	AND ISNULL(GVP.PreviouslyPaidAmount,0) != IRH.NetValue 
	AND GVT.Code = '22' AND
	(
	GVP.ReceiptId NOT IN (SELECT Distinct (IRH.ID) AS ReceiptId
	FROM GL_Vouchers JOIN Inv_Receipt_h on IRH.ID = GV.ReceiptID
	JOIN GL_VoucherDetails on GVD.VoucherID = GV.ID
	JOIN GL_VoucherType on GVT.ID = GV.VoucherTypeID
	JOIN GL_VoucherPayments on GVP.ReceiptId = IRH.ID
	Where  GV.SubsidaryID = @SubsidiaryID 
	AND	( GVD.AccountNoID = @AccountID OR @AccountId IS NULL  )
	AND GVT.Code = '22' 
	)
	OR GVP.ReceiptId IS NULL  
	)

END

	  --select DueDate,* from Inv_Receipt_h where Code in (52)
GO
/****** Object:  StoredProcedure [dbo].[SP_SalesBudgetReport]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_SalesBudgetReport]
(
	@budgetId Int,
	@language varchar(10)
)
AS 
BEGIN


	Declare @GroupBy int,@sumOf int
	--SELECT * FROM Sales_Budget_Header WHERE ID = 4
	SELECT @GroupBy = GroupBy ,@sumOf = Value FROM Sales_Budget_Header WHERE ID = @budgetId

	-- @GroupBy = 1 --- ITEM 
	-- @GroupBy = 2 --- CATEGORY
	-- @GroupBy = 3 --- VENDOR
	-- @GroupBy = 4 --- SalesMen

	-- @sumOf = 2 --- QTY
	-- @sumOf = 1 --- VALUE

	IF(@GroupBy = 1)
	BEGIN 
	
		SELECT 
		IM.Code,
		CASE WHEN @language = 'en-US' THEN IM.Name ELSE IM.Name_AR END AS Name,
		SBD.Budget,
		ISNULL(CASE WHEN @sumOf = 2 
					THEN ISNULL(SUM(CCS.Qty) ,0 ) - ISNULL( SUM(CCR.Qty), 0)
					ELSE ISNULL( SUM(CCS.Total), 0) - ISNULL( SUM(CCR.Total), 0)
			   END, 0 ) AS Actual,
		SBD.Budget - ISNULL(CASE WHEN @sumOf = 2 
					THEN ISNULL(SUM(CCS.Qty) ,0 ) - ISNULL( SUM(CCR.Qty), 0)
					ELSE ISNULL( SUM(CCS.Total), 0) - ISNULL( SUM(CCR.Total), 0)
			   END, 0 ) AS Difference,
		CASE WHEN SBD.Budget = 0 THEN 0 ELSE ((SBD.Budget - ISNULL(CASE WHEN @sumOf = 2 
					THEN ISNULL(SUM(CCS.Qty) ,0 ) - ISNULL( SUM(CCR.Qty), 0)
					ELSE ISNULL( SUM(CCS.Total), 0) - ISNULL( SUM(CCR.Total), 0)
			   END, 0 )) /SBD.Budget) * 100 END AS Deviation
		FROM Sales_Budget_Details SBD 
		INNER JOIN Sales_Budget_Header SBH
		ON SBH.Id = SBD.HeaderId
		AND SBH.Id = @budgetId
		INNER JOIN Inv_Items IM
		ON IM.ID = SBD.ItemId
		LEFT JOIN (
			SELECT 
			HR.Entry_Date,
			DR.Item_ID,
			DR.Qty,
			DR.Total,
			HR.Empoyee_ID,
			HR.Branch_ID
			FROM Inv_Receipt_d DR
			INNER JOIN Inv_Receipt_h HR 
			ON HR.ID = DR.Parent_ID
			AND HR.Code IN (51,52)
		) CCS
		ON CCS.Item_ID = IM.ID
		AND CCS.Empoyee_ID = CASE WHEN  SBH.SalesMenId = 0 THEN CCS.Empoyee_ID ElSE SBH.SalesMenId END
		AND CCS.Branch_ID = CASE WHEN  SBH.BranchId = 0 THEN CCS.Branch_ID ElSE SBH.BranchId END
		AND CONVERT(date, CCS.Entry_Date) between  SBH.FromDate AND SBH.ToDate	
		LEFT JOIN (
			SELECT 
			HR.Entry_Date,
			DR.Item_ID,
			DR.Qty,
			DR.Total,
			HR.Empoyee_ID,
			HR.Branch_ID
			FROM Inv_Receipt_d DR
			INNER JOIN Inv_Receipt_h HR 
			ON HR.ID = DR.Parent_ID
			AND HR.Code IN (53,54)
		) CCR
		ON CCR.Item_ID = IM.ID
		AND CCR.Empoyee_ID = CASE WHEN  SBH.SalesMenId = 0 THEN CCR.Empoyee_ID ElSE SBH.SalesMenId END
		AND CCR.Branch_ID = CASE WHEN  SBH.BranchId = 0 THEN CCR.Branch_ID ElSE SBH.BranchId END
		AND CONVERT(date, CCR.Entry_Date) between  SBH.FromDate AND SBH.ToDate	
		GROUP BY 
		IM.Code,
		IM.Name,
		SBD.Budget,
		IM.Name_AR
	
	END

	IF(@GroupBy = 2)
	BEGIN

		SELECT 
		PROCAT.Code,
		CASE WHEN @language = 'en-US' THEN PROCAT.Name ELSE PROCAT.Name_AR END AS Name,
		SBD.Budget,
		ISNULL(CASE WHEN @sumOf = 2 
					THEN ISNULL(SUM(CCS.Qty) ,0 ) - ISNULL( SUM(CCR.Qty), 0)
					ELSE ISNULL( SUM(CCS.Total), 0) - ISNULL( SUM(CCR.Total), 0)
			   END, 0 ) AS Actual,
		SBD.Budget - ISNULL(CASE WHEN @sumOf = 2 
					THEN ISNULL(SUM(CCS.Qty) ,0 ) - ISNULL( SUM(CCR.Qty), 0)
					ELSE ISNULL( SUM(CCS.Total), 0) - ISNULL( SUM(CCR.Total), 0)
			   END, 0 ) AS Difference,
		CASE WHEN SBD.Budget = 0 THEN 0 ELSE ((SBD.Budget - ISNULL(CASE WHEN @sumOf = 2 
					THEN ISNULL(SUM(CCS.Qty) ,0 ) - ISNULL( SUM(CCR.Qty), 0)
					ELSE ISNULL( SUM(CCS.Total), 0) - ISNULL( SUM(CCR.Total), 0)
			   END, 0 )) /SBD.Budget) * 100 END AS Deviation
		FROM Sales_Budget_Details SBD 
		INNER JOIN Sales_Budget_Header SBH
		ON SBH.Id = SBD.HeaderId
		AND SBH.Id = @budgetId
		INNER JOIN Inv_ProductCategories PROCAT
		ON PROCAT.ID = SBD.ProductCategoryId
		INNER JOIN Inv_Items_Categories ITMCAT
		ON PROCAT.ID = ITMCAT.ItemCategory_ID
		INNER JOIN Inv_Items IM
		ON IM.ID = ITMCAT.Item_ID
		LEFT JOIN (
			SELECT 
			HR.Entry_Date,
			DR.Item_ID,
			DR.Qty,
			DR.Total,
			HR.Empoyee_ID,
			HR.Branch_ID
			FROM Inv_Receipt_d DR
			INNER JOIN Inv_Receipt_h HR 
			ON HR.ID = DR.Parent_ID
			AND HR.Code IN (51,52)
		) CCS
		ON CCS.Item_ID = IM.ID
		AND CCS.Empoyee_ID = CASE WHEN  SBH.SalesMenId = 0 THEN CCS.Empoyee_ID ElSE SBH.SalesMenId END
		AND CCS.Branch_ID = CASE WHEN  SBH.BranchId = 0 THEN CCS.Branch_ID ElSE SBH.BranchId END
		AND CONVERT(date, CCS.Entry_Date) between  SBH.FromDate AND SBH.ToDate	
		LEFT JOIN (
			SELECT 
			HR.Entry_Date,
			DR.Item_ID,
			DR.Qty,
			DR.Total,
			HR.Empoyee_ID,
			HR.Branch_ID
			FROM Inv_Receipt_d DR
			INNER JOIN Inv_Receipt_h HR 
			ON HR.ID = DR.Parent_ID
			AND HR.Code IN (53,54)
		) CCR
		ON CCR.Item_ID = IM.ID
		AND CCR.Empoyee_ID = CASE WHEN  SBH.SalesMenId = 0 THEN CCR.Empoyee_ID ElSE SBH.SalesMenId END
		AND CCR.Branch_ID = CASE WHEN  SBH.BranchId = 0 THEN CCR.Branch_ID ElSE SBH.BranchId END
		AND CONVERT(date, CCR.Entry_Date) between  SBH.FromDate AND SBH.ToDate	
		GROUP BY 
		PROCAT.Code,
		PROCAT.Name,
		SBD.Budget,
		PROCAT.Name_AR

	END

	IF(@GroupBy = 3)
	BEGIN 
	
		SELECT 
		AC.Code,
		CASE WHEN @language = 'en-US' THEN AC.Name ELSE AC.Name_AR END AS Name,
		SBD.Budget,
		ISNULL(CASE WHEN @sumOf = 2 
					THEN ISNULL(SUM(CCS.Qty) ,0 ) - ISNULL( SUM(CCR.Qty), 0)
					ELSE ISNULL( SUM(CCS.Total), 0) - ISNULL( SUM(CCR.Total), 0)
			   END, 0 ) AS Actual,
		SBD.Budget - ISNULL(CASE WHEN @sumOf = 2 
					THEN ISNULL(SUM(CCS.Qty) ,0 ) - ISNULL( SUM(CCR.Qty), 0)
					ELSE ISNULL( SUM(CCS.Total), 0) - ISNULL( SUM(CCR.Total), 0)
			   END, 0 ) AS Difference,
		CASE WHEN SBD.Budget = 0 THEN 0 ELSE ((SBD.Budget - ISNULL(CASE WHEN @sumOf = 2 
					THEN ISNULL(SUM(CCS.Qty) ,0 ) - ISNULL( SUM(CCR.Qty), 0)
					ELSE ISNULL( SUM(CCS.Total), 0) - ISNULL( SUM(CCR.Total), 0)
			   END, 0 )) /SBD.Budget) * 100 END AS Deviation
		FROM Sales_Budget_Details SBD 
		INNER JOIN Sales_Budget_Header SBH
		ON SBH.Id = SBD.HeaderId
		AND SBH.Id = @budgetId
		INNER JOIN GL_Accounts AC
		ON AC.AccountID = SBD.VendorId
		LEFT JOIN Inv_Items_Vendors ITMV
		ON AC.AccountID = ITMV.VendorID
		INNER JOIN Inv_Items IM
		ON IM.ID = ITMV.ItemID
		LEFT JOIN (
			SELECT 
			HR.Entry_Date,
			DR.Item_ID,
			DR.Qty,
			DR.Total,
			HR.Empoyee_ID,
			HR.Branch_ID
			FROM Inv_Receipt_d DR
			INNER JOIN Inv_Receipt_h HR 
			ON HR.ID = DR.Parent_ID
			AND HR.Code IN (51,52)
		) CCS
		ON CCS.Item_ID = IM.ID
		AND CCS.Empoyee_ID = CASE WHEN  SBH.SalesMenId = 0 THEN CCS.Empoyee_ID ElSE SBH.SalesMenId END
		AND CCS.Branch_ID = CASE WHEN  SBH.BranchId = 0 THEN CCS.Branch_ID ElSE SBH.BranchId END
		AND CONVERT(date, CCS.Entry_Date) between  SBH.FromDate AND SBH.ToDate	
		LEFT JOIN (
			SELECT 
			HR.Entry_Date,
			DR.Item_ID,
			DR.Qty,
			DR.Total,
			HR.Empoyee_ID,
			HR.Branch_ID
			FROM Inv_Receipt_d DR
			INNER JOIN Inv_Receipt_h HR 
			ON HR.ID = DR.Parent_ID
			AND HR.Code IN (53,54)
		) CCR
		ON CCR.Item_ID = IM.ID
		AND CCR.Empoyee_ID = CASE WHEN  SBH.SalesMenId = 0 THEN CCR.Empoyee_ID ElSE SBH.SalesMenId END
		AND CCR.Branch_ID = CASE WHEN  SBH.BranchId = 0 THEN CCR.Branch_ID ElSE SBH.BranchId END
		AND CONVERT(date, CCR.Entry_Date) between  SBH.FromDate AND SBH.ToDate	
		GROUP BY 
		AC.Code,
		AC.Name,
		SBD.Budget,
		AC.Name_AR

	END
	IF(@GroupBy = 4)
	BEGIN
	
		SELECT 
		US.Code,
		CASE WHEN @language = 'en-US' THEN US.Name ELSE US.Name_AR END AS Name,
		SBD.Budget,
		ISNULL(CASE WHEN @sumOf = 2 
					THEN ISNULL(SUM(CCS.Qty) ,0 ) - ISNULL( SUM(CCR.Qty), 0)
					ELSE ISNULL( SUM(CCS.Total), 0) - ISNULL( SUM(CCR.Total), 0)
			   END, 0 ) AS Actual,
		SBD.Budget - ISNULL(CASE WHEN @sumOf = 2 
					THEN ISNULL(SUM(CCS.Qty) ,0 ) - ISNULL( SUM(CCR.Qty), 0)
					ELSE ISNULL( SUM(CCS.Total), 0) - ISNULL( SUM(CCR.Total), 0)
			   END, 0 ) AS Difference,
	   CASE WHEN SBD.Budget = 0 THEN 0 ELSE ((SBD.Budget - ISNULL(CASE WHEN @sumOf = 2 
					THEN ISNULL(SUM(CCS.Qty) ,0 ) - ISNULL( SUM(CCR.Qty), 0)
					ELSE ISNULL( SUM(CCS.Total), 0) - ISNULL( SUM(CCR.Total), 0)
			   END, 0 )) /SBD.Budget) * 100 END AS Deviation
		FROM Sales_Budget_Details SBD 
		INNER JOIN Sales_Budget_Header SBH
		ON SBH.Id = SBD.HeaderId
		AND SBH.Id = @budgetId
		INNER JOIN Security_Users US
		ON US.Id = SBD.SalesmenId
		LEFT JOIN Crm_LeadOwnerItemCategories USD
		ON USD.UserId = US.Id
		INNER JOIN Inv_ProductCategories PROCAT
		ON USD.ItemCategoryId = PROCAT.ID
		INNER JOIN Inv_Items_Categories ITMCAT
		ON PROCAT.ID = ITMCAT.ItemCategory_ID
		INNER JOIN Inv_Items IM
		ON IM.ID = ITMCAT.Item_ID
		LEFT JOIN (
			SELECT 
			HR.Entry_Date,
			DR.Item_ID,
			DR.Qty,
			DR.Total,
			HR.Empoyee_ID,
			HR.Branch_ID
			FROM Inv_Receipt_d DR
			INNER JOIN Inv_Receipt_h HR 
			ON HR.ID = DR.Parent_ID
			AND HR.Code IN (51,52)
		) CCS
		ON CCS.Item_ID = IM.ID
		AND CCS.Empoyee_ID = CASE WHEN  SBH.SalesMenId = 0 THEN CCS.Empoyee_ID ElSE SBH.SalesMenId END
		AND CCS.Branch_ID = CASE WHEN  SBH.BranchId = 0 THEN CCS.Branch_ID ElSE SBH.BranchId END
		AND CONVERT(date, CCS.Entry_Date) between  SBH.FromDate AND SBH.ToDate	
		LEFT JOIN (
			SELECT 
			HR.Entry_Date,
			DR.Item_ID,
			DR.Qty,
			DR.Total,
			HR.Empoyee_ID,
			HR.Branch_ID
			FROM Inv_Receipt_d DR
			INNER JOIN Inv_Receipt_h HR 
			ON HR.ID = DR.Parent_ID
			AND HR.Code IN (53,54)
		) CCR
		ON CCR.Item_ID = IM.ID
		AND CCR.Empoyee_ID = CASE WHEN  SBH.SalesMenId = 0 THEN CCR.Empoyee_ID ElSE SBH.SalesMenId END
		AND CCR.Branch_ID = CASE WHEN  SBH.BranchId = 0 THEN CCR.Branch_ID ElSE SBH.BranchId END
		AND CONVERT(date, CCR.Entry_Date) between  SBH.FromDate AND SBH.ToDate	
		GROUP BY 
		US.Code,
		US.Name,
		SBD.Budget,
		US.Name_AR

	END
END
GO
/****** Object:  StoredProcedure [dbo].[Sp_SaveInvoiceFollowupDetails]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[Sp_SaveInvoiceFollowupDetails]
(
	 @data InvoiceFollowUp READONLY
)
AS
Begin
	
	Select * INTO #FollowupDetails from @data

	UPDATE A SET 
	A.Printing = B.Printing,
	A.StoreDelivery = B.StoreDelivery,
	A.CustomerRecieve = B.CustomerRecieve
	from Inv_Receipt_h A
	INNER JOIN #FollowupDetails B
	ON A.ID = B.ID

	if((SELECT COUNT(1) FROM #FollowupDetails WHERE DriverId > 0 ) > 0)
	BEGIN 
		
		UPDATE A SET 
		A.DriverId = B.DriverId
		from Inv_Receipt_h A
		INNER JOIN #FollowupDetails B
		ON A.ID = B.ID
		AND B.DriverId > 0
	END

	IF OBJECT_ID('tempdb..#FollowupDetails') IS NOT NULL DROP TABLE #FollowupDetails

END
GO
/****** Object:  StoredProcedure [dbo].[Sp_UpdateStaus]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[Sp_UpdateStaus]
(
	 @data ExpStausUpdate READONLY
)
AS
Begin
	
	Select * INTO #ExpStausUpdate from @data

	UPDATE EXPS SET EXPS.Status = TEXP.Status  from GL_Expenses EXPS INNER JOIN #ExpStausUpdate TEXP ON EXPS.Id = TEXP.ID
	
	IF OBJECT_ID('tempdb..#ExpStausUpdate') IS NOT NULL DROP TABLE #ExpStausUpdate

END
GO
/****** Object:  StoredProcedure [dbo].[ss_calcAvgCost]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[ss_calcAvgCost] 
-- @x1 int=0 ,@x2 int=0 ,@x3 datetime =Null ,@x4 int =0
AS
BEGIN
/*
This proc will work on the maintenance queue as an input
The output will be the calculation
*/



 Declare @DoNtCalcAvgCost int
 SELECT top 1 @DoNtCalcAvgCost = isnull( [DoNtCalcAvgCost],0)  FROM   [_SETTINGS] 
  SELECT   isnull( [DoNtCalcAvgCost],0)  FROM   [_SETTINGS] 

  IF @DoNtCalcAvgCost = 1
  Begin
	Delete Inv_Cost_queue
	return
  END


    Delete from  Inv_Cost_queue where item_id  not in (select  id from inv_items)
    Delete from  Inv_Cost_queue where item_id    in (select  id from inv_items where isnull(consignment,0) > 0 )
insert INV_AvgCost_LOG (spid,step,AtDate) values (@@spid,'ss_calcAvgCost is called',getdate())

declare @MAX_LEVELS int
DECLARE @SPWHO2 TABLE (SPID VARCHAR(1000), [Status] VARCHAR(1000) NULL, [Login] VARCHAR(1000) NULL, HostName VARCHAR(1000) NULL, BlkBy VARCHAR(1000) NULL, DBName VARCHAR(1000) NULL, Command VARCHAR(1000) NULL, CPUTime VARCHAR(1000) NULL, DiskIO VARCHAR(1000) NULL, LastBatch VARCHAR(1000) NULL, ProgramName VARCHAR(1000) NULL, SPID2 VARCHAR(1000) NULL, Request VARCHAR(1000) NULL)
INSERT INTO @SPWHO2 
    EXEC sp_who2 'Active'




-- delete all inactive sessions if there is any
delete avg_session 
where not exists(select 1 from  @SPWHO2 a 
					where a.SPID = avg_session.sid and DBName = DB_NAME())

if exists(select 1 from avg_session)
	return -- no need to do anything because the other process will handel this request

insert into avg_session select @@SPID

--	Set nocount on
	
	create table #CMPND_COST(id bigint null,TotalCost  float null)
		

	-- create the balace table
	create table #ALL_DET_TRANS(item_id int,
								Store_ID int,
								SRL_NO bigint,
								MQTY float null,
								TotalQTY float null,
								Price float null,
								Code int null,
								Entry_Date datetime null,
								ID bigint null,
								Parent_ID bigint null,
								Transaction_move float null,
								FinishedReceipt_dID bigint null,
								Final_conv float null,
								CustomerSalesPrice int null,
								item_type float null,
								AvgCost float null, -- old calculated cost
								Balance  float null,
								Cost  float null,
								NewPrice float null
								,FromStoreReceiptd_ID int null
								,BYSTORE_SRL_NO bigint
								,AllStoresQty float null
								,NewAllStoresQty float null
								,ProductionUnitExpense float null  -- Added for the new change on Aug 6 2020
								)
	/*
	 Capture the queue that we will work on
	 get inventory items only for phase 1
	 */
	
	BEGIN TRY  -- start try block
	insert INV_AvgCost_LOG (spid,step,AtDate) values (@@spid,'start avg calc',getdate())
	
	recalculate:
	delete #ALL_DET_TRANS
	delete Inv_Cost_queue from Inv_Items where Inv_Cost_queue.item_id  = Inv_Items.ID and Inv_Items.Item_Type in (2,3,5)
	--select 1/0
	select --store_id,
			item_id,
			fromdate
	into #Inv_Cost_queue 
	FROM   Inv_Cost_queue,Inv_Items 
	where Inv_Cost_queue.item_id  = Inv_Items.ID and Inv_Items.Item_Type in (1,4)
			


	-- Addd initial balance 
	insert into #ALL_DET_TRANS
	select  #Inv_Cost_queue.Item_ID,
			0 as StoerID, --Inv_Items_Store.Store_ID, -- Shaban -- This is to ignore store code in calculations
			1,
			isnull(SUM(isnull(Inv_Items_Store.first_qty,0) * Case isnull(Inv_Items_Store.FinalConv,1)  When  0 THEN 1 else isnull(Inv_Items_Store.FinalConv,1) end),0) as MQTY,
			isnull(SUM(isnull(Inv_Items_Store.first_qty,0) * Case isnull(Inv_Items_Store.FinalConv,1)  When  0 THEN 1 else isnull(Inv_Items_Store.FinalConv,1) end),0) as TotalQTY,
			
			isnull(CASE WHEN SUM(isnull(Inv_Items_Store.first_qty,0))  > 0 
						THEN
					SUM(cast(isnull(Inv_Items_Store.first_qty,0)as float) * cast(isnull(Inv_Items_Store.First_Cost,0)as float)  )
				   / SUM(cast(isnull(Inv_Items_Store.first_qty,0) as float ) * Case cast(isnull(Inv_Items_Store.FinalConv,1)as float)  When  0 THEN 1 else cast(isnull(Inv_Items_Store.FinalConv,1)  as float) end)
				ELSE 0
			END,0) as Price,
			0 as code,
			cast('Jan 1 1900' as datetime) as Entry_Date,
			0 as ID,
			cast(null as int) as Parent_ID,
			1 as Transaction_move,
			cast(null as int ) as FinishedReceipt_dID,
			--Case isnull(Inv_Items_Store.FinalConv,1)  When  0 THEN 1 else isnull(Inv_Items_Store.FinalConv,1) end 
			1.0 as Final_conv,
			cast(5 as int) as CustomerSalesPrice,
			Inv_Items.Item_Type,
			 isnull(CASE WHEN SUM(cast(isnull(Inv_Items_Store.first_qty,0)as float))  > 0 
						THEN
							cast (SUM(cast(isnull(Inv_Items_Store.first_qty,0)as float) * 
							cast(isnull(Inv_Items_Store.First_Cost,0)as float)  )
								 / SUM(cast(isnull(Inv_Items_Store.first_qty,0) as float ) * 
								 Case cast(isnull(Inv_Items_Store.FinalConv,1)as float) When  0 THEN 1 
									else cast(isnull(Inv_Items_Store.FinalConv,1)  as float)
									end) as float)
				ELSE 0
			END,0) 
			as AvrCost , -- it should be the same for all stores
			isnull(sum(isnull(Inv_Items_Store.first_qty,0) * Case isnull(Inv_Items_Store.FinalConv,1)  When  0 THEN 1 else isnull(Inv_Items_Store.FinalConv,1) end ),0) as Balance,
			cast(null as float ) as Cost,
			--isnull(Inv_Items_Store.First_Cost,0) / Case isnull(Inv_Items_Store.FinalConv,1)  When  0 THEN 1 else isnull(Inv_Items_Store.FinalConv,1) end,
			isnull(CASE WHEN SUM(isnull(Inv_Items_Store.first_qty,0))  > 0 THEN
					SUM(isnull(Inv_Items_Store.first_qty,0) * isnull(Inv_Items_Store.First_Cost,0))/SUM(isnull(Inv_Items_Store.first_qty,0) * Case isnull(Inv_Items_Store.FinalConv,1)  When  0 THEN 1 else isnull(Inv_Items_Store.FinalConv,1) end)
				ELSE 0
			END,0),
			null,
			0,
			isnull(SUM(isnull(Inv_Items_Store.first_qty,0) * Case isnull(Inv_Items_Store.FinalConv,1)  When  0 THEN 1 else isnull(Inv_Items_Store.FinalConv,1) end),0) as AllStoresQty,
			0 as NewAllStoresQty,
			0 as ProductionUnitExpense
			--0,0
	from #Inv_Cost_queue 
			join Inv_Items on Inv_Items.ID = #Inv_Cost_queue.Item_ID
			left outer join Inv_Items_Store on Inv_Items_Store.Item_ID  = #Inv_Cost_queue.Item_ID
	group by #Inv_Cost_queue.Item_ID,Inv_Items.Item_Type;
	
	--Select * from #ALL_DET_TRANS
	--Return
	insert into #ALL_DET_TRANS
	select  #Inv_Cost_queue.Item_ID,
			Inv_Store.ID as StoerID, --Inv_Items_Store.Store_ID, -- Shaban -- This is to ignore store code in calculations
			0,
			isnull(Inv_Items_Store.first_qty,0) * Case isnull(Inv_Items_Store.FinalConv,1)  When  0 THEN 1 else isnull(Inv_Items_Store.FinalConv,1) end as MQTY,
			isnull(Inv_Items_Store.first_qty,0) * Case isnull(Inv_Items_Store.FinalConv,1)  When  0 THEN 1 else isnull(Inv_Items_Store.FinalConv,1) end as TotalQTY,
			 
			CASE WHEN isnull(Inv_Items_Store.first_qty,0)  > 0 THEN
					  CAST(isnull(Inv_Items_Store.first_qty,0) AS FLOAT) * CAST(isnull(Inv_Items_Store.First_Cost,0) AS FLOAT )
					  /CAST(isnull(Inv_Items_Store.first_qty,0) AS FLOAT)* Case isnull(Inv_Items_Store.FinalConv,1)  When  0 THEN 1 else CAST( isnull(Inv_Items_Store.FinalConv,1) AS FLOAT) end
				ELSE 0
			END as Price,
			0 as code,
			cast('Jan 1 1900' as datetime) as Entry_Date,
			0 as ID,
			cast(null as int) as Parent_ID,
			1 as Transaction_move,
			cast(null as int ) as FinishedReceipt_dID,
			--Case isnull(Inv_Items_Store.FinalConv,1)  When  0 THEN 1 else isnull(Inv_Items_Store.FinalConv,1) end 
			1.0 as Final_conv,
			cast(5 as int) as CustomerSalesPrice,
			Inv_Items.Item_Type,
			 isnull(CASE WHEN cast(isnull(Inv_Items_Store.first_qty,0)as float)  > 0 
						THEN
							cast (
							cast(isnull(Inv_Items_Store.first_qty,0)as float) * 
							cast(isnull(Inv_Items_Store.First_Cost,0)as float)  
								 / 
						 cast(isnull(Inv_Items_Store.first_qty,0) as float ) * 
								 Case cast(isnull(Inv_Items_Store.FinalConv,1)as float) 
									When  0 THEN 1 	
									else cast(isnull(Inv_Items_Store.FinalConv,1) as float)	
								 end 
								as float)
				ELSE 0
			END,0)  as AvrCost , -- it should be the same for all stores
			isnull(Inv_Items_Store.first_qty,0) * Case isnull(Inv_Items_Store.FinalConv,1)  When  0 THEN 1 else isnull(Inv_Items_Store.FinalConv,1) end  as Balance,
			cast(null as float ) as Cost,
			--isnull(Inv_Items_Store.First_Cost,0) / Case isnull(Inv_Items_Store.FinalConv,1)  When  0 THEN 1 else isnull(Inv_Items_Store.FinalConv,1) end,
			CASE WHEN isnull(Inv_Items_Store.first_qty,0)  > 0 THEN
					isnull(Inv_Items_Store.first_qty,0) * isnull(Inv_Items_Store.First_Cost,0)/isnull(Inv_Items_Store.first_qty,0) * Case isnull(Inv_Items_Store.FinalConv,1)  When  0 THEN 1 else isnull(Inv_Items_Store.FinalConv,1) end
				ELSE 0
			END,
			null,
			1,
			0 as AllStoresQty,
			0 as NewAllStoresQty,
			0 as ProductionUnitExpense
			--0,0
	from #Inv_Cost_queue 
			join Inv_Items on Inv_Items.ID = #Inv_Cost_queue.item_id
			Join Inv_Store on 1=1
			left outer join Inv_Items_Store on #Inv_Cost_queue.item_id = Inv_Items_Store.Item_ID and Inv_Store.ID = Inv_Items_Store.Store_ID
	--		,
			
	--where Inv_Items_Store.Item_ID
	--	--and Inv_Items_Store.Store_ID = #Inv_Cost_queue.Store_ID
	--	and Inv_Items_Store.Item_ID  = #Inv_Cost_queue.Item_ID
		--and Inv_Items.Item_Type  =  1 -- start with inventory items
		--and #Inv_Cost_queue.before_trans_date = 'Jan 1 1900'
	
	--return
	-- Insert items transaction within the range
	insert into #ALL_DET_TRANS
	Select		Inv_Receipt_d.item_id,
				Inv_Receipt_d.Store_ID,
				ROW_NUMBER() OVER(PARTITION BY 
					--Inv_Receipt_d.Store_ID,
					Inv_Receipt_d.item_id ORDER BY inv_items.Item_Type,Inv_Receipt_d.item_id,Entry_Date ASC, Inv_Receipt_d.id ASC) 
				+ 1 --CASE WHEN #Inv_Cost_queue.before_trans_date='Jan 1 1900' then 1 else 0 end 
				as	SRL_NO,	
				MQTY = cast(Inv_Receipt_d.Qty *ISNULL(Inv_Receipt_d.Final_conv ,1)* Inv_Receipt_d.Transaction_move  as float ),
				cast(TotalQTY  as float ),
				Price = (cast( 
					( 
					(cast( Inv_Receipt_d.Price as float)  ) - 
					(cast(Inv_Receipt_d.Price as float)  * cast(Inv_Receipt_d.Discount_Percent as float) * 0.01 ) 
					) / 
					((   ISNULL( Inv_Receipt_h.Costing_Rate,1.0) ) 
					*  (Case isnull(Inv_Receipt_d.Final_conv,0) when 0 then 1 else Inv_Receipt_d.Final_conv end))  as float )) ,
				cast(Inv_Receipt_h.Code as int),
				Inv_Receipt_h.Entry_Date,
				Inv_Receipt_d.ID ,
				Inv_Receipt_d.Parent_ID,
				Inv_Receipt_d.Transaction_move,
				Inv_Receipt_d.FinishedReceipt_dID,
				ISNULl(Inv_Receipt_d.Final_conv,1) Final_conv,
				Inv_Receipt_h.CustomerSalesPrice,
				Inv_Items.Item_Type,
				Inv_Receipt_d.AvgCost,
				null,
				null,
				NewPrice = (cast( ( (Inv_Receipt_d.Price  ) - (Inv_Receipt_d.Price  * Inv_Receipt_d.Discount_Percent / 100 ) ) / (   ISNULL( Inv_Receipt_h.Costing_Rate,1) ) /  (Case Inv_Receipt_d.Final_conv when 0 then 1 else Inv_Receipt_d.Final_conv end) as float ))
				--,
				--0,0
				,FromStoreReceiptd_ID
				,
				ROW_NUMBER() OVER(PARTITION BY 
							Inv_Receipt_d.Store_ID,Inv_Receipt_d.item_id ORDER BY Inv_Receipt_d.Store_ID,Inv_Receipt_d.item_id,Entry_Date ASC, Inv_Receipt_d.id ASC) 
						+ 1 --CASE WHEN #Inv_Cost_queue.before_trans_date='Jan 1 1900' then 1 else 0 end 
						as	BYSTORE_SRL_NO,
			Inv_Receipt_d.AllStoresQty as AllStoresQty,
			0 as NewAllStoresQty,
			ISNULL(ProductionUnitExpense,0) as ProductionUnitExpense
		FROM   Inv_Receipt_d,Inv_Receipt_h, inv_items,
				#Inv_Cost_queue 
		where 
			Inv_Receipt_d.Parent_ID= Inv_Receipt_h.ID     
			and isnull(Inv_Receipt_h.IsHolded,0) <> 1   
			and isnull(Inv_Receipt_h.Is_Canceled,0) <> 1   
			and  Inv_Receipt_d.Transaction_move <> 0 
			and inv_items.id = Inv_Receipt_d.item_id 
			and #Inv_Cost_queue.item_id = Inv_Receipt_d.Item_ID


	

	-- add this index to fasten the search 
	--create clustered index idx_alltrnsid on #ALL_DET_TRANS(id)

	--return;				
	-- Calculate cost for inventory items
	--set @runs = 0;

	--run_again:
	--select * from #ALL_DET_TRANS

	-- We should execlude dates less than the given date
	/* Filter by date part, should be fixed to enhance performance but for now it will cause conflict between store balance against all stores balance
	select #ALL_DET_TRANS.item_id,#ALL_DET_TRANS.Store_ID,max(BYSTORE_SRL_NO) - 1 as BYSTORE_SRL_NO,cast(null as bigint) as SRL_NO 
	into #new_only
	from #ALL_DET_TRANS,#Inv_Cost_queue 
	where   
	#ALL_DET_TRANS.item_id = #Inv_Cost_queue.item_id
	and #ALL_DET_TRANS.Entry_Date < #Inv_Cost_queue.FromDate
	and #Inv_Cost_queue.FromDate > 'Jan 1 1900'
	and #ALL_DET_TRANS.SRL_NO > 1
	group by #ALL_DET_TRANS.item_id,#ALL_DET_TRANS.Store_ID

	

	--update #new_only set BYSTORE_SRL_NO=1 where BYSTORE_SRL_NO <= 0
	delete #new_only where BYSTORE_SRL_NO <= 1
	
	update #new_only set SRL_NO = #ALL_DET_TRANS.SRL_NO
	from #ALL_DET_TRANS
	where #ALL_DET_TRANS.item_id = #new_only.item_id and #ALL_DET_TRANS.store_id =  #new_only.Store_ID and #new_only.BYSTORE_SRL_NO = #ALL_DET_TRANS.BYSTORE_SRL_NO

	select * from #ALL_DET_TRANS
	delete #ALL_DET_TRANS
	from #new_only
	where #new_only.item_id = #ALL_DET_TRANS.item_id
		--and (#new_only.store_id = #ALL_DET_TRANS.store_id or #ALL_DET_TRANS.store_id=0)
		and #ALL_DET_TRANS.SRL_NO < #new_only.SRL_NO

	
	update #ALL_DET_TRANS
	set SRL_NO = #ALL_DET_TRANS.SRL_NO - #new_only.SRL_NO ,
	BYSTORE_SRL_NO = #ALL_DET_TRANS.BYSTORE_SRL_NO - #new_only.BYSTORE_SRL_NO 
	from #new_only
	where #new_only.item_id = #ALL_DET_TRANS.item_id and #ALL_DET_TRANS.Store_ID = #new_only.Store_ID


	delete #ALL_DET_TRANS where SRL_NO <=0

	select * from #new_only
	

	-- Now, data is ready for calculation
	select * from #ALL_DET_TRANS
	*/
	
	;with ALL_TRNS(item_id,Store_ID,SRL_NO,MQTY,TotalQTy,Price,Code,ID,Parent_ID,Transaction_move,FinishedReceipt_dID,Final_conv, Balance,Cost,NewPrice,Entry_Date
	,FromStoreReceiptd_ID,AllStoresQty,NewAllStoresQty
	)
	as(
	select item_id,
			Store_ID,
			SRL_NO,
			MQTY,
			TotalQTy,
			Price ,
			Code,
			ID,
			Parent_ID,
			Transaction_move,
			FinishedReceipt_dID,
			Final_conv,
			cast(AllStoresQty as float) as Balance

			
			,cast(Price as float) as Cost 
			,cast(Price as float) as NewPrice,
			Entry_Date
			--,
			--0,
			--0
			,#ALL_DET_TRANS.FromStoreReceiptd_ID,
			cast(AllStoresQty as float) as AllStoresQty,
			cast(isnull(AllStoresQty,0) as float) as NewAllStoresQty
			
	from #ALL_DET_TRANS
	WHERE SRL_NO=1 --and Item_Type in (1,4)
	UNION ALL
	select #ALL_DET_TRANS.item_id,
			#ALL_DET_TRANS.Store_ID,
			#ALL_DET_TRANS.SRL_NO,
			#ALL_DET_TRANS.MQTY,
			#ALL_DET_TRANS.TotalQTy,
			#ALL_DET_TRANS.Price,
			#ALL_DET_TRANS.Code,
			#ALL_DET_TRANS.ID,
			#ALL_DET_TRANS.Parent_ID,
			#ALL_DET_TRANS.Transaction_move,
			#ALL_DET_TRANS.FinishedReceipt_dID,
			#ALL_DET_TRANS.Final_conv,
			cast( ALL_TRNS.NewAllStoresQty + #ALL_DET_TRANS.MQTY  
				as float) as Balance, 
			cast(
			CASE 
				when (ALL_TRNS.Balance + #ALL_DET_TRANS.MQTY) < 0 THEN
					0.0
				when  ( #ALL_DET_TRANS.Code  in (51,52,53,54,60,63,61,83,81,85) ) or( #ALL_DET_TRANS.Code  in (82) and #ALL_DET_TRANS.Transaction_move=-1 )  THEN
						ALL_TRNS.Cost
				--WHEN #ALL_DET_TRANS.Code = 81 OR #ALL_DET_TRANS.Transaction_move= -1  THEN	-- Take the line before cost
				--	ALL_TRNS.Cost
				WHEN #ALL_DET_TRANS.Transaction_move=  1 
					and (ALL_TRNS.Balance + #ALL_DET_TRANS.MQTY) >= 0   THEN
				--	and  #ALL_DET_TRANS.Code in (1,82) THEN	

					( ALL_TRNS.NewAllStoresQty * ALL_TRNS.Cost + #ALL_DET_TRANS.MQTY * #ALL_DET_TRANS.Price)/(case when ALL_TRNS.NewAllStoresQty < 0 then #ALL_DET_TRANS.MQTY else  ALL_TRNS.NewAllStoresQty + #ALL_DET_TRANS.MQTY end)

				--WHEN #ALL_DET_TRANS.Transaction_move=  1 and (ALL_TRNS.Balance + #ALL_DET_TRANS.MQTY) <= 0 THEN	-- in case of negative balance, do not change the cost
				--	 ALL_TRNS.Cost-- + #ALL_DET_TRANS_ORD.MQTY * #ALL_DET_TRANS_ORD.Price)/(ALL_TRNS.Balance + #ALL_DET_TRANS_ORD.MQTY)
				
				ELSE
					ALL_TRNS.Cost
			END
			as float) as Cost ,
			cast(
			CASE 
				WHEN 
					(#ALL_DET_TRANS.Code in (60,63)   and #ALL_DET_TRANS.CustomerSalesPrice = 5 ) or #ALL_DET_TRANS.Code in (61,81,83,85) 
						THEN   (  case  when  ALL_TRNS.TotalQTy <= 0 and #ALL_DET_TRANS.Transaction_move = -1 then 0 else     ALL_TRNS.Cost * #ALL_DET_TRANS.Final_conv end ) --THEN ALL_TRNS.Cost * #ALL_DET_TRANS.Final_conv
				WHEN 
					(#ALL_DET_TRANS.Code in (82)   and #ALL_DET_TRANS.Transaction_move = -1 ) 
					--	THEN ALL_TRNS.Cost * #ALL_DET_TRANS.Final_conv
						THEN   (  case  when  ALL_TRNS.TotalQTy <= 0 and #ALL_DET_TRANS.Transaction_move = -1 then 0 else     ALL_TRNS.Cost * #ALL_DET_TRANS.Final_conv end )
				--when (#ALL_DET_TRANS.Code in (82)   and #ALL_DET_TRANS.Transaction_move = 1 ) 
				--		THEN
				--		  ( Select   sum(d.qty*d.price) /#ALL_DET_TRANS.MQTY from  Inv_Receipt_d d where d.FinishedReceipt_dID =#ALL_DET_TRANS.ID )
				 
				ELSE
					#ALL_DET_TRANS.Price
			END as float) as NewPrice,
			#ALL_DET_TRANS.Entry_Date
			,#ALL_DET_TRANS.FromStoreReceiptd_ID
			,cast( #ALL_DET_TRANS.AllStoresQty as float) as AllStoresQty,
			cast(isnull(ALL_TRNS.NewAllStoresQty,0) + isnull(#ALL_DET_TRANS.MQTY,0) as float) as NewAllStoresQty
	from #ALL_DET_TRANS,ALL_TRNS
	WHERE  #ALL_DET_TRANS.Item_ID = ALL_TRNS.item_id and 
		   #ALL_DET_TRANS.SRL_NO = ALL_TRNS.SRL_NO + 1 )

	-- Calculate				
	UPDATE #ALL_DET_TRANS
	Set NewPrice   = ALL_TRNS.NewPrice,
		cost = ALL_TRNS.Cost,
		NewAllStoresQty = ALL_TRNS.NewAllStoresQty
	from ALL_TRNS
	WHERE #ALL_DET_TRANS.ID = ALL_TRNS.ID 
	option (maxrecursion 0);

	

	
	-- Calculate store balance to avoid invalid data
	;with ALL_TRNS(item_id,Store_ID,SRL_NO,MQTY,TotalQTy,Code,ID,Parent_ID,Transaction_move,Final_conv, Balance,BYSTORE_SRL_NO)
	as(
	select #ALL_DET_TRANS.item_id,
			#ALL_DET_TRANS.Store_ID,
			#ALL_DET_TRANS.SRL_NO,
			#ALL_DET_TRANS.MQTY,
			#ALL_DET_TRANS.TotalQTy,
			#ALL_DET_TRANS.Code,
			#ALL_DET_TRANS.ID,
			#ALL_DET_TRANS.Parent_ID,
			#ALL_DET_TRANS.Transaction_move,
			#ALL_DET_TRANS.Final_conv,
			cast( #ALL_DET_TRANS.TotalQTY as float) as Balance,
			#ALL_DET_TRANS.BYSTORE_SRL_NO
	from #ALL_DET_TRANS,
			#Inv_Cost_queue
	WHERE   #ALL_DET_TRANS.Item_Type in (1,4) and
			#ALL_DET_TRANS.Item_ID  = #Inv_Cost_queue.Item_ID and
			#ALL_DET_TRANS.BYSTORE_SRL_NO = 1
	UNION ALL
	select #ALL_DET_TRANS.item_id,
			#ALL_DET_TRANS.Store_ID,
			#ALL_DET_TRANS.SRL_NO,
			#ALL_DET_TRANS.MQTY,
			#ALL_DET_TRANS.TotalQTy,
			#ALL_DET_TRANS.Code,
			#ALL_DET_TRANS.ID,
			#ALL_DET_TRANS.Parent_ID,
			#ALL_DET_TRANS.Transaction_move,
			#ALL_DET_TRANS.Final_conv,
			cast( ALL_TRNS.Balance + #ALL_DET_TRANS.MQTY  as float) as Balance,
			#ALL_DET_TRANS.BYSTORE_SRL_NO
	from #ALL_DET_TRANS,ALL_TRNS
	WHERE   #ALL_DET_TRANS.Item_Type in (1,4) and
			#ALL_DET_TRANS.Item_ID = ALL_TRNS.item_id and 
			#ALL_DET_TRANS.Store_ID = ALL_TRNS.Store_ID and 	
			#ALL_DET_TRANS.BYSTORE_SRL_NO = ALL_TRNS.BYSTORE_SRL_NO + 1 )

	-- Calculate				
	UPDATE #ALL_DET_TRANS
	Set Balance = ALL_TRNS.Balance
	from ALL_TRNS
	WHERE 
	#ALL_DET_TRANS.ID = ALL_TRNS.ID 
	option (maxrecursion 0);
	
	-- delete lines that does not need any update
	--select * 
	--from #ALL_DET_TRANS  
	--WHERE SRL_NO > 0 and item_id=1070
	--ORDER BY SRL_NO

	--return


	select t.* into #ALL_DET_TRANS_upd 
	from #ALL_DET_TRANS t,#Inv_Cost_queue q 
	where t.item_id = q.item_id and t.Entry_Date >= q.FromDate
	
	--select * from #ALL_DET_TRANS_upd order by SRL_NO

	
	--execute('DISABLE TRIGGER ALL ON Inv_Receipt_d');

	-- Cost update back for inv and FP items
	update Inv_Receipt_d 
	Set AvgCost = isnull(upd.cost,Inv_Receipt_d.AvgCost),
		TotalQTy = isnull(upd.Balance,Inv_Receipt_d.TotalQTy),
		AllStoresQty = isnull(upd.NewAllStoresQty,Inv_Receipt_d.AllStoresQty),
		Price   = CASE WHEN (upd.code in (60,63) and upd.CustomerSalesPrice=5) OR
							(upd.code =82 and upd.Transaction_move=-1) OR
							upd.code in (81,61,83,85) 
						THEN
							isnull(upd.NewPrice,Inv_Receipt_d.Price) -- if null, do not change
					--  this part was addeb by Eng. Haisaa and commented by Shaban on May 19th 2020 because it is implemented in the rest of the proc
					--	when (upd.code = 82 and upd.Transaction_move = 1)
					--	THEN
					--	  ( Select   sum(d.qty*d.price) /upd.MQTY from  Inv_Receipt_d d where d.FinishedReceipt_dID =upd.ID )
						ELSE
							Inv_Receipt_d.Price -- no change
						END ,

		Total   = CASE WHEN (upd.code in (60,63) and upd.CustomerSalesPrice=5) OR
							(upd.code =82 and upd.Transaction_move=-1) OR
							upd.code in (81,61,83,85) 
						THEN
							isnull(upd.NewPrice,Inv_Receipt_d.Price) * qty -- if null, do not change
					--  this part was addeb by Eng. Haisaa and commented by Shaban on May 19th 2020 because it is implemented in the rest of the proc
					--	when (upd.code = 82 and upd.Transaction_move = 1)
					--	THEN
					--	  ( Select   sum(d.qty*d.price) /upd.MQTY from  Inv_Receipt_d d where d.FinishedReceipt_dID =upd.ID )
						ELSE
							Inv_Receipt_d.Total  -- no change
						END
	from #ALL_DET_TRANS_upd upd
	where Inv_Receipt_d.ID = upd.ID and upd.cost is not null 
	 
	--execute('ENABLE TRIGGER ALL ON Inv_Receipt_d');

	-- update store balance and cost
	/*
	select store_id,item_id,max(BYSTORE_SRL_NO) as BYSTORE_SRL_NO into #last_tran  from #ALL_DET_TRANS group by store_id,item_id

--	execute('DISABLE TRIGGER ALL ON Inv_Items_Store');
	update Inv_Items_Store
		Set AvrCost = #ALL_DET_TRANS.Cost,
			Qty = #ALL_DET_TRANS.Balance
	from #ALL_DET_TRANS,#last_tran
	where  #ALL_DET_TRANS.item_id = #last_tran.item_id
	and #ALL_DET_TRANS.Store_ID =  #last_tran.Store_ID
	and #ALL_DET_TRANS.BYSTORE_SRL_NO =  #last_tran.BYSTORE_SRL_NO
	and #last_tran.item_id = Inv_Items_Store.Item_ID
	and #last_tran.Store_ID = Inv_Items_Store.Store_ID
	and #ALL_DET_TRANS.Balance is not null
	and #ALL_DET_TRANS.Cost is not null

	*/
	--execute('ENABLE TRIGGER ALL ON Inv_Items_Store');
	-- inventory items done

	-- Update kits that include the updated items

	-- Get these transaction ids
	select distinct Parent_ID into #a_trns 
	from #ALL_DET_TRANS_upd 
	where isnull(FinishedReceipt_dID,0) > 0-- is not null -- updated items will affect products or assemblies in these vouchers

	--select count(1) as cnt from #a_trns
	-- select * from #a_trns
	-- Get vouchers details
	;with compound_tree(item_id,
						Store_ID,
						QTY,
						Final_conv,
						TotalQTY,
						Price,
						Discount_Percent,
						Costing_Rate,
						Code,
						Entry_Date,
						ID,
						Parent_ID,
						Transaction_move,
						FinishedReceipt_dID,
						CustomerSalesPrice,
						Item_Type,
						AvgCost,
						TotalCost,
						item_level,
						IsUpdated,
						ProductionUnitExpense
						)
	as(
	Select		Inv_Receipt_d.item_id,
				Inv_Receipt_d.Store_ID,
				Inv_Receipt_d.Qty , --* Inv_Receipt_d.Transaction_move
				Inv_Receipt_d.Final_conv,
				cast(TotalQTY  as float ),
				Inv_Receipt_d.Price ,
				Inv_Receipt_d.Discount_Percent,
				Inv_Receipt_h.Costing_Rate,
				--Price = cast( ( Inv_Receipt_d.Price  - (Inv_Receipt_d.Price  * Inv_Receipt_d.Discount_Percent / 100 ) ) / (   ISNULL( Inv_Receipt_h.Costing_Rate,1) ) /  (Case Inv_Receipt_d.Final_conv when 0 then 1 else Inv_Receipt_d.Final_conv end)  as float ),
				cast(Inv_Receipt_h.Code as int) as Code,
				Inv_Receipt_h.Entry_Date,
				Inv_Receipt_d.ID ,
				Inv_Receipt_d.Parent_ID,
				Inv_Receipt_d.Transaction_move,
				Inv_Receipt_d.FinishedReceipt_dID,
				--ISNULl(Inv_Receipt_d.Final_conv,1) Final_conv,
				Inv_Receipt_h.CustomerSalesPrice,
				Inv_Items.Item_Type,
				Inv_Receipt_d.AvgCost,
				cast( Inv_Receipt_d.Qty * 
					 isnull(Inv_Receipt_d.Final_conv,1) * 
					 
					CASE
						WHEN Inv_Items.Item_Type = 4 and Inv_Receipt_h.Code=82 THEN
						    Inv_Receipt_d.Price / CASE WHEN  isnull(Inv_Receipt_d.Final_conv,1) = 0 THEN 1  ELSE  isnull(Inv_Receipt_d.Final_conv,1)   END  
						 
						ELSE
							isnull(Inv_Receipt_d.AvgCost,0)  
					END
					 
					 as float ) as TotalCost,
				cast(1 as int ) as item_level,
				0,
				isnull(Inv_Receipt_d.ProductionUnitExpense,0) as ProductionUnitExpense
		FROM   Inv_Receipt_d,Inv_Receipt_h, inv_items,
				#a_trns
		where 
			#a_trns.Parent_ID = Inv_Receipt_h.ID  
			and Inv_Receipt_d.Parent_ID= Inv_Receipt_h.ID     
			and isnull(Inv_Receipt_h.IsHolded,0) <> 1   
			and isnull(Inv_Receipt_h.Is_Canceled,0) <> 1   
			and  Inv_Receipt_d.Transaction_move <> 0 
			and inv_items.id = Inv_Receipt_d.item_id 
			and isnull(Inv_Receipt_d.FinishedReceipt_dID,0) = 0
			and Inv_Items.Item_Type in (3,4,5)
		UNION ALL
			Select		Inv_Receipt_d.item_id,
				Inv_Receipt_d.Store_ID,
				Inv_Receipt_d.Qty , --* Inv_Receipt_d.Transaction_move
				Inv_Receipt_d.Final_conv,
				cast(Inv_Receipt_d.TotalQTY  as float ),
				Inv_Receipt_d.Price ,
				Inv_Receipt_d.Discount_Percent,
				Inv_Receipt_h.Costing_Rate,
				cast(Inv_Receipt_h.Code as int) as Code,
				Inv_Receipt_h.Entry_Date,
				Inv_Receipt_d.ID ,
				Inv_Receipt_d.Parent_ID,
				Inv_Receipt_d.Transaction_move,
				Inv_Receipt_d.FinishedReceipt_dID,
				Inv_Receipt_h.CustomerSalesPrice,
				Inv_Items.Item_Type,
				Inv_Receipt_d.AvgCost,
				cast( 
					Inv_Receipt_d.Qty *
					CASE WHEN isnull(Inv_Receipt_d.Final_conv,1.000) > 0 THEN isnull(Inv_Receipt_d.Final_conv,1.000) ELSE 1 END * 
					CASE WHEN isnull(Inv_Receipt_d.AvgCost,0.000) > 0 THEN  isnull(Inv_Receipt_d.AvgCost,0.000) ELSE 0 END 
					
					as float 

				) as TotalCost,
				cast(compound_tree.item_level + 1 as int ) as item_level,
				0,
				isnull(Inv_Receipt_d.ProductionUnitExpense,0) as ProductionUnitExpense
		
		FROM   Inv_Receipt_d,
				Inv_Receipt_h
				, inv_items
				,#a_trns
				,compound_tree
		where 
			#a_trns.Parent_ID = Inv_Receipt_h.ID
			and compound_tree.Parent_ID = Inv_Receipt_h.ID -- in the same voucher
			and Inv_Receipt_d.Parent_ID= Inv_Receipt_h.ID     
			and Inv_Receipt_d.FinishedReceipt_dID = compound_tree.ID	
			and ( compound_tree.Item_Type in (3,5) or
				  (compound_tree.Item_Type = 4 and 	compound_tree.Code = 82 and compound_tree.Transaction_move=1)
				 )
			and isnull(Inv_Receipt_h.IsHolded,0) <> 1   
			and isnull(Inv_Receipt_h.Is_Canceled,0) <> 1   
			and  Inv_Receipt_d.Transaction_move <> 0 
			and inv_items.id = Inv_Receipt_d.item_id )
	select * into #compound_tree from compound_tree;

	-- just to test and it should be removed
	--delete #compound_tree where Parent_ID != 48183
	   	--select * 	from #compound_tree where ID in (3325,3326)

	-- set initial cost for compound items as 0
   update   #compound_tree SET AvgCost = 0 WHERE Item_Type in (3,5);

   set	 @MAX_LEVELS = 0;
   SELECT @MAX_LEVELS = MAX(item_level) FROM  #compound_tree;
   set @MAX_LEVELS = isnull(@MAX_LEVELS,0)
   print 'maxlevels:'+cast(@MAX_LEVELS as varchar(30))
  
	-- select * from #compound_tree where Parent_ID = 2801 and ( ID = 3278 or FinishedReceipt_dID=3278)
	--return

    
   WHILE @MAX_LEVELS > 1 
		begin
		print 'maxlevels:'+cast(@MAX_LEVELS as varchar(30))
		-- remove old data
		delete #CMPND_COST

		--insert new data
		insert #CMPND_COST 
		select FinishedReceipt_dID,sum(TotalCost + QTY * ProductionUnitExpense ) as TotalCost  -- I expect that QTY * ProductionUnitExpense = 0 in our case, so , it will have no effect
		from #compound_tree 
		where item_level = @MAX_LEVELS
		group by FinishedReceipt_dID ;

		
		-- update compound/products
		update #compound_tree
		set AvgCost = round(isnull(cmpnd.TotalCost/(isnull(#compound_tree.Final_conv,1) *#compound_tree.QTY ),0),8),
			TotalCost = cmpnd.TotalCost,-- This is to be used in calculations of parent items 
			IsUpdated = 0
		from #CMPND_COST cmpnd
		where cmpnd.id = #compound_tree.ID and #compound_tree.Item_Type  in (3,5)
		and isnull(#compound_tree.Final_conv,1) *#compound_tree.QTY > 0
		and  isnull(AvgCost,0) != round(isnull(cmpnd.TotalCost/(isnull(#compound_tree.Final_conv,1) *#compound_tree.QTY ),0),8);
	

		--select 
		-- Price = round(isnull(cmpnd.TotalCost/(#compound_tree.QTY ),0),8),
		--	TotalCost = cmpnd.TotalCost,-- This is to be used in calculations of parent items --isnull(#compound_tree.Final_conv,1) *
		--	IsUpdated = 1,
		--	#compound_tree.ID,
		--	#compound_tree.item_id
		--from #compound_tree, #CMPND_COST cmpnd
		--where cmpnd.id = #compound_tree.ID and #compound_tree.Item_Type =4
		--and #compound_tree.QTY > 0
		--and  Price != round(isnull(cmpnd.TotalCost/(#compound_tree.QTY ),0),8)


		update #compound_tree
		set Price = round(isnull(cmpnd.TotalCost/(#compound_tree.QTY ),0) + #compound_tree.ProductionUnitExpense ,8),
			AvgCost = round(isnull(cmpnd.TotalCost/(#compound_tree.QTY * #compound_tree.Final_conv ),0) +  (#compound_tree.ProductionUnitExpense/#compound_tree.Final_conv)  ,8),
			TotalCost = cmpnd.TotalCost  + #compound_tree.QTY * #compound_tree.ProductionUnitExpense,-- This is to be used in calculations of parent items --isnull(#compound_tree.Final_conv,1) *
			IsUpdated = 1
		from #CMPND_COST cmpnd
		where cmpnd.id = #compound_tree.ID and #compound_tree.Item_Type =4
		and #compound_tree.QTY > 0
		and  Price != round(isnull(cmpnd.TotalCost/(#compound_tree.QTY ),0)  + #compound_tree.ProductionUnitExpense,8)
		--and  isnull(AvgCost,0) != round(isnull(cmpnd.TotalCost/(isnull(#compound_tree.Final_conv,1) *#compound_tree.QTY ),0),8);
	
		--select * from #compound_tree

		set @MAX_LEVELS = @MAX_LEVELS -1;
		end
	--select * from #compound_tree where Parent_ID = 2801
	--return

	-- update cost back
	-- execute('DISABLE TRIGGER ALL ON Inv_Receipt_d');
	-- remove components to make update faster
	delete #compound_tree where Item_Type not in(5,3,4)

	-- Cost update back for inv and FP items
	update Inv_Receipt_d Set AvgCost = upd.AvgCost
	from #compound_tree upd
	where Inv_Receipt_d.ID = upd.ID and upd.Item_Type in (3,5)
		and isnull(Inv_Receipt_d.AvgCost,0) != isnull(upd.AvgCost,0) -- this condition is dedicated to minimize update impact
	
	--select d.id,d.Price,t.Price
	--from Inv_Receipt_d d,#compound_tree t
	--where d.id in(789716)
	--and d.id = t.id
	; --790123,790145,


	--select * from #compound_tree where Parent_ID = 2801 and ( ID = 3278 or FinishedReceipt_dID=3278)

	--select
	--	--AvgCost = upd.AvgCost,
	--	CalcPrice = upd.Price --AvgCost * isnull(upd.Final_conv,1)
	--	,upd.item_id
	--	,Inv_Receipt_d.Price
	--from Inv_Receipt_d,#compound_tree upd
	--where Inv_Receipt_d.ID = upd.ID and upd.Item_Type = 4
	--and upd.Price is not null
	--and Inv_Receipt_d.Price != upd.Price



	-- update finished products price and cost
	update Inv_Receipt_d Set 
		--AvgCost = upd.AvgCost,
		Price = upd.Price --AvgCost * isnull(upd.Final_conv,1)
	from #compound_tree upd
	where Inv_Receipt_d.ID = upd.ID and upd.Item_Type = 4
	and upd.Price is not null
	and Inv_Receipt_d.Price != upd.Price --* isnull(upd.Final_conv,1) -- this condition is dedicated to minimize update impact
	
	--select @@rowcount
	--select Price as PriceAfterUpdate from Inv_Receipt_d where ID = 3278
	 
	-- execute('ENABLE TRIGGER ALL ON Inv_Receipt_d');
	
	delete Inv_Cost_queue
	from #Inv_Cost_queue
	where Inv_Cost_queue.item_id = #Inv_Cost_queue.item_id and Inv_Cost_queue.FromDate >= #Inv_Cost_queue.FromDate

	delete Inv_Cost_queue where exists(select 1 from Inv_Items where item_id=ID and Item_Type in (3,5))

	--select count(1) from Inv_Cost_queue

	-- insert the changed products and loop again if there is any
	insert into Inv_Cost_queue(item_id,FromDate)
	select  upd.item_id,min(upd.Entry_Date)
	from #compound_tree upd
	where upd.Item_Type = 4 and upd.IsUpdated=1
	and not exists(select 1 from Inv_Cost_queue q where q.item_id = upd.item_id)
	group by upd.item_id

	-- Compound items may impact product costs, so, we should go through a second loop for products only
	if exists(select 1 from Inv_Cost_queue)--@@ROWCOUNT > 0
		begin
		drop table #Inv_Cost_queue
		--drop table #last_tran
		drop table #a_trns
		drop table #compound_tree
		--drop table #new_only
		drop table #ALL_DET_TRANS_upd
		print 'cost calc again'
		insert INV_AvgCost_LOG (spid,step,AtDate) values (@@spid,'cost calc again',getdate())
		goto recalculate;
		end
		insert INV_AvgCost_LOG (spid,step,AtDate) values (@@spid,'cost calc done',getdate())

	END TRY  -- end of try catch
BEGIN CATCH  
	
     

	 insert INV_AvgCost_ERRORS(spid,ErrorNumber,ErrorSeverity,ErrorState,ErrorProcedure,ErrorLine,ErrorMessage,AtDate)
	 SELECT  
	 @@SPID,
    ERROR_NUMBER() AS ErrorNumber  
    ,ERROR_SEVERITY() AS ErrorSeverity  
    ,ERROR_STATE() AS ErrorState  
    ,ERROR_PROCEDURE() AS ErrorProcedure  
    ,ERROR_LINE() AS ErrorLine  
    ,ERROR_MESSAGE() AS ErrorMessage
	,getdate()
	;  

	insert INV_AvgCost_LOG (spid,step,AtDate) values (@@spid,'cost calc ended with error',getdate())
END CATCH  

	delete avg_session --where sid =  @@SPID
	print 'cost calc done'

/*
Test:
delete Inv_Cost_queue
go

insert into Inv_Cost_queue
select  distinct Inv_Items.ID,cast('Jan 1 1900' as datetime) as Entry_Date from Inv_Items ;
go

insert into Inv_Cost_queue
select  distinct Inv_Items.ID,cast('Jan 1 1900' as datetime) as Entry_Date from Inv_Items where ID=3446;
go


exec ss_calcCost 
go



*/	
end
GO
/****** Object:  StoredProcedure [dbo].[ss_calcAvgCost_caller]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[ss_calcAvgCost_caller]
as
exec ss_calcAvgCost
GO
/****** Object:  StoredProcedure [dbo].[StockInventoryData]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[StockInventoryData] -- 1,'75','0','2020-10-07',''

@Subsidiary_ID int ,
@StocksID nvarchar(100),
@ItemCategoriesIDs nvarchar(500),
@StockTakenDate datetime,
@SearchValue NVARCHAR(150)

AS
SET ANSI_NULLS ON


SELECT DISTINCT [Subsidiary_ID]
	  ,ISNull(ms.Store_ID,0) as StoreID  
	  ,CONVERT(varchar(50),s.Code) as StoreName
      ,i.[ID] as ItemID
      ,i.[Code] as ItemCode
      ,i.[Name] as ItemName
	  ,i.[Name_AR] as ItemNameAr
      ,[Description] as ItemDescription
      ,ISNull([Inventory_UnitId],0) as Inventory_UnitId
	  ,u.Name as InventoryUnitName
	  ,ISNull(iu.Conv,0) as Conv
	  ,ISNull(iu.FinalConv,1) as FinalConv 
	  ,ms.totalQTy as ActualQty

      ,cast( (ISNULL(ms.totalQTy, 0) / ISNULL(iu.FinalConv, 1))as float) as Qty
	  --,ISNULL(ms.AvgCost, 0) as Cost
	  ,( (ISNULL(ms.AvgCost, 0) * ISNULL(iu.FinalConv, 1))) as Cost
	  ,ms.TotalReservedQTy as ArchiveQty 
      ,[Item_Type]
	  ,ISNULL(iu.[Sale_price1],0) as SalesPrice
	  ,ISNULL(iu.[Sale_price2],0) as SalesPrice2
	  ,ISNULL(iu.[Sale_price3],0) as SalesPrice3
	  ,ISNULL(iu.[Sale_price4],0) as SalesPrice4 
	  ,i.[IsActive]	 
	  ,ms.Entry_Date
     -- ,ISNULL(Barcode.ItemBarCode,'') AS ItemBarCode
	  ,ISNULL(iu.BarCode,0) as ItemBarCode 

  FROM [dbo].[Inv_Items] AS i 
 --     LEFT JOIN (SELECT DISTINCT A.Item_ID, ItemBarCode = 
	--	STUFF((SELECT ', ' + ItemBarCode
	--		   FROM Inv_Items_Barcode b 
	--		   WHERE b.Item_ID = a.Item_ID
	--		  FOR XML PATH('')), 1, 2, '')
	--FROM Inv_Items_Barcode a
	--WHERE A.IsActiveBarCode = 1
	--GROUP BY A.Item_ID,a.ID ) Barcode
	--ON Barcode.Item_ID = i.Id
 
  LEFT JOIN [Inv_Items_Vendors] AS iv on iv.[ItemID] = i.[ID] and iv.[IsMainVendor] = 1
 LEFT JOIN [GL_Accounts] AS a on a.[AccountID] = iv.[VendorID]

  inner JOIN [AV_Inv_items_storeDate_noKit] AS ms on ms.item_id = i.ID
   
  LEFT JOIN [Inv_Items_Categories] AS ic on ic.[Item_ID] = i.[ID] 
  , [Inv_Unit] AS u , [Inv_Items_Units] AS iu  ,[Inv_Store] AS s
 Where 
 --i.ID= 2792 AND
 s.[ID] = ms.[Store_ID]  and 
 ms.[Item_ID] = i.[ID] and 
 iu.[Item_ID] = i.[ID] and
 iu.[Unit_id] = i.Inventory_UnitId  and
 u.ID = i.Inventory_UnitId and
 (i.[Subsidiary_ID] = @Subsidiary_ID ) AND
 (Entry_Date in (Select max(Entry_Date) from AV_Inv_items_storeDate_noKit as aiisnk Where i.ID =aiisnk.item_id and s.ID = aiisnk.store_id and aiisnk.Entry_Date  <= @StockTakenDate)) AND
 (ms.Store_ID  IN (select * from ParseCommaDelimitedString(@StocksID)) OR @StocksID='0') AND
  (Entry_Date <= @StockTakenDate or @StockTakenDate is NULL) and
 (ic.[ItemCategory_ID]  IN (select * from ParseCommaDelimitedString(@ItemCategoriesIDs)) OR @ItemCategoriesIDs='0' )
  AND (i.[IsActive] = 1)  
  And i.Item_Type in (4,5,1)--الاصناف المخزنية و الاصناف المنتجة (التام) والاصناف الافتراضية فقط
  and ( (@SearchValue IS NULL) OR (@SearchValue  = '') or (i.[Name] like '%'+@SearchValue+'%' ) 
  or (i.[Name_AR] like '%'+@SearchValue+'%' ) or (i.Code like '%'+@SearchValue+'%' ))
  --and i.ID = 3056
  order by i.Code

GO
/****** Object:  StoredProcedure [dbo].[StockInventoryDataCount]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[StockInventoryDataCount] --1,'69',0,'10-02-2019',''

@Subsidiary_ID int ,
@StocksID nvarchar(100),
@ItemCategoriesIDs nvarchar(500),
@StockTakenDate datetime,
@SearchValue NVARCHAR(150)

AS


DECLARE @datePart datetime = convert(varchar(10), @StockTakenDate, 101);
   

--with qry (Subsidiary_ID,StoreID,StoreName,ItemID,ItemCode,ItemName,ItemNameAr,ItemDescription,
--Inventory_UnitId,InventoryUnitName,Conv,FinalConv,ActualQty,Qty,Cost,ArchiveQty,Item_Type,
--SalesPrice,SalesPrice2,SalesPrice3,SalesPrice4,IsActive,entry_date)
--as(
--SELECT DISTINCT [Subsidiary_ID]
--	  ,ISNull(ms.Store_ID,0) as StoreID  
--	  ,CONVERT(varchar(50),s.Code) as StoreName
--      ,i.[ID] as ItemID
--      ,i.[Code] as ItemCode
--      ,i.[Name] as ItemName
--	  ,i.[Name_AR] as ItemNameAr
--      ,[Description] as ItemDescription
--      ,ISNull([Inventory_UnitId],0) as Inventory_UnitId
--	  ,u.Name as InventoryUnitName
--	  ,ISNull(iu.Conv,0) as Conv
--	  ,ISNull(iu.FinalConv,1) as FinalConv 
--	  ,ms.totalQTy as ActualQty

--      ,cast( (ISNULL(ms.totalQTy, 0) / ISNULL(iu.FinalConv, 1))as float) as Qty
--	  ,ISNULL(ms.AvgCost, 0) as Cost

--	  ,ms.TotalReservedQTy as ArchiveQty 
--      ,[Item_Type]
--	  ,ISNULL(iu.[Sale_price1],0) as SalesPrice
--	  ,ISNULL(iu.[Sale_price2],0) as SalesPrice2
--	  ,ISNULL(iu.[Sale_price3],0) as SalesPrice3
--	  ,ISNULL(iu.[Sale_price4],0) as SalesPrice4 
--	  ,i.[IsActive]	 
--	  ,ms.Entry_Date
--  FROM [dbo].[Inv_Items] AS i 
      
--  LEFT JOIN [Inv_Items_Vendors] AS iv on iv.[ItemID] = i.[ID] and iv.[IsMainVendor] = 1
--  LEFT JOIN [GL_Accounts] AS a on a.[AccountID] = iv.[VendorID]
   
--  LEFT JOIN [Inv_Items_Categories] AS ic on ic.[Item_ID] = i.[ID] 
--  , [Inv_Unit] AS u , [Inv_Items_Units] AS iu  ,[AV_Inv_items_storeDate_noKit] AS ms,[Inv_Store] AS s
-- Where 
-- --i.ID <> 248
--  s.[ID] = ms.[Store_ID]  and 
-- ms.[Item_ID] = i.[ID] and 
-- iu.[Item_ID] = i.[ID] and
-- iu.[Unit_id] = i.Inventory_UnitId  and
-- u.ID = i.Inventory_UnitId and
-- (i.[Subsidiary_ID] = @Subsidiary_ID ) AND
-- (ms.Store_ID  IN (select * from ParseCommaDelimitedString(@StocksID)) OR @StocksID='0') AND
-- (ic.[ItemCategory_ID]  IN (select * from ParseCommaDelimitedString(@ItemCategoriesIDs)) OR @ItemCategoriesIDs='0' )
--  AND (i.[IsActive] = 1)  
--  And i.Item_Type in (4,5,1)--الاصناف المخزنية و الاصناف المنتجة (التام) والاصناف الافتراضية فقط
--  and ( (@SearchValue IS NULL) OR (@SearchValue  = '') or (i.[Name] like '%'+@SearchValue+'%' ) 
--  or (i.[Name_AR] like '%'+@SearchValue+'%' ) or (i.Code like '%'+@SearchValue+'%' ))
--  )
----  , qry1(item_id, store_id,Entry_Date ,AvgCost,totalQTy, DetailID )
----  as(  SELECT         item_id, store_id,a.Entry_Date Entry_Date,AvgCost, a.totalQTy totalQTy, 
----                         a.DetailID AS DetailID 
----FROM            dbo.AV_Inv_items_storeDate a
----						 where  convert(varchar(10),  a.Entry_Date, 101) <= @datePart
----						 and (a.store_id IN (select * from ParseCommaDelimitedString(@StocksID)) OR @StocksID='0')
----						 and a.item_id in (select item_id from qry)
----  ) 
--select  CAST(count(*) as varchar(20))   CountValue from qry  q
--  where Entry_Date = (select max(q2.Entry_Date) from qry q2 
--					  where q.ItemID = q2.ItemID and q.StoreID = q2.StoreID and  q2.Entry_Date <= @StockTakenDate ) 
 
 Select COUNT(ss.ItemID) from (
 SELECT DISTINCT [Subsidiary_ID]
	  ,ISNull(ms.Store_ID,0) as StoreID  
	  ,CONVERT(varchar(50),s.Code) as StoreName
      ,i.[ID] as ItemID
      ,i.[Code] as ItemCode
      ,i.[Name] as ItemName
	  ,i.[Name_AR] as ItemNameAr
      ,[Description] as ItemDescription
      ,ISNull([Inventory_UnitId],0) as Inventory_UnitId
	  ,u.Name as InventoryUnitName
	  ,ISNull(iu.Conv,0) as Conv
	  ,ISNull(iu.FinalConv,1) as FinalConv 
	  ,ms.totalQTy as ActualQty

      ,cast( (ISNULL(ms.totalQTy, 0) / ISNULL(iu.FinalConv, 1))as float) as Qty
	  ,ISNULL(ms.AvgCost, 0) as Cost

	  ,ms.TotalReservedQTy as ArchiveQty 
      ,[Item_Type]
	  ,ISNULL(iu.[Sale_price1],0) as SalesPrice
	  ,ISNULL(iu.[Sale_price2],0) as SalesPrice2
	  ,ISNULL(iu.[Sale_price3],0) as SalesPrice3
	  ,ISNULL(iu.[Sale_price4],0) as SalesPrice4 
	  ,i.[IsActive]	 
	  ,ms.Entry_Date
  FROM [dbo].[Inv_Items] AS i 
      
  LEFT JOIN [Inv_Items_Vendors] AS iv on iv.[ItemID] = i.[ID] and iv.[IsMainVendor] = 1
  LEFT JOIN [GL_Accounts] AS a on a.[AccountID] = iv.[VendorID]
   
  LEFT JOIN [Inv_Items_Categories] AS ic on ic.[Item_ID] = i.[ID] 
  , [Inv_Unit] AS u , [Inv_Items_Units] AS iu  ,[AV_Inv_items_storeDate_noKit] AS ms,[Inv_Store] AS s
 Where 
 --i.ID <> 248
  s.[ID] = ms.[Store_ID]  and 
 ms.[Item_ID] = i.[ID] and 
 iu.[Item_ID] = i.[ID] and
 iu.[Unit_id] = i.Inventory_UnitId  and
 u.ID = i.Inventory_UnitId and
 (i.[Subsidiary_ID] = @Subsidiary_ID ) AND
 (Entry_Date in (Select max(Entry_Date) from AV_Inv_items_storeDate_noKit as aiisnk Where i.ID =aiisnk.item_id and s.ID = aiisnk.store_id )) AND
 (ms.Store_ID  IN (select * from ParseCommaDelimitedString(@StocksID)) OR @StocksID='0') AND
 (ic.[ItemCategory_ID]  IN (select * from ParseCommaDelimitedString(@ItemCategoriesIDs)) OR @ItemCategoriesIDs='0' )
  AND (i.[IsActive] = 1)  
  And i.Item_Type in (4,5,1)--الاصناف المخزنية و الاصناف المنتجة (التام) والاصناف الافتراضية فقط
  and ( (@SearchValue IS NULL) OR (@SearchValue  = '') or (i.[Name] like '%'+@SearchValue+'%' ) 
  or (i.[Name_AR] like '%'+@SearchValue+'%' ) or (i.Code like '%'+@SearchValue+'%' ))
  ) ss
 
GO
/****** Object:  StoredProcedure [dbo].[Test]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
				CREATE PROC [dbo].[Test] 
				AS 
				BEGIN
					SELECT * FROM GL_Accounts
					
				END
GO
/****** Object:  StoredProcedure [dbo].[tt]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


Create Proc [dbo].[tt]
     @Type        INT = Null
   , @SubsidaryID INT = Null
As
         Begin
             Select
                    AT.Name                      TypeName
                  , AT.Name_Ar                   TypeName_AR
                  --, SUM(AC.AssetCosts)           OriginalCost
                  --, SUM(AC.PreviousDepriciation) AccumulativeCost
                  , SUM(A.OriginalCost)           OriginalCost
                  , SUM(A.CumulativDepriciation) AccumulativeCost
             From
                  GL_Assets A
             --Left Join GL_AssetCosts AC
             --     On AC.AssetsID = A.ID
             Left Join GL_AssetsType At
                  On a.AssetType = AT.ID
             Where
                         (
                                     @Type Is Null
                                     Or A.AssetType In(@Type))
             And (
                             @SubsidaryID Is Null
                             Or a.Subsidary = @SubsidaryID)
             Group By
                      AT.Name
                    , AT.Name_Ar
         End

/**************************
Go

Report_Asset_Summery_Report
**************************/

GO
/****** Object:  StoredProcedure [dbo].[UpdateAccountSubsidiarybalance]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/****** Script for SelectTopNRows command from SSMS  ******/



Create PROCEDURE [dbo].[UpdateAccountSubsidiarybalance]
	
AS
BEGIN
	Declare @AccountID Integer ,@SubsidiaryID Integer ,@AccountBalance numeric(18,6)
	Declare CUR_AccountSubsidiary  cursor For
	SELECT   [AccountID] , [SubsidiaryID]	FROM  [dbo].[GL_AccountSubsidiary]

	OPEN CUR_AccountSubsidiary
	Fetch Next From CUR_AccountSubsidiary Into @AccountID,@SubsidiaryID 
		While @@Fetch_Status = 0 Begin
			 Select  @AccountBalance  =  (isnull(Sum(ISNULL(Gl_VoucherDetails.debit,0)),0) - isnull(Sum(ISNULL(Gl_VoucherDetails.Credit,0) ),0)) 
			 from    Gl_VoucherDetails,gl_vouchers 
			 where   Gl_VoucherDetails.[AccountNoID] =@AccountID and Gl_VoucherDetails.[VoucherID] = gl_vouchers.ID and gl_vouchers.[SubsidaryID] = @SubsidiaryID


			 update [dbo].[GL_AccountSubsidiary] set Acc_Balance =@AccountBalance where AccountID = @AccountID and [SubsidiaryID] = @SubsidiaryID
	Fetch Next From CUR_AccountSubsidiary Into @AccountID,@SubsidiaryID 

	End		--	 End of Fetch

	Close CUR_AccountSubsidiary
	Deallocate AccountSubsidiary

END 


-- Exec [UpdateAccountSubsidiarybalance] 
GO
/****** Object:  StoredProcedure [dbo].[UpdateCashSalesPurchase]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[UpdateCashSalesPurchase]
as
update Inv_PaymentType set IsPurchases = 1 , IsSales = 1
where Code = 1
GO
/****** Object:  StoredProcedure [dbo].[UpdateContractsStatus]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[UpdateContractsStatus]
as
UPDATE dbo.Inv_Receipt_h  
SET     ApprovalStatus_ID =  CASE  
                        WHEN ContractEndDate < GETDATE() THEN (select id from Inv_Receipt_ApprovalStatus where Status_Name = 'Expired')
                        WHEN ContractEndDate >= GETDATE() THEN (select id from Inv_Receipt_ApprovalStatus where Status_Name = 'Open')
						else ApprovalStatus_ID
                    END 
WHERE   Code = 87
GO
/****** Object:  StoredProcedure [dbo].[UpdateCreditSalesReceiptPaid]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[UpdateCreditSalesReceiptPaid]
AS
BEGIN

update   GL_Vouchers  
set isTotalyPaid = 0,PaidAmount =0
where PaidAmount is null  and VoucherTypeID = 23 and ReceiptID in (select h.ID from GL_Vouchers v join Inv_Receipt_h h 
on h.ID = v.ReceiptID
where v.PaidAmount is null and h.code = 52 and VoucherTypeID = 23)
---------------------
Declare @ReceiptId int,@ispaid INTEGER ,@Balance numeric(18,3);
DECLARE Receipt_cursor CURSOR FOR     

   Select ID
	,  (select sum(p.Amount)from GL_VoucherPayments p where p.ReceiptId =h.ID )
	   ,  case
	 when (h.NetValue = (select sum(p.Amount)from GL_VoucherPayments p where p.ReceiptId =h.ID )) then 1
	 when (h.NetValue > (select sum(p.Amount)from GL_VoucherPayments p where p.ReceiptId =h.ID )) then 2 
	 end as ispaid
	 from  Inv_Receipt_h h 
	 where Code = 52;   
OPEN Receipt_cursor    
  
FETCH NEXT FROM Receipt_cursor     
INTO @ReceiptId,@Balance,@ispaid
  
WHILE @@FETCH_STATUS = 0    
BEGIN    
   update [dbo].[GL_Vouchers] 
	 set 
	 isTotalyPaid =@ispaid
	 ,PaidAmount =@Balance
	  where  ReceiptID = @ReceiptId and VoucherTypeID = 23

    FETCH NEXT FROM Receipt_cursor     
INTO @ReceiptId,@Balance,@ispaid
   
END     
CLOSE Receipt_cursor;    
DEALLOCATE Receipt_cursor;    
----------------

END
GO
/****** Object:  StoredProcedure [dbo].[UpdateOrderItemKitchenStatus]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[UpdateOrderItemKitchenStatus]
@ItemId INT,
@StatusId INT
AS 
BEGIN
	UPDATE Inv_Receipt_d SET KitchenStatus = @StatusId WHERE ID = @ItemId;
	DECLARE @OrderId INT = (SELECT Parent_ID from Inv_Receipt_d WHERE ID = @ItemId);
	DECLARE @NotDoneCount INT = (SELECT COUNT(ID) FROM Inv_Receipt_d WHERE Parent_ID = @OrderId AND (KitchenStatus <> 3 OR KitchenStatus IS NULL) AND FinishedProductID IS NULL);
	IF @NotDoneCount > 0
		BEGIN
			SELECT 0;
		END
	ELSE 
		BEGIN
			UPDATE Inv_Receipt_h SET IsKitchenDone = 1 WHERE ID = @OrderId;
			SELECT 1;
		END 
END


GO
/****** Object:  StoredProcedure [dbo].[UpdateOrderKitchenStatus]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE
PROCEDURE [dbo].[UpdateOrderKitchenStatus]
@OrderId INT
AS 
BEGIN
	UPDATE Inv_Receipt_d SET KitchenStatus = 3 WHERE Parent_ID = @OrderId;
	UPDATE Inv_Receipt_h SET IsKitchenDone = 1, CustomerActualDeliverDate = GETDATE() WHERE ID = @OrderId;
	EXEC [dbo].[POS_UpdateOrderStatus] @OrderId, NULL, 1, NULL
	SELECT 1;
END
GO
/****** Object:  StoredProcedure [dbo].[updateReceipt_FinishedReceipt_dID]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[updateReceipt_FinishedReceipt_dID]
as
Declare @ReceiptId int,@ispaid INTEGER ,@Balance numeric(18,3);
DECLARE Receipt_cursor CURSOR FOR     

   select distinct h.ID from Inv_Receipt_h h join Inv_Receipt_d d on h.ID = d.Parent_ID 
where d.FinishedProductID is not null  and d.FinishedReceipt_dID is  null 
   
OPEN Receipt_cursor    
  
FETCH NEXT FROM Receipt_cursor     
INTO @ReceiptId
  
WHILE @@FETCH_STATUS = 0    
BEGIN    
  update Inv_Receipt_d 
set Inv_Receipt_d.FinishedReceipt_dID = (select distinct id from Inv_Receipt_d d 
where d.Item_ID = Inv_Receipt_d.FinishedProductID and d.Parent_ID = Inv_Receipt_d.Parent_ID 
and d.FinishedProductID is null and d.Parent_ID = @ReceiptId)
where Inv_Receipt_d.Parent_ID =@ReceiptId and FinishedProductID is not null  and FinishedReceipt_dID is  null 
IF @@ERROR <> 0   
    BEGIN  
        -- Return 99 to the calling program to indicate failure.  
        PRINT @ReceiptId;  
       -- RETURN 99;  
    END  

    FETCH NEXT FROM Receipt_cursor     
INTO @ReceiptId
   
END     
CLOSE Receipt_cursor;    
DEALLOCATE Receipt_cursor;   
GO
/****** Object:  StoredProcedure [dbo].[UpdateReceipt_Payment]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create proc [dbo].[UpdateReceipt_Payment]
( 
@Receipt_ID INT  
)
AS 
declare @value decimal(18,3)
SELECT @value= SUM(rp.PaidValue) from [GL_WEB].[dbo].[Inv_Receipt_Payment] rp where   rp.Receipt_ID=@Receipt_ID
Update  Inv_Receipt_h  set PaidAmount= @value where ID= @Receipt_ID
GO
/****** Object:  StoredProcedure [dbo].[UpdateReceivableAndPayableAccount]    Script Date: 2020-12-07 10:00:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [dbo].[UpdateReceivableAndPayableAccount]
( 
@ReceivableAccountID INT,
@PayableAccountAccountID INT
)
AS
Update GL_Accounts set IsReceivableAccount = 0 , IsPayableAccount = 0
Update GL_Accounts set IsReceivableAccount = 1 where AccountID = @ReceivableAccountID
Update GL_Accounts set IsPayableAccount = 1 where AccountID = @PayableAccountAccountID
 
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[12] 4[12] 2[58] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "AV_INV_TransactionDetails"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 224
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "Inv_items_storesTrans"
            Begin Extent = 
               Top = 6
               Left = 262
               Bottom = 119
               Right = 432
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'AV_Inv_items_storeDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'AV_Inv_items_storeDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "OrderPaymentType_1"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 208
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'CashDrawerActionType_Vw'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'CashDrawerActionType_Vw'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "Inv_Items"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 240
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "Inv_Unit"
            Begin Extent = 
               Top = 6
               Left = 278
               Bottom = 136
               Right = 448
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "GL_Accounts"
            Begin Extent = 
               Top = 138
               Left = 38
               Bottom = 268
               Right = 236
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "Inv_Items_Store"
            Begin Extent = 
               Top = 138
               Left = 274
               Bottom = 268
               Right = 444
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "Inv_Items_Units"
            Begin Extent = 
               Top = 6
               Left = 486
               Bottom = 136
               Right = 656
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "Inv_Items_Vendors"
            Begin Extent = 
               Top = 6
               Left = 694
               Bottom = 136
               Right = 876
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 13
         Width = 284
         Width = 1500' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'Inv_Item_Vw'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane2', @value=N'
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'Inv_Item_Vw'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=2 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'Inv_Item_Vw'
GO
